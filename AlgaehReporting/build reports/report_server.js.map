{"version":3,"sources":["../src/report_server.js"],"names":["exec","require","app","server","http","createServer","use","_port","process","env","PORT","bodyParser","json","limit","NODE_ENV","set","setMaxListeners","on","console","warning","error","reason","promise","req","res","next","reqH","headers","_token","utilities","algaehUtilities","logger","log","_verify","tokenVerify","header","decryption","userIdentity","reqUser","getTokenData","id","dateTime","Date","toLocaleString","requestIdentity","requestClient","requestAPIUser","reqUserIdentity","requestUrl","originalUrl","requestHeader","host","origin","requestMethod","method","setHeader","status","httpStatus","unAuthorized","success","message","getReport","getExcelReport","getRawReport","getReportMultiPrint","getAllReports","records","newArray","i","length","fs","existsSync","push","_fs","createReadStream","unlink","pipe","merdgeTosingleReport","input","query","_path","path","join","cwd","outputFileName","format","argumentString","JSON","stringify","rep","replace","_jsonParam","parse","_outputFile","outputFileType","err","stdout","stderr","writeHead","end","_outFile","exists","listen","module","exports"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAOA;;;;;;AACA,IAAMA,OAAOC,QAAQ,eAAR,EAAyBD,IAAtC;AACA,IAAME,MAAM,wBAAZ;AACAA,IAAIC,MAAJ,GAAaC,eAAKC,YAAL,CAAkBH,GAAlB,CAAb;;AAEAA,IAAII,GAAJ,CAAQ,qBAAR;AACA,IAAMC,QAAQC,QAAQC,GAAR,CAAYC,IAA1B;AACAR,IAAII,GAAJ,CACEK,qBAAWC,IAAX,CAAgB;AACdC,SAAO;AADO,CAAhB,CADF;AAKA;AACA;AACA;AACA;AACA;AACAX,IAAII,GAAJ,CAAQ,4BAAR;AACA,IAAIE,QAAQC,GAAR,CAAYK,QAAZ,IAAwB,YAA5B,EAA0C;AACxCZ,MAAIa,GAAJ,CAAQ,YAAR,EAAsB,IAAtB;AACD;AACDP,QAAQQ,eAAR,CAAwB,CAAxB;AACAR,QAAQS,EAAR,CAAW,SAAX,EAAsB,mBAAW;AAC/BC,UAAQC,OAAR,CAAgB,SAAhB,EAA2BA,OAA3B;AACD,CAFD;AAGAX,QAAQS,EAAR,CAAW,mBAAX,EAAgC,iBAAS;AACvCC,UAAQE,KAAR,CAAc,oBAAd,EAAoCA,KAApC;AACD,CAFD;AAGAZ,QAAQS,EAAR,CAAW,oBAAX,EAAiC,UAACI,MAAD,EAASC,OAAT,EAAqB;AACpDJ,UAAQE,KAAR,CAAc,qBAAd,EAAqC,EAAEC,QAAQA,MAAV,EAAkBC,SAASA,OAA3B,EAArC;AACD,CAFD;AAGApB,IAAII,GAAJ,CAAQ,UAACiB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B,MAAMC,OAAOH,IAAII,OAAjB;AACA,MAAMC,SAASF,KAAK,WAAL,CAAf;AACA,MAAMG,YAAY,IAAIC,mBAAJ,EAAlB;AACAD,YAAUE,MAAV,GAAmBC,GAAnB,CAAuB,MAAvB,EAA+BJ,MAA/B,EAAuC,OAAvC;AACA,MAAMK,UAAUJ,UAAUK,WAAV,CAAsBN,MAAtB,CAAhB;AACA,MAAIK,OAAJ,EAAa;AACX,QAAIE,SAAST,KAAK,qBAAL,CAAb;AACA,QAAIS,UAAU,IAAV,IAAkBA,UAAU,EAA5B,IAAkCA,UAAU,MAAhD,EAAwD;AACtDA,eAASN,UAAUO,UAAV,CAAqBD,MAArB,CAAT;AACA;AACAZ,UAAIc,YAAJ,gBAAwBF,MAAxB,IAAgC,YAAYT,KAAK,UAAL,CAA5C;AACA,UAAIY,UAAUT,UAAUU,YAAV,CAAuBX,MAAvB,EAA+BY,EAA7C;AACAX,gBAAUE,MAAV,CAAiB,cAAjB,EAAiCC,GAAjC,CACE,EADF,EAEE;AACES,kBAAU,IAAIC,IAAJ,GAAWC,cAAX,EADZ;AAEEC,yBAAiB;AACfC,yBAAenB,KAAK,aAAL,CADA;AAEfoB,0BAAgBR,OAFD;AAGfS,2BAAiBxB,IAAIc;AAHN,SAFnB;AAOEW,oBAAYzB,IAAI0B,WAPlB;AAQEC,uBAAe;AACbC,gBAAMzB,KAAKyB,IADE;AAEb,wBAAczB,KAAK,YAAL,CAFD;AAGb,2BAAiBA,KAAK,eAAL,CAHJ;AAIb0B,kBAAQ1B,KAAK0B;AAJA,SARjB;AAcEC,uBAAe9B,IAAI+B;AAdrB,OAFF,EAkBE,MAlBF;AAoBD;;AAED9B,QAAI+B,SAAJ,CAAc,YAAd,EAA4B,YAA5B;AACA9B;AACD,GA/BD,MA+BO;AACLD,QAAIgC,MAAJ,CAAW3B,UAAU4B,UAAV,GAAuBC,YAAlC,EAAgD9C,IAAhD,CAAqD;AACnD+C,eAAS,KAD0C;AAEnDC,eAAS;AAF0C,KAArD;AAID;AACF,CA3CD;AA4CA1D,IAAII,GAAJ,CAAQ,gBAAR,EAA0BuD,4BAA1B;AACA3D,IAAII,GAAJ,CAAQ,qBAAR,EAA+BwD,iCAA/B;AACA5D,IAAII,GAAJ,CAAQ,sBAAR,EAAgCyD,+BAAhC;AACA7D,IAAII,GAAJ,CACE,sBADF,EAEE0D,sCAFF,EAGE,UAACzC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,MAAMwC,gBAAgB1C,IAAI2C,OAA1B;AACA,MAAIC,WAAW,EAAf;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,cAAcI,MAAlC,EAA0CD,GAA1C,EAA+C;AAC7C,QAAIE,aAAGC,UAAH,CAAcN,cAAcG,CAAd,CAAd,CAAJ,EAAqC;AACnCD,eAASK,IAAT,CAAcP,cAAcG,CAAd,CAAd;AACD;AACF;AACD,MAAID,SAASE,MAAT,IAAmB,CAAvB,EAA0B;AACxB,QAAMI,MAAMH,aAAGI,gBAAH,CAAoBP,SAAS,CAAT,CAApB,CAAZ;AACAM,QAAIxD,EAAJ,CAAO,KAAP,EAAc,YAAM;AAClBqD,mBAAGK,MAAH,CAAUR,SAAS,CAAT,CAAV;AACD,KAFD;AAGAM,QAAIG,IAAJ,CAASpD,GAAT;AACD,GAND,MAMO;AACLD,QAAI2C,OAAJ,GAAcC,QAAd;AACA1C;AACD;AACF,CArBH,EAsBEoD,uCAtBF;AAwBA3E,IAAII,GAAJ,CAAQ,uBAAR,EAAiC,UAACiB,GAAD,EAAMC,GAAN,EAAc;AAC7C,MAAIsD,QAAQvD,IAAIwD,KAAhB;;AAEA,MAAMC,QAAQC,eAAKC,IAAL,CAAU1E,QAAQ2E,GAAR,EAAV,EAAyB,oBAAzB,CAAd;AACA,MAAMC,iBAAiB,wBAASC,MAAT,CAAgB,gBAAhB,CAAvB;AACA,MAAIC,iBAAiBC,KAAKC,SAAL,CAAeV,MAAMW,GAArB,EAClBC,OADkB,CACV,iBADU,EACSN,cADT,EAElBM,OAFkB,CAEV,iBAFU,EAESV,KAFT,CAArB;AAGA,MAAMW,aAAaJ,KAAKK,KAAL,CAAWL,KAAKK,KAAL,CAAWN,cAAX,CAAX,CAAnB;AACA,MAAMO,cACJF,WAAWP,cAAX,GACA,GADA,IAECO,WAAWG,cAAX,IAA6B,OAA7B,GAAuC,MAAvC,GAAgDH,WAAWG,cAF5D,CADF;AAIA9F,OACE,eAAegF,KAAf,GAAuB,yBAAvB,GAAmDM,cADrD,EAEE,UAASS,GAAT,EAAcC,MAAd,EAAsBC,MAAtB,EAA8B;AAC5B,QAAIF,GAAJ,EAAS;AACP7E,cAAQc,GAAR,CAAY+D,GAAZ;AACAvE,UAAI0E,SAAJ,CAAc,GAAd,EAAmB,EAAE,gBAAgB,YAAlB,EAAnB;AACA1E,UAAI2E,GAAJ,CAAQJ,GAAR;AACD;AACD7E,YAAQc,GAAR,CAAYgE,MAAZ;AACA,QAAMI,WAAWnB,eAAKC,IAAL,CAAUF,KAAV,EAAiB,QAAjB,EAA2Ba,WAA3B,CAAjB;;AAEAvB,iBAAG+B,MAAH,CAAUD,QAAV,EAAoB,kBAAU;AAC5B,UAAIC,MAAJ,EAAY;AACV7E,YAAI0E,SAAJ,CAAc,GAAd,EAAmB;AACjB,0BACE,kBACCP,WAAWG,cAAX,IAA6B,OAA7B,GACG,uDADH,GAEGH,WAAWG,cAHf,CAFe;AAMjB;AACA,iCAAuB,0BAA0BD;AAPhC,SAAnB;AASAvB,qBAAGI,gBAAH,CAAoB0B,QAApB,EAA8BxB,IAA9B,CAAmCpD,GAAnC;AACD,OAXD,MAWO;AACLA,YAAI0E,SAAJ,CAAc,GAAd,EAAmB,EAAE,gBAAgB,YAAlB,EAAnB;AACA1E,YAAI2E,GAAJ,CAAQ,2BAAR;AACD;AACF,KAhBD;AAiBD,GA5BH;AA8BD,CA3CD;AA4CAjG,IAAIC,MAAJ,CAAWmG,MAAX,CAAkB/F,KAAlB;AACAW,QAAQc,GAAR,2CAAoDzB,KAApD;kBACeL,G;;AACfqG,OAAOC,OAAP,GAAiBtG,GAAjB","file":"report_server.js","sourcesContent":["import http from \"http\";\r\nimport cors from \"cors\";\r\nimport bodyParser from \"body-parser\";\r\nimport exxpress from \"express\";\r\nimport compression from \"compression\";\r\nimport moment from \"moment\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport {\r\n  getReport,\r\n  getReportMultiPrint,\r\n  merdgeTosingleReport,\r\n  getExcelReport,\r\n  getRawReport\r\n} from \"./report_generation\";\r\nimport algaehUtilities from \"algaeh-utilities/utilities\";\r\nconst exec = require(\"child_process\").exec;\r\nconst app = exxpress();\r\napp.server = http.createServer(app);\r\n\r\napp.use(cors());\r\nconst _port = process.env.PORT;\r\napp.use(\r\n  bodyParser.json({\r\n    limit: \"200kb\"\r\n  })\r\n);\r\n// app.use(\r\n//   exxpress.static(\r\n//     path.join(process.cwd(), \"/algaeh_report_tool/templates/report_assets\")\r\n//   )\r\n// );\r\napp.use(compression());\r\nif (process.env.NODE_ENV == \"production\") {\r\n  app.set(\"view cache\", true);\r\n}\r\nprocess.setMaxListeners(0);\r\nprocess.on(\"warning\", warning => {\r\n  console.warning(\"warning\", warning);\r\n});\r\nprocess.on(\"uncaughtException\", error => {\r\n  console.error(\"Uncaught Exception\", error);\r\n});\r\nprocess.on(\"unhandledRejection\", (reason, promise) => {\r\n  console.error(\"Unhandled Rejection\", { reason: reason, promise: promise });\r\n});\r\napp.use((req, res, next) => {\r\n  const reqH = req.headers;\r\n  const _token = reqH[\"x-api-key\"];\r\n  const utilities = new algaehUtilities();\r\n  utilities.logger().log(\"Xapi\", _token, \"debug\");\r\n  const _verify = utilities.tokenVerify(_token);\r\n  if (_verify) {\r\n    let header = reqH[\"x-app-user-identity\"];\r\n    if (header != null && header != \"\" && header != \"null\") {\r\n      header = utilities.decryption(header);\r\n      // req.userIdentity = header;\r\n      req.userIdentity = { ...header, \"x-branch\": reqH[\"x-branch\"] };\r\n      let reqUser = utilities.getTokenData(_token).id;\r\n      utilities.logger(\"res-tracking\").log(\r\n        \"\",\r\n        {\r\n          dateTime: new Date().toLocaleString(),\r\n          requestIdentity: {\r\n            requestClient: reqH[\"x-client-ip\"],\r\n            requestAPIUser: reqUser,\r\n            reqUserIdentity: req.userIdentity\r\n          },\r\n          requestUrl: req.originalUrl,\r\n          requestHeader: {\r\n            host: reqH.host,\r\n            \"user-agent\": reqH[\"user-agent\"],\r\n            \"cache-control\": reqH[\"cache-control\"],\r\n            origin: reqH.origin\r\n          },\r\n          requestMethod: req.method\r\n        },\r\n        \"info\"\r\n      );\r\n    }\r\n\r\n    res.setHeader(\"connection\", \"keep-alive\");\r\n    next();\r\n  } else {\r\n    res.status(utilities.httpStatus().unAuthorized).json({\r\n      success: false,\r\n      message: \"unauthorized access\"\r\n    });\r\n  }\r\n});\r\napp.use(\"/api/v1/report\", getReport);\r\napp.use(\"/api/v1/excelReport\", getExcelReport);\r\napp.use(\"/api/v1/getRawReport\", getRawReport);\r\napp.use(\r\n  \"/api/v1/multireports\",\r\n  getReportMultiPrint,\r\n  (req, res, next) => {\r\n    const getAllReports = req.records;\r\n    let newArray = [];\r\n    for (let i = 0; i < getAllReports.length; i++) {\r\n      if (fs.existsSync(getAllReports[i])) {\r\n        newArray.push(getAllReports[i]);\r\n      }\r\n    }\r\n    if (newArray.length == 1) {\r\n      const _fs = fs.createReadStream(newArray[0]);\r\n      _fs.on(\"end\", () => {\r\n        fs.unlink(newArray[0]);\r\n      });\r\n      _fs.pipe(res);\r\n    } else {\r\n      req.records = newArray;\r\n      next();\r\n    }\r\n  },\r\n  merdgeTosingleReport\r\n);\r\napp.use(\"/api/v1/pentahoreport\", (req, res) => {\r\n  let input = req.query;\r\n\r\n  const _path = path.join(process.cwd(), \"algaeh_report_tool\");\r\n  const outputFileName = moment().format(\"YYYYMMDDHHmmss\");\r\n  let argumentString = JSON.stringify(input.rep)\r\n    .replace(\"$outputFileName\", outputFileName)\r\n    .replace(\"$reportLocation\", _path);\r\n  const _jsonParam = JSON.parse(JSON.parse(argumentString));\r\n  const _outputFile =\r\n    _jsonParam.outputFileName +\r\n    \".\" +\r\n    (_jsonParam.outputFileType == \"EXCEL\" ? \"xlsx\" : _jsonParam.outputFileType);\r\n  exec(\r\n    \"java -jar \" + _path + \"/pentaho_reporting.jar \" + argumentString,\r\n    function(err, stdout, stderr) {\r\n      if (err) {\r\n        console.log(err);\r\n        res.writeHead(400, { \"Content-Type\": \"text/plain\" });\r\n        res.end(err);\r\n      }\r\n      console.log(stdout);\r\n      const _outFile = path.join(_path, \"Output\", _outputFile);\r\n\r\n      fs.exists(_outFile, exists => {\r\n        if (exists) {\r\n          res.writeHead(200, {\r\n            \"Content-type\":\r\n              \"application/\" +\r\n              (_jsonParam.outputFileType == \"EXCEL\"\r\n                ? \"vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\r\n                : _jsonParam.outputFileType),\r\n            // \"content-type\": \"application/xml\", //vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n            \"Content-Disposition\": \"attachment; filename=\" + _outputFile\r\n          });\r\n          fs.createReadStream(_outFile).pipe(res);\r\n        } else {\r\n          res.writeHead(400, { \"Content-Type\": \"text/plain\" });\r\n          res.end(\"ERROR File does not exist\");\r\n        }\r\n      });\r\n    }\r\n  );\r\n});\r\napp.server.listen(_port);\r\nconsole.log(`Report Server is running  on PORT  - ${_port} *`);\r\nexport default app;\r\nmodule.exports = app;\r\n"]}