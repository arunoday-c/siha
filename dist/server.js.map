{"version":3,"sources":["../src/server.js"],"names":["LocalStrategy","require","Strategy","app","process","env","NODE_ENV","console","log","use","static","server","createServer","json","limit","bodyLimit","initialize","usernameField","passwordField","username","password","done","serializeUser","user","deserializeUser","id","msg","req","res","next","reBody","body","String","replace","reqH","headers","reqUser","url","requestClient","ip","requestUser","requestUrl","originalUrl","requestHeader","host","origin","requestMethod","method","logdir","join","__dirname","logpath","existsSync","mkdirSync","accessLogStream","size","path","streamexceptionHandlers","set","on","warning","error","status","internalServer","success","message","listen","port","address","module","exports"],"mappings":"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","file":"server.js","sourcesContent":["import http from \"http\";\nimport express from \"express\";\nimport bodyParser from \"body-parser\";\nimport config from \"./keys/keys\";\nimport routes from \"./routes\";\nimport passport from \"passport\";\nimport cors from \"cors\";\nconst LocalStrategy = require(\"passport-local\").Strategy;\nimport morgan from \"morgan\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport keys from \"./keys/keys\";\nimport rfs from \"rotating-file-stream\";\nimport httpStatus from \"./utils/httpStatus\";\nimport { logger, debugLog, debugFunction } from \"./utils/logging\";\nimport jwtDecode from \"jwt-decode\";\nimport { debuglog } from \"util\";\n\nlet app = express();\n\nif (process.env.NODE_ENV === \"production\") {\n  console.log(\"Running prod....\");\n  console.log(process.env.NODE_ENV);\n  app.use(express.static(\"client/build\"));\n}\n\napp.server = http.createServer(app);\napp.use(cors());\n//parse application json\napp.use(\n  bodyParser.json({\n    limit: config.bodyLimit\n  })\n);\n\n//passport config\napp.use(passport.initialize());\npassport.use(\n  new LocalStrategy(\n    {\n      usernameField: \"username\",\n      passwordField: \"password\"\n    },\n    (username, password, done) => {\n      return done(null, username);\n    }\n  )\n);\n\npassport.serializeUser((user, done) => {\n  done(null, user);\n});\npassport.deserializeUser((id, done) => {\n  done(null, { msg: \"done\" });\n});\n\napp.use((req, res, next) => {\n  let reBody = req.body;\n  if (reBody != null && reBody[\"password\"] != null) {\n    reBody[\"password\"] = String(reBody[\"password\"]).replace(\n      reBody[\"password\"],\n      \"*******\"\n    );\n  }\n\n  let reqH = req.headers;\n  let reqUser = \"\";\n  if (req.url != \"/apiAuth\") reqUser = jwtDecode(reqH[\"x-api-key\"]).id;\n\n  logger.log(\"info\", \"%j\", {\n    requestClient: req.ip,\n    requestUser: reqUser,\n    requestUrl: req.originalUrl,\n    requestHeader: {\n      host: reqH.host,\n      \"user-agent\": reqH[\"user-agent\"],\n      \"cache-control\": reqH[\"cache-control\"],\n      origin: reqH.origin\n    },\n    requestMethod: req.method\n  });\n\n  // debugLog(\"Request Data :\", {\n  //   requestBody: req.body,\n  //   requestQuery: req.query\n  // });\n\n  next();\n});\n\nlet logdir = path.join(__dirname, \"../\" + keys.logpath);\nif (!fs.existsSync(logdir)) {\n  fs.mkdirSync(logdir);\n}\n\n// var accessLogStream = fs.createWriteStream(path.join(logdir, \"access.log\"), {\n//   flags: \"a\"\n// });\n\nvar accessLogStream = rfs(\"access.log\", {\n  size: \"5M\",\n  path: logdir\n});\n\napp.use(morgan(\"combined\", { streamexceptionHandlers: accessLogStream }));\napp.set(\"trust proxy\", true);\n\n//api routeres v1\napp.use(\"/api/v1\", routes);\n\nprocess.on(\"warning\", warning => {\n  logger.log(\"warn\", warning);\n});\n//Error Handling MiddleWare\napp.use((error, req, res, next) => {\n  error.status = error.status || httpStatus.internalServer;\n  res.status(error.status).json({\n    success: false,\n    message: error.message\n  });\n  logger.log(\"error\", \"%j\", error);\n});\n\napp.server.listen(config.port);\nconsole.log(`started on port ${app.server.address().port}`);\n\nexport default app;\nmodule.exports = app;\n"]}