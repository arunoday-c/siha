{"version":3,"sources":["../src/server.js"],"names":["LocalStrategy","require","Strategy","app","process","env","NODE_ENV","console","log","use","static","server","createServer","json","limit","bodyLimit","initialize","usernameField","passwordField","username","password","done","serializeUser","user","deserializeUser","id","msg","req","res","next","reqH","headers","reqUser","url","header","body","created_by","algaeh_d_app_user_id","updated_by","userIdentity","status","unAuthorized","success","message","requestClient","ip","requestUser","requestUrl","originalUrl","requestHeader","host","origin","requestMethod","method","logdir","join","__dirname","logpath","existsSync","mkdirSync","accessLogStream","size","path","streamexceptionHandlers","set","on","warning","error","internalServer","listen","port","address","module","exports"],"mappings":"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","file":"server.js","sourcesContent":["import http from \"http\";\nimport express from \"express\";\nimport bodyParser from \"body-parser\";\nimport config from \"./keys/keys\";\nimport routes from \"./routes\";\nimport passport from \"passport\";\nimport cors from \"cors\";\nconst LocalStrategy = require(\"passport-local\").Strategy;\nimport morgan from \"morgan\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport keys from \"./keys/keys\";\nimport rfs from \"rotating-file-stream\";\nimport httpStatus from \"./utils/httpStatus\";\nimport { logger, debugLog, debugFunction } from \"./utils/logging\";\nimport jwtDecode from \"jwt-decode\";\nimport { decryption } from \"./utils/cryptography\";\nimport { debuglog } from \"util\";\nlet app = express();\n\nif (process.env.NODE_ENV === \"production\") {\n  console.log(\"Running prod....\");\n  console.log(process.env.NODE_ENV);\n  app.use(express.static(\"client/build\"));\n}\n\napp.server = http.createServer(app);\n\napp.use(cors());\n//parse application json\napp.use(\n  bodyParser.json({\n    limit: config.bodyLimit\n  })\n);\n\n//passport config\napp.use(passport.initialize());\npassport.use(\n  new LocalStrategy(\n    {\n      usernameField: \"username\",\n      passwordField: \"password\"\n    },\n    (username, password, done) => {\n      return done(null, username);\n    }\n  )\n);\n\npassport.serializeUser((user, done) => {\n  done(null, user);\n});\npassport.deserializeUser((id, done) => {\n  done(null, { msg: \"done\" });\n});\n\napp.use((req, res, next) => {\n  let reqH = req.headers;\n\n  let reqUser = \"\";\n  if (req.url != \"/api/v1/apiAuth\") {\n    reqUser = jwtDecode(reqH[\"x-api-key\"]).id;\n    if (req.url != \"/api/v1/apiAuth/authUser\") {\n      let header = req.headers[\"x-app-user-identity\"];\n\n      if (header != null && header != \"\" && header != \"null\") {\n        header = decryption(header);\n\n        req.body.created_by = header.algaeh_d_app_user_id;\n        req.body.updated_by = header.algaeh_d_app_user_id;\n        req.userIdentity = header;\n      } else {\n        res.status(httpStatus.unAuthorized).json({\n          success: false,\n          message: \"unauthorized credentials can not procees..\"\n        });\n      }\n    }\n  }\n\n  logger.log(\"info\", \"%j\", {\n    requestClient: req.ip,\n    requestUser: reqUser,\n    requestUrl: req.originalUrl,\n    requestHeader: {\n      host: reqH.host,\n      \"user-agent\": reqH[\"user-agent\"],\n      \"cache-control\": reqH[\"cache-control\"],\n      origin: reqH.origin\n    },\n    requestMethod: req.method\n  });\n\n  // debugLog(\"Request Data :\", {\n  //   requestBody: req.body,\n  //   requestQuery: req.query\n  // });\n\n  next();\n});\n\nlet logdir = path.join(__dirname, \"../\" + keys.logpath);\nif (!fs.existsSync(logdir)) {\n  fs.mkdirSync(logdir);\n}\n\n// var accessLogStream = fs.createWriteStream(path.join(logdir, \"access.log\"), {\n//   flags: \"a\"\n// });\n\nvar accessLogStream = rfs(\"access.log\", {\n  size: \"5M\",\n  path: logdir\n});\n\napp.use(morgan(\"combined\", { streamexceptionHandlers: accessLogStream }));\napp.set(\"trust proxy\", true);\n\n//api routeres v1\napp.use(\"/api/v1\", routes);\n\nprocess.on(\"warning\", warning => {\n  logger.log(\"warn\", warning);\n});\nprocess.on(\"uncaughtException\", error => {\n  logger.log(\"error\", error);\n});\n//Error Handling MiddleWare\napp.use((error, req, res, next) => {\n  error.status = error.status || httpStatus.internalServer;\n  res.status(error.status).json({\n    success: false,\n    message: error.message\n  });\n  logger.log(\"error\", \"%j\", error);\n});\n\napp.server.listen(config.port);\nconsole.log(`started on port ${app.server.address().port}`);\n\nexport default app;\nmodule.exports = app;\n"]}