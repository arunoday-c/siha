{"version":3,"sources":["../../src/model/patientRegistration.js"],"names":["addPatientToRegisteration","req","res","next","db","dataBaseNotInitilizedError","getConnection","error","connection","errror","insertData","result","release","records","e","updatePatientRegistrstion","updateData","dataBase","callBack","isCommited","patientModel","hims_d_patient_id","patient_code","registration_date","title_id","first_name","middle_name","last_name","gender","religion_id","date_of_birth","age","marital_status","address1","address2","contact_number","secondary_contact_number","email","emergency_contact_name","emergency_contact_number","relationship_with_patient","visa_type_id","nationality_id","postal_code","primary_identity_id","primary_id_no","secondary_identity_id","secondary_id_no","photo_file","primary_id_file","secondary_id_file","created_by","created_date","updated_by","updated_date","city_id","state_id","country_id","documents","inputparam","body","Date","query","full_name","arabic_name","rollback","insertId","patient_id","optionString","reesult","callback","patientSelect","selectData","patientWhereCondition","where","condition","values","module","exports"],"mappings":"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","file":"patientRegistration.js","sourcesContent":["import extend from \"extend\";\nimport { whereCondition, checkIsNull, uploadFile } from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { logger, debugLog, debugFunction } from \"../utils/logging\";\n\nlet addPatientToRegisteration = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (errror) {\n        next(error);\n      }\n      insertData(connection, req, res, (error, result) => {\n        connection.release();\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\nlet updatePatientRegistrstion = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      updateData(connection, req, (error, result) => {\n        connection.release();\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\nlet insertData = (dataBase, req, res, callBack, isCommited, next) => {\n  let patientModel = {\n    hims_d_patient_id: null,\n    patient_code: null,\n    registration_date: null,\n    title_id: null,\n    first_name: null,\n    middle_name: null,\n    last_name: null,\n    gender: null,\n    religion_id: null,\n    date_of_birth: null,\n    age: null,\n    marital_status: null,\n    address1: null,\n    address2: null,\n    contact_number: null,\n    secondary_contact_number: null,\n    email: null,\n    emergency_contact_name: \"\",\n    emergency_contact_number: \"\",\n    relationship_with_patient: \"\",\n    visa_type_id: null,\n    nationality_id: null,\n    postal_code: null,\n    primary_identity_id: null,\n    primary_id_no: null,\n    secondary_identity_id: \"\",\n    secondary_id_no: \"\",\n    photo_file: \"\",\n    primary_id_file: \"\",\n    secondary_id_file: \"\",\n    created_by: null,\n    created_date: null,\n    updated_by: null,\n    updated_date: null,\n    city_id: null,\n    state_id: null,\n    country_id: null,\n    documents: null /*{\n                        patientImage:{base64String:\"\",fileExtention:\"\"},\n                        patientPrimaryID:{base64String:\"\",fileExtention:\"\"},\n                        patientSecondaryID:{base64String:\"\",fileExtention:\"\"}\n                      }\n    */\n  };\n  isCommited = isCommited || false;\n  try {\n    debugFunction(\"Insert Patient Registration\");\n    let inputparam = extend(patientModel, req.body);\n    inputparam.registration_date = new Date();\n    dataBase.query(\n      \"INSERT INTO `hims_f_patient` (`patient_code`, `registration_date`\\\n    , `title_id`, `first_name`, `middle_name`, `last_name`, `full_name`, `arabic_name`, `gender`, `religion_id`\\\n    , `date_of_birth`, `age`, `marital_status`, `address1`, `address2`, `contact_number`\\\n    , `secondary_contact_number`, `email`, `emergency_contact_name`, `emergency_contact_number`\\\n    , `relationship_with_patient`, `visa_type_id`, `nationality_id`, `postal_code`\\\n    , `primary_identity_id`, `primary_id_no`, `secondary_identity_id`, `secondary_id_no`\\\n    , `photo_file`, `primary_id_file`, `secondary_id_file`, `created_by`, `created_date`\\\n    ,`city_id`,`state_id`,`country_id`)\\\n     VALUES (?,?,?,?, ?, ?, ?, ?, ?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?);\",\n      [\n        inputparam.patient_code,\n        inputparam.registration_date,\n        inputparam.title_id,\n        inputparam.first_name,\n        inputparam.middle_name,\n        inputparam.last_name,\n        inputparam.full_name,\n        inputparam.arabic_name,\n        inputparam.gender,\n        inputparam.religion_id,\n        inputparam.date_of_birth,\n        inputparam.age,\n        inputparam.marital_status,\n        inputparam.address1,\n        inputparam.address2,\n        inputparam.contact_number,\n        inputparam.secondary_contact_number,\n        inputparam.email,\n        inputparam.emergency_contact_name,\n        inputparam.emergency_contact_number,\n        inputparam.relationship_with_patient,\n        // checkIsNull(inputparam.contact_number, 0),\n        // checkIsNull(inputparam.secondary_contact_number, 0),\n        // checkIsNull(inputparam.email, \"\"),\n        // checkIsNull(inputparam.emergency_contact_name, \"\"),\n        // checkIsNull(inputparam.emergency_contact_number, 0),\n        // checkIsNull(inputparam.relationship_with_patient, \"\"),\n        inputparam.visa_type_id,\n        inputparam.nationality_id,\n        inputparam.postal_code,\n        inputparam.primary_identity_id,\n        inputparam.primary_id_no,\n        inputparam.secondary_identity_id,\n        inputparam.secondary_id_no,\n        inputparam.photo_file,\n        inputparam.primary_id_file,\n        inputparam.secondary_id_file,\n        // checkIsNull(inputparam.secondary_identity_id, 1),\n        // checkIsNull(inputparam.secondary_id_no, \"\"),\n        // checkIsNull(inputparam.photo_file, \"\"),\n        // checkIsNull(inputparam.primary_id_file, \"\"),\n        // checkIsNull(inputparam.secondary_id_file, \"\"),\n        inputparam.created_by,\n        new Date(),\n        inputparam.city_id,\n        inputparam.state_id,\n        inputparam.country_id\n      ],\n      (error, result) => {\n        debugLog(\"Insert Query executed\");\n        if (error) {\n          if (isCommited) {\n            dataBase.rollback(() => {\n              next(error);\n            });\n          } else {\n            next(error);\n          }\n        }\n        if (result) {\n          let insertId = result.insertId;\n          debugLog(\"insertId : \" + insertId);\n          inputparam.patient_id = insertId;\n          let optionString =\n            \"SELECT `algaeh_d_app_config_id`, `param_name`, `param_value` FROM `algaeh_d_app_config` WHERE `record_status` ='A' AND \\\n             param_category='DOCUMENTS' AND param_name='PATIENT_DOC_PATH';\";\n          dataBase.query(\n            \"SELECT `hims_d_patient_id`, `patient_code`, `registration_date`\\\n      , `title_id`, `first_name`, `middle_name`, `last_name`, `full_name`, `arabic_name`, `gender`, `religion_id`\\\n      , `date_of_birth`, `age`, `marital_status`, `address1`, `address2`, `contact_number`\\\n      , `secondary_contact_number`, `email`, `emergency_contact_name`, `emergency_contact_number`\\\n      , `relationship_with_patient`, `visa_type_id`, `nationality_id`, `postal_code`\\\n      , `primary_identity_id`, `primary_id_no`, `secondary_identity_id`, `secondary_id_no`\\\n      , `photo_file`, `primary_id_file`, `secondary_id_file` FROM `hims_f_patient`\\\n       WHERE `record_status`='A' AND hims_d_patient_id=? ;\" +\n              optionString,\n            [insertId],\n            (error, records) => {\n              if (!error) {\n                req[\"folderPath\"] =\n                  records[1][0][\"param_value\"] +\n                  \"/\" +\n                  records[0][0][\"patient_code\"];\n                req[\"fileName\"] = records[0][0][\"patient_code\"];\n              }\n              if (typeof callBack == \"function\") {\n                callBack(error, records);\n              }\n            }\n          );\n        }\n      }\n    );\n  } catch (e) {\n    next(e);\n  }\n};\nlet updateData = (dataBase, req, callBack) => {\n  let patientModel = {\n    hims_d_patient_id: null,\n    patient_code: null,\n    registration_date: null,\n    title_id: null,\n    first_name: null,\n    middle_name: null,\n    last_name: null,\n    gender: null,\n    religion_id: null,\n    date_of_birth: null,\n    age: null,\n    marital_status: null,\n    address1: null,\n    address2: null,\n    contact_number: null,\n    secondary_contact_number: null,\n    email: null,\n    emergency_contact_name: \"\",\n    emergency_contact_number: \"\",\n    relationship_with_patient: \"\",\n    visa_type_id: null,\n    nationality_id: null,\n    postal_code: null,\n    primary_identity_id: null,\n    primary_id_no: null,\n    secondary_identity_id: \"\",\n    secondary_id_no: \"\",\n    photo_file: \"\",\n    primary_id_file: \"\",\n    secondary_id_file: \"\",\n    created_by: null,\n    created_date: null,\n    updated_by: null,\n    updated_date: null,\n    city_id: null,\n    state_id: null,\n    country_id: null,\n    documents: null /*{\n                        patientImage:{base64String:\"\",fileExtention:\"\"},\n                        patientPrimaryID:{base64String:\"\",fileExtention:\"\"},\n                        patientSecondaryID:{base64String:\"\",fileExtention:\"\"}\n                      }\n    */\n  };\n\n  try {\n    let inputparam = extend(patientModel, req.body);\n    dataBase.query(\n      \"UPDATE `hims_f_patient`\\\n  SET  `title_id`=?, `first_name`=?, `middle_name`=?, `last_name`=?, `full_name`=?, `arabic_name`=?, \\\n  `gender`=?, `religion_id`=?, `date_of_birth`=?, `age`=?, `marital_status`=?, `address1`=?, \\\n  `address2`=?, `contact_number`=?, `secondary_contact_number`=?, `email`=?, \\\n  `emergency_contact_name`=?, `emergency_contact_number`=?, `relationship_with_patient`=?,\\\n  `visa_type_id`=?, `nationality_id`=?, `postal_code`=?, `primary_identity_id`=?, \\\n  `primary_id_no`=?, `secondary_identity_id`=?, `secondary_id_no`=?, `photo_file`=?, \\\n  `primary_id_file`=?, `secondary_id_file`=?, `updated_by`=?, `updated_date`=?\\\n  WHERE `hims_d_patient_id`=?;\",\n      [\n        inputparam.title_id,\n        inputparam.first_name,\n        inputparam.middle_name,\n        inputparam.last_name,\n        inputparam.full_name,\n        inputparam.arabic_name,\n        inputparam.gender,\n        inputparam.religion_id,\n        inputparam.date_of_birth,\n        inputparam.age,\n        inputparam.marital_status,\n        inputparam.address1,\n        inputparam.address2,\n        inputparam.contact_number,\n        inputparam.secondary_contact_number,\n        inputparam.email,\n        inputparam.emergency_contact_name,\n        inputparam.emergency_contact_number,\n        inputparam.relationship_with_patient,\n        inputparam.visa_type_id,\n        inputparam.nationality_id,\n        inputparam.postal_code,\n        inputparam.primary_identity_id,\n        inputparam.primary_id_no,\n        inputparam.secondary_identity_id,\n        inputparam.secondary_id_no,\n        inputparam.photo_file,\n        inputparam.primary_id_file,\n        inputparam.secondary_id_file,\n        inputparam.updated_by,\n        new Date(),\n        inputparam.hims_d_patient_id\n      ],\n      (error, reesult) => {\n        if (typeof callBack == \"function\") callback(error, result);\n      }\n    );\n  } catch (e) {\n    next(e);\n  }\n};\nlet patientSelect = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (errror) {\n        next(error);\n      }\n      selectData(connection, req, (error, result) => {\n        connection.release();\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet selectData = (dataBase, req, callBack) => {\n  let patientWhereCondition = {\n    patient_code: \"ALL\",\n    contact_number: \"ALL\",\n    gender: \"ALL\"\n  };\n\n  try {\n    let where = whereCondition(extend(patientWhereCondition, req.query));\n    dataBase.query(\n      \"SELECT `hims_d_patient_id`, `patient_code`, `registration_date`\\\n  , `title_id`, `first_name`, `middle_name`, `last_name`, `gender`, `religion_id`\\\n  , `date_of_birth`, `age`, `marital_status`, `address1`, `address2`, `contact_number`\\\n  , `secondary_contact_number`, `email`, `emergency_contact_name`, `emergency_contact_number`\\\n  , `relationship_with_patient`, `visa_type_id`, `nationality_id`, `postal_code`\\\n  , `primary_identity_id`, `primary_id_no`, `secondary_identity_id`, `secondary_id_no`\\\n  , `photo_file`, `primary_id_file`, `secondary_id_file`,`city_id`,`state_id`,`country_id` \\\n   FROM `hims_f_patient`\\\n   WHERE `record_status`='A' \" +\n        where.condition,\n      where.values,\n      (error, result) => {\n        if (typeof callBack == \"function\") {\n          callBack(error, result);\n        }\n      }\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addPatientToRegisteration,\n  updatePatientRegistrstion,\n  patientSelect,\n  insertData,\n  updateData,\n  selectData\n};\n"]}