{"version":3,"sources":["../../src/model/patientRegistration.js"],"names":["patientModel","hims_d_patient_id","patient_code","registration_date","title_id","first_name","middle_name","last_name","gender","religion_id","date_of_birth","age","marital_status","address1","address2","contact_number","secondary_contact_number","email","emergency_contact_name","emergency_contact_number","relationship_with_patient","visa_type_id","nationality_id","postal_code","primary_identity_id","primary_id_no","secondary_identity_id","secondary_id_no","photo_file","primary_id_file","secondary_id_file","created_by","created_date","updated_by","updated_date","documents","addPatientToRegisteration","req","res","next","db","dataBaseNotInitilizedError","getConnection","error","connection","errror","insertData","result","release","records","e","updatePatientRegistrstion","updateData","dataBase","callBack","isCommited","inputparam","body","Date","query","rollback","insertId","optionString","reesult","callback","patientSelect","selectData","patientWhereCondition","where","condition","values","module","exports"],"mappings":"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","file":"patientRegistration.js","sourcesContent":["import extend from \"extend\";\nimport { whereCondition, checkIsNull, uploadFile } from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { logger, debugLog, debugFunction } from \"../utils/logging\";\nlet patientModel = {\n  hims_d_patient_id: null,\n  patient_code: null,\n  registration_date: null,\n  title_id: null,\n  first_name: null,\n  middle_name: null,\n  last_name: null,\n  gender: null,\n  religion_id: null,\n  date_of_birth: null,\n  age: null,\n  marital_status: null,\n  address1: null,\n  address2: null,\n  contact_number: null,\n  secondary_contact_number: null,\n  email: null,\n  emergency_contact_name: \"\",\n  emergency_contact_number: \"\",\n  relationship_with_patient: \"\",\n  visa_type_id: null,\n  nationality_id: null,\n  postal_code: null,\n  primary_identity_id: null,\n  primary_id_no: null,\n  secondary_identity_id: \"\",\n  secondary_id_no: \"\",\n  photo_file: \"\",\n  primary_id_file: \"\",\n  secondary_id_file: \"\",\n  created_by: null,\n  created_date: null,\n  updated_by: null,\n  updated_date: null,\n  documents: null /*{\n                      patientImage:{base64String:\"\",fileExtention:\"\"},\n                      patientPrimaryID:{base64String:\"\",fileExtention:\"\"},\n                      patientSecondaryID:{base64String:\"\",fileExtention:\"\"}\n                    }\n  */\n};\n\nlet addPatientToRegisteration = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (errror) {\n        next(error);\n      }\n      insertData(connection, req, res, (error, result) => {\n        connection.release();\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\nlet updatePatientRegistrstion = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      updateData(connection, req, (error, result) => {\n        connection.release();\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\nlet insertData = (dataBase, req, res, callBack, isCommited, next) => {\n  isCommited = isCommited || false;\n  try {\n    debugFunction(\"Insert Patient Registration\");\n    let inputparam = extend(patientModel, req.body);\n    inputparam.registration_date = new Date();\n    dataBase.query(\n      \"INSERT INTO `hims_f_patient` (`patient_code`, `registration_date`\\\n    , `title_id`, `first_name`, `middle_name`, `last_name`, `gender`, `religion_id`\\\n    , `date_of_birth`, `age`, `marital_status`, `address1`, `address2`, `contact_number`\\\n    , `secondary_contact_number`, `email`, `emergency_contact_name`, `emergency_contact_number`\\\n    , `relationship_with_patient`, `visa_type_id`, `nationality_id`, `postal_code`\\\n    , `primary_identity_id`, `primary_id_no`, `secondary_identity_id`, `secondary_id_no`\\\n    , `photo_file`, `primary_id_file`, `secondary_id_file`, `created_by`, `created_date`)\\\n     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?);\",\n      [\n        inputparam.patient_code,\n        inputparam.registration_date,\n        inputparam.title_id,\n        inputparam.first_name,\n        inputparam.middle_name,\n        inputparam.last_name,\n        inputparam.gender,\n        inputparam.religion_id,\n        inputparam.date_of_birth,\n        inputparam.age,\n        inputparam.marital_status,\n        inputparam.address1,\n        inputparam.address2,\n        checkIsNull(inputparam.contact_number, 0),\n        checkIsNull(inputparam.secondary_contact_number, 0),\n        checkIsNull(inputparam.email, \"\"),\n        checkIsNull(inputparam.emergency_contact_name, \"\"),\n        checkIsNull(inputparam.emergency_contact_number, 0),\n        checkIsNull(inputparam.relationship_with_patient, \"\"),\n        inputparam.visa_type_id,\n        inputparam.nationality_id,\n        inputparam.postal_code,\n        inputparam.primary_identity_id,\n        inputparam.primary_id_no,\n        checkIsNull(inputparam.secondary_identity_id, 1),\n        checkIsNull(inputparam.secondary_id_no, \"\"),\n        checkIsNull(inputparam.photo_file, \"\"),\n        checkIsNull(inputparam.primary_id_file, \"\"),\n        checkIsNull(inputparam.secondary_id_file, \"\"),\n        inputparam.created_by,\n        new Date()\n      ],\n      (error, result) => {\n        debugLog(\"Insert Query executed\");\n        if (error) {\n          if (isCommited) {\n            dataBase.rollback(() => {\n              next(error);\n            });\n          } else {\n            next(error);\n          }\n        }\n        if (result) {\n          let insertId = result.insertId;\n          debugLog(\"insertId : \" + insertId);\n          let optionString =\n            \"SELECT `algaeh_d_app_config_id`, `param_name`, `param_value` FROM `algaeh_d_app_config` WHERE `record_status` ='A' AND \\\n             param_category='DOCUMENTS' AND param_name='PATIENT_DOC_PATH';\";\n          dataBase.query(\n            \"SELECT `hims_d_patient_id`, `patient_code`, `registration_date`\\\n      , `title_id`, `first_name`, `middle_name`, `last_name`, `gender`, `religion_id`\\\n      , `date_of_birth`, `age`, `marital_status`, `address1`, `address2`, `contact_number`\\\n      , `secondary_contact_number`, `email`, `emergency_contact_name`, `emergency_contact_number`\\\n      , `relationship_with_patient`, `visa_type_id`, `nationality_id`, `postal_code`\\\n      , `primary_identity_id`, `primary_id_no`, `secondary_identity_id`, `secondary_id_no`\\\n      , `photo_file`, `primary_id_file`, `secondary_id_file` FROM `hims_f_patient`\\\n       WHERE `record_status`='A' AND hims_d_patient_id=? ;\" +\n              optionString,\n            [insertId],\n            (error, records) => {\n              if (!error) {\n                req[\"folderPath\"] =\n                  records[1][0][\"param_value\"] +\n                  \"/\" +\n                  records[0][0][\"patient_code\"];\n                req[\"fileName\"] = records[0][0][\"patient_code\"];\n\n                // if (inputparam.documents != null) {\n                //   if (inputparam.documents.patientImage != null) {\n                //     if (inputparam.documents.patientImage.base64String != \"\") {\n                //       base64DecodeToFile({\n                //         code: records[0][\"patient_code\"],\n                //         file:\n                //           records[0][\"patient_code\"] +\n                //           \"_Image_\" +\n                //           inputparam.documents.patientImage.fileExtention,\n                //         base64String:\n                //           inputparam.documents.patientImage.base64String,\n                //         callBack: function(error, output) {\n                //           if (error) {\n                //             logger.log(\n                //               \"error\",\n                //               \"Patient Image insertion Error \\n %s\",\n                //               JSON.stringify(error)\n                //             );\n                //           }\n                //           debugLog(\n                //             \"Patient Image is created \" + JSON.stringify(output)\n                //           );\n                //         }\n                //       });\n                //     }\n                //   }\n                //   if (inputparam.documents.patientPrimaryID != null) {\n                //     if (\n                //       inputparam.documents.patientPrimaryID.base64String != \"\"\n                //     ) {\n                //       base64DecodeToFile({\n                //         code: records[0][\"patient_code\"],\n                //         file:\n                //           records[0][\"patient_code\"] +\n                //           \"_PrimaryID_\" +\n                //           inputparam.documents.patientPrimaryID.fileExtention,\n                //         base64String:\n                //           inputparam.documents.patientPrimaryID.base64String,\n                //         callBack: function(error, output) {\n                //           if (error) {\n                //             logger.log(\n                //               \"error\",\n                //               \"Patient Primary Id insertion Error \\n %s\",\n                //               JSON.stringify(error)\n                //             );\n                //           }\n                //           debugLog(\n                //             \"Patient Primary ID is created \" +\n                //               JSON.stringify(output)\n                //           );\n                //         }\n                //       });\n                //     }\n                //   }\n\n                //   if (inputparam.documents.patientSecondaryID != null) {\n                //     if (\n                //       inputparam.documents.patientSecondaryID.base64String != \"\"\n                //     ) {\n                //       base64DecodeToFile({\n                //         code: records[0][\"patient_code\"],\n                //         file:\n                //           records[0][\"patient_code\"] +\n                //           \"_SecondaryID_\" +\n                //           inputparam.documents.patientSecondaryID.fileExtention,\n                //         base64String:\n                //           inputparam.documents.patientSecondaryID.base64String,\n                //         callBack: function(error, output) {\n                //           if (error) {\n                //             logger.log(\n                //               \"error\",\n                //               \"Patient Secondary Id insertion Error \\n %s\",\n                //               JSON.stringify(error)\n                //             );\n                //           }\n                //           debugLog(\n                //             \"Patient Secondary ID is created \" +\n                //               JSON.stringify(output)\n                //           );\n                //         }\n                //       });\n                //     }\n                //   }\n                // }\n              }\n              if (typeof callBack == \"function\") {\n                callBack(error, records);\n              }\n            }\n          );\n        }\n      }\n    );\n  } catch (e) {\n    next(e);\n  }\n};\nlet updateData = (dataBase, req, callBack) => {\n  try {\n    let inputparam = extend(patientModel, req.body);\n    dataBase.query(\n      \"UPDATE `hims_f_patient`\\\n  SET  `title_id`=?, `first_name`=?, `middle_name`=?, `last_name`=?, `gender`=?,\\\n  `religion_id`=?, `date_of_birth`=?, `age`=?, `marital_status`=?, `address1`=?, \\\n  `address2`=?, `contact_number`=?, `secondary_contact_number`=?, `email`=?, \\\n  `emergency_contact_name`=?, `emergency_contact_number`=?, `relationship_with_patient`=?,\\\n  `visa_type_id`=?, `nationality_id`=?, `postal_code`=?, `primary_identity_id`=?, \\\n  `primary_id_no`=?, `secondary_identity_id`=?, `secondary_id_no`=?, `photo_file`=?, \\\n  `primary_id_file`=?, `secondary_id_file`=?, `updated_by`=?, `updated_date`=?\\\n  WHERE `hims_d_patient_id`=?;\",\n      [\n        inputparam.title_id,\n        inputparam.first_name,\n        inputparam.middle_name,\n        inputparam.last_name,\n        inputparam.gender,\n        inputparam.religion_id,\n        inputparam.date_of_birth,\n        inputparam.age,\n        inputparam.marital_status,\n        inputparam.address1,\n        inputparam.address2,\n        inputparam.contact_number,\n        inputparam.secondary_contact_number,\n        inputparam.email,\n        inputparam.emergency_contact_name,\n        inputparam.emergency_contact_number,\n        inputparam.relationship_with_patient,\n        inputparam.visa_type_id,\n        inputparam.nationality_id,\n        inputparam.postal_code,\n        inputparam.primary_identity_id,\n        inputparam.primary_id_no,\n        inputparam.secondary_identity_id,\n        inputparam.secondary_id_no,\n        inputparam.photo_file,\n        inputparam.primary_id_file,\n        inputparam.secondary_id_file,\n        inputparam.updated_by,\n        new Date(),\n        inputparam.hims_d_patient_id\n      ],\n      (error, reesult) => {\n        if (typeof callBack == \"function\") callback(error, result);\n      }\n    );\n  } catch (e) {\n    next(e);\n  }\n};\nlet patientSelect = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (errror) {\n        next(error);\n      }\n      selectData(connection, req, (error, result) => {\n        connection.release();\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\nlet patientWhereCondition = {\n  patient_code: \"ALL\",\n  contact_number: \"ALL\",\n  gender: \"ALL\"\n};\n\nlet selectData = (dataBase, req, callBack) => {\n  try {\n    let where = whereCondition(extend(patientWhereCondition, req.query));\n    dataBase.query(\n      \"SELECT `hims_d_patient_id`, `patient_code`, `registration_date`\\\n  , `title_id`, `first_name`, `middle_name`, `last_name`, `gender`, `religion_id`\\\n  , `date_of_birth`, `age`, `marital_status`, `address1`, `address2`, `contact_number`\\\n  , `secondary_contact_number`, `email`, `emergency_contact_name`, `emergency_contact_number`\\\n  , `relationship_with_patient`, `visa_type_id`, `nationality_id`, `postal_code`\\\n  , `primary_identity_id`, `primary_id_no`, `secondary_identity_id`, `secondary_id_no`\\\n  , `photo_file`, `primary_id_file`, `secondary_id_file` FROM `hims_f_patient`\\\n   WHERE `record_status`='A' \" +\n        where.condition,\n      where.values,\n      (error, result) => {\n        if (typeof callBack == \"function\") {\n          callBack(error, result);\n        }\n      }\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addPatientToRegisteration,\n  updatePatientRegistrstion,\n  patientSelect,\n  insertData,\n  updateData,\n  selectData\n};\n"]}