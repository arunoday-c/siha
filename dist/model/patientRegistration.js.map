{"version":3,"sources":["../../src/model/patientRegistration.js"],"names":["addPatientToRegisteration","req","res","next","db","dataBaseNotInitilizedError","getConnection","error","connection","errror","insertData","result","release","records","e","updatePatientRegistrstion","updateData","insertPatientData","inputparam","hims_d_patient_id","patient_code","registration_date","title_id","first_name","middle_name","last_name","gender","religion_id","date_of_birth","age","marital_status","address1","address2","contact_number","secondary_contact_number","email","emergency_contact_name","emergency_contact_number","relationship_with_patient","visa_type_id","nationality_id","postal_code","primary_identity_id","primary_id_no","secondary_identity_id","secondary_id_no","photo_file","primary_id_file","secondary_id_file","created_by","created_date","updated_by","updated_date","city_id","state_id","country_id","documents","body","Date","options","query","full_name","arabic_name","rollback","onFailure","patient_id","insertId","onSuccess","dataBase","callBack","isCommited","patientModel","optionString","reesult","callback","patientSelect","selectData","patientWhereCondition","where","condition","values","module","exports"],"mappings":"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","file":"patientRegistration.js","sourcesContent":["import extend from \"extend\";\nimport { whereCondition, checkIsNull, uploadFile } from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { logger, debugLog, debugFunction } from \"../utils/logging\";\n\nlet addPatientToRegisteration = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (errror) {\n        next(error);\n      }\n      insertData(connection, req, res, (error, result) => {\n        connection.release();\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\nlet updatePatientRegistrstion = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      updateData(connection, req, (error, result) => {\n        connection.release();\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n//Added by noor New Method\n\nlet insertPatientData = (req, res, next) => {\n  try {\n    debugFunction(\"Insert Patient Registration\");\n    let inputparam = extend(\n      {\n        hims_d_patient_id: null,\n        patient_code: null,\n        registration_date: null,\n        title_id: null,\n        first_name: null,\n        middle_name: null,\n        last_name: null,\n        gender: null,\n        religion_id: null,\n        date_of_birth: null,\n        age: null,\n        marital_status: null,\n        address1: null,\n        address2: null,\n        contact_number: null,\n        secondary_contact_number: null,\n        email: null,\n        emergency_contact_name: \"\",\n        emergency_contact_number: \"\",\n        relationship_with_patient: \"\",\n        visa_type_id: null,\n        nationality_id: null,\n        postal_code: null,\n        primary_identity_id: null,\n        primary_id_no: null,\n        secondary_identity_id: \"\",\n        secondary_id_no: \"\",\n        photo_file: \"\",\n        primary_id_file: \"\",\n        secondary_id_file: \"\",\n        created_by: null,\n        created_date: null,\n        updated_by: null,\n        updated_date: null,\n        city_id: null,\n        state_id: null,\n        country_id: null,\n        documents: null\n      },\n      req.body\n    );\n    inputparam.registration_date = new Date();\n\n    let options = req.options;\n\n    let db = options == null ? req.db : options.db;\n\n    db.query(\n      \"INSERT INTO `hims_f_patient` (`patient_code`, `registration_date`\\\n    , `title_id`, `first_name`, `middle_name`, `last_name`, `full_name`, `arabic_name`, `gender`, `religion_id`\\\n    , `date_of_birth`, `age`, `marital_status`, `address1`, `address2`, `contact_number`\\\n    , `secondary_contact_number`, `email`, `emergency_contact_name`, `emergency_contact_number`\\\n    , `relationship_with_patient`, `visa_type_id`, `nationality_id`, `postal_code`\\\n    , `primary_identity_id`, `primary_id_no`, `secondary_identity_id`, `secondary_id_no`\\\n    , `photo_file`, `primary_id_file`, `secondary_id_file`, `created_by`, `created_date`\\\n    ,`city_id`,`state_id`,`country_id`)\\\n     VALUES (?,?,?,?, ?, ?, ?, ?, ?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?);\",\n      [\n        inputparam.patient_code,\n        inputparam.registration_date,\n        inputparam.title_id,\n        inputparam.first_name,\n        inputparam.middle_name,\n        inputparam.last_name,\n        inputparam.full_name,\n        inputparam.arabic_name,\n        inputparam.gender,\n        inputparam.religion_id,\n        inputparam.date_of_birth,\n        inputparam.age,\n        inputparam.marital_status,\n        inputparam.address1,\n        inputparam.address2,\n        inputparam.contact_number,\n        inputparam.secondary_contact_number,\n        inputparam.email,\n        inputparam.emergency_contact_name,\n        inputparam.emergency_contact_number,\n        inputparam.relationship_with_patient,\n        inputparam.visa_type_id,\n        inputparam.nationality_id,\n        inputparam.postal_code,\n        inputparam.primary_identity_id,\n        inputparam.primary_id_no,\n        inputparam.secondary_identity_id,\n        inputparam.secondary_id_no,\n        inputparam.photo_file,\n        inputparam.primary_id_file,\n        inputparam.secondary_id_file,\n        inputparam.created_by,\n        new Date(),\n        inputparam.city_id,\n        inputparam.state_id,\n        inputparam.country_id\n      ],\n      (error, result) => {\n        if (error) {\n          if (options == null) {\n            db.rollback(() => {\n              next(error);\n            });\n          } else {\n            options.onFailure(error);\n          }\n        } else {\n          inputparam.patient_id = result.insertId;\n          req.patient_id = result.insertId;\n          if (options != null) options.onSuccess(result);\n          else {\n            req.records = result;\n            next();\n          }\n\n          //     let optionString =\n          //       \"SELECT `algaeh_d_app_config_id`, `param_name`, `param_value` FROM `algaeh_d_app_config` WHERE `record_status` ='A' AND \\\n          //      param_category='DOCUMENTS' AND param_name='PATIENT_DOC_PATH';\";\n          //     db.query(\n          //       \"SELECT `hims_d_patient_id`, `patient_code`, `registration_date`\\\n          // , `title_id`, `first_name`, `middle_name`, `last_name`, `full_name`, `arabic_name`, `gender`, `religion_id`\\\n          // , `date_of_birth`, `age`, `marital_status`, `address1`, `address2`, `contact_number`\\\n          // , `secondary_contact_number`, `email`, `emergency_contact_name`, `emergency_contact_number`\\\n          // , `relationship_with_patient`, `visa_type_id`, `nationality_id`, `postal_code`\\\n          // , `primary_identity_id`, `primary_id_no`, `secondary_identity_id`, `secondary_id_no`\\\n          // , `photo_file`, `primary_id_file`, `secondary_id_file` FROM `hims_f_patient`\\\n          //  WHERE `record_status`='A' AND hims_d_patient_id=? ;\" +\n          //         optionString,\n          //       [inputparam.patient_id],\n          //       (error, records) => {\n          //         if (error) {\n          //           if (options != null) options.omFailure(error);\n          //           else {\n          //             db.rollback(() => {\n          //               next(error);\n          //             });\n          //           }\n          //         }\n          //         req[\"folderPath\"] =\n          //           records[1][0][\"param_value\"] +\n          //           \"/\" +\n          //           records[0][0][\"patient_code\"];\n          //         req[\"fileName\"] = records[0][0][\"patient_code\"];\n          //         if (options != null) {\n          //           options.onSuccess(records);\n          //         } else {\n          //           req.records = records;\n          //           next();\n          //         }\n          //       }\n          //     );\n        }\n      }\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\n//End New Method\n\nlet insertData = (dataBase, req, res, callBack, isCommited, next) => {\n  let patientModel = {\n    hims_d_patient_id: null,\n    patient_code: null,\n    registration_date: null,\n    title_id: null,\n    first_name: null,\n    middle_name: null,\n    last_name: null,\n    gender: null,\n    religion_id: null,\n    date_of_birth: null,\n    age: null,\n    marital_status: null,\n    address1: null,\n    address2: null,\n    contact_number: null,\n    secondary_contact_number: null,\n    email: null,\n    emergency_contact_name: \"\",\n    emergency_contact_number: \"\",\n    relationship_with_patient: \"\",\n    visa_type_id: null,\n    nationality_id: null,\n    postal_code: null,\n    primary_identity_id: null,\n    primary_id_no: null,\n    secondary_identity_id: \"\",\n    secondary_id_no: \"\",\n    photo_file: \"\",\n    primary_id_file: \"\",\n    secondary_id_file: \"\",\n    created_by: null,\n    created_date: null,\n    updated_by: null,\n    updated_date: null,\n    city_id: null,\n    state_id: null,\n    country_id: null,\n    documents: null /*{\n                        patientImage:{base64String:\"\",fileExtention:\"\"},\n                        patientPrimaryID:{base64String:\"\",fileExtention:\"\"},\n                        patientSecondaryID:{base64String:\"\",fileExtention:\"\"}\n                      }\n    */\n  };\n  isCommited = isCommited || false;\n  try {\n    debugFunction(\"Insert Patient Registration\");\n    let inputparam = extend(patientModel, req.body);\n    inputparam.registration_date = new Date();\n    dataBase.query(\n      \"INSERT INTO `hims_f_patient` (`patient_code`, `registration_date`\\\n    , `title_id`, `first_name`, `middle_name`, `last_name`, `full_name`, `arabic_name`, `gender`, `religion_id`\\\n    , `date_of_birth`, `age`, `marital_status`, `address1`, `address2`, `contact_number`\\\n    , `secondary_contact_number`, `email`, `emergency_contact_name`, `emergency_contact_number`\\\n    , `relationship_with_patient`, `visa_type_id`, `nationality_id`, `postal_code`\\\n    , `primary_identity_id`, `primary_id_no`, `secondary_identity_id`, `secondary_id_no`\\\n    , `photo_file`, `primary_id_file`, `secondary_id_file`, `created_by`, `created_date`\\\n    ,`city_id`,`state_id`,`country_id`)\\\n     VALUES (?,?,?,?, ?, ?, ?, ?, ?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?);\",\n      [\n        inputparam.patient_code,\n        inputparam.registration_date,\n        inputparam.title_id,\n        inputparam.first_name,\n        inputparam.middle_name,\n        inputparam.last_name,\n        inputparam.full_name,\n        inputparam.arabic_name,\n        inputparam.gender,\n        inputparam.religion_id,\n        inputparam.date_of_birth,\n        inputparam.age,\n        inputparam.marital_status,\n        inputparam.address1,\n        inputparam.address2,\n        inputparam.contact_number,\n        inputparam.secondary_contact_number,\n        inputparam.email,\n        inputparam.emergency_contact_name,\n        inputparam.emergency_contact_number,\n        inputparam.relationship_with_patient,\n        // checkIsNull(inputparam.contact_number, 0),\n        // checkIsNull(inputparam.secondary_contact_number, 0),\n        // checkIsNull(inputparam.email, \"\"),\n        // checkIsNull(inputparam.emergency_contact_name, \"\"),\n        // checkIsNull(inputparam.emergency_contact_number, 0),\n        // checkIsNull(inputparam.relationship_with_patient, \"\"),\n        inputparam.visa_type_id,\n        inputparam.nationality_id,\n        inputparam.postal_code,\n        inputparam.primary_identity_id,\n        inputparam.primary_id_no,\n        inputparam.secondary_identity_id,\n        inputparam.secondary_id_no,\n        inputparam.photo_file,\n        inputparam.primary_id_file,\n        inputparam.secondary_id_file,\n        // checkIsNull(inputparam.secondary_identity_id, 1),\n        // checkIsNull(inputparam.secondary_id_no, \"\"),\n        // checkIsNull(inputparam.photo_file, \"\"),\n        // checkIsNull(inputparam.primary_id_file, \"\"),\n        // checkIsNull(inputparam.secondary_id_file, \"\"),\n        inputparam.created_by,\n        new Date(),\n        inputparam.city_id,\n        inputparam.state_id,\n        inputparam.country_id\n      ],\n      (error, result) => {\n        debugLog(\"Insert Query executed\");\n        if (error) {\n          if (isCommited) {\n            dataBase.rollback(() => {\n              next(error);\n            });\n          } else {\n            next(error);\n          }\n        }\n        if (result) {\n          let insertId = result.insertId;\n          debugLog(\"insertId : \" + insertId);\n          inputparam.patient_id = insertId;\n          let optionString =\n            \"SELECT `algaeh_d_app_config_id`, `param_name`, `param_value` FROM `algaeh_d_app_config` WHERE `record_status` ='A' AND \\\n             param_category='DOCUMENTS' AND param_name='PATIENT_DOC_PATH';\";\n          dataBase.query(\n            \"SELECT `hims_d_patient_id`, `patient_code`, `registration_date`\\\n      , `title_id`, `first_name`, `middle_name`, `last_name`, `full_name`, `arabic_name`, `gender`, `religion_id`\\\n      , `date_of_birth`, `age`, `marital_status`, `address1`, `address2`, `contact_number`\\\n      , `secondary_contact_number`, `email`, `emergency_contact_name`, `emergency_contact_number`\\\n      , `relationship_with_patient`, `visa_type_id`, `nationality_id`, `postal_code`\\\n      , `primary_identity_id`, `primary_id_no`, `secondary_identity_id`, `secondary_id_no`\\\n      , `photo_file`, `primary_id_file`, `secondary_id_file` FROM `hims_f_patient`\\\n       WHERE `record_status`='A' AND hims_d_patient_id=? ;\" +\n              optionString,\n            [insertId],\n            (error, records) => {\n              if (!error) {\n                req[\"folderPath\"] =\n                  records[1][0][\"param_value\"] +\n                  \"/\" +\n                  records[0][0][\"patient_code\"];\n                req[\"fileName\"] = records[0][0][\"patient_code\"];\n              }\n              if (typeof callBack == \"function\") {\n                callBack(error, records);\n              }\n            }\n          );\n        }\n      }\n    );\n  } catch (e) {\n    next(e);\n  }\n};\nlet updateData = (dataBase, req, callBack) => {\n  let patientModel = {\n    hims_d_patient_id: null,\n    patient_code: null,\n    registration_date: null,\n    title_id: null,\n    first_name: null,\n    middle_name: null,\n    last_name: null,\n    gender: null,\n    religion_id: null,\n    date_of_birth: null,\n    age: null,\n    marital_status: null,\n    address1: null,\n    address2: null,\n    contact_number: null,\n    secondary_contact_number: null,\n    email: null,\n    emergency_contact_name: \"\",\n    emergency_contact_number: \"\",\n    relationship_with_patient: \"\",\n    visa_type_id: null,\n    nationality_id: null,\n    postal_code: null,\n    primary_identity_id: null,\n    primary_id_no: null,\n    secondary_identity_id: \"\",\n    secondary_id_no: \"\",\n    photo_file: \"\",\n    primary_id_file: \"\",\n    secondary_id_file: \"\",\n    created_by: null,\n    created_date: null,\n    updated_by: null,\n    updated_date: null,\n    city_id: null,\n    state_id: null,\n    country_id: null,\n    documents: null /*{\n                        patientImage:{base64String:\"\",fileExtention:\"\"},\n                        patientPrimaryID:{base64String:\"\",fileExtention:\"\"},\n                        patientSecondaryID:{base64String:\"\",fileExtention:\"\"}\n                      }\n    */\n  };\n\n  try {\n    let inputparam = extend(patientModel, req.body);\n    dataBase.query(\n      \"UPDATE `hims_f_patient`\\\n  SET  `title_id`=?, `first_name`=?, `middle_name`=?, `last_name`=?, `full_name`=?, `arabic_name`=?, \\\n  `gender`=?, `religion_id`=?, `date_of_birth`=?, `age`=?, `marital_status`=?, `address1`=?, \\\n  `address2`=?, `contact_number`=?, `secondary_contact_number`=?, `email`=?, \\\n  `emergency_contact_name`=?, `emergency_contact_number`=?, `relationship_with_patient`=?,\\\n  `visa_type_id`=?, `nationality_id`=?, `postal_code`=?, `primary_identity_id`=?, \\\n  `primary_id_no`=?, `secondary_identity_id`=?, `secondary_id_no`=?, `photo_file`=?, \\\n  `primary_id_file`=?, `secondary_id_file`=?, `updated_by`=?, `updated_date`=?\\\n  WHERE `hims_d_patient_id`=?;\",\n      [\n        inputparam.title_id,\n        inputparam.first_name,\n        inputparam.middle_name,\n        inputparam.last_name,\n        inputparam.full_name,\n        inputparam.arabic_name,\n        inputparam.gender,\n        inputparam.religion_id,\n        inputparam.date_of_birth,\n        inputparam.age,\n        inputparam.marital_status,\n        inputparam.address1,\n        inputparam.address2,\n        inputparam.contact_number,\n        inputparam.secondary_contact_number,\n        inputparam.email,\n        inputparam.emergency_contact_name,\n        inputparam.emergency_contact_number,\n        inputparam.relationship_with_patient,\n        inputparam.visa_type_id,\n        inputparam.nationality_id,\n        inputparam.postal_code,\n        inputparam.primary_identity_id,\n        inputparam.primary_id_no,\n        inputparam.secondary_identity_id,\n        inputparam.secondary_id_no,\n        inputparam.photo_file,\n        inputparam.primary_id_file,\n        inputparam.secondary_id_file,\n        inputparam.updated_by,\n        new Date(),\n        inputparam.hims_d_patient_id\n      ],\n      (error, reesult) => {\n        if (typeof callBack == \"function\") callback(error, result);\n      }\n    );\n  } catch (e) {\n    next(e);\n  }\n};\nlet patientSelect = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (errror) {\n        next(error);\n      }\n      selectData(connection, req, (error, result) => {\n        connection.release();\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet selectData = (dataBase, req, callBack) => {\n  let patientWhereCondition = {\n    patient_code: \"ALL\",\n    contact_number: \"ALL\",\n    gender: \"ALL\"\n  };\n\n  try {\n    let where = whereCondition(extend(patientWhereCondition, req.query));\n    dataBase.query(\n      \"SELECT `hims_d_patient_id`, `patient_code`, `registration_date`\\\n  , `title_id`, `first_name`, `middle_name`, `last_name`, `gender`, `religion_id`\\\n  , `date_of_birth`, `age`, `marital_status`, `address1`, `address2`, `contact_number`\\\n  , `secondary_contact_number`, `email`, `emergency_contact_name`, `emergency_contact_number`\\\n  , `relationship_with_patient`, `visa_type_id`, `nationality_id`, `postal_code`\\\n  , `primary_identity_id`, `primary_id_no`, `secondary_identity_id`, `secondary_id_no`\\\n  , `photo_file`, `primary_id_file`, `secondary_id_file`,`city_id`,`state_id`,`country_id` \\\n   FROM `hims_f_patient`\\\n   WHERE `record_status`='A' \" +\n        where.condition,\n      where.values,\n      (error, result) => {\n        if (typeof callBack == \"function\") {\n          callBack(error, result);\n        }\n      }\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addPatientToRegisteration,\n  updatePatientRegistrstion,\n  patientSelect,\n  insertData,\n  updateData,\n  selectData,\n  insertPatientData\n};\n"]}