{"version":3,"sources":["../../src/model/mastersUpdate.js"],"names":["modelAppGen","hims_f_app_numgen_id","numgen_code","module_desc","prefix","intermediate_series","postfix","length","increment_by","numgen_seperator","postfix_start","postfix_end","current_num","pervious_num","created_by","created_date","updated_by","updated_date","record_status","insertToAppgen","req","res","next","db","dataBaseNotInitilizedError","getConnection","error","connection","inputParam","body","query","Date","result","records","e","updateToAppgen","visaType","hims_d_visa_type_id","visa_type_code","visa_type","visa_desc","visa_status","addVisa","updateVisa","arabic_visa_type","deleteVisa","tableName","id","values","module","exports"],"mappings":"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","file":"mastersUpdate.js","sourcesContent":["import { runningNumber, releaseDBConnection, deleteRecord } from \"../utils\";\nimport extend from \"extend\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { deleteFromCache } from \"../utils/caching\";\n\nlet modelAppGen = {\n  hims_f_app_numgen_id: null,\n  numgen_code: null,\n  module_desc: null,\n  prefix: null,\n  intermediate_series: null,\n  postfix: null,\n  length: null,\n  increment_by: null,\n  numgen_seperator: null,\n  postfix_start: null,\n  postfix_end: null,\n  current_num: null,\n  pervious_num: null,\n  created_by: null,\n  created_date: null,\n  updated_by: null,\n  updated_date: null,\n  record_status: null\n};\nlet insertToAppgen = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let inputParam = extend(modelAppGen, req.body);\n      connection.query(\n        \"INSERT INTO `hims_f_app_numgen` (`numgen_code`, `module_desc`\\\n      , `prefix`, `intermediate_series`, `postfix`, `length`, `increment_by`\\\n      , `numgen_seperator`, `postfix_start`, `postfix_end`, `current_num`\\\n      , `pervious_num`, `created_by`, `created_date`)\\\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\",\n        [\n          inputParam.numgen_code,\n          inputParam.module_desc,\n          inputParam.prefix,\n          inputParam.intermediate_series,\n          inputParam.postfix,\n          inputParam.length,\n          inputParam.increment_by,\n          inputParam.numgen_seperator,\n          inputParam.postfix_start,\n          inputParam.postfix_end,\n          inputParam.current_num,\n          inputParam.pervious_num,\n          inputParam.created_by,\n          new Date()\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\nlet updateToAppgen = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let inputParam = extend(modelAppGen, req.body);\n      connection.query(\n        \"UPDATE `hims_f_app_numgen` \\\n          SET  `numgen_code`=?, `module_desc`=?, `prefix`=?, \\\n          `intermediate_series`=?, `postfix`=?, `length`=?, `increment_by`=?,\\\n          `numgen_seperator`=?, `postfix_start`=?, `postfix_end`=?, \\\n          `current_num`=?, `pervious_num`=?,  `updated_by`=?, `updated_date`=? \\\n          WHERE  `record_status`='A' AND `hims_f_app_numgen_id`=?\",\n        [\n          inputParam.numgen_code,\n          inputParam.module_desc,\n          inputParam.prefix,\n          inputParam.intermediate_series,\n          inputParam.postfix,\n          inputParam.length,\n          inputParam.increment_by,\n          inputParam.numgen_seperator,\n          inputParam.postfix_start,\n          inputParam.postfix_end,\n          inputParam.current_num,\n          inputParam.pervious_num,\n          inputParam.updated_by,\n          new Date(),\n          inputParam.hims_f_app_numgen_id\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet visaType = {\n  hims_d_visa_type_id: null,\n  visa_type_code: null,\n  visa_type: null,\n  visa_desc: null,\n  created_by: null,\n  created_date: null,\n  updated_by: null,\n  updated_date: null,\n  record_status: null,\n  visa_status: \"A\"\n};\nlet addVisa = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let inputParam = extend(visaType, req.body);\n      connection.query(\n        \"INSERT INTO `hims_d_visa_type` ( `visa_type_code`, `visa_type`, `visa_desc`, `created_by`, `created_date`,`visa_status`) \\\n     VALUES (?, ?, ?, ?, ?,?)\",\n        [\n          inputParam.visa_type_code,\n          inputParam.visa_type,\n          inputParam.visa_desc,\n          inputParam.created_by,\n          new Date(),\n          inputParam.visa_status\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n\n      deleteFromCache(\"visa\");\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet updateVisa = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let inputParam = extend(visaType, req.body);\n      connection.query(\n        \"UPDATE `hims_d_visa_type` \\\n        SET `visa_type`=?, `arabic_visa_type` = ?, `updated_by`=?, `updated_date`=? \\\n        ,`visa_status` =? \\\n        WHERE `record_status`='A' and `hims_d_visa_type_id`=?\",\n        [\n          inputParam.visa_type,\n          inputParam.arabic_visa_type,\n          inputParam.updated_by,\n          new Date(),\n          inputParam.visa_status,\n          inputParam.hims_d_visa_type_id\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n      deleteFromCache(\"visa\");\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet deleteVisa = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    deleteRecord(\n      {\n        db: req.db,\n        tableName: \"hims_d_visa_type\",\n        id: req.body.hims_d_visa_type_id,\n        query:\n          \"UPDATE hims_d_visa_type SET  record_status='I', \\\n          updated_by=?,updated_date=? WHERE hims_d_visa_type_id=?\",\n        values: [req.body.updated_by, new Date(), req.body.hims_d_visa_type_id]\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      }\n    );\n    deleteFromCache(\"visa\");\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  insertToAppgen,\n  updateToAppgen,\n  updateVisa,\n  addVisa,\n  deleteVisa\n};\n"]}