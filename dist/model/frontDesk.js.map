{"version":3,"sources":["../../src/model/frontDesk.js"],"names":["addFrontDesk","req","res","next","db","dataBaseNotInitilizedError","query","JSON","parse","body","getConnection","error","connection","beginTransaction","rollback","resolve","reject","module_desc","onFailure","onSuccess","result","then","patients","output","Where","w","FirstOrDefault","patient_code","completeNumber","options","visit","patientInsertedRecord","visit_code","visit_id","visitData","patient_visit_id","insured","data","bill","bill_number","billing_header_id","billOutput","insertId","receipt","receipt_number","records","commit","encounterResult","catch","e","selectFrontDesk","selectWhere","hims_d_patient_id","where","condition","values","showresult","length","resultFields","patientRegistration","visitDetails","updateFrontDesk","patResults","completeNum","resultdata","module","exports"],"mappings":";;AAAA;;AACA;;AACA;;AAMA;;;;AACA;;AAQA;;AAIA;;;;AACA;;AACA;;;;AACA;;AACA;;;;AACA;AACA,IAAIA,eAAe,SAAfA,YAAe,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACrC,8BAAc,cAAd;AACA,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAK,qBAAWE,0BAAX,EAAL;AACD;AACD,QAAID,KAAKH,IAAIG,EAAb;AACA,QAAIH,IAAIK,KAAJ,CAAU,MAAV,KAAqB,IAAzB,EAA+B;AAC7BL,UAAIK,KAAJ,GAAYC,KAAKC,KAAL,CAAWP,IAAIK,KAAJ,CAAU,MAAV,CAAX,CAAZ;AACAL,UAAIQ,IAAJ,GAAWR,IAAIK,KAAf;AACD;;AAEDF,OAAGM,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTR,aAAKQ,KAAL;AACD;AACDC,iBAAWC,gBAAX,CAA4B,iBAAS;AACnC,YAAIF,KAAJ,EAAW;AACTC,qBAAWE,QAAX,CAAoB,YAAM;AACxB,4CAAoBV,EAApB,EAAwBQ,UAAxB;AACAT,iBAAKQ,KAAL;AACD,WAHD;AAID;AACD,eAAO,uBAAY,UAACI,OAAD,EAAUC,MAAV,EAAqB;AACtC,uCAAiB;AACfZ,gBAAIQ,UADW;AAEfK,yBAAa,CAAC,UAAD,EAAa,WAAb,EAA0B,UAA1B,EAAsC,SAAtC,CAFE;AAGfC,uBAAW,0BAAS;AAClBF,qBAAOL,KAAP;AACD,aALc;AAMfQ,uBAAW,2BAAU;AACnBJ,sBAAQK,MAAR;AACD;AARc,WAAjB;AAUD,SAXM,EAYJC,IAZI,CAYC,kBAAU;AACd;AACA,cAAIC,WAAW,mBAASC,MAAT,EACZC,KADY,CACN;AAAA,mBAAKC,EAAER,WAAF,IAAiB,UAAtB;AAAA,WADM,EAEZS,cAFY,EAAf;;AAIAzB,cAAIK,KAAJ,CAAUqB,YAAV,GAAyBL,SAASM,cAAlC;AACA3B,cAAIQ,IAAJ,CAASkB,YAAT,GAAwBL,SAASM,cAAjC;AACA,iBAAO,uBAAY,UAACb,OAAD,EAAUC,MAAV,EAAqB;AACtCf,gBAAI4B,OAAJ,GAAc;AACZzB,kBAAIQ,UADQ;AAEZM,yBAAW,0BAAS;AAClBF,uBAAOL,KAAP;AACD,eAJW;AAKZQ,yBAAW,2BAAU;AACnBJ,wBAAQK,MAAR;AACD;AAPW,aAAd;AASA,wDAAkBnB,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B;AACD,WAXM,EAYJkB,IAZI,CAYC,iCAAyB;AAC7B;AACA,gBAAIS,QAAQ,mBAASP,MAAT,EACTC,KADS,CACH;AAAA,qBAAKC,EAAER,WAAF,IAAiB,WAAtB;AAAA,aADG,EAETS,cAFS,EAAZ;AAGA,mCAAS,wBAAT,EAAmCK,qBAAnC;;AAEA9B,gBAAIK,KAAJ,CAAU0B,UAAV,GAAuBF,MAAMF,cAA7B;AACA3B,gBAAIQ,IAAJ,CAASuB,UAAT,GAAsBF,MAAMF,cAA5B;AACA,mBAAO3B,IAAI,SAAJ,EAAe,WAAf,CAAP;AACA,mBAAOA,IAAI,SAAJ,EAAe,WAAf,CAAP;AACA;AACA,mBAAO,uBAAY,UAACc,OAAD,EAAUC,MAAV,EAAqB;AACtC,qCAAS,cAAT;AACAf,kBAAI4B,OAAJ,CAAYX,SAAZ,GAAwB,iBAAS;AAC/BF,uBAAOL,KAAP;AACD,eAFD;AAGAV,kBAAI4B,OAAJ,CAAYV,SAAZ,GAAwB,kBAAU;AAChCJ,wBAAQK,MAAR;AACD,eAFD;AAGA;AACA,iDAAuBnB,GAAvB,EAA4BC,GAA5B,EAAiCC,IAAjC;AACD,aAVM,EAUJkB,IAVI,CAUC,qBAAa;AACnBpB,kBAAIK,KAAJ,CAAU2B,QAAV,GAAqBC,UAAU,UAAV,CAArB;AACAjC,kBAAIgC,QAAJ,GAAeC,UAAU,UAAV,CAAf;AACAjC,kBAAIQ,IAAJ,CAASwB,QAAT,GAAoBC,UAAU,UAAV,CAApB;AACAjC,kBAAIQ,IAAJ,CAAS0B,gBAAT,GAA4BD,UAAU,UAAV,CAA5B;AACA,qCAAS,YAAT,EAAuBA,SAAvB;AACA;AACA,qBAAO,uBAAY,UAACnB,OAAD,EAAUC,MAAV,EAAqB;AACtC,uCAAS,kBAAT;AACA,oBAAIf,IAAIQ,IAAJ,CAAS2B,OAAT,IAAoB,GAAxB,EAA6B;AAC3B,yBAAOnC,IAAI,SAAJ,EAAe,WAAf,CAAP;AACA,yBAAOA,IAAI,SAAJ,EAAe,WAAf,CAAP;AACAA,sBAAI4B,OAAJ,CAAYX,SAAZ,GAAwB,iBAAS;AAC/BF,2BAAOL,KAAP;AACD,mBAFD;AAGAV,sBAAI4B,OAAJ,CAAYV,SAAZ,GAAwB,gBAAQ;AAC9BJ,4BAAQsB,IAAR;AACD,mBAFD;AAGA;AACA,0DAAwBpC,GAAxB,EAA6BC,GAA7B,EAAkCC,IAAlC;AACD,iBAXD,MAWO;AACLY,0BAAQ,EAAR;AACD;AACF,eAhBM,EAgBJM,IAhBI,CAgBC,0BAAkB;AACxB,uCAAS,8BAAT,EAAyCE,MAAzC;AACA,oBAAIe,OAAO,mBAASf,MAAT,EACRC,KADQ,CACF;AAAA,yBAAKC,EAAER,WAAF,IAAiB,UAAtB;AAAA,iBADE,EAERS,cAFQ,EAAX;AAGAzB,oBAAIsC,WAAJ,GAAkBD,KAAKV,cAAvB;AACA3B,oBAAIQ,IAAJ,CAAS8B,WAAT,GAAuBD,KAAKV,cAA5B;AACA;AACA,uBAAO,uBAAY,UAACb,OAAD,EAAUC,MAAV,EAAqB;AACtC,yCAAS,gBAAT;AACA,yBAAOf,IAAI,SAAJ,EAAe,WAAf,CAAP;AACA,yBAAOA,IAAI,SAAJ,EAAe,WAAf,CAAP;AACAA,sBAAI4B,OAAJ,CAAYX,SAAZ,GAAwB,iBAAS;AAC/BF,2BAAOL,KAAP;AACD,mBAFD;AAGAV,sBAAI4B,OAAJ,CAAYV,SAAZ,GAAwB,gBAAQ;AAC9BJ,4BAAQsB,IAAR;AACD,mBAFD;;AAIA,4CAAYpC,GAAZ,EAAiBC,GAAjB,EAAsBC,IAAtB;AACD,iBAZM,EAYJkB,IAZI,CAYC,sBAAc;AACpBpB,sBAAIK,KAAJ,CAAUkC,iBAAV,GAA8BC,WAAWC,QAAzC;AACAzC,sBAAIQ,IAAJ,CAAS+B,iBAAT,GAA6BC,WAAWC,QAAxC;;AAEA,sBAAIC,UAAU,mBAASpB,MAAT,EACXC,KADW,CACL;AAAA,2BAAKC,EAAER,WAAF,IAAiB,SAAtB;AAAA,mBADK,EAEXS,cAFW,EAAd;AAGAzB,sBAAIQ,IAAJ,CAASmC,cAAT,GAA0BD,QAAQf,cAAlC;AACA,yBAAO,uBAAY,UAACb,OAAD,EAAUC,MAAV,EAAqB;AACtC,2CAAS,iBAAT;AACA,2BAAOf,IAAI,SAAJ,EAAe,WAAf,CAAP;AACA,2BAAOA,IAAI,SAAJ,EAAe,WAAf,CAAP;AACAA,wBAAI4B,OAAJ,CAAYX,SAAZ,GAAwB,iBAAS;AAC/BF,6BAAOL,KAAP;AACD,qBAFD;AAGAV,wBAAI4B,OAAJ,CAAYV,SAAZ,GAAwB,mBAAW;AACjCJ,8BAAQ8B,OAAR;AACD,qBAFD;AAGA,iDAAe5C,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB;AACD,mBAXM,EAWJkB,IAXI,CAWC,mBAAW;AACjB,2BAAO,uBAAY,UAACN,OAAD,EAAUC,MAAV,EAAqB;AACtC,6CAAS,gBAAT;AACA,6BAAOf,IAAI,SAAJ,EAAe,WAAf,CAAP;AACA,6BAAOA,IAAI,SAAJ,EAAe,WAAf,CAAP;AACAA,0BAAI4B,OAAJ,CAAYX,SAAZ,GAAwB,iBAAS;AAC/BF,+BAAOL,KAAP;AACD,uBAFD;AAGAV,0BAAI4B,OAAJ,CAAYV,SAAZ,GAAwB,mBAAW;AACjCJ,gCAAQ8B,OAAR;AACD,uBAFD;AAGA,4DAAwB5C,GAAxB,EAA6BC,GAA7B,EAAkCC,IAAlC;AACD,qBAXM,EAWJkB,IAXI,CAWC,2BAAmB;AACzBT,iCAAWkC,MAAX,CAAkB,iBAAS;AACzB,4BAAInC,KAAJ,EAAW;AACT,0DAAoBP,EAApB,EAAwBQ,UAAxB;AACAT,+BAAKQ,KAAL;AACD;AACDV,4BAAI4C,OAAJ,GAAcE,eAAd;AACA5C;AACD,uBAPD;AAQD,qBApBM,CAAP;AAqBD,mBAjCM,CAAP;AAkCD,iBAtDM,CAAP;AAuDD,eA/EM,CAAP;AAgFD,aAjGM,CAAP;AAkGD,WA1HI,EA2HJ6C,KA3HI,CA2HE,iBAAS;AACdpC,uBAAWE,QAAX,CAAoB,YAAM;AACxB,8CAAoBV,EAApB,EAAwBQ,UAAxB;AACAT,mBAAKQ,KAAL;AACD,aAHD;AAID,WAhII,CAAP;AAiID,SArJI,EAsJJqC,KAtJI,CAsJE,iBAAS;AACdpC,qBAAWE,QAAX,CAAoB,YAAM;AACxB,4CAAoBV,EAApB,EAAwBQ,UAAxB;AACAT,iBAAKQ,KAAL;AACD,WAHD;AAID,SA3JI,CAAP;AA4JD,OAnKD;AAoKA;AACD,KAzKD;AA0KD,GApLD,CAoLE,OAAOsC,CAAP,EAAU;AACV9C,SAAK8C,CAAL;AACD;AACF,CAzLD;;AA2LA,IAAIC,kBAAkB,SAAlBA,eAAkB,CAACjD,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxC,MAAIgD,cAAc;AAChBxB,kBAAc,KADE;AAEhByB,uBAAmB;AAFH,GAAlB;;AAKA,MAAI;AACF,QAAInD,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAK,qBAAWE,0BAAX,EAAL;AACD;AACD,QAAID,KAAKH,IAAIG,EAAb;AACAA,OAAGM,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTR,aAAKQ,KAAL;AACD;AACD,UAAI0C,QAAQ,2BAAe,sBAAOF,WAAP,EAAoBlD,IAAIK,KAAxB,CAAf,CAAZ;AACAM,iBAAWN,KAAX,CACE;;;;;;;;sCAAA,GASE+C,MAAMC,SAVV,EAWED,MAAME,MAXR,EAYE,UAAC5C,KAAD,EAAQS,MAAR,EAAmB;AACjB,YAAIT,KAAJ,EAAW;AACT,0CAAoBP,EAApB,EAAwBQ,UAAxB;AACAT,eAAKQ,KAAL;AACD;AACD,YAAI6C,mBAAJ;AACA,YAAIpC,OAAOqC,MAAP,IAAiB,CAArB,EAAwB;AACtB,cAAIL,oBAAoBhC,OAAO,CAAP,EAAU,mBAAV,CAAxB;AACAR,qBAAWN,KAAX,CACE;;;;;iEADF,EAOE,CAAC8C,iBAAD,CAPF,EAQE,UAACzC,KAAD,EAAQ+C,YAAR,EAAyB;AACvB,gBAAI/C,KAAJ,EAAW;AACT,8CAAoBP,EAApB,EAAwBQ,UAAxB;AACAT,mBAAKQ,KAAL;AACD;AACD6C,yBAAa;AACXG,mCAAqBvC,OAAO,CAAP,CADV;AAEXwC,4BAAcF;AAFH,aAAb;AAIAzD,gBAAI4C,OAAJ,GAAcW,UAAd;AACArD;AACD,WAnBH;AAqBD,SAvBD,MAuBO;AACLF,cAAI4C,OAAJ,GAAcW,UAAd;AACArD;AACD;AACF,OA7CH;AA+CD,KApDD;AAqDD,GA1DD,CA0DE,OAAO8C,CAAP,EAAU;AACV9C,SAAK8C,CAAL;AACD;AACF,CAnED;;AAqEA;AACA,IAAIY,kBAAkB,SAAlBA,eAAkB,CAAC5D,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxC,8BAAc,iBAAd;AACA,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAK,qBAAWE,0BAAX,EAAL;AACD;AACD,QAAID,KAAKH,IAAIG,EAAb;AACA,QAAIH,IAAIK,KAAJ,CAAU,MAAV,KAAqB,IAAzB,EAA+B;AAC7BL,UAAIK,KAAJ,GAAYC,KAAKC,KAAL,CAAWP,IAAIK,KAAJ,CAAU,MAAV,CAAX,CAAZ;AACAL,UAAIQ,IAAJ,GAAWR,IAAIK,KAAf;AACD;;AAEDF,OAAGM,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTR,aAAKQ,KAAL;AACD;AACDC,iBAAWC,gBAAX,CAA4B,iBAAS;AACnC,YAAIF,KAAJ,EAAW;AACTC,qBAAWE,QAAX,CAAoB,YAAM;AACxB,4CAAoBV,EAApB,EAAwBQ,UAAxB;AACAT,iBAAKQ,KAAL;AACD,WAHD;AAID;AACD;;AAEA;AACA;AACA,kCACEV,IAAIG,EADN,EAEE,CAFF,EAGE,cAHF,EAIE,UAACO,KAAD,EAAQmD,UAAR,EAAoBC,WAApB,EAAoC;AAClC,cAAIpD,KAAJ,EAAW;AACTC,uBAAWE,QAAX,CAAoB,YAAM;AACxB,8CAAoBV,EAApB,EAAwBQ,UAAxB;AACAT,mBAAKQ,KAAL;AACD,aAHD;AAID;AACDV,cAAIK,KAAJ,CAAU0B,UAAV,GAAuB+B,WAAvB;AACA9D,cAAIQ,IAAJ,CAASuB,UAAT,GAAsB+B,WAAtB;AACA,iCAAS,2BAA2BA,WAApC;;AAEA;AACA,sCACEnD,UADF,EAEEX,GAFF,EAGEC,GAHF,EAIE,UAACS,KAAD,EAAQqD,UAAR,EAAuB;AACrB,gBAAIrD,KAAJ,EAAW;AACTC,yBAAWE,QAAX,CAAoB,YAAM;AACxB,gDAAoBV,EAApB,EAAwBQ,UAAxB;AACAT,qBAAKQ,KAAL;AACD,eAHD;AAID;;AAED;AACA;AACA,gBAAIqD,cAAc,IAAd,IAAsBA,WAAWP,MAAX,IAAqB,CAA/C,EAAkD;AAChDxD,kBAAIK,KAAJ,CAAU2B,QAAV,GAAqB+B,WAAW,UAAX,CAArB;AACA/D,kBAAIQ,IAAJ,CAASwB,QAAT,GAAoB+B,WAAW,UAAX,CAApB;AACA/D,kBAAIQ,IAAJ,CAAS0B,gBAAT,GAA4B6B,WAAW,UAAX,CAA5B;AACA,qCAAS,uBAAuBA,WAAW,UAAX,CAAhC;;AAEA,qCAAS,uBAAT,EAAkCA,UAAlC;;AAEA;;AAEA,kBAAI/D,IAAIQ,IAAJ,CAAS2B,OAAT,IAAoB,GAAxB,EAA6B;AAC3B,oDACExB,UADF,EAEEX,GAFF,EAGEC,GAHF,EAIE,UAACS,KAAD,EAAQS,MAAR,EAAmB;AACjB,sBAAIT,KAAJ,EAAW;AACT,2CAAS,2BAAT,EAAsCA,KAAtC;AACAC,+BAAWE,QAAX,CAAoB,YAAM;AACxB,sDAAoBV,EAApB,EAAwBQ,UAAxB;AACAT,2BAAKQ,KAAL;AACD,qBAHD;AAID;;AAED,yCAAS,sBAAT,EAAiCS,MAAjC;AACD,iBAdH;AAgBD;;AAED;AACA,oCACER,UADF,EAEEX,GAFF,EAGEC,GAHF,EAIE,UAACS,KAAD,EAAQS,MAAR,EAAmB;AACjB,oBAAIT,KAAJ,EAAW;AACTC,6BAAWE,QAAX,CAAoB,YAAM;AACxB,oDAAoBV,EAApB,EAAwBQ,UAAxB;AACAT,yBAAKQ,KAAL;AACD,mBAHD;AAID;;AAED;AACA;;AAEA,oBAAIS,UAAU,IAAV,IAAkBA,OAAOqC,MAAP,IAAiB,CAAvC,EAA0C;AACxCxD,sBAAIK,KAAJ,CAAUkC,iBAAV,GAA8BpB,OAAOsB,QAArC;AACAzC,sBAAIQ,IAAJ,CAAS+B,iBAAT,GAA6BpB,OAAOsB,QAApC;;AAEA,yCACE,kCAAkCtB,OAAO,UAAP,CADpC;;AAIA;;AAEA,2CACER,UADF,EAEEX,GAFF,EAGEC,GAHF,EAIE,UAACS,KAAD,EAAQqD,UAAR,EAAuB;AACrB,wBAAIrD,KAAJ,EAAW;AACTC,iCAAWE,QAAX,CAAoB,YAAM;AACxB,wDAAoBV,EAApB,EAAwBQ,UAAxB;AACAT,6BAAKQ,KAAL;AACD,uBAHD;AAID;AACDC,+BAAWkC,MAAX,CAAkB,iBAAS;AACzB,sDAAoB1C,EAApB,EAAwBQ,UAAxB;AACA,0BAAID,KAAJ,EAAW;AACTC,mCAAWE,QAAX,CAAoB,YAAM;AACxBX,+BAAKQ,KAAL;AACD,yBAFD;AAGD;AACDV,0BAAI4C,OAAJ,GAAczB,MAAd;AACAjB;AACD,qBATD;;AAWA,2CAAS,6BAAT,EAAwC6D,UAAxC;AACD,mBAvBH,EAwBE7D,IAxBF;AA0BD;AACF,eApDH,EAsDEA,IAtDF;AAwDD;AACF,WArGH,EAsGE,IAtGF,EAuGEA,IAvGF;AAyGD,SAzHH;AA2HD,OAtID;AAuID,KA3ID;AA4ID,GAtJD,CAsJE,OAAO8C,CAAP,EAAU;AACV9C,SAAK8C,CAAL;AACD;AACF,CA3JD;;AA6JAgB,OAAOC,OAAP,GAAiB;AACflE,4BADe;AAEfkD,kCAFe;AAGfW;AAHe,CAAjB","file":"frontDesk.js","sourcesContent":["import { insertData, insertPatientData } from \"../model/patientRegistration\";\nimport { insertVisitData, insertPatientVisitData } from \"../model/visit\";\nimport {\n  whereCondition,\n  runningNumber,\n  runningNumberGen,\n  releaseDBConnection\n} from \"../utils\";\nimport extend from \"extend\";\nimport {\n  addBill,\n  newReceipt,\n  addEpisodeEncounter,\n  addBillData,\n  newReceiptData,\n  addEpisodeEncounterData\n} from \"../model/billing\";\nimport {\n  addPatientInsurance,\n  addPatientInsuranceData\n} from \"../model/insurance\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { debugLog, debugFunction } from \"../utils/logging\";\nimport Promise from \"bluebird\";\nimport { LINQ } from \"node-linq\";\nimport { release } from \"os\";\n//created by irfan :to save front desk data inputs\nlet addFrontDesk = (req, res, next) => {\n  debugFunction(\"addFrontDesk\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    if (req.query[\"data\"] != null) {\n      req.query = JSON.parse(req.query[\"data\"]);\n      req.body = req.query;\n    }\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        return new Promise((resolve, reject) => {\n          runningNumberGen({\n            db: connection,\n            module_desc: [\"PAT_REGS\", \"PAT_VISIT\", \"PAT_BILL\", \"RECEIPT\"],\n            onFailure: error => {\n              reject(error);\n            },\n            onSuccess: result => {\n              resolve(result);\n            }\n          });\n        })\n          .then(output => {\n            //Calling Patient Registration function\n            let patients = new LINQ(output)\n              .Where(w => w.module_desc == \"PAT_REGS\")\n              .FirstOrDefault();\n\n            req.query.patient_code = patients.completeNumber;\n            req.body.patient_code = patients.completeNumber;\n            return new Promise((resolve, reject) => {\n              req.options = {\n                db: connection,\n                onFailure: error => {\n                  reject(error);\n                },\n                onSuccess: result => {\n                  resolve(result);\n                }\n              };\n              insertPatientData(req, res, next);\n            })\n              .then(patientInsertedRecord => {\n                //Get  new visit running number.\n                let visit = new LINQ(output)\n                  .Where(w => w.module_desc == \"PAT_VISIT\")\n                  .FirstOrDefault();\n                debugLog(\"patientInsertedRecord \", patientInsertedRecord);\n\n                req.query.visit_code = visit.completeNumber;\n                req.body.visit_code = visit.completeNumber;\n                delete req[\"options\"][\"onFailure\"];\n                delete req[\"options\"][\"onSuccess\"];\n                //Visit Promise\n                return new Promise((resolve, reject) => {\n                  debugLog(\"Inside Visit\");\n                  req.options.onFailure = error => {\n                    reject(error);\n                  };\n                  req.options.onSuccess = result => {\n                    resolve(result);\n                  };\n                  // Calling Visit\n                  insertPatientVisitData(req, res, next);\n                }).then(visitData => {\n                  req.query.visit_id = visitData[\"insertId\"];\n                  req.visit_id = visitData[\"insertId\"];\n                  req.body.visit_id = visitData[\"insertId\"];\n                  req.body.patient_visit_id = visitData[\"insertId\"];\n                  debugLog(\"Gen Visit \", visitData);\n                  //Insurance Promise\n                  return new Promise((resolve, reject) => {\n                    debugLog(\"Inside Insurance\");\n                    if (req.body.insured == \"Y\") {\n                      delete req[\"options\"][\"onFailure\"];\n                      delete req[\"options\"][\"onSuccess\"];\n                      req.options.onFailure = error => {\n                        reject(error);\n                      };\n                      req.options.onSuccess = data => {\n                        resolve(data);\n                      };\n                      //Check for insurace\n                      addPatientInsuranceData(req, res, next);\n                    } else {\n                      resolve({});\n                    }\n                  }).then(insuredRecords => {\n                    debugLog(\"Orver all records number gen\", output);\n                    let bill = new LINQ(output)\n                      .Where(w => w.module_desc == \"PAT_BILL\")\n                      .FirstOrDefault();\n                    req.bill_number = bill.completeNumber;\n                    req.body.bill_number = bill.completeNumber;\n                    //Bill generation\n                    return new Promise((resolve, reject) => {\n                      debugLog(\"Inside Billing\");\n                      delete req[\"options\"][\"onFailure\"];\n                      delete req[\"options\"][\"onSuccess\"];\n                      req.options.onFailure = error => {\n                        reject(error);\n                      };\n                      req.options.onSuccess = data => {\n                        resolve(data);\n                      };\n\n                      addBillData(req, res, next);\n                    }).then(billOutput => {\n                      req.query.billing_header_id = billOutput.insertId;\n                      req.body.billing_header_id = billOutput.insertId;\n\n                      let receipt = new LINQ(output)\n                        .Where(w => w.module_desc == \"RECEIPT\")\n                        .FirstOrDefault();\n                      req.body.receipt_number = receipt.completeNumber;\n                      return new Promise((resolve, reject) => {\n                        debugLog(\"Inside Receipts\");\n                        delete req[\"options\"][\"onFailure\"];\n                        delete req[\"options\"][\"onSuccess\"];\n                        req.options.onFailure = error => {\n                          reject(error);\n                        };\n                        req.options.onSuccess = records => {\n                          resolve(records);\n                        };\n                        newReceiptData(req, res, next);\n                      }).then(records => {\n                        return new Promise((resolve, reject) => {\n                          debugLog(\"Inside Episode\");\n                          delete req[\"options\"][\"onFailure\"];\n                          delete req[\"options\"][\"onSuccess\"];\n                          req.options.onFailure = error => {\n                            reject(error);\n                          };\n                          req.options.onSuccess = records => {\n                            resolve(records);\n                          };\n                          addEpisodeEncounterData(req, res, next);\n                        }).then(encounterResult => {\n                          connection.commit(error => {\n                            if (error) {\n                              releaseDBConnection(db, connection);\n                              next(error);\n                            }\n                            req.records = encounterResult;\n                            next();\n                          });\n                        });\n                      });\n                    });\n                  });\n                });\n              })\n              .catch(error => {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              });\n          })\n          .catch(error => {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          });\n      });\n      //bign tr\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet selectFrontDesk = (req, res, next) => {\n  let selectWhere = {\n    patient_code: \"ALL\",\n    hims_d_patient_id: \"ALL\"\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let where = whereCondition(extend(selectWhere, req.query));\n      connection.query(\n        \"SELECT  `hims_d_patient_id`, `patient_code`\\\n      , `registration_date`, `title_id`,`first_name`, `middle_name`, `last_name`,`full_name`, `arabic_name`\\\n      , `gender`, `religion_id`,`date_of_birth`, `age`, `marital_status`, `address1`\\\n      , `address2`,`contact_number`, `secondary_contact_number`, `email`\\\n      , `emergency_contact_name`,`emergency_contact_number`, `relationship_with_patient`\\\n      , `visa_type_id`,`nationality_id`, `postal_code`, `primary_identity_id`\\\n      , `primary_id_no`,`secondary_identity_id`, `secondary_id_no`, `photo_file`\\\n      , `primary_id_file`,`secondary_id_file`,`city_id`,`state_id`,`country_id`, `advance_amount` FROM `hims_f_patient` \\\n       WHERE `record_status`='A' AND \" +\n          where.condition,\n        where.values,\n        (error, result) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n          let showresult;\n          if (result.length != 0) {\n            let hims_d_patient_id = result[0][\"hims_d_patient_id\"];\n            connection.query(\n              \"SELECT 0 radioselect, `hims_f_patient_visit_id`, `patient_id`,`visit_code`\\\n            , `visit_type`, `visit_date`, `department_id`, `sub_department_id`\\\n            , `doctor_id`, `maternity_patient`, `is_mlc`, `mlc_accident_reg_no`\\\n            , `mlc_police_station`, `mlc_wound_certified_date`, `insured`, `sec_insured`\\\n             FROM `hims_f_patient_visit` WHERE `record_status`='A' AND \\\n             patient_id=? ORDER BY hims_f_patient_visit_id desc \",\n              [hims_d_patient_id],\n              (error, resultFields) => {\n                if (error) {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                }\n                showresult = {\n                  patientRegistration: result[0],\n                  visitDetails: resultFields\n                };\n                req.records = showresult;\n                next();\n              }\n            );\n          } else {\n            req.records = showresult;\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan :to update front desk\nlet updateFrontDesk = (req, res, next) => {\n  debugFunction(\"updateFrontDesk\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    if (req.query[\"data\"] != null) {\n      req.query = JSON.parse(req.query[\"data\"]);\n      req.body = req.query;\n    }\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        //Front Desk updation\n\n        //Visit Insertion for update front desk API\n        //query 1\n        runningNumber(\n          req.db,\n          2,\n          \"VISIT_NUMGEN\",\n          (error, patResults, completeNum) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            req.query.visit_code = completeNum;\n            req.body.visit_code = completeNum;\n            debugLog(\"req.body.visit_code : \" + completeNum);\n\n            //call\n            insertVisitData(\n              connection,\n              req,\n              res,\n              (error, resultdata) => {\n                if (error) {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                }\n\n                //Billing Insertion for update front desk APi\n                //Quwery:2\n                if (resultdata != null && resultdata.length != 0) {\n                  req.query.visit_id = resultdata[\"insertId\"];\n                  req.body.visit_id = resultdata[\"insertId\"];\n                  req.body.patient_visit_id = resultdata[\"insertId\"];\n                  debugLog(\"req.body.visit_id:\" + resultdata[\"insertId\"]);\n\n                  debugLog(\" result of visit func\", resultdata);\n\n                  //add patient insurance\n\n                  if (req.body.insured == \"Y\") {\n                    addPatientInsurance(\n                      connection,\n                      req,\n                      res,\n                      (error, result) => {\n                        if (error) {\n                          debugLog(\"error in adding insurence\", error);\n                          connection.rollback(() => {\n                            releaseDBConnection(db, connection);\n                            next(error);\n                          });\n                        }\n\n                        debugLog(\"add insuence result:\", result);\n                      }\n                    );\n                  }\n\n                  //call\n                  addBill(\n                    connection,\n                    req,\n                    res,\n                    (error, result) => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n\n                      //Query :3\n                      //insert receipt for update front desk api\n\n                      if (result != null && result.length != 0) {\n                        req.query.billing_header_id = result.insertId;\n                        req.body.billing_header_id = result.insertId;\n\n                        debugLog(\n                          \"  req.body.billing_header_id:\" + result[\"insertId\"]\n                        );\n\n                        //call\n\n                        newReceipt(\n                          connection,\n                          req,\n                          res,\n                          (error, resultdata) => {\n                            if (error) {\n                              connection.rollback(() => {\n                                releaseDBConnection(db, connection);\n                                next(error);\n                              });\n                            }\n                            connection.commit(error => {\n                              releaseDBConnection(db, connection);\n                              if (error) {\n                                connection.rollback(() => {\n                                  next(error);\n                                });\n                              }\n                              req.records = result;\n                              next();\n                            });\n\n                            debugLog(\"succes result of query 3 : \", resultdata);\n                          },\n                          next\n                        );\n                      }\n                    },\n\n                    next\n                  );\n                }\n              },\n              true,\n              next\n            );\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addFrontDesk,\n  selectFrontDesk,\n  updateFrontDesk\n};\n"]}