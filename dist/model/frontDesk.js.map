{"version":3,"sources":["../../src/model/frontDesk.js"],"names":["addFrontDesk","req","res","next","db","dataBaseNotInitilizedError","query","JSON","parse","body","getConnection","error","connection","beginTransaction","rollback","records","newNumber","length","patient_code","result","patient_id","patResults","completeNum","visit_code","resultdata","visit_id","patient_visit_id","insured","billing_header_id","insertId","resultEp","commit","e","selectFrontDesk","selectWhere","hims_d_patient_id","where","condition","values","showresult","resultFields","patientRegistration","visitDetails","updateFrontDesk","module","exports"],"mappings":"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","file":"frontDesk.js","sourcesContent":["import { insertData } from \"../model/patientRegistration\";\nimport { insertVisitData } from \"../model/visit\";\nimport { whereCondition, runningNumber, releaseDBConnection } from \"../utils\";\nimport extend from \"extend\";\nimport { addBill, newReceipt, addEpisodeEncounter } from \"../model/billing\";\nimport { addPatientInsurance } from \"../model/insurance\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { debugLog, debugFunction } from \"../utils/logging\";\n\n//created by irfan :to save front desk data inputs\nlet addFrontDesk = (req, res, next) => {\n  debugFunction(\"addFrontDesk\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    if (req.query[\"data\"] != null) {\n      req.query = JSON.parse(req.query[\"data\"]);\n      req.body = req.query;\n    }\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        //Front Desk Insertion\n        //Patient Details Insertion\n        //Start\n        //Quwery:1\n        runningNumber(\n          connection,\n          1,\n          \"PATCODE_NUMGEN\",\n          (error, records, newNumber) => {\n            debugLog(\"newNumber:\" + newNumber);\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            if (records.length != 0) {\n              req.query.patient_code = newNumber;\n              req.body.patient_code = newNumber;\n\n              //call\n              insertData(\n                connection,\n                req,\n                res,\n                (error, result) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n\n                  if (result != null && result.length != 0) {\n                    req.query.patient_id = result[0][0][\"hims_d_patient_id\"];\n                    req.body.patient_id = result[0][0][\"hims_d_patient_id\"];\n                    debugLog(\n                      \"req.body.patient_id:\" + result[0][0][\"hims_d_patient_id\"]\n                    );\n                    debugLog(\" succes result of first query\", result);\n\n                    //Visit Insertion\n                    //query 2\n                    runningNumber(\n                      req.db,\n                      2,\n                      \"VISIT_NUMGEN\",\n                      (error, patResults, completeNum) => {\n                        if (error) {\n                          connection.rollback(() => {\n                            releaseDBConnection(db, connection);\n                            next(error);\n                          });\n                        }\n                        req.query.visit_code = completeNum;\n                        req.body.visit_code = completeNum;\n                        debugLog(\"req.body.visit_code : \" + completeNum);\n\n                        //call\n                        insertVisitData(\n                          connection,\n                          req,\n                          res,\n                          (error, resultdata) => {\n                            if (error) {\n                              connection.rollback(() => {\n                                releaseDBConnection(db, connection);\n                                next(error);\n                              });\n                            }\n\n                            //Billing Insertion\n                            //Quwery:3\n                            if (resultdata != null && resultdata.length != 0) {\n                              req.query.visit_id = resultdata[\"insertId\"];\n                              req.body.visit_id = resultdata[\"insertId\"];\n                              req.body.patient_visit_id =\n                                resultdata[\"insertId\"];\n                              debugLog(\n                                \"req.body.visit_id:\" + resultdata[\"insertId\"]\n                              );\n\n                              debugLog(\n                                \" succes result of second query\",\n                                resultdata\n                              );\n\n                              //add patient insurance\n\n                              if (req.body.insured == \"Y\") {\n                                addPatientInsurance(\n                                  connection,\n                                  req,\n                                  res,\n                                  (error, result) => {\n                                    if (error) {\n                                      debugLog(\n                                        \"error in adding insurence\",\n                                        error\n                                      );\n                                      connection.rollback(() => {\n                                        releaseDBConnection(db, connection);\n                                        next(error);\n                                      });\n                                    }\n\n                                    debugLog(\"add insuence result:\", result);\n                                  }\n                                );\n                              }\n\n                              //call\n                              addBill(\n                                connection,\n                                req,\n                                res,\n                                (error, result) => {\n                                  if (error) {\n                                    connection.rollback(() => {\n                                      releaseDBConnection(db, connection);\n                                      next(error);\n                                    });\n                                  }\n\n                                  //Query :4\n                                  //insert receipt\n\n                                  if (result != null && result.length != 0) {\n                                    req.query.billing_header_id =\n                                      result.insertId;\n                                    req.body.billing_header_id =\n                                      result.insertId;\n\n                                    debugLog(\n                                      \"  req.body.billing_header_id:\" +\n                                        result[\"insertId\"]\n                                    );\n\n                                    //call\n\n                                    newReceipt(\n                                      connection,\n                                      req,\n                                      res,\n                                      (error, resultdata) => {\n                                        if (error) {\n                                          connection.rollback(() => {\n                                            releaseDBConnection(db, connection);\n                                            next(error);\n                                          });\n                                        }\n\n                                        debugLog(\n                                          \"succes result of query 4 : \",\n                                          resultdata\n                                        );\n\n                                        //call to addEpisodeEncounter\n\n                                        addEpisodeEncounter(\n                                          connection,\n                                          req,\n                                          res,\n                                          (error, resultEp) => {\n                                            if (error) {\n                                              connection.rollback(() => {\n                                                releaseDBConnection(\n                                                  db,\n                                                  connection\n                                                );\n                                                next(error);\n                                              });\n                                            }\n                                            connection.commit(error => {\n                                              if (error) {\n                                                connection.rollback(() => {\n                                                  releaseDBConnection(\n                                                    db,\n                                                    connection\n                                                  );\n                                                  next(error);\n                                                });\n                                              }\n                                              req.records = resultEp;\n                                              next();\n                                            });\n\n                                            debugLog(\n                                              \"succes result of query 5 : \",\n                                              resultEp\n                                            );\n                                          },\n                                          next\n                                        );\n                                        //end of episode\n                                      },\n                                      next\n                                    );\n                                  }\n                                },\n\n                                next\n                              );\n                            }\n                          }\n                        );\n                      }\n                    );\n                  }\n                },\n                true,\n                next\n              );\n            }\n          }\n        );\n        //ruunin\n      });\n      //bign tr\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet selectFrontDesk = (req, res, next) => {\n  let selectWhere = {\n    patient_code: \"ALL\",\n    hims_d_patient_id: \"ALL\"\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let where = whereCondition(extend(selectWhere, req.query));\n      connection.query(\n        \"SELECT  `hims_d_patient_id`, `patient_code`\\\n      , `registration_date`, `title_id`,`first_name`, `middle_name`, `last_name`,`full_name`, `arabic_name`\\\n      , `gender`, `religion_id`,`date_of_birth`, `age`, `marital_status`, `address1`\\\n      , `address2`,`contact_number`, `secondary_contact_number`, `email`\\\n      , `emergency_contact_name`,`emergency_contact_number`, `relationship_with_patient`\\\n      , `visa_type_id`,`nationality_id`, `postal_code`, `primary_identity_id`\\\n      , `primary_id_no`,`secondary_identity_id`, `secondary_id_no`, `photo_file`\\\n      , `primary_id_file`,`secondary_id_file`,`city_id`,`state_id`,`country_id`, `advance_amount` FROM `hims_f_patient` \\\n       WHERE `record_status`='A' AND \" +\n          where.condition,\n        where.values,\n        (error, result) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n          let showresult;\n          if (result.length != 0) {\n            let hims_d_patient_id = result[0][\"hims_d_patient_id\"];\n            connection.query(\n              \"SELECT 0 radioselect, `hims_f_patient_visit_id`, `patient_id`,`visit_code`\\\n            , `visit_type`, `visit_date`, `department_id`, `sub_department_id`\\\n            , `doctor_id`, `maternity_patient`, `is_mlc`, `mlc_accident_reg_no`\\\n            , `mlc_police_station`, `mlc_wound_certified_date`, `insured`, `sec_insured`\\\n             FROM `hims_f_patient_visit` WHERE `record_status`='A' AND \\\n             patient_id=? ORDER BY hims_f_patient_visit_id desc \",\n              [hims_d_patient_id],\n              (error, resultFields) => {\n                if (error) {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                }\n                showresult = {\n                  patientRegistration: result[0],\n                  visitDetails: resultFields\n                };\n                req.records = showresult;\n                next();\n              }\n            );\n          } else {\n            req.records = showresult;\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan :to update front desk\nlet updateFrontDesk = (req, res, next) => {\n  debugFunction(\"updateFrontDesk\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    if (req.query[\"data\"] != null) {\n      req.query = JSON.parse(req.query[\"data\"]);\n      req.body = req.query;\n    }\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        //Front Desk updation\n\n        //Visit Insertion for update front desk API\n        //query 1\n        runningNumber(\n          req.db,\n          2,\n          \"VISIT_NUMGEN\",\n          (error, patResults, completeNum) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            req.query.visit_code = completeNum;\n            req.body.visit_code = completeNum;\n            debugLog(\"req.body.visit_code : \" + completeNum);\n\n            //call\n            insertVisitData(\n              connection,\n              req,\n              res,\n              (error, resultdata) => {\n                if (error) {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                }\n\n                //Billing Insertion for update front desk APi\n                //Quwery:2\n                if (resultdata != null && resultdata.length != 0) {\n                  req.query.visit_id = resultdata[\"insertId\"];\n                  req.body.visit_id = resultdata[\"insertId\"];\n                  req.body.patient_visit_id = resultdata[\"insertId\"];\n                  debugLog(\"req.body.visit_id:\" + resultdata[\"insertId\"]);\n\n                  debugLog(\" result of visit func\", resultdata);\n\n                  //add patient insurance\n\n                  if (req.body.insured == \"Y\") {\n                    addPatientInsurance(\n                      connection,\n                      req,\n                      res,\n                      (error, result) => {\n                        if (error) {\n                          debugLog(\"error in adding insurence\", error);\n                          connection.rollback(() => {\n                            releaseDBConnection(db, connection);\n                            next(error);\n                          });\n                        }\n\n                        debugLog(\"add insuence result:\", result);\n                      }\n                    );\n                  }\n\n                  //call\n                  addBill(\n                    connection,\n                    req,\n                    res,\n                    (error, result) => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n\n                      //Query :3\n                      //insert receipt for update front desk api\n\n                      if (result != null && result.length != 0) {\n                        req.query.billing_header_id = result.insertId;\n                        req.body.billing_header_id = result.insertId;\n\n                        debugLog(\n                          \"  req.body.billing_header_id:\" + result[\"insertId\"]\n                        );\n\n                        //call\n\n                        newReceipt(\n                          connection,\n                          req,\n                          res,\n                          (error, resultdata) => {\n                            if (error) {\n                              connection.rollback(() => {\n                                releaseDBConnection(db, connection);\n                                next(error);\n                              });\n                            }\n                            connection.commit(error => {\n                              releaseDBConnection(db, connection);\n                              if (error) {\n                                connection.rollback(() => {\n                                  next(error);\n                                });\n                              }\n                              req.records = result;\n                              next();\n                            });\n\n                            debugLog(\"succes result of query 3 : \", resultdata);\n                          },\n                          next\n                        );\n                      }\n                    },\n\n                    next\n                  );\n                }\n              },\n              true,\n              next\n            );\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addFrontDesk,\n  selectFrontDesk,\n  updateFrontDesk\n};\n"]}