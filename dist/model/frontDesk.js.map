{"version":3,"sources":["../../src/model/frontDesk.js"],"names":["requestCounter","addFrontDesk","req","res","next","db","dataBaseNotInitilizedError","query","JSON","parse","body","getConnection","error","connection","beginTransaction","rollback","resolve","reject","counter","module_desc","onFailure","onSuccess","result","then","patients","output","Where","w","FirstOrDefault","patient_code","completeNumber","options","visit","patientInsertedRecord","visit_code","visit_id","visitData","patient_visit_id","insured","data","bill","bill_number","billing_header_id","billOutput","insertId","receipt","receipt_number","records","commit","encounterResult","catch","e","selectFrontDesk","selectWhere","hims_d_patient_id","where","condition","values","showresult","length","resultFields","patientRegistration","visitDetails","updateCounter","updateFrontDesk","module","exports"],"mappings":"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D,KA/JD;AAgKD,GA1KD,CA0KE,OAAOuC,CAAP,EAAU;AACV/C,SAAK+C,CAAL;AACD;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CA5UD;;AA8UAc,OAAOC,OAAP,GAAiB;AACfjE,4BADe;AAEfmD,kCAFe;AAGfY;AAHe,CAAjB","file":"frontDesk.js","sourcesContent":["import { insertData, insertPatientData } from \"../model/patientRegistration\";\r\nimport { insertVisitData, insertPatientVisitData } from \"../model/visit\";\r\nimport {\r\n  whereCondition,\r\n  runningNumber,\r\n  runningNumberGen,\r\n  releaseDBConnection\r\n} from \"../utils\";\r\nimport extend from \"extend\";\r\nimport {\r\n  addBill,\r\n  newReceipt,\r\n  addEpisodeEncounter,\r\n  addBillData,\r\n  newReceiptData,\r\n  addEpisodeEncounterData\r\n} from \"../model/billing\";\r\nimport {\r\n  addPatientInsurance,\r\n  addPatientInsuranceData\r\n} from \"../model/insurance\";\r\nimport httpStatus from \"../utils/httpStatus\";\r\nimport { debugLog, debugFunction } from \"../utils/logging\";\r\nimport Promise from \"bluebird\";\r\nimport { LINQ } from \"node-linq\";\r\nlet requestCounter = 0;\r\n//created by irfan :to save front desk data inputs\r\nlet addFrontDesk = (req, res, next) => {\r\n  debugFunction(\"addFrontDesk\");\r\n\r\n  requestCounter = requestCounter + 1;\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    let db = req.db;\r\n    if (req.query[\"data\"] != null) {\r\n      req.query = JSON.parse(req.query[\"data\"]);\r\n      req.body = req.query;\r\n    }\r\n\r\n    db.getConnection((error, connection) => {\r\n      if (error) {\r\n        next(error);\r\n      }\r\n      connection.beginTransaction(error => {\r\n        if (error) {\r\n          connection.rollback(() => {\r\n            releaseDBConnection(db, connection);\r\n            next(error);\r\n          });\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n          runningNumberGen({\r\n            db: connection,\r\n            counter: requestCounter,\r\n            module_desc: [\"PAT_REGS\", \"PAT_VISIT\", \"PAT_BILL\", \"RECEIPT\"],\r\n            onFailure: error => {\r\n              reject(error);\r\n            },\r\n            onSuccess: result => {\r\n              resolve(result);\r\n            }\r\n          });\r\n        })\r\n          .then(output => {\r\n            //Calling Patient Registration function\r\n            let patients = new LINQ(output)\r\n              .Where(w => w.module_desc == \"PAT_REGS\")\r\n              .FirstOrDefault();\r\n\r\n            req.query.patient_code = patients.completeNumber;\r\n            req.body.patient_code = patients.completeNumber;\r\n            return new Promise((resolve, reject) => {\r\n              req.options = {\r\n                db: connection,\r\n                onFailure: error => {\r\n                  reject(error);\r\n                },\r\n                onSuccess: result => {\r\n                  resolve(result);\r\n                }\r\n              };\r\n              insertPatientData(req, res, next);\r\n            })\r\n              .then(patientInsertedRecord => {\r\n                //Get  new visit running number.\r\n                let visit = new LINQ(output)\r\n                  .Where(w => w.module_desc == \"PAT_VISIT\")\r\n                  .FirstOrDefault();\r\n                debugLog(\"patientInsertedRecord \", patientInsertedRecord);\r\n\r\n                req.query.visit_code = visit.completeNumber;\r\n                req.body.visit_code = visit.completeNumber;\r\n                delete req[\"options\"][\"onFailure\"];\r\n                delete req[\"options\"][\"onSuccess\"];\r\n                //Visit Promise\r\n                return new Promise((resolve, reject) => {\r\n                  debugLog(\"Inside Visit\");\r\n                  req.options.onFailure = error => {\r\n                    reject(error);\r\n                  };\r\n                  req.options.onSuccess = result => {\r\n                    resolve(result);\r\n                  };\r\n                  // Calling Visit\r\n                  insertPatientVisitData(req, res, next);\r\n                }).then(visitData => {\r\n                  req.query.visit_id = visitData[\"insertId\"];\r\n                  req.visit_id = visitData[\"insertId\"];\r\n                  req.body.visit_id = visitData[\"insertId\"];\r\n                  req.body.patient_visit_id = visitData[\"insertId\"];\r\n                  debugLog(\"Gen Visit \", visitData);\r\n                  //Insurance Promise\r\n                  return new Promise((resolve, reject) => {\r\n                    debugLog(\"Inside Insurance\");\r\n                    if (req.body.insured == \"Y\") {\r\n                      delete req[\"options\"][\"onFailure\"];\r\n                      delete req[\"options\"][\"onSuccess\"];\r\n                      req.options.onFailure = error => {\r\n                        reject(error);\r\n                      };\r\n                      req.options.onSuccess = data => {\r\n                        resolve(data);\r\n                      };\r\n                      //Check for insurace\r\n                      addPatientInsuranceData(req, res, next);\r\n                    } else {\r\n                      resolve({});\r\n                    }\r\n                  }).then(insuredRecords => {\r\n                    debugLog(\"Orver all records number gen\", output);\r\n                    let bill = new LINQ(output)\r\n                      .Where(w => w.module_desc == \"PAT_BILL\")\r\n                      .FirstOrDefault();\r\n                    req.bill_number = bill.completeNumber;\r\n                    req.body.bill_number = bill.completeNumber;\r\n                    //Bill generation\r\n                    return new Promise((resolve, reject) => {\r\n                      debugLog(\"Inside Billing\");\r\n                      delete req[\"options\"][\"onFailure\"];\r\n                      delete req[\"options\"][\"onSuccess\"];\r\n                      req.options.onFailure = error => {\r\n                        reject(error);\r\n                      };\r\n                      req.options.onSuccess = data => {\r\n                        resolve(data);\r\n                      };\r\n\r\n                      addBillData(req, res, next);\r\n                    }).then(billOutput => {\r\n                      req.query.billing_header_id = billOutput.insertId;\r\n                      req.body.billing_header_id = billOutput.insertId;\r\n\r\n                      let receipt = new LINQ(output)\r\n                        .Where(w => w.module_desc == \"RECEIPT\")\r\n                        .FirstOrDefault();\r\n                      req.body.receipt_number = receipt.completeNumber;\r\n                      return new Promise((resolve, reject) => {\r\n                        debugLog(\"Inside Receipts\");\r\n                        delete req[\"options\"][\"onFailure\"];\r\n                        delete req[\"options\"][\"onSuccess\"];\r\n                        req.options.onFailure = error => {\r\n                          reject(error);\r\n                        };\r\n                        req.options.onSuccess = records => {\r\n                          resolve(records);\r\n                        };\r\n                        newReceiptData(req, res, next);\r\n                      }).then(records => {\r\n                        return new Promise((resolve, reject) => {\r\n                          debugLog(\"Inside Episode\");\r\n                          delete req[\"options\"][\"onFailure\"];\r\n                          delete req[\"options\"][\"onSuccess\"];\r\n                          req.options.onFailure = error => {\r\n                            reject(error);\r\n                          };\r\n                          req.options.onSuccess = records => {\r\n                            resolve(records);\r\n                          };\r\n                          debugLog(\"Visit\", records);\r\n                          addEpisodeEncounterData(req, res, next);\r\n                        }).then(encounterResult => {\r\n                          connection.commit(error => {\r\n                            debugLog(\"After Episode Error: \", error);\r\n                            if (error) {\r\n                              debugLog(\"Error: \", error);\r\n                              releaseDBConnection(db, connection);\r\n                              next(error);\r\n                            }\r\n                            req.records = encounterResult;\r\n                            debugLog(\"encounterResult: \", encounterResult);\r\n                            if (requestCounter != 0)\r\n                              requestCounter = requestCounter - 1;\r\n                            next();\r\n                          });\r\n                        });\r\n                      });\r\n                    });\r\n                  });\r\n                });\r\n              })\r\n              .catch(error => {\r\n                if (requestCounter != 0) requestCounter = requestCounter - 1;\r\n                connection.rollback(() => {\r\n                  releaseDBConnection(db, connection);\r\n                  next(error);\r\n                });\r\n              });\r\n          })\r\n          .catch(error => {\r\n            if (requestCounter != 0) requestCounter = requestCounter - 1;\r\n            connection.rollback(() => {\r\n              releaseDBConnection(db, connection);\r\n              next(error);\r\n            });\r\n          });\r\n      });\r\n      //bign tr\r\n    });\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\n\r\nlet selectFrontDesk = (req, res, next) => {\r\n  let selectWhere = {\r\n    patient_code: \"ALL\",\r\n    hims_d_patient_id: \"ALL\"\r\n  };\r\n\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    let db = req.db;\r\n    db.getConnection((error, connection) => {\r\n      if (error) {\r\n        next(error);\r\n      }\r\n      let where = whereCondition(extend(selectWhere, req.query));\r\n      connection.query(\r\n        \"SELECT  `hims_d_patient_id`, `patient_code`\\\r\n      , `registration_date`, `title_id`,`first_name`, `middle_name`, `last_name`,`full_name`, `arabic_name`\\\r\n      , `gender`, `religion_id`,`date_of_birth`, `age`, `marital_status`, `address1`\\\r\n      , `address2`,`contact_number`, `secondary_contact_number`, `email`\\\r\n      , `emergency_contact_name`,`emergency_contact_number`, `relationship_with_patient`\\\r\n      , `visa_type_id`,`nationality_id`, `postal_code`, `primary_identity_id`\\\r\n      , `primary_id_no`,`secondary_identity_id`, `secondary_id_no`, `photo_file`,`vat_applicable`\\\r\n      , `primary_id_file`,`secondary_id_file`,`city_id`,`state_id`,`country_id`, `advance_amount`,`patient_type` FROM `hims_f_patient` \\\r\n       WHERE `record_status`='A' AND \" +\r\n          where.condition,\r\n        where.values,\r\n        (error, result) => {\r\n          if (error) {\r\n            releaseDBConnection(db, connection);\r\n            next(error);\r\n          }\r\n          let showresult;\r\n          if (result.length != 0) {\r\n            let hims_d_patient_id = result[0][\"hims_d_patient_id\"];\r\n            connection.query(\r\n              \"SELECT 0 radioselect, `hims_f_patient_visit_id`, `patient_id`,`visit_code`\\\r\n            , `visit_type`, `visit_date`, `department_id`, `sub_department_id`\\\r\n            , `doctor_id`, `maternity_patient`, `is_mlc`, `mlc_accident_reg_no`\\\r\n            , `mlc_police_station`, `mlc_wound_certified_date`, `insured`, `sec_insured`\\\r\n             FROM `hims_f_patient_visit` WHERE `record_status`='A' AND \\\r\n             patient_id=? ORDER BY hims_f_patient_visit_id desc \",\r\n              [hims_d_patient_id],\r\n              (error, resultFields) => {\r\n                if (error) {\r\n                  releaseDBConnection(db, connection);\r\n                  next(error);\r\n                }\r\n                showresult = {\r\n                  patientRegistration: result[0],\r\n                  visitDetails: resultFields\r\n                };\r\n                req.records = showresult;\r\n                next();\r\n              }\r\n            );\r\n          } else {\r\n            req.records = showresult;\r\n            next();\r\n          }\r\n        }\r\n      );\r\n    });\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\n\r\nlet updateCounter = 0;\r\n//created by irfan :to update front desk\r\nlet updateFrontDesk = (req, res, next) => {\r\n  debugFunction(\"updateFrontDesk\");\r\n\r\n  updateCounter = updateCounter + 1;\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    let db = req.db;\r\n    if (req.query[\"data\"] != null) {\r\n      req.query = JSON.parse(req.query[\"data\"]);\r\n      req.body = req.query;\r\n    }\r\n\r\n    db.getConnection((error, connection) => {\r\n      if (error) {\r\n        next(error);\r\n      }\r\n      connection.beginTransaction(error => {\r\n        if (error) {\r\n          connection.rollback(() => {\r\n            releaseDBConnection(db, connection);\r\n            next(error);\r\n          });\r\n        }\r\n        debugFunction(\"updateFrontDesk Promise\");\r\n        return new Promise((resolve, reject) => {\r\n          runningNumberGen({\r\n            db: connection,\r\n            counter: updateCounter,\r\n            module_desc: [\"PAT_VISIT\", \"PAT_BILL\", \"RECEIPT\"],\r\n            onFailure: error => {\r\n              reject(error);\r\n            },\r\n            onSuccess: result => {\r\n              resolve(result);\r\n            }\r\n          });\r\n        })\r\n          .then(output => {\r\n            //Get  new visit running number.\r\n\r\n            let visit = new LINQ(output)\r\n              .Where(w => w.module_desc == \"PAT_VISIT\")\r\n              .FirstOrDefault();\r\n            debugLog(\"patientInsertedRecord \", visit);\r\n\r\n            req.query.visit_code = visit.completeNumber;\r\n            req.body.visit_code = visit.completeNumber;\r\n\r\n            //Visit Promise\r\n            return new Promise((resolve, reject) => {\r\n              debugLog(\"Inside Visit\");\r\n\r\n              req.options = {\r\n                db: connection,\r\n                onFailure: error => {\r\n                  reject(error);\r\n                },\r\n                onSuccess: result => {\r\n                  resolve(result);\r\n                }\r\n              };\r\n              debugLog(\"Inside Conn\");\r\n              // req.options.onFailure = error => {\r\n              //   reject(error);\r\n              // };\r\n              // req.options.onSuccess = result => {\r\n              //   resolve(result);\r\n              // };\r\n              // Calling Visit\r\n              insertPatientVisitData(req, res, next);\r\n            }).then(visitData => {\r\n              req.query.visit_id = visitData[\"insertId\"];\r\n              req.visit_id = visitData[\"insertId\"];\r\n              req.body.visit_id = visitData[\"insertId\"];\r\n              req.body.patient_visit_id = visitData[\"insertId\"];\r\n              debugLog(\"Gen Visit \", visitData);\r\n              //Insurance Promise\r\n              return new Promise((resolve, reject) => {\r\n                debugLog(\"Inside Insurance\");\r\n                if (req.body.insured == \"Y\") {\r\n                  delete req[\"options\"][\"onFailure\"];\r\n                  delete req[\"options\"][\"onSuccess\"];\r\n                  req.options.onFailure = error => {\r\n                    reject(error);\r\n                  };\r\n                  req.options.onSuccess = data => {\r\n                    resolve(data);\r\n                  };\r\n                  //Check for insurace\r\n                  addPatientInsuranceData(req, res, next);\r\n                } else {\r\n                  resolve({});\r\n                }\r\n              }).then(insuredRecords => {\r\n                debugLog(\"Orver all records number gen\", output);\r\n                let bill = new LINQ(output)\r\n                  .Where(w => w.module_desc == \"PAT_BILL\")\r\n                  .FirstOrDefault();\r\n                req.bill_number = bill.completeNumber;\r\n                req.body.bill_number = bill.completeNumber;\r\n                //Bill generation\r\n                return new Promise((resolve, reject) => {\r\n                  debugLog(\"Inside Billing\");\r\n                  delete req[\"options\"][\"onFailure\"];\r\n                  delete req[\"options\"][\"onSuccess\"];\r\n                  req.options.onFailure = error => {\r\n                    reject(error);\r\n                  };\r\n                  req.options.onSuccess = data => {\r\n                    resolve(data);\r\n                  };\r\n\r\n                  addBillData(req, res, next);\r\n                }).then(billOutput => {\r\n                  req.query.billing_header_id = billOutput.insertId;\r\n                  req.body.billing_header_id = billOutput.insertId;\r\n\r\n                  let receipt = new LINQ(output)\r\n                    .Where(w => w.module_desc == \"RECEIPT\")\r\n                    .FirstOrDefault();\r\n                  req.body.receipt_number = receipt.completeNumber;\r\n                  return new Promise((resolve, reject) => {\r\n                    debugLog(\"Inside Receipts\");\r\n                    delete req[\"options\"][\"onFailure\"];\r\n                    delete req[\"options\"][\"onSuccess\"];\r\n                    req.options.onFailure = error => {\r\n                      reject(error);\r\n                    };\r\n                    req.options.onSuccess = records => {\r\n                      resolve(records);\r\n                    };\r\n                    newReceiptData(req, res, next);\r\n                  }).then(records => {\r\n                    return new Promise((resolve, reject) => {\r\n                      debugLog(\"Inside Episode\");\r\n                      delete req[\"options\"][\"onFailure\"];\r\n                      delete req[\"options\"][\"onSuccess\"];\r\n                      req.options.onFailure = error => {\r\n                        reject(error);\r\n                      };\r\n                      req.options.onSuccess = records => {\r\n                        resolve(records);\r\n                      };\r\n                      debugLog(\"Before Episode\");\r\n                      addEpisodeEncounterData(req, res, next);\r\n                      debugLog(\"After Episode\");\r\n                    }).then(encounterResult => {\r\n                      connection.commit(error => {\r\n                        if (error) {\r\n                          releaseDBConnection(db, connection);\r\n                          next(error);\r\n                        }\r\n                        req.records = encounterResult;\r\n                        if (updateCounter != 0)\r\n                          updateCounter = updateCounter - 1;\r\n                        next();\r\n                      });\r\n                    });\r\n                  });\r\n                });\r\n              });\r\n            });\r\n          })\r\n          .catch(error => {\r\n            if (updateCounter != 0) updateCounter = updateCounter - 1;\r\n            connection.rollback(() => {\r\n              releaseDBConnection(db, connection);\r\n              next(error);\r\n            });\r\n          });\r\n      });\r\n    });\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n  // debugFunction(\"updateFrontDesk\");\r\n\r\n  // try {\r\n  //   if (req.db == null) {\r\n  //     next(httpStatus.dataBaseNotInitilizedError());\r\n  //   }\r\n  //   let db = req.db;\r\n  //   if (req.query[\"data\"] != null) {\r\n  //     req.query = JSON.parse(req.query[\"data\"]);\r\n  //     req.body = req.query;\r\n  //   }\r\n\r\n  //   db.getConnection((error, connection) => {\r\n  //     if (error) {\r\n  //       next(error);\r\n  //     }\r\n  //     connection.beginTransaction(error => {\r\n  //       if (error) {\r\n  //         connection.rollback(() => {\r\n  //           releaseDBConnection(db, connection);\r\n  //           next(error);\r\n  //         });\r\n  //       }\r\n  //       //Front Desk updation\r\n\r\n  //       //Visit Insertion for update front desk API\r\n  //       //query 1\r\n  //       runningNumber(\r\n  //         req.db,\r\n  //         2,\r\n  //         \"VISIT_NUMGEN\",\r\n  //         (error, patResults, completeNum) => {\r\n  //           if (error) {\r\n  //             connection.rollback(() => {\r\n  //               releaseDBConnection(db, connection);\r\n  //               next(error);\r\n  //             });\r\n  //           }\r\n  //           req.query.visit_code = completeNum;\r\n  //           req.body.visit_code = completeNum;\r\n  //           debugLog(\"req.body.visit_code : \" + completeNum);\r\n\r\n  //           //call\r\n  //           insertVisitData(\r\n  //             connection,\r\n  //             req,\r\n  //             res,\r\n  //             (error, resultdata) => {\r\n  //               if (error) {\r\n  //                 connection.rollback(() => {\r\n  //                   releaseDBConnection(db, connection);\r\n  //                   next(error);\r\n  //                 });\r\n  //               }\r\n\r\n  //               //Billing Insertion for update front desk APi\r\n  //               //Quwery:2\r\n  //               if (resultdata != null && resultdata.length != 0) {\r\n  //                 req.query.visit_id = resultdata[\"insertId\"];\r\n  //                 req.body.visit_id = resultdata[\"insertId\"];\r\n  //                 req.body.patient_visit_id = resultdata[\"insertId\"];\r\n  //                 debugLog(\"req.body.visit_id:\" + resultdata[\"insertId\"]);\r\n\r\n  //                 debugLog(\" result of visit func\", resultdata);\r\n\r\n  //                 //add patient insurance\r\n\r\n  //                 if (req.body.insured == \"Y\") {\r\n  //                   addPatientInsurance(\r\n  //                     connection,\r\n  //                     req,\r\n  //                     res,\r\n  //                     (error, result) => {\r\n  //                       if (error) {\r\n  //                         debugLog(\"error in adding insurence\", error);\r\n  //                         connection.rollback(() => {\r\n  //                           releaseDBConnection(db, connection);\r\n  //                           next(error);\r\n  //                         });\r\n  //                       }\r\n\r\n  //                       debugLog(\"add insuence result:\", result);\r\n  //                     }\r\n  //                   );\r\n  //                 }\r\n\r\n  //                 //call\r\n  //                 addBill(\r\n  //                   connection,\r\n  //                   req,\r\n  //                   res,\r\n  //                   (error, result) => {\r\n  //                     if (error) {\r\n  //                       connection.rollback(() => {\r\n  //                         releaseDBConnection(db, connection);\r\n  //                         next(error);\r\n  //                       });\r\n  //                     }\r\n\r\n  //                     //Query :3\r\n  //                     //insert receipt for update front desk api\r\n\r\n  //                     if (result != null && result.length != 0) {\r\n  //                       req.query.billing_header_id = result.insertId;\r\n  //                       req.body.billing_header_id = result.insertId;\r\n\r\n  //                       debugLog(\r\n  //                         \"  req.body.billing_header_id:\" + result[\"insertId\"]\r\n  //                       );\r\n\r\n  //                       //call\r\n\r\n  //                       newReceipt(\r\n  //                         connection,\r\n  //                         req,\r\n  //                         res,\r\n  //                         (error, resultdata) => {\r\n  //                           if (error) {\r\n  //                             connection.rollback(() => {\r\n  //                               releaseDBConnection(db, connection);\r\n  //                               next(error);\r\n  //                             });\r\n  //                           }\r\n  //                           connection.commit(error => {\r\n  //                             releaseDBConnection(db, connection);\r\n  //                             if (error) {\r\n  //                               connection.rollback(() => {\r\n  //                                 next(error);\r\n  //                               });\r\n  //                             }\r\n  //                             req.records = result;\r\n  //                             next();\r\n  //                           });\r\n\r\n  //                           debugLog(\"succes result of query 3 : \", resultdata);\r\n  //                         },\r\n  //                         next\r\n  //                       );\r\n  //                     }\r\n  //                   },\r\n\r\n  //                   next\r\n  //                 );\r\n  //               }\r\n  //             },\r\n  //             true,\r\n  //             next\r\n  //           );\r\n  //         }\r\n  //       );\r\n  //     });\r\n  //   });\r\n  // } catch (e) {\r\n  //   next(e);\r\n  // }\r\n};\r\n\r\nmodule.exports = {\r\n  addFrontDesk,\r\n  selectFrontDesk,\r\n  updateFrontDesk\r\n};\r\n"]}