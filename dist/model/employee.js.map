{"version":3,"sources":["../../src/model/employee.js"],"names":["employeeModel","hims_d_employee_id","employee_code","first_name","middle_name","last_name","sex","date_of_birth","date_of_joining","date_of_leaving","address","primary_contact_no","secondary_contact_no","email","emergancy_contact_person","emergancy_contact_no","blood_group","employee_status","effective_start_date","effective_end_date","created_date","Date","created_by","updated_date","updated_by","employeeWhereCondition","addEmployee","req","res","next","db","dataBaseNotInitilizedError","employeeDetails","body","getConnection","error","connection","query","result","resultBack","records","e","getEmployee","pagePaging","paging","Page","pageNo","page","pageSize","parameters","Wherecondition","condition","values","updateEmployee","module","exports"],"mappings":";;AAAA;;;;AACA;;AAMA;;;;;;AACA,IAAIA,gBAAgB;AAClBC,sBAAoB,CADF;AAElBC,iBAAe,IAFG;AAGlBC,cAAY,IAHM;AAIlBC,eAAa,IAJK;AAKlBC,aAAW,IALO;AAMlBC,OAAK,MANa;AAOlBC,iBAAe,IAPG;AAQlBC,mBAAiB,IARC;AASlBC,mBAAiB,IATC;AAUlBC,WAAS,IAVS;AAWlBC,sBAAoB,IAXF;AAYlBC,wBAAsB,IAZJ;AAalBC,SAAO,IAbW;AAclBC,4BAA0B,IAdR;AAelBC,wBAAsB,IAfJ;AAgBlBC,eAAa,IAhBK;AAiBlBC,mBAAiB,GAjBC;AAkBlBC,wBAAsB,IAlBJ;AAmBlBC,sBAAoB,IAnBF;AAoBlBC,gBAAc,IAAIC,IAAJ,EApBI;AAqBlBC,cAAY,IArBM;AAsBlBC,gBAAc,IAAIF,IAAJ,EAtBI;AAuBlBG,cAAY;AAvBM,CAApB;AAyBA,IAAIC,yBAAyB;AAC3BvB,iBAAe,KADY;AAE3BC,cAAY,KAFe;AAG3BC,eAAa,KAHc;AAI3BC,aAAW,KAJgB;AAK3BC,OAAK,KALsB;AAM3BU,eAAa,KANc;AAO3BC,mBAAiB,KAPU;AAQ3BT,mBAAiB,KARU;AAS3BC,mBAAiB,KATU;AAU3BE,sBAAoB,KAVO;AAW3BE,SAAO;AAXoB,CAA7B;AAaA,IAAIa,cAAc,SAAdA,WAAc,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACpC,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAK,qBAAWE,0BAAX,EAAL;AACD;AACD,QAAID,KAAKH,IAAIG,EAAb;AACA,QAAIE,kBAAkB,sBAAOhC,aAAP,EAAsB2B,IAAIM,IAA1B,CAAtB;AACAH,OAAGI,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTN,aAAKM,KAAL;AACD;;AAEDC,iBAAWC,KAAX,CACE;;;;0DADF,EAME,CACEL,gBAAgB9B,aADlB,EAEE8B,gBAAgB7B,UAFlB,EAGE6B,gBAAgB5B,WAHlB,EAIE4B,gBAAgB3B,SAJlB,EAKE2B,gBAAgB1B,GALlB,EAME0B,gBAAgBzB,aANlB,EAOEyB,gBAAgBxB,eAPlB,EAQEwB,gBAAgBvB,eARlB,EASEuB,gBAAgBtB,OATlB,EAUEsB,gBAAgBrB,kBAVlB,EAWEqB,gBAAgBpB,oBAXlB,EAYEoB,gBAAgBnB,KAZlB,EAaEmB,gBAAgBlB,wBAblB,EAcEkB,gBAAgBjB,oBAdlB,EAeEiB,gBAAgBhB,WAflB,EAgBEgB,gBAAgBd,oBAhBlB,EAiBEc,gBAAgBb,kBAjBlB,EAkBEa,gBAAgBZ,YAlBlB,EAmBEY,gBAAgBV,UAnBlB,CANF,EA2BE,UAACa,KAAD,EAAQG,MAAR,EAAmB;AACjB,YAAIH,KAAJ,EAAW;AACT,0CAAoBL,EAApB,EAAwBM,UAAxB;AACAP,eAAKM,KAAL;AACD;;AAEDC,mBAAWC,KAAX,CACE,0DADF,EAEE,CAACC,OAAO,UAAP,CAAD,CAFF,EAGE,UAACH,KAAD,EAAQI,UAAR,EAAuB;AACrB,0CAAoBT,EAApB,EAAwBM,UAAxB;AACA,cAAID,KAAJ,EAAW;AACTN,iBAAKM,KAAL;AACD;AACDR,cAAIa,OAAJ,GAAcD,UAAd;AACAV;AACD,SAVH;AAYD,OA7CH;AA+CD,KApDD;AAqDD,GA3DD,CA2DE,OAAOY,CAAP,EAAU;AACVZ,SAAKY,CAAL;AACD;AACF,CA/DD;AAgEA,IAAIC,cAAc,SAAdA,WAAc,CAACf,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACpC,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAK,qBAAWE,0BAAX,EAAL;AACD;AACD,QAAIY,aAAa,EAAjB;AACA,QAAIhB,IAAIiB,MAAJ,IAAc,IAAlB,EAAwB;AACtB,UAAIC,OAAO,mBAAOlB,IAAIiB,MAAX,CAAX;AACAD,oBAAc,YAAYE,KAAKC,MAAjB,GAA0B,GAA1B,GAAgCC,KAAKC,QAAnD;AACD;AACD,QAAIC,aAAa,sBACfxB,sBADe,EAEfE,IAAIuB,cAAJ,IAAsB,IAAtB,GAA6B,EAA7B,GAAkCvB,IAAIuB,cAFvB,CAAjB;AAIA,QAAIC,YAAY,2BAAe,sBAAOF,UAAP,EAAmBtB,IAAIU,KAAvB,CAAf,CAAhB;AACA,gCACE;AACEP,UAAIH,IAAIG,EADV;AAEEO,aACE;;;;;;;;;;;;;;;;;;+EAAA,GAmBAc,UAAUA,SAnBV,GAoBA,GApBA,GAqBAR,UAxBJ;AAyBES,cAAQD,UAAUC;AAzBpB,KADF,EA4BE,kBAAU;AACRzB,UAAIa,OAAJ,GAAcF,MAAd;AACAT;AACD,KA/BH,EAgCE,iBAAS;AACPA,WAAKM,KAAL;AACD,KAlCH,EAmCE,IAnCF;AAqCD,GAnDD,CAmDE,OAAOM,CAAP,EAAU;AACVZ,SAAKY,CAAL;AACD;AACF,CAvDD;AAwDA,IAAIY,iBAAiB,SAAjBA,cAAiB,CAAC1B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvC,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAK,qBAAWE,0BAAX,EAAL;AACD;AACD,QAAID,KAAKH,IAAIG,EAAb;AACA,QAAIE,kBAAkB,sBAAOhC,aAAP,EAAsB2B,IAAIM,IAA1B,CAAtB;AACAH,OAAGI,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTN,aAAKM,KAAL;AACD;AACDC,iBAAWC,KAAX,CACE;;;;;kFADF,EAOE,CACEL,gBAAgB7B,UADlB,EAEE6B,gBAAgB5B,WAFlB,EAGE4B,gBAAgB3B,SAHlB,EAIE2B,gBAAgB1B,GAJlB,EAKE0B,gBAAgBzB,aALlB,EAMEyB,gBAAgBxB,eANlB,EAOEwB,gBAAgBvB,eAPlB,EAQEuB,gBAAgBtB,OARlB,EASEsB,gBAAgBrB,kBATlB,EAUEqB,gBAAgBpB,oBAVlB,EAWEoB,gBAAgBnB,KAXlB,EAYEmB,gBAAgBlB,wBAZlB,EAaEkB,gBAAgBjB,oBAblB,EAcEiB,gBAAgBhB,WAdlB,EAeEgB,gBAAgBf,eAflB,EAgBEe,gBAAgBd,oBAhBlB,EAiBEc,gBAAgBb,kBAjBlB,EAkBEa,gBAAgBR,UAlBlB,EAmBEQ,gBAAgB/B,kBAnBlB,CAPF,EA4BE,UAACkC,KAAD,EAAQG,MAAR,EAAmB;AACjB,wCAAoBR,EAApB,EAAwBM,UAAxB;AACA,YAAID,KAAJ,EAAW;AACTN,eAAKM,KAAL;AACD;AACDR,YAAIa,OAAJ,GAAcF,MAAd;AACAT;AACD,OAnCH;AAqCD,KAzCD;AA0CD,GAhDD,CAgDE,OAAOY,CAAP,EAAU;AACVZ,SAAKY,CAAL;AACD;AACF,CApDD;AAqDAa,OAAOC,OAAP,GAAiB;AACf7B,0BADe;AAEfgB,0BAFe;AAGfW;AAHe,CAAjB","file":"employee.js","sourcesContent":["import extend from \"extend\";\nimport {\n  selectStatement,\n  paging,\n  whereCondition,\n  releaseDBConnection\n} from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\nlet employeeModel = {\n  hims_d_employee_id: 0,\n  employee_code: null,\n  first_name: null,\n  middle_name: null,\n  last_name: null,\n  sex: \"MALE\",\n  date_of_birth: null,\n  date_of_joining: null,\n  date_of_leaving: null,\n  address: null,\n  primary_contact_no: null,\n  secondary_contact_no: null,\n  email: null,\n  emergancy_contact_person: null,\n  emergancy_contact_no: null,\n  blood_group: null,\n  employee_status: \"A\",\n  effective_start_date: null,\n  effective_end_date: null,\n  created_date: new Date(),\n  created_by: null,\n  updated_date: new Date(),\n  updated_by: null\n};\nlet employeeWhereCondition = {\n  employee_code: \"ALL\",\n  first_name: \"ALL\",\n  middle_name: \"ALL\",\n  last_name: \"ALL\",\n  sex: \"ALL\",\n  blood_group: \"ALL\",\n  employee_status: \"ALL\",\n  date_of_joining: \"ALL\",\n  date_of_leaving: \"ALL\",\n  primary_contact_no: \"ALL\",\n  email: \"ALL\"\n};\nlet addEmployee = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let employeeDetails = extend(employeeModel, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT hims_d_employee(employee_code,first_name,middle_name,last_name, \\\n            sex,date_of_birth,date_of_joining,date_of_leaving,address,primary_contact_no,\\\n            secondary_contact_no,email,emergancy_contact_person,emergancy_contact_no,\\\n            blood_group,effective_start_date,effective_end_date,created_date,created_by) \\\n            VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n        [\n          employeeDetails.employee_code,\n          employeeDetails.first_name,\n          employeeDetails.middle_name,\n          employeeDetails.last_name,\n          employeeDetails.sex,\n          employeeDetails.date_of_birth,\n          employeeDetails.date_of_joining,\n          employeeDetails.date_of_leaving,\n          employeeDetails.address,\n          employeeDetails.primary_contact_no,\n          employeeDetails.secondary_contact_no,\n          employeeDetails.email,\n          employeeDetails.emergancy_contact_person,\n          employeeDetails.emergancy_contact_no,\n          employeeDetails.blood_group,\n          employeeDetails.effective_start_date,\n          employeeDetails.effective_end_date,\n          employeeDetails.created_date,\n          employeeDetails.created_by\n        ],\n        (error, result) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          connection.query(\n            \"SELECT * FROM hims_d_employee WHERE hims_d_employee_id=?\",\n            [result[\"insertId\"]],\n            (error, resultBack) => {\n              releaseDBConnection(db, connection);\n              if (error) {\n                next(error);\n              }\n              req.records = resultBack;\n              next();\n            }\n          );\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\nlet getEmployee = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let pagePaging = \"\";\n    if (req.paging != null) {\n      let Page = paging(req.paging);\n      pagePaging += \" LIMIT \" + Page.pageNo + \",\" + page.pageSize;\n    }\n    let parameters = extend(\n      employeeWhereCondition,\n      req.Wherecondition == null ? {} : req.Wherecondition\n    );\n    let condition = whereCondition(extend(parameters, req.query));\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"SELECT hims_d_employee_id \\\n        ,employee_code            \t\\\n        ,first_name               \t\\\n        ,middle_name              \t\\\n        ,last_name                \t\\\n        ,sex                      \t\\\n        ,date_of_birth            \t\\\n        ,date_of_joining          \t\\\n        ,date_of_leaving          \t\\\n        ,address                  \t\\\n        ,primary_contact_no       \t\\\n        ,secondary_contact_no     \t\\\n        ,email                    \t\\\n        ,emergancy_contact_person \t\\\n        ,emergancy_contact_no     \t\\\n        ,blood_group              \t\\\n        ,employee_status          \t\\\n        ,effective_start_date     \t\\\n        ,effective_end_date FROM hims_d_employee WHERE record_status ='A' AND \" +\n          condition.condition +\n          \" \" +\n          pagePaging,\n        values: condition.values\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\nlet updateEmployee = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let employeeDetails = extend(employeeModel, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.query(\n        \"UPDATE hims_d_employee SET first_name=?,middle_name=?\\\n                     ,last_name=?,sex=?,date_of_birth=?,date_of_joining=?\\\n                     ,date_of_leaving=?,address=?,primary_contact_no=?,secondary_contact_no=?\\\n                     ,email=?,emergancy_contact_person=?,emergancy_contact_no=?\\\n                     ,blood_group=?,employee_status=?,effective_start_date=?,effective_end_date=?\\\n                     ,updated_date=now(),updated_by=? WHERE  hims_d_employee_id=?\",\n        [\n          employeeDetails.first_name,\n          employeeDetails.middle_name,\n          employeeDetails.last_name,\n          employeeDetails.sex,\n          employeeDetails.date_of_birth,\n          employeeDetails.date_of_joining,\n          employeeDetails.date_of_leaving,\n          employeeDetails.address,\n          employeeDetails.primary_contact_no,\n          employeeDetails.secondary_contact_no,\n          employeeDetails.email,\n          employeeDetails.emergancy_contact_person,\n          employeeDetails.emergancy_contact_no,\n          employeeDetails.blood_group,\n          employeeDetails.employee_status,\n          employeeDetails.effective_start_date,\n          employeeDetails.effective_end_date,\n          employeeDetails.updated_by,\n          employeeDetails.hims_d_employee_id\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\nmodule.exports = {\n  addEmployee,\n  getEmployee,\n  updateEmployee\n};\n"]}