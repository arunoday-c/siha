{"version":3,"sources":["../../src/model/employee.js"],"names":["addEmployee","req","res","next","db","dataBaseNotInitilizedError","input","body","getConnection","error","connection","beginTransaction","rollback","query","employee_code","title_id","first_name","middle_name","last_name","full_name","arabic_name","employee_designation_id","license_number","sex","date_of_birth","Date","date_of_joining","date_of_leaving","address","address2","pincode","city_id","state_id","country_id","primary_contact_no","secondary_contact_no","email","emergancy_contact_person","emergancy_contact_no","blood_group","isdoctor","employee_status","effective_start_date","effective_end_date","created_by","updated_by","result","insertId","deptDetails","length","insurtColumns","join","sampleInputObject","arrayObj","newFieldToInsert","departResult","resolve","reject","serviceComm","serviceCommResult","e","then","servTypeCommission","serviceTypeCommResult","commit","records","results","getEmployee","employeeWhereCondition","pagePaging","paging","Page","pageNo","page","pageSize","parameters","Wherecondition","condition","values","i","employee_id","hims_d_employee_id","updateEmployee","record_status","insertdeptDetails","insertDepartResult","updatedeptDetails","inputParam","qry","services_id","sub_department_id","category_speciality_id","user_id","toLocaleString","hims_d_employee_department_id","updateDeptDetailResult","insertserviceComm","updateserviceComm","provider_id","service_type_id","op_cash_commission_percent","op_credit_commission_percent","ip_cash_commission_percent","ip_credit_commission_percent","hims_m_doctor_service_commission_id","updateServiceCommResult","insertservTypeCommission","insrtServiceTypeCommResult","updateservTypeCommission","op_cash_comission_percent","op_credit_comission_percent","hims_m_doctor_service_type_commission_id","finally","getEmployeeDetails","where","getEmployeeCategory","speciality_id","getDoctorServiceCommission","getDoctorServiceTypeCommission","module","exports"],"mappings":"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","file":"employee.js","sourcesContent":["import extend from \"extend\";\nimport {\n  selectStatement,\n  paging,\n  whereCondition,\n  releaseDBConnection,\n  jsonArrayToObject\n} from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\nimport moment from \"moment\";\nimport { logger, debugFunction, debugLog } from \"../utils/logging\";\nimport Promise from \"bluebird\";\n// api to add employee\nlet addEmployee = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n\n        connection.query(\n          \"INSERT hims_d_employee(employee_code,title_id,first_name,middle_name,last_name,\\\n          full_name,arabic_name,employee_designation_id,license_number,sex,date_of_birth,date_of_joining,date_of_leaving,address,\\\n          address2,pincode,city_id,state_id,country_id,primary_contact_no,secondary_contact_no,email,emergancy_contact_person,emergancy_contact_no,\\\n          blood_group,isdoctor,employee_status,effective_start_date,effective_end_date,created_date,created_by,updated_date,updated_by) values(\\\n            ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n          [\n            input.employee_code,\n            input.title_id,\n            input.first_name,\n            input.middle_name,\n            input.last_name,\n            input.full_name,\n            input.arabic_name,\n            input.employee_designation_id,\n            input.license_number,\n            input.sex,\n            input.date_of_birth != null\n              ? new Date(input.date_of_birth)\n              : input.date_of_birth,\n            input.date_of_joining,\n            input.date_of_leaving,\n            input.address,\n            input.address2,\n            input.pincode,\n            input.city_id,\n            input.state_id,\n            input.country_id,\n            input.primary_contact_no,\n            input.secondary_contact_no,\n            input.email,\n            input.emergancy_contact_person,\n            input.emergancy_contact_no,\n            input.blood_group,\n            input.isdoctor,\n            input.employee_status,\n            input.effective_start_date != null\n              ? new Date(input.effective_start_date)\n              : input.effective_start_date,\n            input.effective_end_date != null\n              ? new Date(input.effective_end_date)\n              : input.effective_end_date,\n            new Date(),\n            input.created_by,\n            new Date(),\n            input.updated_by\n          ],\n          (error, result) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            if (result.insertId != null && req.body.deptDetails.length > 0) {\n              const insurtColumns = [\n                \"services_id\",\n                \"sub_department_id\",\n                \"category_speciality_id\",\n                \"user_id\",\n                \"created_by\",\n                \"updated_by\"\n              ];\n\n              connection.query(\n                \"INSERT INTO hims_m_employee_department_mappings(\" +\n                  insurtColumns.join(\",\") +\n                  \",employee_id,created_date,updated_date) VALUES ?\",\n                [\n                  jsonArrayToObject({\n                    sampleInputObject: insurtColumns,\n                    arrayObj: req.body.deptDetails,\n                    newFieldToInsert: [result.insertId, new Date(), new Date()],\n                    req: req\n                  })\n                ],\n                (error, departResult) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n\n                  new Promise((resolve, reject) => {\n                    try {\n                      if (input.serviceComm.length > 0) {\n                        const insurtColumns = [\n                          \"services_id\",\n                          \"service_type_id\",\n                          \"op_cash_commission_percent\",\n                          \"op_credit_commission_percent\",\n                          \"ip_cash_commission_percent\",\n                          \"ip_credit_commission_percent\",\n                          \"created_by\",\n                          \"updated_by\"\n                        ];\n\n                        connection.query(\n                          \"INSERT INTO hims_m_doctor_service_commission(\" +\n                            insurtColumns.join(\",\") +\n                            \",provider_id,created_date,updated_date) VALUES ?\",\n                          [\n                            jsonArrayToObject({\n                              sampleInputObject: insurtColumns,\n                              arrayObj: req.body.serviceComm,\n                              newFieldToInsert: [\n                                result.insertId,\n                                new Date(),\n                                new Date()\n                              ],\n                              req: req\n                            })\n                          ],\n                          (error, serviceCommResult) => {\n                            if (error) {\n                              connection.rollback(() => {\n                                releaseDBConnection(db, connection);\n                                next(error);\n                              });\n                            }\n                            return resolve(serviceCommResult);\n                          }\n                        );\n                      } else {\n                        return resolve(departResult);\n                      }\n                    } catch (e) {\n                      reject(e);\n                    }\n                  }).then(results => {\n                    if (input.servTypeCommission.length > 0) {\n                      const insurtColumns = [\n                        \"service_type_id\",\n                        \"op_cash_comission_percent\",\n                        \"op_credit_comission_percent\",\n                        \"ip_cash_commission_percent\",\n                        \"ip_credit_commission_percent\",\n                        \"created_by\",\n                        \"updated_by\"\n                      ];\n\n                      connection.query(\n                        \"INSERT INTO hims_m_doctor_service_type_commission(\" +\n                          insurtColumns.join(\",\") +\n                          \",provider_id,created_date,updated_date) VALUES ?\",\n                        [\n                          jsonArrayToObject({\n                            sampleInputObject: insurtColumns,\n                            arrayObj: req.body.servTypeCommission,\n                            newFieldToInsert: [\n                              result.insertId,\n                              new Date(),\n                              new Date()\n                            ],\n                            req: req\n                          })\n                        ],\n                        (error, serviceTypeCommResult) => {\n                          if (error) {\n                            connection.rollback(() => {\n                              releaseDBConnection(db, connection);\n                              next(error);\n                            });\n                          }\n\n                          connection.commit(error => {\n                            if (error) {\n                              connection.rollback(() => {\n                                releaseDBConnection(db, connection);\n                                next(error);\n                              });\n                            }\n                            releaseDBConnection(db, connection);\n                            req.records = serviceTypeCommResult;\n                            next();\n                          });\n                        }\n                      );\n                    } else {\n                      connection.commit(error => {\n                        if (error) {\n                          connection.rollback(() => {\n                            releaseDBConnection(db, connection);\n                            next(error);\n                          });\n                        }\n                        releaseDBConnection(db, connection);\n                        req.records = results;\n                        next();\n                      });\n                    }\n                  });\n                }\n              );\n            } else {\n              req.records = result;\n              releaseDBConnection(db, connection);\n              next();\n            }\n\n            // connection.query(\n            //   \"SELECT * FROM hims_d_employee WHERE hims_d_employee_id=?\",\n            //   [result[\"insertId\"]],\n            //   (error, resultBack) => {\n            //     releaseDBConnection(db, connection);\n            //     if (error) {\n            //       next(error);\n            //     }\n            //     req.records = resultBack;\n            //     next();\n            //   }\n            // );\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n// api to fetch employee\nlet getEmployee = (req, res, next) => {\n  let employeeWhereCondition = {\n    employee_code: \"ALL\",\n    first_name: \"ALL\",\n    middle_name: \"ALL\",\n    last_name: \"ALL\",\n    sex: \"ALL\",\n    blood_group: \"ALL\",\n    employee_status: \"ALL\",\n    date_of_joining: \"ALL\",\n    date_of_leaving: \"ALL\",\n    primary_contact_no: \"ALL\",\n    email: \"ALL\"\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let pagePaging = \"\";\n    if (req.paging != null) {\n      let Page = paging(req.paging);\n      pagePaging += \" LIMIT \" + Page.pageNo + \",\" + page.pageSize;\n    }\n    let parameters = extend(\n      employeeWhereCondition,\n      req.Wherecondition == null ? {} : req.Wherecondition\n    );\n    let condition = whereCondition(extend(parameters, req.query));\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"SELECT * FROM hims_d_employee WHERE record_status ='A' AND \" +\n          condition.condition +\n          \" \" +\n          pagePaging,\n        values: condition.values\n      },\n      result => {\n        for (let i = 0; i < result.length; i++) {\n          result[i].employee_id = result[i].hims_d_employee_id;\n        }\n\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to update Employee\nlet updateEmployee = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n\n        connection.query(\n          \"UPDATE hims_d_employee SET employee_code=?,title_id=?,first_name=?,middle_name=?,last_name=?,\\\n        full_name=?,arabic_name=?,employee_designation_id=?,license_number=?,sex=?,date_of_birth=?,date_of_joining=?\\\n        ,date_of_leaving=?,address=?,address2=?,pincode=?,city_id=?,state_id=?,country_id=?,primary_contact_no=?,\\\n        secondary_contact_no=?,email=?,emergancy_contact_person=?,emergancy_contact_no=?,blood_group=?,isdoctor=?,\\\n        employee_status=?,effective_start_date=?,effective_end_date=?,updated_date=?,updated_by=?,record_status=? WHERE record_status='A' and  hims_d_employee_id=?\",\n          [\n            input.employee_code,\n            input.title_id,\n            input.first_name,\n            input.middle_name,\n            input.last_name,\n            input.full_name,\n            input.arabic_name,\n            input.employee_designation_id,\n            input.license_number,\n            input.sex,\n            input.date_of_birth,\n            input.date_of_joining,\n            input.date_of_leaving,\n            input.address,\n            input.address2,\n            input.pincode,\n            input.city_id,\n            input.state_id,\n            input.country_id,\n            input.primary_contact_no,\n            input.secondary_contact_no,\n            input.email,\n            input.emergancy_contact_person,\n            input.emergancy_contact_no,\n            input.blood_group,\n            input.isdoctor,\n            input.employee_status,\n            input.effective_start_date,\n            input.effective_end_date,\n            new Date(),\n            input.updated_by,\n            input.record_status,\n            input.hims_d_employee_id\n          ],\n          (error, result) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            if (result.length != 0) {\n              return new Promise((resolve, reject) => {\n                if (input.insertdeptDetails.length > 0) {\n                  const insurtColumns = [\n                    \"employee_id\",\n                    \"services_id\",\n                    \"sub_department_id\",\n                    \"category_speciality_id\",\n                    \"user_id\",\n                    \"created_by\",\n                    \"updated_by\"\n                  ];\n\n                  connection.query(\n                    \"INSERT INTO hims_m_employee_department_mappings(\" +\n                      insurtColumns.join(\",\") +\n                      \",created_date,updated_date) VALUES ?\",\n                    [\n                      jsonArrayToObject({\n                        sampleInputObject: insurtColumns,\n                        arrayObj: req.body.insertdeptDetails,\n                        newFieldToInsert: [new Date(), new Date()],\n                        req: req\n                      })\n                    ],\n                    (error, insertDepartResult) => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                      return resolve(insertDepartResult);\n                    }\n                  );\n                } else {\n                  resolve(result);\n                }\n              })\n                .then(resultFrmInsertDept => {\n                  debugLog(\"inside 1 then\");\n\n                  if (input.updatedeptDetails.length > 0) {\n                    debugLog(\"inside updatedeptDetails\");\n                    let inputParam = extend([], req.body.updatedeptDetails);\n                    let qry = \"\";\n\n                    for (\n                      let i = 0;\n                      i < req.body.updatedeptDetails.length;\n                      i++\n                    ) {\n                      qry +=\n                        \"UPDATE `hims_m_employee_department_mappings` SET employee_id='\" +\n                        inputParam[i].employee_id +\n                        \"', services_id='\" +\n                        inputParam[i].services_id +\n                        \"', sub_department_id='\" +\n                        inputParam[i].sub_department_id +\n                        \"', category_speciality_id='\" +\n                        inputParam[i].category_speciality_id +\n                        \"', user_id='\" +\n                        inputParam[i].user_id +\n                        \"', record_status='\" +\n                        inputParam[i].record_status +\n                        \"', updated_date='\" +\n                        new Date().toLocaleString() +\n                        \"',updated_by=\\\n'\" +\n                        req.body.updated_by +\n                        \"' WHERE record_status='A' and hims_d_employee_department_id='\" +\n                        inputParam[i].hims_d_employee_department_id +\n                        \"';\";\n                    }\n\n                    connection.query(qry, (error, updateDeptDetailResult) => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                    });\n                  }\n                })\n                .then(updateDeptResult => {\n                  debugLog(\"inside 2 then\");\n\n                  if (input.insertserviceComm.length > 0) {\n                    debugLog(\"inside insertserviceComm\");\n                    const insurtColumns = [\n                      \"provider_id\",\n                      \"services_id\",\n                      \"service_type_id\",\n                      \"op_cash_commission_percent\",\n                      \"op_credit_commission_percent\",\n                      \"ip_cash_commission_percent\",\n                      \"ip_credit_commission_percent\",\n                      \"created_by\",\n                      \"updated_by\"\n                    ];\n\n                    connection.query(\n                      \"INSERT INTO hims_m_doctor_service_commission(\" +\n                        insurtColumns.join(\",\") +\n                        \",created_date,updated_date) VALUES ?\",\n                      [\n                        jsonArrayToObject({\n                          sampleInputObject: insurtColumns,\n                          arrayObj: req.body.insertserviceComm,\n                          newFieldToInsert: [new Date(), new Date()],\n                          req: req\n                        })\n                      ],\n                      (error, serviceCommResult) => {\n                        if (error) {\n                          connection.rollback(() => {\n                            releaseDBConnection(db, connection);\n                            next(error);\n                          });\n                        }\n                        //--\n                      }\n                    );\n                  }\n                })\n                .then(serviceCommResult => {\n                  debugLog(\"inside 3 then\");\n\n                  if (input.updateserviceComm.length > 0) {\n                    debugLog(\"inside updateserviceComm\");\n                    let inputParam = extend([], req.body.updateserviceComm);\n                    let qry = \"\";\n\n                    for (\n                      let i = 0;\n                      i < req.body.updateserviceComm.length;\n                      i++\n                    ) {\n                      qry +=\n                        \"UPDATE `hims_m_doctor_service_commission` SET provider_id='\" +\n                        inputParam[i].provider_id +\n                        \"', services_id='\" +\n                        inputParam[i].services_id +\n                        \"', service_type_id='\" +\n                        inputParam[i].service_type_id +\n                        \"', op_cash_commission_percent='\" +\n                        inputParam[i].op_cash_commission_percent +\n                        \"', op_credit_commission_percent='\" +\n                        inputParam[i].op_credit_commission_percent +\n                        \"', ip_cash_commission_percent='\" +\n                        inputParam[i].ip_cash_commission_percent +\n                        \"', ip_credit_commission_percent='\" +\n                        inputParam[i].ip_credit_commission_percent +\n                        \"', record_status='\" +\n                        inputParam[i].record_status +\n                        \"', updated_date='\" +\n                        new Date().toLocaleString() +\n                        \"',updated_by=\\\n'\" +\n                        req.body.updated_by +\n                        \"' WHERE record_status='A' and hims_m_doctor_service_commission_id='\" +\n                        inputParam[i].hims_m_doctor_service_commission_id +\n                        \"';\";\n                    }\n\n                    connection.query(qry, (error, updateServiceCommResult) => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                    });\n                  }\n                })\n                .then(updateServiceCommResult => {\n                  debugLog(\"inside 4 then\");\n                  if (input.insertservTypeCommission.length > 0) {\n                    debugLog(\"inside insertservTypeCommission\");\n                    const insurtColumns = [\n                      \"provider_id\",\n                      \"service_type_id\",\n                      \"op_cash_comission_percent\",\n                      \"op_credit_comission_percent\",\n                      \"ip_cash_commission_percent\",\n                      \"ip_credit_commission_percent\",\n                      \"created_by\",\n                      \"updated_by\"\n                    ];\n\n                    connection.query(\n                      \"INSERT INTO hims_m_doctor_service_type_commission(\" +\n                        insurtColumns.join(\",\") +\n                        \",created_date,updated_date) VALUES ?\",\n                      [\n                        jsonArrayToObject({\n                          sampleInputObject: insurtColumns,\n                          arrayObj: req.body.insertservTypeCommission,\n                          newFieldToInsert: [new Date(), new Date()],\n                          req: req\n                        })\n                      ],\n                      (error, insrtServiceTypeCommResult) => {\n                        if (error) {\n                          connection.rollback(() => {\n                            releaseDBConnection(db, connection);\n                            next(error);\n                          });\n                        }\n                        //-\n                      }\n                    );\n                  }\n                })\n                .then(insrtServiceTypeCommResult => {\n                  debugLog(\"inside 5 then\");\n                  if (input.updateservTypeCommission.length > 0) {\n                    debugLog(\"inside updateservTypeCommission\");\n                    let inputParam = extend(\n                      [],\n                      req.body.updateservTypeCommission\n                    );\n                    let qry = \"\";\n\n                    for (\n                      let i = 0;\n                      i < req.body.updateservTypeCommission.length;\n                      i++\n                    ) {\n                      qry +=\n                        \"UPDATE `hims_m_doctor_service_type_commission` SET provider_id='\" +\n                        inputParam[i].provider_id +\n                        \"', service_type_id='\" +\n                        inputParam[i].service_type_id +\n                        \"', op_cash_comission_percent='\" +\n                        inputParam[i].op_cash_comission_percent +\n                        \"', op_credit_comission_percent='\" +\n                        inputParam[i].op_credit_comission_percent +\n                        \"', ip_cash_commission_percent='\" +\n                        inputParam[i].ip_cash_commission_percent +\n                        \"', ip_credit_commission_percent='\" +\n                        inputParam[i].ip_credit_commission_percent +\n                        \"', record_status='\" +\n                        inputParam[i].record_status +\n                        \"', updated_date='\" +\n                        new Date().toLocaleString() +\n                        \"',updated_by=\\\n'\" +\n                        req.body.updated_by +\n                        \"' WHERE record_status='A' and hims_m_doctor_service_type_commission_id='\" +\n                        inputParam[i].hims_m_doctor_service_type_commission_id +\n                        \"';\";\n                    }\n\n                    connection.query(qry, (error, updateServiceCommResult) => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                    });\n                  }\n                })\n\n                .finally(allResult => {\n                  debugLog(\"inside finally\");\n                  connection.commit(error => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n                    releaseDBConnection(db, connection);\n                    req.records = result;\n                    next();\n                  });\n                });\n            } else {\n              req.records = result;\n              releaseDBConnection(db, connection);\n              next();\n            }\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get eployee details\nlet getEmployeeDetails = (req, res, next) => {\n  let employeeWhereCondition = {\n    employee_code: \"ALL\",\n    first_name: \"ALL\",\n    middle_name: \"ALL\",\n    last_name: \"ALL\",\n    sex: \"ALL\",\n    blood_group: \"ALL\",\n    employee_status: \"ALL\",\n    date_of_joining: \"ALL\",\n    date_of_leaving: \"ALL\",\n    primary_contact_no: \"ALL\",\n    email: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(employeeWhereCondition, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"SELECT E.hims_d_employee_id,E.employee_code,E.title_id,E.first_name,E.middle_name,E.last_name,E.full_name,E.arabic_name,E.employee_designation_id,\\\n        E.license_number,E.sex,E.date_of_birth,E.date_of_joining,E.date_of_leaving,E.address,E.address2,E.pincode,E.city_id,E.state_id,E.country_id,E.primary_contact_no,\\\n        E.secondary_contact_no,E.email,E.emergancy_contact_person,E.emergancy_contact_no,E.blood_group,\\\n        E.isdoctor,E.employee_status,E.effective_start_date,E.effective_end_date,\\\n        ED.hims_d_employee_department_id,ED.employee_id,ED.sub_department_id,ED.category_speciality_id,ED.user_id, ED.services_id,CS.hims_m_category_speciality_mappings_id,CS.category_id,CS.speciality_id,\\\n        CS.category_speciality_status,CS.effective_start_date,CS.effective_end_date\\\n        from hims_d_employee E,hims_m_employee_department_mappings ED,hims_m_category_speciality_mappings CS\\\n         Where E.record_status='A' and ED.record_status='A' and CS.record_status='A' and E.hims_d_employee_id=ED.employee_id and ED.category_speciality_id=CS.hims_m_category_speciality_mappings_id AND \" +\n          where.condition,\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get eployee details\nlet getEmployeeCategory = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_m_category_speciality_mappings_id, category_id, speciality_id ,C.hims_employee_category_id,C.employee_category_code,C.employee_category_name,\\\n        C.employee_category_desc from hims_m_category_speciality_mappings CS,hims_d_employee_category C\\\n         where CS.record_status='A' and C.record_status='A' and  CS.category_id=C.hims_employee_category_id and speciality_id=?\",\n        [req.query.speciality_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get Doctor Service Commission\nlet getDoctorServiceCommission = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.query);\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_m_doctor_service_commission_id,provider_id,services_id,service_type_id,op_cash_commission_percent,\\\n        op_credit_commission_percent,ip_cash_commission_percent,ip_credit_commission_percent\\\n         from hims_m_doctor_service_commission where record_status='A'and provider_id=?\",\n        [input.provider_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get Doctor Service  type Commission\nlet getDoctorServiceTypeCommission = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.query);\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_m_doctor_service_type_commission_id,provider_id,service_type_id,\\\n        op_cash_comission_percent,op_credit_comission_percent,ip_cash_commission_percent,ip_credit_commission_percent\\\n         from hims_m_doctor_service_type_commission where record_status='A' and provider_id=?\",\n        [input.provider_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addEmployee,\n  getEmployee,\n  updateEmployee,\n  getEmployeeDetails,\n  getEmployeeCategory,\n  getDoctorServiceCommission,\n  getDoctorServiceTypeCommission\n};\n"]}