{"version":3,"sources":["../../src/model/employee.js"],"names":["addEmployee","req","res","next","employeeModel","hims_d_employee_id","employee_code","first_name","middle_name","last_name","arabic_name","sex","date_of_birth","date_of_joining","date_of_leaving","address","primary_contact_no","secondary_contact_no","email","emergancy_contact_person","emergancy_contact_no","blood_group","employee_status","effective_start_date","effective_end_date","created_date","Date","created_by","updated_date","updated_by","db","dataBaseNotInitilizedError","employeeDetails","body","getConnection","error","connection","query","result","resultBack","records","e","getEmployee","employeeWhereCondition","pagePaging","paging","Page","pageNo","page","pageSize","parameters","Wherecondition","condition","values","updateEmployee","module","exports"],"mappings":"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","file":"employee.js","sourcesContent":["import extend from \"extend\";\nimport {\n  selectStatement,\n  paging,\n  whereCondition,\n  releaseDBConnection\n} from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\n\n// api to add employee\nlet addEmployee = (req, res, next) => {\n  let employeeModel = {\n    hims_d_employee_id: 0,\n    employee_code: null,\n    first_name: null,\n    middle_name: null,\n    last_name: null,\n    arabic_name: null,\n    sex: \"MALE\",\n    date_of_birth: null,\n    date_of_joining: null,\n    date_of_leaving: null,\n    address: null,\n    primary_contact_no: null,\n    secondary_contact_no: null,\n    email: null,\n    emergancy_contact_person: null,\n    emergancy_contact_no: null,\n    blood_group: null,\n    employee_status: \"A\",\n    effective_start_date: null,\n    effective_end_date: null,\n    created_date: new Date(),\n    created_by: null,\n    updated_date: new Date(),\n    updated_by: null\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let employeeDetails = extend(employeeModel, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT hims_d_employee(employee_code,first_name,middle_name,last_name,arabic_name, \\\n            sex,date_of_birth,date_of_joining,date_of_leaving,address,primary_contact_no,\\\n            secondary_contact_no,email,emergancy_contact_person,emergancy_contact_no,\\\n            blood_group,effective_start_date,effective_end_date,created_date,created_by) \\\n            VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n        [\n          employeeDetails.employee_code,\n          employeeDetails.first_name,\n          employeeDetails.middle_name,\n          employeeDetails.last_name,\n          employeeDetails.arabic_name,\n          employeeDetails.sex,\n          employeeDetails.date_of_birth,\n          employeeDetails.date_of_joining,\n          employeeDetails.date_of_leaving,\n          employeeDetails.address,\n          employeeDetails.primary_contact_no,\n          employeeDetails.secondary_contact_no,\n          employeeDetails.email,\n          employeeDetails.emergancy_contact_person,\n          employeeDetails.emergancy_contact_no,\n          employeeDetails.blood_group,\n          employeeDetails.effective_start_date,\n          employeeDetails.effective_end_date,\n          employeeDetails.created_date,\n          employeeDetails.created_by\n        ],\n        (error, result) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          connection.query(\n            \"SELECT * FROM hims_d_employee WHERE hims_d_employee_id=?\",\n            [result[\"insertId\"]],\n            (error, resultBack) => {\n              releaseDBConnection(db, connection);\n              if (error) {\n                next(error);\n              }\n              req.records = resultBack;\n              next();\n            }\n          );\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n// api to fetch employee\nlet getEmployee = (req, res, next) => {\n  let employeeWhereCondition = {\n    employee_code: \"ALL\",\n    first_name: \"ALL\",\n    middle_name: \"ALL\",\n    last_name: \"ALL\",\n    sex: \"ALL\",\n    blood_group: \"ALL\",\n    employee_status: \"ALL\",\n    date_of_joining: \"ALL\",\n    date_of_leaving: \"ALL\",\n    primary_contact_no: \"ALL\",\n    email: \"ALL\"\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let pagePaging = \"\";\n    if (req.paging != null) {\n      let Page = paging(req.paging);\n      pagePaging += \" LIMIT \" + Page.pageNo + \",\" + page.pageSize;\n    }\n    let parameters = extend(\n      employeeWhereCondition,\n      req.Wherecondition == null ? {} : req.Wherecondition\n    );\n    let condition = whereCondition(extend(parameters, req.query));\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"SELECT hims_d_employee_id \\\n        ,employee_code            \t\\\n        ,first_name               \t\\\n        ,middle_name              \t\\\n        ,last_name                \t\\\n        ,arabic_name \\\n        ,sex                      \t\\\n        ,date_of_birth            \t\\\n        ,date_of_joining          \t\\\n        ,date_of_leaving          \t\\\n        ,address                  \t\\\n        ,primary_contact_no       \t\\\n        ,secondary_contact_no     \t\\\n        ,email                    \t\\\n        ,emergancy_contact_person \t\\\n        ,emergancy_contact_no     \t\\\n        ,blood_group              \t\\\n        ,employee_status          \t\\\n        ,effective_start_date     \t\\\n        ,effective_end_date,CONCAT(first_name ,' ', middle_name,' ' ,last_name )as full_name FROM hims_d_employee WHERE record_status ='A' AND \" +\n          condition.condition +\n          \" \" +\n          pagePaging,\n        values: condition.values\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet updateEmployee = (req, res, next) => {\n  let employeeModel = {\n    hims_d_employee_id: 0,\n    employee_code: null,\n    first_name: null,\n    middle_name: null,\n    last_name: null,\n    arabic_name: null,\n    sex: \"MALE\",\n    date_of_birth: null,\n    date_of_joining: null,\n    date_of_leaving: null,\n    address: null,\n    primary_contact_no: null,\n    secondary_contact_no: null,\n    email: null,\n    emergancy_contact_person: null,\n    emergancy_contact_no: null,\n    blood_group: null,\n    employee_status: \"A\",\n    effective_start_date: null,\n    effective_end_date: null,\n    created_date: new Date(),\n    created_by: null,\n    updated_date: new Date(),\n    updated_by: null\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let employeeDetails = extend(employeeModel, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.query(\n        \"UPDATE hims_d_employee SET first_name=?,middle_name=?\\\n                     ,last_name=?,arabic_name=?,sex=?,date_of_birth=?,date_of_joining=?\\\n                     ,date_of_leaving=?,address=?,primary_contact_no=?,secondary_contact_no=?\\\n                     ,email=?,emergancy_contact_person=?,emergancy_contact_no=?\\\n                     ,blood_group=?,employee_status=?,effective_start_date=?,effective_end_date=?\\\n                     ,updated_date=now(),updated_by=? WHERE  hims_d_employee_id=?\",\n        [\n          employeeDetails.first_name,\n          employeeDetails.middle_name,\n          employeeDetails.last_name,\n          employeeDetails.arabic_name,\n          employeeDetails.sex,\n          employeeDetails.date_of_birth,\n          employeeDetails.date_of_joining,\n          employeeDetails.date_of_leaving,\n          employeeDetails.address,\n          employeeDetails.primary_contact_no,\n          employeeDetails.secondary_contact_no,\n          employeeDetails.email,\n          employeeDetails.emergancy_contact_person,\n          employeeDetails.emergancy_contact_no,\n          employeeDetails.blood_group,\n          employeeDetails.employee_status,\n          employeeDetails.effective_start_date,\n          employeeDetails.effective_end_date,\n          employeeDetails.updated_by,\n          employeeDetails.hims_d_employee_id\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\nmodule.exports = {\n  addEmployee,\n  getEmployee,\n  updateEmployee\n};\n"]}