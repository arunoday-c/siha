{"version":3,"sources":["../../src/model/visit.js"],"names":["insertPatientVisitData","req","res","next","inputParam","hims_f_patient_visit_id","patient_id","visit_type","visit_date","Date","visit_code","age_in_years","age_in_months","age_in_days","insured","sec_insured","department_id","sub_department_id","doctor_id","maternity_patient","is_mlc","mlc_accident_reg_no","mlc_police_station","mlc_wound_certified_date","created_by","userIdentity","algaeh_d_app_user_id","updated_by","record_status","patient_message","is_critical_message","message_active_till","visit_expiery_date","episode_id","consultation","appointment_id","query","body","db","options","existingExparyDate","currentPatientEpisodeNo","today","format","internalInsertPatientVisitData","fromDate","date_of_birth","toDate","years","diff","add","months","days","undefined","error","visitresult","rollback","onFailure","visit_id","insertId","patient_visit_id","resultData","eror","onSuccess","expResult","length","currentEpisodeNo","record","generateError","notModified","parseInt","nextEpisodeNo","updateResult","dataBase","noContent","e","addVisit","dataBaseNotInitilizedError","getConnection","connection","beginTransaction","insertVisitData","result","commit","records","numUpdate","completeNumber","callBack","visitDetails","release","log","updateVisit","updateData","checkVisitExists","module","exports"],"mappings":"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","file":"visit.js","sourcesContent":["import extend from \"extend\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { debugLog, debugFunction, logger } from \"../utils/logging\";\nimport { whereCondition, runningNumber, releaseDBConnection } from \"../utils\";\nimport moment from \"moment\";\n\n//Added by noor for code optimization aug-20-1018\nlet insertPatientVisitData = (req, res, next) => {\n  try {\n    debugFunction(\"insertPatientVisitData\");\n\n    let inputParam = extend(\n      {\n        hims_f_patient_visit_id: null,\n        patient_id: null,\n        visit_type: null,\n        visit_date: new Date(),\n        visit_code: null,\n        age_in_years: null,\n        age_in_months: null,\n        age_in_days: null,\n        insured: null,\n        sec_insured: null,\n        department_id: null,\n        sub_department_id: null,\n        doctor_id: null,\n        maternity_patient: null,\n        is_mlc: null,\n        mlc_accident_reg_no: null,\n        mlc_police_station: null,\n        mlc_wound_certified_date: null,\n        created_by: req.userIdentity.algaeh_d_app_user_id,\n\n        updated_by: req.userIdentity.algaeh_d_app_user_id,\n\n        record_status: null,\n        patient_message: null,\n        is_critical_message: null,\n        message_active_till: null,\n        visit_expiery_date: null,\n        episode_id: null,\n        consultation: null,\n        appointment_id: null\n      },\n      req.query[\"data\"] == null ? req.body : req.query\n    );\n\n    let db = req.options != null ? req.options.db : req.db;\n    let existingExparyDate = null;\n    let currentPatientEpisodeNo = null;\n    let today = moment().format(\"YYYY-MM-DD\");\n\n    inputParam.patient_id = req.patient_id || req.body.patient_id;\n    debugLog(\"Body:\", req.body);\n    const internalInsertPatientVisitData = () => {\n      if (inputParam.age_in_years == null) {\n        let fromDate = moment(inputParam.date_of_birth);\n        let toDate = new Date();\n        let years = moment(toDate).diff(fromDate, \"year\");\n        fromDate.add(years, \"years\");\n        let months = moment(toDate).diff(fromDate, \"months\");\n        fromDate.add(months, \"months\");\n        let days = moment(toDate).diff(fromDate, \"days\");\n        inputParam.age_in_years = years;\n        inputParam.age_in_months = months;\n        inputParam.age_in_days = days;\n      }\n      if (existingExparyDate != null || existingExparyDate != undefined) {\n        inputParam.visit_expiery_date = existingExparyDate;\n        inputParam.episode_id = currentPatientEpisodeNo;\n      }\n      debugLog(\"inside internalInsertPatientVisitData\");\n      db.query(\n        \"INSERT INTO `hims_f_patient_visit` (`patient_id`, `visit_type`, \\\n`age_in_years`, `age_in_months`, `age_in_days`, `insured`,`sec_insured`,\\\n`visit_date`, `department_id`, `sub_department_id`, `doctor_id`, `maternity_patient`,\\\n`is_mlc`, `mlc_accident_reg_no`, `mlc_police_station`, `mlc_wound_certified_date`, \\\n`created_by`, `created_date`,`visit_code`,`visit_expiery_date`,`episode_id`,`appointment_id`)\\\nVALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?);\",\n        [\n          inputParam.patient_id,\n          inputParam.visit_type,\n          inputParam.age_in_years,\n          inputParam.age_in_months,\n          inputParam.age_in_days,\n          inputParam.insured,\n          inputParam.sec_insured,\n          inputParam.visit_date,\n          inputParam.department_id,\n          inputParam.sub_department_id,\n          inputParam.doctor_id,\n          inputParam.maternity_patient,\n          inputParam.is_mlc,\n          inputParam.mlc_accident_reg_no,\n          inputParam.mlc_police_station,\n          inputParam.mlc_wound_certified_date,\n          inputParam.created_by,\n          new Date(),\n          inputParam.visit_code,\n          inputParam.visit_expiery_date,\n          inputParam.episode_id,\n          inputParam.appointment_id\n        ],\n        (error, visitresult) => {\n          if (error) {\n            if (req.options == null) {\n              db.rollback(() => {\n                releaseDBConnection(req.db, db);\n              });\n            } else {\n              req.options.onFailure(error);\n            }\n          }\n          req.visit_id = visitresult.insertId;\n          let patient_visit_id = visitresult.insertId;\n\n          if (patient_visit_id != null) {\n            db.query(\n              \"INSERT INTO `hims_f_patient_visit_message` (`patient_visit_id`\\\n, `patient_message`, `is_critical_message`, `message_active_till`, `created_by`, `created_date`\\\n) VALUES ( ?, ?, ?, ?, ?, ?);\",\n              [\n                patient_visit_id,\n                inputParam.patient_message,\n                inputParam.is_critical_message,\n                inputParam.message_active_till,\n                inputParam.created_by,\n                new Date()\n              ],\n              (error, resultData) => {\n                if (error) {\n                  if (req.options == null) {\n                    db.rollback(() => {\n                      releaseDBConnection(req.db, db);\n                      next(error);\n                    });\n                  } else {\n                    req.options.onFailure(eror);\n                  }\n                } else {\n                  req.options.onSuccess(visitresult);\n                }\n              }\n            );\n          }\n        }\n      );\n    };\n    //for consultaion\n    if (inputParam.consultation == \"Y\") {\n      debugLog(\"In consultation == Y \");\n      db.query(\n        \" select max(visit_expiery_date) as visit_expiery_date,episode_id from hims_f_patient_visit where\\\n         patient_id=? and doctor_id=? and record_status='A' group by patient_id, doctor_id;\",\n        [inputParam.patient_id, inputParam.doctor_id],\n        (error, expResult) => {\n          debugLog(\"In consultation Query\", expResult);\n          if (error) {\n            if (req.options == null) {\n              db.rollback(() => {\n                releaseDBConnection(req.db, db);\n              });\n            } else {\n              req.options.onFailure(error);\n            }\n          } else {\n            //fetching expiry date and episode id for existing patient\n            if (expResult[0] != null || expResult.length != 0) {\n              existingExparyDate = moment(\n                expResult[0][\"visit_expiery_date\"]\n              ).format(\"YYYY-MM-DD\");\n              currentPatientEpisodeNo = expResult[0][\"episode_id\"];\n            }\n            // req.body.episode_id = expResult[0][\"episode_id\"];\n            let currentEpisodeNo = null;\n            //checking expiry if expired or not_there create new expiry date\n            if (\n              existingExparyDate == null ||\n              existingExparyDate == undefined ||\n              existingExparyDate < today\n            ) {\n              //create new expiry date\n              db.query(\n                \"SELECT param_value,episode_id from algaeh_d_app_config WHERE algaeh_d_app_config_id=11 \\\n                and record_status='A'\",\n                (error, record) => {\n                  debugLog(\"In Expiry date records \", record);\n                  if (error) {\n                    if (req.options == null) {\n                      db.rollback(() => {\n                        releaseDBConnection(req.db, db);\n                        next(error);\n                      });\n                    } else {\n                      req.options.onFailure(error);\n                    }\n                  } else {\n                    if (record.length == 0) {\n                      if (req.options == null) {\n                        db.rollback(() => {\n                          releaseDBConnection(req.db, db);\n                          next(\n                            httpStatus.generateError(\n                              httpStatus.notModified,\n                              \"Episode value not found.Please contact administrator.\"\n                            )\n                          );\n                        });\n                      } else {\n                        req.options.onFailure(\n                          httpStatus.generateError(\n                            httpStatus.notModified,\n                            \"Episode value not found.Please contact administrator.\"\n                          )\n                        );\n                      }\n                    }\n                    inputParam.visit_expiery_date = moment()\n                      .add(parseInt(record[0][\"param_value\"]), \"days\")\n                      .format(\"YYYY-MM-DD\");\n                    currentEpisodeNo = record[0].episode_id;\n\n                    if (currentEpisodeNo > 0) {\n                      let nextEpisodeNo = currentEpisodeNo + 1;\n                      inputParam.episode_id = currentEpisodeNo;\n                      req.body.episode_id = inputParam.episode_id;\n                      db.query(\n                        \"update algaeh_d_app_config set episode_id=? where algaeh_d_app_config_id=11 and record_status='A' \",\n                        [nextEpisodeNo],\n                        (error, updateResult) => {\n                          if (error) {\n                            if (req.options == null) {\n                              db.rollback(() => {\n                                releaseDBConnection(req.db, dataBase);\n                                next(error);\n                              });\n                            } else {\n                              req.options.onFailure(error);\n                            }\n                          } else {\n                            internalInsertPatientVisitData();\n                          }\n                        }\n                      );\n                    }\n                  }\n                }\n              );\n            } else {\n              inputParam.episode_id = expResult[0][\"episode_id\"];\n              req.body.episode_id = inputParam.episode_id;\n              internalInsertPatientVisitData();\n            }\n          }\n        }\n      );\n    }\n    //for non consultaion\n    else if (inputParam.consultation == \"N\") {\n      inputParam.visit_expiery_date = new Date();\n      inputParam.episode_id = null;\n      internalInsertPatientVisitData();\n    } else {\n      if (req.options == null) {\n        db.rollback(() => {\n          releaseDBConnection(req.db, db);\n          next(\n            httpStatus.generateError(\n              httpStatus.noContent,\n              \"Please select consultation type\"\n            )\n          );\n        });\n      } else {\n        req.options.onFailure(\n          httpStatus.generateError(\n            httpStatus.noContent,\n            \"Please select consultation type\"\n          )\n        );\n      }\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n//----end\n\nlet addVisit = (req, res, next) => {\n  try {\n    debugFunction(\"addVisit\");\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            next(error);\n          });\n        }\n\n        let patient_id =\n          req.body.patient_id != null\n            ? req.body.patient_id\n            : req.query.patient_id;\n        let visit_code =\n          req.body.visit_code != null\n            ? req.body.visit_code\n            : req.query.visit_code;\n        if (visit_code != \"\" && patient_id != null) {\n          insertVisitData(connection, req, res, (error, result) => {\n            if (error) {\n              connection.rollback(() => {\n                next(error);\n              });\n            }\n            connection.commit(error => {\n              if (error) {\n                connection.rollback(() => {\n                  next(error);\n                });\n              }\n              req.records = result;\n              next();\n            });\n          });\n        } else {\n          if (patient_id == null) {\n            next(\n              httpStatus.generateError(400, \"Patient Code is not generated\")\n            );\n          } else {\n            runningNumber(\n              connection,\n              2,\n              \"VISIT_NUMGEN\",\n              (error, numUpdate, completeNumber) => {\n                if (error) {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                }\n                req.query.visit_code = completeNumber;\n                req.body.visit_code = completeNumber;\n                debugLog(\"req.body.visit_code : \" + completeNumber);\n                insertVisitData(connection, req, res, (error, result) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      next(error);\n                    });\n                  }\n                  connection.commit(error => {\n                    if (error) {\n                      connection.rollback(() => {\n                        next(error);\n                      });\n                    }\n                    req.records = result;\n                    next();\n                  });\n                });\n              }\n            );\n          }\n        }\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//old method to be deleted\nlet insertVisitData = (dataBase, req, res, callBack) => {\n  let visitDetails = {\n    hims_f_patient_visit_id: null,\n    patient_id: null,\n    visit_type: null,\n    visit_date: new Date(),\n    visit_code: null,\n    age_in_years: null,\n    age_in_months: null,\n    age_in_days: null,\n    insured: null,\n    sec_insured: null,\n    department_id: null,\n    sub_department_id: null,\n    doctor_id: null,\n    maternity_patient: null,\n    is_mlc: null,\n    mlc_accident_reg_no: null,\n    mlc_police_station: null,\n    mlc_wound_certified_date: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id,\n\n    patient_message: null,\n    is_critical_message: null,\n    message_active_till: null,\n    visit_expiery_date: null,\n    episode_id: null,\n    consultation: null\n  };\n  try {\n    debugFunction(\"insertVisitData\");\n    let inputParam = extend(\n      visitDetails,\n      req.query[\"data\"] == null ? req.body : req.query\n    );\n\n    let today = moment().format(\"YYYY-MM-DD\");\n\n    //for consultaion\n    if (inputParam.consultation == \"Y\") {\n      dataBase.query(\n        \" select max(visit_expiery_date) as visit_expiery_date,episode_id from hims_f_patient_visit where\\\n         patient_id=? and doctor_id=? and record_status='A' group by patient_id, doctor_id;\",\n        [inputParam.patient_id, inputParam.doctor_id],\n        (error, expResult) => {\n          if (error) {\n            dataBase.rollback(() => {\n              dataBase.release();\n              debugLog(\"error \", error);\n            });\n          }\n\n          let existingExparyDate = null;\n          let currentPatientEpisodeNo = null;\n\n          //fetching expiry date and episode id for existing patient\n          if (expResult[0] != null || expResult.length != 0) {\n            existingExparyDate = moment(\n              expResult[0][\"visit_expiery_date\"]\n            ).format(\"YYYY-MM-DD\");\n\n            debugLog(\"existingExparyDate:\", existingExparyDate);\n\n            currentPatientEpisodeNo = expResult[0][\"episode_id\"];\n            debugLog(\"currentPatientEpisodeNo:\", currentPatientEpisodeNo);\n          }\n\n          let currentEpisodeNo = null;\n\n          //checking expiry if expired or not_there create new expiry date\n          if (\n            existingExparyDate == null ||\n            existingExparyDate == undefined ||\n            existingExparyDate < today\n          ) {\n            //create new expiry date\n            dataBase.query(\n              \"SELECT param_value from algaeh_d_app_config WHERE param_name=?\",\n              [\"VISITEXPERIDAY\"],\n              (error, record) => {\n                if (error) {\n                  dataBase.rollback(() => {\n                    dataBase.release();\n                    logger.log(\"error\", \"Add new visit %j\", error);\n                  });\n                }\n\n                inputParam.visit_expiery_date = moment()\n                  .add(\n                    record != null && record.length != 0\n                      ? parseInt(record[0][\"param_value\"])\n                      : 0,\n                    \"days\"\n                  )\n                  .format(\"YYYY-MM-DD\");\n                debugLog(\n                  \"new expiry date created:\",\n                  inputParam.visit_expiery_date\n                );\n\n                // create new episode\n                dataBase.query(\n                  \"select episode_id from algaeh_d_app_config where algaeh_d_app_config_id=11 and record_status='A'\",\n                  (error, result) => {\n                    if (error) {\n                      releaseDBConnection(req.db, dataBase);\n                      next(error);\n                    }\n\n                    currentEpisodeNo = result[0].episode_id;\n                    debugLog(\"currentEpisodeNo:\", currentEpisodeNo);\n\n                    //increament episode id\n                    if (currentEpisodeNo > 0) {\n                      let nextEpisodeNo = currentEpisodeNo + 1;\n                      debugLog(\"nextEpisodeNo :\", nextEpisodeNo);\n                      inputParam.episode_id = currentEpisodeNo;\n\n                      dataBase.query(\n                        \"update algaeh_d_app_config set episode_id=? where algaeh_d_app_config_id=11 and record_status='A' \",\n                        [nextEpisodeNo],\n                        (error, updateResult) => {\n                          if (error) {\n                            dataBase.rollback(() => {\n                              releaseDBConnection(req.db, dataBase);\n                              next(error);\n                            });\n                          }\n\n                          // inserting patient visit\n                          dataBase.query(\n                            \"INSERT INTO `hims_f_patient_visit` (`patient_id`, `visit_type`, \\\n    `age_in_years`, `age_in_months`, `age_in_days`, `insured`,`sec_insured`,\\\n  `visit_date`, `department_id`, `sub_department_id`, `doctor_id`, `maternity_patient`,\\\n   `is_mlc`, `mlc_accident_reg_no`, `mlc_police_station`, `mlc_wound_certified_date`, \\\n   `created_by`, `created_date`,`visit_code`,`visit_expiery_date`,`episode_id`)\\\n  VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?);\",\n                            [\n                              inputParam.patient_id,\n                              inputParam.visit_type,\n                              inputParam.age_in_years,\n                              inputParam.age_in_months,\n                              inputParam.age_in_days,\n                              inputParam.insured,\n                              inputParam.sec_insured,\n                              inputParam.visit_date,\n                              inputParam.department_id,\n                              inputParam.sub_department_id,\n                              inputParam.doctor_id,\n                              inputParam.maternity_patient,\n                              inputParam.is_mlc,\n                              inputParam.mlc_accident_reg_no,\n                              inputParam.mlc_police_station,\n                              inputParam.mlc_wound_certified_date,\n                              inputParam.created_by,\n                              new Date(),\n                              inputParam.visit_code,\n                              inputParam.visit_expiery_date,\n                              inputParam.episode_id\n                            ],\n                            (error, visitresult) => {\n                              if (error) {\n                                dataBase.rollback(() => {\n                                  dataBase.release();\n                                  logger.log(\n                                    \"error\",\n                                    \"Add new visit %j\",\n                                    error\n                                  );\n                                });\n                              }\n                              req.visit_id = visitresult.insertId;\n                              let patient_visit_id = visitresult.insertId;\n\n                              debugLog(\n                                \"patient_visit_id : \" + patient_visit_id\n                              );\n\n                              if (patient_visit_id != null) {\n                                dataBase.query(\n                                  \"INSERT INTO `hims_f_patient_visit_message` (`patient_visit_id`\\\n, `patient_message`, `is_critical_message`, `message_active_till`, `created_by`, `created_date`\\\n) VALUES ( ?, ?, ?, ?, ?, ?);\",\n                                  [\n                                    patient_visit_id,\n                                    inputParam.patient_message,\n                                    inputParam.is_critical_message,\n                                    inputParam.message_active_till,\n                                    inputParam.created_by,\n                                    new Date()\n                                  ],\n                                  (error, resultData) => {\n                                    if (typeof callBack == \"function\") {\n                                      callBack(error, visitresult);\n                                    }\n                                  }\n                                );\n                              }\n                            }\n                          );\n                        }\n                      );\n                    }\n                  }\n                );\n              }\n            );\n          } else if (existingExparyDate > today) {\n            inputParam.visit_expiery_date = existingExparyDate;\n            inputParam.episode_id = currentPatientEpisodeNo;\n\n            // inserting patient visit\n            dataBase.query(\n              \"INSERT INTO `hims_f_patient_visit` (`patient_id`, `visit_type`, \\\n            `age_in_years`, `age_in_months`, `age_in_days`, `insured`,`sec_insured`,\\\n          `visit_date`, `department_id`, `sub_department_id`, `doctor_id`, `maternity_patient`,\\\n           `is_mlc`, `mlc_accident_reg_no`, `mlc_police_station`, `mlc_wound_certified_date`, \\\n           `created_by`, `created_date`,`visit_code`,`visit_expiery_date`,`episode_id`)\\\n          VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?);\",\n              [\n                inputParam.patient_id,\n                inputParam.visit_type,\n                inputParam.age_in_years,\n                inputParam.age_in_months,\n                inputParam.age_in_days,\n                inputParam.insured,\n                inputParam.sec_insured,\n                inputParam.visit_date,\n                inputParam.department_id,\n                inputParam.sub_department_id,\n                inputParam.doctor_id,\n                inputParam.maternity_patient,\n                inputParam.is_mlc,\n                inputParam.mlc_accident_reg_no,\n                inputParam.mlc_police_station,\n                inputParam.mlc_wound_certified_date,\n                inputParam.created_by,\n                new Date(),\n                inputParam.visit_code,\n                inputParam.visit_expiery_date,\n                inputParam.episode_id\n              ],\n              (error, visitresult) => {\n                if (error) {\n                  dataBase.rollback(() => {\n                    dataBase.release();\n                    logger.log(\"error\", \"Add new visit %j\", error);\n                  });\n                }\n                req.visit_id = visitresult.insertId;\n                let patient_visit_id = visitresult.insertId;\n\n                debugLog(\"patient_visit_id : \" + patient_visit_id);\n\n                if (patient_visit_id != null) {\n                  dataBase.query(\n                    \"INSERT INTO `hims_f_patient_visit_message` (`patient_visit_id`\\\n        , `patient_message`, `is_critical_message`, `message_active_till`, `created_by`, `created_date`\\\n        ) VALUES ( ?, ?, ?, ?, ?, ?);\",\n                    [\n                      patient_visit_id,\n                      inputParam.patient_message,\n                      inputParam.is_critical_message,\n                      inputParam.message_active_till,\n                      inputParam.created_by,\n                      new Date()\n                    ],\n                    (error, resultData) => {\n                      if (typeof callBack == \"function\") {\n                        callBack(error, visitresult);\n                      }\n                    }\n                  );\n                }\n              }\n            );\n          }\n        }\n      );\n    } //not for consultaion\n    else if (inputParam.consultation == \"N\") {\n      debugFunction(\"not for consultaion\");\n      dataBase.query(\n        \"INSERT INTO `hims_f_patient_visit` (`patient_id`, `visit_type`, \\\n      `age_in_years`, `age_in_months`, `age_in_days`, `insured`,`sec_insured`,\\\n    `visit_date`, `department_id`, `sub_department_id`, `doctor_id`, `maternity_patient`,\\\n     `is_mlc`, `mlc_accident_reg_no`, `mlc_police_station`, `mlc_wound_certified_date`, \\\n     `created_by`, `created_date`,`visit_code`,`visit_expiery_date`)\\\n    VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?);\",\n        [\n          inputParam.patient_id,\n          inputParam.visit_type,\n          inputParam.age_in_years,\n          inputParam.age_in_months,\n          inputParam.age_in_days,\n          inputParam.insured,\n          inputParam.sec_insured,\n          inputParam.visit_date,\n          inputParam.department_id,\n          inputParam.sub_department_id,\n          inputParam.doctor_id,\n          inputParam.maternity_patient,\n          inputParam.is_mlc,\n          inputParam.mlc_accident_reg_no,\n          inputParam.mlc_police_station,\n          inputParam.mlc_wound_certified_date,\n          inputParam.created_by,\n          new Date(),\n          inputParam.visit_code,\n          today\n        ],\n        (error, result) => {\n          if (error) {\n            dataBase.rollback(() => {\n              dataBase.release();\n              logger.log(\"error\", \"Add new visit %j\", error);\n            });\n          }\n          req.visit_id = result.insertId;\n          let patient_visit_id = result.insertId;\n\n          debugLog(\"patient_visit_id : \" + patient_visit_id);\n\n          if (patient_visit_id != null) {\n            dataBase.query(\n              \"INSERT INTO `hims_f_patient_visit_message` (`patient_visit_id`\\\n  , `patient_message`, `is_critical_message`, `message_active_till`, `created_by`, `created_date`\\\n  ) VALUES ( ?, ?, ?, ?, ?, ?);\",\n              [\n                patient_visit_id,\n                inputParam.patient_message,\n                inputParam.is_critical_message,\n                inputParam.message_active_till,\n                inputParam.created_by,\n                new Date()\n              ],\n              (error, resultData) => {\n                if (typeof callBack == \"function\") {\n                  callBack(error, result);\n                }\n              }\n            );\n          }\n        }\n      );\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet updateVisit = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      updateData(connection, req, (error, result) => {\n        connection.release();\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet updateData = (dataBase, req, callBack) => {\n  let visitDetails = {\n    hims_f_patient_visit_id: null,\n    patient_id: null,\n    visit_type: null,\n    visit_date: null,\n    visit_code: null,\n    department_id: null,\n    sub_department_id: null,\n    doctor_id: null,\n    maternity_patient: null,\n    is_mlc: null,\n    mlc_accident_reg_no: null,\n    mlc_police_station: null,\n    mlc_wound_certified_date: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id,\n\n    patient_message: null,\n    is_critical_message: null,\n    message_active_till: null,\n    visit_expiery_date: null\n  };\n\n  try {\n    let inputParam = extend(visitDetails, req.body);\n    dataBase.query(\n      \"UPDATE `hims_f_patient_visit`\\\n    SET `visit_type`=?, `visit_date`=?, `department_id`=?, `sub_department_id`=?\\\n    ,`doctor_id`=?, `maternity_patient`=?, `is_mlc`=?, `mlc_accident_reg_no`=?,\\\n    `mlc_police_station`=?, `mlc_wound_certified_date`=?, `updated_by`=?, `updated_date`=?\\\n    WHERE `hims_f_patient_visit_id`=?;\",\n      [\n        inputParam.visit_type,\n        inputParam.visit_date,\n        inputParam.department_id,\n        inputParam.sub_department_id,\n        inputParam.doctor_id,\n        inputParam.maternity_patient,\n        inputParam.is_mlc,\n        inputParam.mlc_accident_reg_no,\n        inputParam.mlc_police_station,\n        inputParam.mlc_wound_certified_date,\n        inputParam.updated_by,\n        new Date(),\n        inputParam.hims_f_patient_visit_id\n      ],\n      (error, result) => {\n        if (typeof callBack == \"function\") {\n          callBack(error, result);\n        }\n      }\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet checkVisitExists = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let inputParam = extend(\n      {\n        sub_department_id: null,\n        doctor_id: null,\n        patient_id: null\n      },\n      req.body\n    );\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      db.query(\n        \"select visit_code from hims_d_sub_department,hims_f_patient_visit where \\\n      hims_f_patient_visit.sub_department_id=hims_d_sub_department.hims_d_sub_department_id \\\n      and hims_d_sub_department.record_status='A' and hims_f_patient_visit.record_status='A' \\\n      and hims_f_patient_visit.visit_date =DATE(now()) and hims_d_sub_department.hims_d_sub_department_id=?\\\n      and hims_f_patient_visit.doctor_id=? and patient_id =? \\\n      \",\n        [\n          inputParam.sub_department_id,\n          inputParam.doctor_id,\n          inputParam.patient_id\n        ],\n        (error, records) => {\n          connection.release();\n          if (error) {\n            next(error);\n          }\n          req.records = records;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addVisit,\n  updateVisit,\n  insertVisitData,\n  checkVisitExists,\n  insertPatientVisitData\n};\n"]}