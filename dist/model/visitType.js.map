{"version":3,"sources":["../../src/model/visitType.js"],"names":["whereStatement","hims_d_visit_type_id","visit_type_code","visit_type","hims_d_visit_type","selectStatement","req","res","next","db","dataBaseNotInitilizedError","getConnection","error","connection","where","query","condition","values","result","records","e","visitType","created_by","created_date","updated_by","updated_date","record_status","addVisit","inputParam","body","Date","updateVisit","deleteVisitType","tableName","id","module","exports"],"mappings":"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","file":"visitType.js","sourcesContent":["import extend from \"extend\";\nimport { whereCondition, releaseDBConnection, deleteRecord } from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\nlet whereStatement = {\n  hims_d_visit_type_id: \"ALL\",\n  visit_type_code: \"ALL\",\n  visit_type: \"ALL\",\n  hims_d_visit_type: \"ALL\"\n};\n\nlet selectStatement = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let where = whereCondition(extend(whereStatement, req.query));\n      connection.query(\n        \"SELECT `hims_d_visit_type_id`, `visit_type_code`, `visit_type`, `hims_d_visit_type` \\\n        , `created_by`, `created_date`, `updated_by`, `updated_date` FROM `hims_d_visit_type`  WHERE record_status='A' AND \" +\n          where.condition,\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\nlet visitType = {\n  hims_d_visit_type_id: null,\n  visit_type_code: null,\n  visit_type: null,\n  hims_d_visit_type: null,\n  created_by: null,\n  created_date: null,\n  updated_by: null,\n  updated_date: null,\n  record_status: null\n};\n\nlet addVisit = (req, res, next) => {\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    let inputParam = extend(visitType, req.body);\n    connection.query(\n      \"INSERT INTO `hims_d_visit_type` (`visit_type_code`, `visit_type`, `hims_d_visit_type`, `created_by`, `created_date`) \\\n    VALUES ( ?, ?, ?, ?, ?)\",\n      [\n        inputParam.visit_type_code,\n        inputParam.visit_type,\n        inputParam.hims_d_visit_type,\n        inputParam.created_by,\n        new Date()\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\n\nlet updateVisit = (req, res, next) => {\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    let inputParam = extend(visitType, req.body);\n    connection.query(\n      \"UPDATE `hims_d_visit_type` \\\n      SET `visit_type`=?, `hims_d_visit_type`=?,  `updated_by`=?, `updated_date`=? \\\n      WHERE `record_status`='A' and `hims_d_visit_type_id`=?\",\n      [\n        inputParam.visit_type,\n        inputParam.hims_d_visit_type,\n        inputParam.updated_by,\n        new Date(),\n        inputParam.hims_d_visit_type_id\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\nlet deleteVisitType = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    deleteRecord(\n      {\n        db: req.db,\n        tableName: \"hims_d_visit_type\",\n        id: req.body.hims_d_visit_type_id,\n        query:\n          \"UPDATE hims_d_visit_type SET  record_status='I', \\\n          updated_by=?,updated_date=? WHERE hims_d_visit_type_id=?\",\n        values: [req.body.updated_by, new Date(), req.body.hims_d_visit_type_id]\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      }\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  selectStatement,\n  addVisit,\n  updateVisit,\n  deleteVisitType\n};\n"]}