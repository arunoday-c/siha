{"version":3,"sources":["../../src/model/masters.js"],"names":["titleWhere","his_d_title_id","title","titleMaster","req","res","next","db","dataBaseNotInitilizedError","where","query","getConnection","error","connection","condition","values","result","records","e","countryWhere","hims_d_country_id","country_code","country_name","status","countryMaster","stateWhere","hims_d_state_id","state_code","state_name","country_id","stateMaster","cityWhere","hims_d_city_id","city_code","city_name","state_id","cityMaster","nationalityWhere","hims_d_nationality_id","nationality_code","nationality","nationalityMaster","religionWhere","hims_d_religion_id","religion_code","religion_name","relegionMaster","auogenWhere","hims_f_app_numgen_id","numgen_code","module_desc","autoGenMaster","visaWhere","hims_d_visa_type_id","visa_type_code","visa_type","visaMaster","release","inputClicnicalNonClinicalDept","department_type","clinicalNonClinicalAll","connectionString","countryStateCity","killDbConnections","idList","Where","w","User","Select","s","Id","ToArray","qry","i","length","finalResult","module","exports"],"mappings":"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","file":"masters.js","sourcesContent":["import { whereCondition, releaseDBConnection } from \"../utils\";\r\nimport extend from \"extend\";\r\nimport httpStatus from \"../utils/httpStatus\";\r\nlet titleWhere = {\r\n  his_d_title_id: \"ALL\",\r\n  title: \"ALL\"\r\n};\r\nimport { LINQ } from \"node-linq\";\r\nimport { debuglog } from \"util\";\r\nimport { debugLog } from \"../utils/logging\";\r\nlet titleMaster = (req, res, next) => {\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    let db = req.db;\r\n    let where = whereCondition(extend(titleWhere, req.query));\r\n    db.getConnection((error, connection) => {\r\n      if (error) {\r\n        next(error);\r\n      }\r\n      db.query(\r\n        \"SELECT `his_d_title_id`, `title`, `arabic_title` FROM `hims_d_title` WHERE `record_status`='A' AND \" +\r\n          where.condition,\r\n        where.values,\r\n        (error, result) => {\r\n          releaseDBConnection(db, connection);\r\n          if (error) {\r\n            next(error);\r\n          }\r\n\r\n          req.records = result;\r\n          next();\r\n        }\r\n      );\r\n    });\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\n\r\nlet countryWhere = {\r\n  hims_d_country_id: \"ALL\",\r\n  country_code: \"ALL\",\r\n  country_name: \"ALL\",\r\n  status: \"ALL\"\r\n};\r\nlet countryMaster = (req, res, next) => {\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    let db = req.db;\r\n    let where = whereCondition(extend(countryWhere, req.query));\r\n    db.getConnection((error, connection) => {\r\n      if (error) {\r\n        next(error);\r\n      }\r\n      connection.query(\r\n        \"SELECT `hims_d_country_id`, `country_code`, `country_name`, `status` FROM `hims_d_country` WHERE `record_status`='A' AND \" +\r\n          where.condition,\r\n        where.values,\r\n        (error, result) => {\r\n          releaseDBConnection(db, connection);\r\n          if (error) {\r\n            next(error);\r\n          }\r\n          req.records = result;\r\n          next();\r\n        }\r\n      );\r\n    });\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\n\r\nlet stateWhere = {\r\n  hims_d_state_id: \"ALL\",\r\n  state_code: \"ALL\",\r\n  state_name: \"ALL\",\r\n  country_id: \"ALL\"\r\n};\r\nlet stateMaster = (req, res, next) => {\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    let db = req.db;\r\n    let where = whereCondition(extend(stateWhere, req.query));\r\n    db.getConnection((error, connection) => {\r\n      if (error) {\r\n        next(error);\r\n      }\r\n      connection.query(\r\n        \"SELECT `hims_d_state_id`, `state_code`, `state_name`, `country_id` FROM `hims_d_state` WHERE `record_status`='A' AND \" +\r\n          where.condition,\r\n        where.values,\r\n        (error, result) => {\r\n          releaseDBConnection(db, connection);\r\n          if (error) {\r\n            next(error);\r\n          }\r\n          req.records = result;\r\n          next();\r\n        }\r\n      );\r\n    });\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\nlet cityWhere = {\r\n  hims_d_city_id: \"ALL\",\r\n  city_code: \"ALL\",\r\n  city_name: \"ALL\",\r\n  state_id: \"ALL\"\r\n};\r\nlet cityMaster = (req, res, next) => {\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    let db = req.db;\r\n    let where = whereCondition(extend(cityWhere, req.query));\r\n    db.getConnection((error, connection) => {\r\n      if (error) {\r\n        next(error);\r\n      }\r\n      connection.query(\r\n        \"SELECT `hims_d_city_id`, `city_code`, `city_name`, `state_id` FROM `hims_d_city` WHERE `record_status`='A' AND \" +\r\n          where.condition,\r\n        where.values,\r\n        (error, result) => {\r\n          releaseDBConnection(db, connection);\r\n          if (error) {\r\n            next(error);\r\n          }\r\n          req.records = result;\r\n          next();\r\n        }\r\n      );\r\n    });\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\n\r\nlet nationalityWhere = {\r\n  hims_d_nationality_id: \"ALL\",\r\n  nationality_code: \"ALL\",\r\n  nationality: \"ALL\"\r\n};\r\nlet nationalityMaster = (req, res, next) => {\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    let db = req.db;\r\n    let where = whereCondition(extend(nationalityWhere, req.query));\r\n    db.getConnection((error, connection) => {\r\n      if (error) {\r\n        next(error);\r\n      }\r\n      db.query(\r\n        \"SELECT `hims_d_nationality_id`, `nationality_code`, `nationality`,`arabic_nationality` FROM `hims_d_nationality` WHERE `record_status`='A' AND \" +\r\n          where.condition,\r\n        where.values,\r\n        (error, result) => {\r\n          releaseDBConnection(db, connection);\r\n          if (error) {\r\n            next(error);\r\n          }\r\n\r\n          req.records = result;\r\n          next();\r\n        }\r\n      );\r\n    });\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\n\r\nlet religionWhere = {\r\n  hims_d_religion_id: \"ALL\",\r\n  religion_code: \"ALL\",\r\n  religion_name: \"ALL\"\r\n};\r\nlet relegionMaster = (req, res, next) => {\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    let db = req.db;\r\n    let where = whereCondition(extend(religionWhere, req.query));\r\n    db.getConnection((error, connection) => {\r\n      if (error) {\r\n        next(error);\r\n      }\r\n      connection.query(\r\n        \"SELECT `hims_d_religion_id`, `religion_code`, `religion_name`,`arabic_religion_name` FROM `hims_d_religion` WHERE `record_status`='A' AND \" +\r\n          where.condition,\r\n        where.values,\r\n        (error, result) => {\r\n          releaseDBConnection(db, connection);\r\n          if (error) {\r\n            next(error);\r\n          }\r\n          req.records = result;\r\n          next();\r\n        }\r\n      );\r\n    });\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\n\r\nlet auogenWhere = {\r\n  hims_f_app_numgen_id: \"ALL\",\r\n  numgen_code: \"ALL\",\r\n  module_desc: \"ALL\"\r\n};\r\nlet autoGenMaster = (req, res, next) => {\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    let db = req.db;\r\n    let where = whereCondition(extend(auogenWhere, req.query));\r\n    db.getConnection((error, connection) => {\r\n      if (error) {\r\n        next(error);\r\n      }\r\n      connection.query(\r\n        \"SELECT `hims_f_app_numgen_id`, `numgen_code`, `module_desc`, `prefix`, `intermediate_series`, `postfix`, `length`, `increment_by`, `numgen_seperator`, `postfix_start`, `postfix_end`, `current_num`, `pervious_num` FROM `hims_f_app_numgen` WHERE `record_status`='A' AND \" +\r\n          where.condition,\r\n        where.values,\r\n        (error, result) => {\r\n          releaseDBConnection(db, connection);\r\n          if (error) {\r\n            next(error);\r\n          }\r\n          req.records = result;\r\n          next();\r\n        }\r\n      );\r\n    });\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\n\r\nlet visaWhere = {\r\n  hims_d_visa_type_id: \"ALL\",\r\n  visa_type_code: \"ALL\",\r\n  visa_type: \"ALL\"\r\n};\r\nlet visaMaster = (req, res, next) => {\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    let db = req.db;\r\n    let where = whereCondition(extend(visaWhere, req.query));\r\n    db.getConnection((error, connection) => {\r\n      if (error) {\r\n        next(error);\r\n      }\r\n      connection.query(\r\n        \"SELECT `hims_d_visa_type_id`, `visa_type_code`, `visa_type`, `arabic_visa_type`, \\\r\n         `created_by`, `created_date`, `updated_by`, `updated_date`, `visa_status` FROM \\\r\n         `hims_d_visa_type` WHERE `record_status`='A' AND \" +\r\n          where.condition,\r\n        where.values,\r\n        (error, result) => {\r\n          connection.release();\r\n          if (error) {\r\n            next(error);\r\n          }\r\n          req.records = result;\r\n          next();\r\n        }\r\n      );\r\n    });\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\n\r\nlet inputClicnicalNonClinicalDept = {\r\n  department_type: \"ALL\"\r\n};\r\n\r\nlet clinicalNonClinicalAll = (req, res, next) => {\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    let db = req.db;\r\n    let where = extend(inputClicnicalNonClinicalDept, req.query);\r\n    db.getConnection((error, connection) => {\r\n      if (error) {\r\n        next(error);\r\n      }\r\n      let connectionString = \"\";\r\n      if (where.department_type == \"CLINICAL\") {\r\n        connectionString = \" and hims_d_department.department_type='CLINICAL' \";\r\n      } else if (where.department_type == \"NON-CLINICAL\") {\r\n        connectionString =\r\n          \" and hims_d_department.department_type='NON-CLINICAL' \";\r\n      }\r\n\r\n      connection.query(\r\n        \"select hims_d_sub_department.hims_d_sub_department_id ,sub_department_code,sub_department_name\\\r\n       ,sub_department_desc, arabic_sub_department_name, hims_d_sub_department.department_id,hims_d_department.department_type \\\r\n       from hims_d_sub_department,hims_d_department where \\\r\n       hims_d_sub_department.department_id=hims_d_department.hims_d_department_id \\\r\n       and hims_d_department.record_status='A' and sub_department_status='A' \\\r\n       \" +\r\n          connectionString,\r\n        (error, result) => {\r\n          connection.release();\r\n          if (error) {\r\n            next(error);\r\n          }\r\n          req.records = result;\r\n          next();\r\n        }\r\n      );\r\n    });\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\n\r\nlet countryStateCity = (req, res, next) => {\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    let db = req.db;\r\n    db.getConnection((error, connection) => {\r\n      if (error) {\r\n        next(error);\r\n      }\r\n      connection.query(\r\n        \"select  hims_d_country_id,country_name,arabic_country_name  from hims_d_country where status='A';\\\r\n        select hims_d_state_id,state_name,arabic_state_name,country_id  from hims_d_state where record_status='A';\\\r\n        select  hims_d_city_id,city_name,city_arabic_name,state_id  from hims_d_city where record_status='A';\",\r\n        (error, result) => {\r\n          connection.release();\r\n          if (error) {\r\n            next(error);\r\n          }\r\n          req.records = result;\r\n          next();\r\n        }\r\n      );\r\n    });\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\n\r\n//created by irfan: to  kill all the database-connections\r\nlet killDbConnections = (req, res, next) => {\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    let db = req.db;\r\n\r\n    db.getConnection((error, connection) => {\r\n      debugLog(\"killDbConnections:\");\r\n      connection.query(\"show full processlist\", (error, result) => {\r\n        if (error) {\r\n          releaseDBConnection(db, connection);\r\n          next(error);\r\n        }\r\n        debugLog(\"result:\", result);\r\n        let idList = new LINQ(result)\r\n          .Where(w => w.User == \"algaeh_root\")\r\n          .Select(s => s.Id)\r\n          .ToArray();\r\n\r\n        debugLog(\"idList:\", idList);\r\n        let qry = \"\";\r\n        for (let i = 0; i < idList.length; i++) {\r\n          qry += \"kill \" + idList[i] + \";\"\r\n        }\r\n        if (idList.length > 0) {\r\n          connection.query(qry, (error, finalResult) => {\r\n            releaseDBConnection(db, connection);\r\n            if (error) {\r\n              next(error);\r\n            }\r\n\r\n            req.records = \"all process deleted\";\r\n            next();\r\n          });\r\n        } else {\r\n          releaseDBConnection(db, connection);\r\n          req.records = result;\r\n          next();\r\n        }\r\n      });\r\n    });\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\nmodule.exports = {\r\n  titleMaster,\r\n  countryMaster,\r\n  stateMaster,\r\n  cityMaster,\r\n  relegionMaster,\r\n  nationalityMaster,\r\n  autoGenMaster,\r\n  visaMaster,\r\n  clinicalNonClinicalAll,\r\n  countryStateCity,\r\n  killDbConnections\r\n};\r\n"]}