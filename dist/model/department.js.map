{"version":3,"sources":["../../src/model/department.js"],"names":["department","hims_d_department_id","department_code","department_name","department_desc","department_type","hospital_id","effective_start_date","effective_end_date","department_status","created_date","created_by","updated_date","updated_by","record_status","sub_department","subDepartment","hims_d_sub_department_id","sub_department_code","sub_department_name","sub_department_desc","department_id","sub_department_status","addDepartment","req","res","next","db","dataBaseNotInitilizedError","departmentDetails","body","getConnection","error","connection","beginTransaction","rollback","query","Date","result","insertId","commit","resultTables","records","e","updateDepartment","queryBuilder","inputs","resultSelect","deleteDepartment","tableName","id","values","departWhereCondition","selectDepartment","pagePaging","paging","Page","pageNo","page","pageSize","condition","subDepartmentWhereCondition","selectSubDepartment","addSubDepartment","subDepartmentDetails","length","resdata","generateError","notFound","updateSubDepartment","release","module","exports"],"mappings":"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","file":"department.js","sourcesContent":["import extend from \"extend\";\nimport {\n  selectStatement,\n  paging,\n  whereCondition,\n  deleteRecord,\n  releaseDBConnection\n} from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\nlet department = {\n  hims_d_department_id: null,\n  department_code: null,\n  department_name: null,\n  department_desc: null,\n  department_type: null,\n  hospital_id: null,\n  effective_start_date: null,\n  effective_end_date: null,\n  department_status: null,\n  created_date: null,\n  created_by: null,\n  updated_date: null,\n  updated_by: null,\n  record_status: null,\n  sub_department: [subDepartment]\n};\nlet subDepartment = {\n  hims_d_sub_department_id: null,\n  sub_department_code: null,\n  sub_department_name: null,\n  sub_department_desc: null,\n  department_id: null,\n  effective_start_date: null,\n  effective_end_date: null,\n  sub_department_status: null,\n  created_date: null,\n  created_by: null,\n  updated_date: null,\n  updated_by: null,\n  record_status: null\n};\nlet addDepartment = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let departmentDetails = extend(department, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        connection.query(\n          \"INSERT INTO hims_d_department(department_code \\\n        ,department_name \\\n        ,department_desc \\\n        ,department_type \\\n        ,hospital_id \\\n        ,effective_start_date \\\n        ,effective_end_date \\\n        ,department_status \\\n        ,created_date \\\n        ,created_by \\\n        ) VALUE(?,?,?,?,?,?,?,?,?,?)\",\n          [\n            departmentDetails.department_code,\n            departmentDetails.department_name,\n            departmentDetails.department_desc,\n            departmentDetails.department_type,\n            departmentDetails.hospital_id,\n            departmentDetails.effective_start_date,\n            departmentDetails.effective_end_date,\n            departmentDetails.department_status,\n            new Date(),\n            departmentDetails.created_by\n          ],\n          (error, result) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            if (result != null) {\n              departmentDetails.hims_d_department_id = result.insertId;\n\n              connection.commit(error => {\n                if (error) {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                }\n                connection.query(\n                  \"SELECT `hims_d_department_id`, `department_code`\\\n            , `department_name`, `department_desc`, `department_type`, `hospital_id`\\\n            , `effective_start_date`, `effective_end_date`, `department_status`\\\n             FROM `hims_d_department` WHERE hims_d_department_id=?;\\\n             SELECT `hims_d_sub_department_id`, `sub_department_code`, `sub_department_name`\\\n             ,`sub_department_desc`, `department_id`, `effective_start_date`\\\n             , `effective_end_date`, `sub_department_status` FROM `hims_d_sub_department` WHERE department_id=?;\",\n                  [\n                    departmentDetails.hims_d_department_id,\n                    departmentDetails.hims_d_department_id\n                  ],\n                  (error, resultTables) => {\n                    releaseDBConnection(db, connection);\n                    if (error) {\n                      next(error);\n                    }\n                    req.records = resultTables;\n                    next();\n                  }\n                );\n              });\n            }\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\nlet updateDepartment = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let departmentDetails = extend(department, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        let queryBuilder =\n          \"UPDATE `hims_d_department`\\\n      SET   `department_name`=?, `department_desc`=?, `department_type`=?\\\n      ,`hospital_id`=?, `effective_start_date`=?, `effective_end_date`=? \\\n      ,`department_status`=?, `updated_date`=?, `updated_by`=?\\\n      WHERE record_status='A' AND `hims_d_department_id`=?;\";\n        let inputs = [\n          departmentDetails.department_name,\n          departmentDetails.department_desc,\n          departmentDetails.department_type,\n          departmentDetails.hospital_id,\n          departmentDetails.effective_start_date,\n          departmentDetails.effective_end_date,\n          department.department_status,\n          new Date(),\n          departmentDetails.updated_by,\n          departmentDetails.hims_d_department_id\n        ];\n\n        connection.query(queryBuilder, inputs, (error, result) => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n          connection.commit(error => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            connection.query(\n              \"SELECT `hims_d_department_id`, `department_code`\\\n        , `department_name`, `department_desc`, `department_type`, `hospital_id`\\\n        , `effective_start_date`, `effective_end_date`, `department_status`\\\n         FROM `hims_d_department` WHERE hims_d_department_id=?;\",\n              [departmentDetails.hims_d_department_id],\n              (error, resultSelect) => {\n                releaseDBConnection(db, connection);\n\n                if (error) {\n                  next(error);\n                }\n                req.records = resultSelect;\n                next();\n              }\n            );\n          });\n        });\n      });\n    });\n  } catch (e) {\n    next(error);\n  }\n};\nlet deleteDepartment = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    deleteRecord(\n      {\n        db: req.db,\n        tableName: \"hims_d_department\",\n        id: req.body.hims_d_department_id,\n        query:\n          \"UPDATE hims_d_department SET  record_status='I' WHERE hims_d_department_id=?\",\n        values: [req.body.hims_d_department_id]\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      }\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet departWhereCondition = {\n  department_code: \"ALL\",\n  department_name: \"ALL\",\n  department_desc: \"ALL\",\n  department_type: \"ALL\",\n  effective_start_date: \"ALL\",\n  effective_end_date: \"ALL\",\n  department_status: \"ALL\"\n};\n\nlet selectDepartment = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let pagePaging = \"\";\n    if (req.paging != null) {\n      let Page = paging(req.paging);\n      pagePaging += \" LIMIT \" + Page.pageNo + \",\" + page.pageSize;\n    }\n\n    let condition = whereCondition(extend(departWhereCondition, req.query));\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"SELECT `hims_d_department_id`, `department_code`, `department_name`\\\n    , `department_desc`, `department_type`, `hospital_id`, `effective_start_date`\\\n    , `effective_end_date`, `department_status`,`created_date` FROM `hims_d_department` WHERE record_status ='A' AND \" +\n          condition.condition +\n          \" \" +\n          pagePaging,\n        values: condition.values\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet subDepartmentWhereCondition = {\n  hims_d_sub_department_id: \"ALL\",\n  sub_department_code: \"ALL\",\n  sub_department_name: \"ALL\",\n  sub_department_desc: \"ALL\",\n  department_id: \"ALL\",\n  effective_start_date: \"ALL\",\n  effective_end_date: \"ALL\",\n  sub_department_status: \"ALL\"\n};\n\nlet selectSubDepartment = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let condition = whereCondition(\n      extend(subDepartmentWhereCondition, req.query)\n    );\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"SELECT `hims_d_sub_department_id`, `sub_department_code`\\\n        , `sub_department_name`, `sub_department_desc`, `department_id`\\\n        , `effective_start_date`, `effective_end_date`, `sub_department_status`\\\n         FROM `hims_d_sub_department` WHERE record_status ='A' AND \" +\n          condition.condition,\n        values: condition.values\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet addSubDepartment = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let subDepartmentDetails = extend(subDepartment, req.body);\n    ///1\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      //2\n      connection.query(\n        \"SELECT hims_d_department_id from hims_d_department where hims_d_department_id =?\",\n        [subDepartmentDetails.department_id],\n        (error, result) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n          if (result.length != 0) {\n            connection.query(\n              \"INSERT INTO hims_d_sub_department(`sub_department_code`\\\n        , `sub_department_name`\\\n        , `sub_department_desc`\\\n        , `department_id`\\\n        , `effective_start_date`\\\n        , `effective_end_date`\\\n        , `sub_department_status`\\\n        , `created_date`\\\n        , `created_by`)VALUE(?,?,?,?,?,?,?,?,?)\",\n              [\n                subDepartmentDetails.sub_department_code,\n                subDepartmentDetails.sub_department_name,\n                subDepartmentDetails.sub_department_desc,\n                subDepartmentDetails.department_id,\n                subDepartmentDetails.effective_start_date,\n                subDepartmentDetails.effective_end_date,\n                subDepartmentDetails.sub_department_status,\n                new Date(),\n                subDepartmentDetails.created_by\n              ],\n              (error, resdata) => {\n                releaseDBConnection(db, connection);\n                if (error) {\n                  next(error);\n                }\n                req.records = resdata;\n                next();\n              }\n            );\n          } else {\n            next(\n              httpStatus.generateError(\n                httpStatus.notFound,\n                \"No such deparment exists\"\n              )\n            );\n          }\n        }\n      );\n    });\n    //3\n  } catch (e) {\n    next(e);\n  }\n};\nlet updateSubDepartment = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let subDepartmentDetails = extend(subDepartment, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.query(\n        \"UPDATE `hims_d_sub_department`\\\n   SET `sub_department_name`=?, `sub_department_desc`=?\\\n   , `effective_start_date`=?, `effective_end_date`=? \\\n   , `sub_department_status`=?,`updated_date`=?, `updated_by`=?\\\n   WHERE `record_status`='A' AND `hims_d_sub_department_id`=? ;\",\n        [\n          subDepartmentDetails.sub_department_name,\n          subDepartmentDetails.sub_department_desc,\n          subDepartmentDetails.effective_start_date,\n          subDepartmentDetails.effective_end_date,\n          subDepartmentDetails.sub_department_status,\n          new Date(),\n          subDepartmentDetails.updated_by,\n          subDepartmentDetails.hims_d_sub_department_id\n        ],\n        (error, result) => {\n          connection.release();\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addDepartment,\n  updateDepartment,\n  selectDepartment,\n  selectSubDepartment,\n  addSubDepartment,\n  updateSubDepartment,\n  deleteDepartment\n};\n"]}