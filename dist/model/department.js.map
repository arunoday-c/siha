{"version":3,"sources":["../../src/model/department.js"],"names":["addDepartment","req","res","next","subDepartment","hims_d_sub_department_id","sub_department_code","sub_department_name","sub_department_desc","department_id","effective_start_date","effective_end_date","sub_department_status","created_by","userIdentity","algaeh_d_app_user_id","updated_by","department","hims_d_department_id","department_code","department_name","department_desc","department_type","hospital_id","department_status","sub_department","db","dataBaseNotInitilizedError","departmentDetails","body","getConnection","error","connection","beginTransaction","rollback","query","Date","result","insertId","commit","resultTables","records","e","updateDepartment","queryBuilder","inputs","resultSelect","deleteDepartment","tableName","id","values","departWhereCondition","selectDepartment","pagePaging","paging","Page","pageNo","page","pageSize","condition","selectSubDepartment","subDepartmentWhereCondition","addSubDepartment","subDepartmentDetails","length","arabic_sub_department_name","resdata","generateError","notFound","updateSubDepartment","release","selectdoctors","inputClicnicalNonClinicalDept","where","connectionString","results","departments","GroupBy","g","sub_department_id","doctors","employee_id","selectDoctorsAndClinic","sub_dept_id","provider_id","module","exports"],"mappings":"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","file":"department.js","sourcesContent":["\"use strict\";\r\nimport extend from \"extend\";\r\nimport {\r\n  selectStatement,\r\n  paging,\r\n  whereCondition,\r\n  deleteRecord,\r\n  releaseDBConnection\r\n} from \"../utils\";\r\nimport httpStatus from \"../utils/httpStatus\";\r\nimport { LINQ } from \"node-linq\";\r\n// import $ from \"jquery\";\r\nimport { logger, debugFunction, debugLog } from \"../utils/logging\";\r\n\r\nlet addDepartment = (req, res, next) => {\r\n  let subDepartment = {\r\n    hims_d_sub_department_id: null,\r\n    sub_department_code: null,\r\n    sub_department_name: null,\r\n    sub_department_desc: null,\r\n    department_id: null,\r\n    effective_start_date: null,\r\n    effective_end_date: null,\r\n    sub_department_status: null,\r\n    created_by: req.userIdentity.algaeh_d_app_user_id,\r\n    updated_by: req.userIdentity.algaeh_d_app_user_id\r\n  };\r\n\r\n  let department = {\r\n    hims_d_department_id: null,\r\n    department_code: null,\r\n    department_name: null,\r\n    department_desc: null,\r\n    department_type: null,\r\n    hospital_id: null,\r\n    effective_start_date: null,\r\n    effective_end_date: null,\r\n    department_status: null,\r\n    created_by: req.userIdentity.algaeh_d_app_user_id,\r\n    updated_by: req.userIdentity.algaeh_d_app_user_id,\r\n    sub_department: [subDepartment]\r\n  };\r\n\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    let db = req.db;\r\n    let departmentDetails = extend(department, req.body);\r\n    db.getConnection((error, connection) => {\r\n      if (error) {\r\n        next(error);\r\n      }\r\n      connection.beginTransaction(error => {\r\n        if (error) {\r\n          connection.rollback(() => {\r\n            releaseDBConnection(db, connection);\r\n            next(error);\r\n          });\r\n        }\r\n        connection.query(\r\n          \"INSERT INTO hims_d_department(department_code \\\r\n        ,department_name \\\r\n        ,department_desc \\\r\n        ,department_type \\\r\n        ,hospital_id \\\r\n        ,effective_start_date \\\r\n        ,effective_end_date \\\r\n        ,department_status \\\r\n        ,created_date \\\r\n        ,created_by \\\r\n        ) VALUE(?,?,?,?,?,?,?,?,?,?)\",\r\n          [\r\n            departmentDetails.department_code,\r\n            departmentDetails.department_name,\r\n            departmentDetails.department_desc,\r\n            departmentDetails.department_type,\r\n            departmentDetails.hospital_id,\r\n            departmentDetails.effective_start_date,\r\n            departmentDetails.effective_end_date,\r\n            departmentDetails.department_status,\r\n            new Date(),\r\n            departmentDetails.created_by\r\n          ],\r\n          (error, result) => {\r\n            if (error) {\r\n              connection.rollback(() => {\r\n                releaseDBConnection(db, connection);\r\n                next(error);\r\n              });\r\n            }\r\n            if (result != null) {\r\n              departmentDetails.hims_d_department_id = result.insertId;\r\n\r\n              connection.commit(error => {\r\n                if (error) {\r\n                  connection.rollback(() => {\r\n                    releaseDBConnection(db, connection);\r\n                    next(error);\r\n                  });\r\n                }\r\n                connection.query(\r\n                  \"SELECT `hims_d_department_id`, `department_code`\\\r\n            , `department_name`, `department_desc`, `department_type`, `hospital_id`\\\r\n            , `effective_start_date`, `effective_end_date`, `department_status`\\\r\n             FROM `hims_d_department` WHERE hims_d_department_id=?;\\\r\n             SELECT `hims_d_sub_department_id`, `sub_department_code`, `sub_department_name`,`arabic_sub_department_name`\\\r\n             ,`sub_department_desc`, `department_id`, `effective_start_date`\\\r\n             , `effective_end_date`, `sub_department_status` FROM `hims_d_sub_department` WHERE department_id=?;\",\r\n                  [\r\n                    departmentDetails.hims_d_department_id,\r\n                    departmentDetails.hims_d_department_id\r\n                  ],\r\n                  (error, resultTables) => {\r\n                    releaseDBConnection(db, connection);\r\n                    if (error) {\r\n                      next(error);\r\n                    }\r\n                    req.records = resultTables;\r\n                    next();\r\n                  }\r\n                );\r\n              });\r\n            }\r\n          }\r\n        );\r\n      });\r\n    });\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\nlet updateDepartment = (req, res, next) => {\r\n  let department = {\r\n    hims_d_department_id: null,\r\n    department_code: null,\r\n    department_name: null,\r\n    department_desc: null,\r\n    department_type: null,\r\n    hospital_id: null,\r\n    effective_start_date: null,\r\n    effective_end_date: null,\r\n    department_status: null,\r\n    created_by: req.userIdentity.algaeh_d_app_user_id,\r\n    updated_by: req.userIdentity.algaeh_d_app_user_id,\r\n    sub_department: [subDepartment]\r\n  };\r\n\r\n  try {\r\n    debugFunction(\"updateDepartment\");\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    let db = req.db;\r\n\r\n    debugLog(\"Input Data\", req.body);\r\n    let departmentDetails = extend(department, req.body);\r\n    db.getConnection((error, connection) => {\r\n      if (error) {\r\n        next(error);\r\n      }\r\n      connection.beginTransaction(error => {\r\n        if (error) {\r\n          connection.rollback(() => {\r\n            releaseDBConnection(db, connection);\r\n            next(error);\r\n          });\r\n        }\r\n        let queryBuilder =\r\n          \"UPDATE `hims_d_department`\\\r\n        SET   `department_name`=?, `department_desc`=?, `department_type`=?\\\r\n        ,`hospital_id`=?, `effective_start_date`=?, `effective_end_date`=? \\\r\n        ,`department_status`=?, `updated_date`=?, `updated_by`=?\\\r\n        WHERE record_status='A' AND `hims_d_department_id`=?;\";\r\n        let inputs = [\r\n          departmentDetails.department_name,\r\n          departmentDetails.department_desc,\r\n          departmentDetails.department_type,\r\n          departmentDetails.hospital_id,\r\n          departmentDetails.effective_start_date,\r\n          departmentDetails.effective_end_date,\r\n          departmentDetails.department_status,\r\n          new Date(),\r\n          departmentDetails.updated_by,\r\n          departmentDetails.hims_d_department_id\r\n        ];\r\n\r\n        connection.query(queryBuilder, inputs, (error, result) => {\r\n          if (error) {\r\n            connection.rollback(() => {\r\n              releaseDBConnection(db, connection);\r\n              next(error);\r\n            });\r\n          }\r\n          connection.commit(error => {\r\n            if (error) {\r\n              connection.rollback(() => {\r\n                releaseDBConnection(db, connection);\r\n                next(error);\r\n              });\r\n            }\r\n            connection.query(\r\n              \"SELECT `hims_d_department_id`, `department_code`\\\r\n        , `department_name`, `department_desc`, `department_type`, `hospital_id`\\\r\n        , `effective_start_date`, `effective_end_date`, `department_status`\\\r\n         FROM `hims_d_department` WHERE hims_d_department_id=?;\",\r\n              [departmentDetails.hims_d_department_id],\r\n              (error, resultSelect) => {\r\n                releaseDBConnection(db, connection);\r\n\r\n                if (error) {\r\n                  next(error);\r\n                }\r\n                req.records = resultSelect;\r\n                next();\r\n              }\r\n            );\r\n          });\r\n        });\r\n      });\r\n    });\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\nlet deleteDepartment = (req, res, next) => {\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    deleteRecord(\r\n      {\r\n        db: req.db,\r\n        tableName: \"hims_d_department\",\r\n        id: req.body.hims_d_department_id,\r\n        query:\r\n          \"UPDATE hims_d_department SET  record_status='I' WHERE hims_d_department_id=?\",\r\n        values: [req.body.hims_d_department_id]\r\n      },\r\n      result => {\r\n        req.records = result;\r\n        next();\r\n      },\r\n      error => {\r\n        next(error);\r\n      }\r\n    );\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\n\r\nlet departWhereCondition = {\r\n  department_code: \"ALL\",\r\n  department_name: \"ALL\",\r\n  department_desc: \"ALL\",\r\n  department_type: \"ALL\",\r\n  effective_start_date: \"ALL\",\r\n  effective_end_date: \"ALL\",\r\n  department_status: \"ALL\"\r\n};\r\n\r\nlet selectDepartment = (req, res, next) => {\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    let pagePaging = \"\";\r\n    if (req.paging != null) {\r\n      let Page = paging(req.paging);\r\n      pagePaging += \" LIMIT \" + Page.pageNo + \",\" + page.pageSize;\r\n    }\r\n    debugFunction(\"inside selectDepartment\");\r\n    let condition = whereCondition(extend(departWhereCondition, req.query));\r\n    selectStatement(\r\n      {\r\n        db: req.db,\r\n        query:\r\n          \"SELECT `hims_d_department_id`, `department_code`, `department_name`\\\r\n    , `department_desc`, `department_type`, `hospital_id`, `effective_start_date`\\\r\n    , `effective_end_date`, `department_status`,`created_date` FROM `hims_d_department` WHERE record_status ='A' AND \" +\r\n          condition.condition +\r\n          \" \" +\r\n          pagePaging,\r\n        values: condition.values\r\n      },\r\n      result => {\r\n        req.records = result;\r\n        next();\r\n      },\r\n      error => {\r\n        next(error);\r\n      },\r\n      true\r\n    );\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\n\r\nlet selectSubDepartment = (req, res, next) => {\r\n  let subDepartmentWhereCondition = {\r\n    hims_d_sub_department_id: \"ALL\",\r\n    sub_department_code: \"ALL\",\r\n    sub_department_name: \"ALL\",\r\n    sub_department_desc: \"ALL\",\r\n    department_id: \"ALL\",\r\n    effective_start_date: \"ALL\",\r\n    effective_end_date: \"ALL\",\r\n    sub_department_status: \"ALL\"\r\n  };\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    debugFunction(\"inside selectSubDepartment\");\r\n    let condition = whereCondition(\r\n      extend(subDepartmentWhereCondition, req.query)\r\n    );\r\n    selectStatement(\r\n      {\r\n        db: req.db,\r\n        query:\r\n          \"SELECT `hims_d_sub_department_id`, `sub_department_code`\\\r\n        , `sub_department_name`, `arabic_sub_department_name`, `sub_department_desc`, `department_id`\\\r\n         , `effective_start_date`, `effective_end_date`, `sub_department_status`\\\r\n         FROM `hims_d_sub_department` WHERE record_status ='A' AND \" +\r\n          condition.condition,\r\n        values: condition.values\r\n      },\r\n      result => {\r\n        req.records = result;\r\n        next();\r\n      },\r\n      error => {\r\n        next(error);\r\n      },\r\n      true\r\n    );\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\n\r\nlet addSubDepartment = (req, res, next) => {\r\n  // let subDepartment = {\r\n  //   hims_d_sub_department_id: null,\r\n  //   sub_department_code: null,\r\n  //   sub_department_name: null,\r\n  //   sub_department_desc: null,\r\n  //   department_id: null,\r\n  //   effective_start_date: null,\r\n  //   effective_end_date: null,\r\n  //   sub_department_status: null,\r\n  //   created_by: req.userIdentity.algaeh_d_app_user_id,\r\n  //   updated_by: req.userIdentity.algaeh_d_app_user_id\r\n  // };\r\n\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    let db = req.db;\r\n    let subDepartmentDetails = extend({}, req.body);\r\n    ///1\r\n    db.getConnection((error, connection) => {\r\n      if (error) {\r\n        next(error);\r\n      }\r\n      //2\r\n      connection.query(\r\n        \"SELECT hims_d_department_id from hims_d_department where hims_d_department_id =?\",\r\n        [subDepartmentDetails.department_id],\r\n        (error, result) => {\r\n          if (error) {\r\n            releaseDBConnection(db, connection);\r\n            next(error);\r\n          }\r\n          if (result.length != 0) {\r\n            connection.query(\r\n              \"INSERT INTO hims_d_sub_department(`sub_department_code`\\\r\n        , `sub_department_name`\\\r\n        , `sub_department_desc`,arabic_sub_department_name\\\r\n        , `department_id`\\\r\n        , `effective_start_date`\\\r\n        , `effective_end_date`\\\r\n        , `sub_department_status`\\\r\n        , `created_date`\\\r\n        , `created_by`,updated_date,updated_by)VALUE(?,?,?,?,?,?,?,?,?,?,?,?)\",\r\n              [\r\n                subDepartmentDetails.sub_department_code,\r\n                subDepartmentDetails.sub_department_name,\r\n                subDepartmentDetails.sub_department_desc,\r\n                subDepartmentDetails.arabic_sub_department_name,\r\n                subDepartmentDetails.department_id,\r\n                subDepartmentDetails.effective_start_date,\r\n                subDepartmentDetails.effective_end_date,\r\n                subDepartmentDetails.sub_department_status,\r\n                new Date(),\r\n                subDepartmentDetails.created_by,\r\n                new Date(),\r\n                subDepartmentDetails.updated_by\r\n              ],\r\n              (error, resdata) => {\r\n                releaseDBConnection(db, connection);\r\n                if (error) {\r\n                  next(error);\r\n                }\r\n                req.records = resdata;\r\n                next();\r\n              }\r\n            );\r\n          } else {\r\n            next(\r\n              httpStatus.generateError(\r\n                httpStatus.notFound,\r\n                \"No such deparment exists\"\r\n              )\r\n            );\r\n          }\r\n        }\r\n      );\r\n    });\r\n    //3\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\nlet updateSubDepartment = (req, res, next) => {\r\n  // let subDepartment = {\r\n  //   hims_d_sub_department_id: null,\r\n  //   sub_department_code: null,\r\n  //   sub_department_name: null,\r\n  //   sub_department_desc: null,\r\n  //   department_id: null,\r\n  //   effective_start_date: null,\r\n  //   effective_end_date: null,\r\n  //   sub_department_status: null,\r\n\r\n  //   created_by: req.userIdentity.algaeh_d_app_user_id,\r\n\r\n  //   updated_by: req.userIdentity.algaeh_d_app_user_id\r\n  // };\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    let db = req.db;\r\n    let subDepartmentDetails = extend({}, req.body);\r\n    db.getConnection((error, connection) => {\r\n      if (error) {\r\n        next(error);\r\n      }\r\n      connection.query(\r\n        \"UPDATE `hims_d_sub_department`\\\r\n   SET `sub_department_name`=?, `sub_department_desc`=?,arabic_sub_department_name=?\\\r\n   , `effective_start_date`=?, `effective_end_date`=? \\\r\n   , `sub_department_status`=?,`updated_date`=?, `updated_by`=?\\\r\n   WHERE `record_status`='A' AND `hims_d_sub_department_id`=? ;\",\r\n        [\r\n          subDepartmentDetails.sub_department_name,\r\n          subDepartmentDetails.sub_department_desc,\r\n          subDepartmentDetails.arabic_sub_department_name,\r\n          subDepartmentDetails.effective_start_date,\r\n          subDepartmentDetails.effective_end_date,\r\n          subDepartmentDetails.sub_department_status,\r\n          new Date(),\r\n          subDepartmentDetails.updated_by,\r\n          subDepartmentDetails.hims_d_sub_department_id\r\n        ],\r\n        (error, result) => {\r\n          connection.release();\r\n          if (error) {\r\n            next(error);\r\n          }\r\n          req.records = result;\r\n          next();\r\n        }\r\n      );\r\n    });\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\n\r\n//created by:Noor to get sub departments\r\nlet selectdoctors = (req, res, next) => {\r\n  let inputClicnicalNonClinicalDept = {\r\n    department_type: \"ALL\"\r\n  };\r\n  debugFunction(\"selectdoctors\");\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    let db = req.db;\r\n\r\n    let where = extend(inputClicnicalNonClinicalDept, req.query);\r\n    db.getConnection((error, connection) => {\r\n      if (error) {\r\n        next(error);\r\n      }\r\n      let connectionString = \"\";\r\n      if (where.department_type == \"CLINICAL\") {\r\n        connectionString = \" and hims_d_department.department_type='CLINICAL' \";\r\n      } else if (where.department_type == \"NON-CLINICAL\") {\r\n        connectionString =\r\n          \" and hims_d_department.department_type='NON-CLINICAL' \";\r\n      }\r\n\r\n      // connection.query(\r\n      //   \"select hims_d_sub_department.hims_d_sub_department_id ,sub_department_code,sub_department_name\\\r\n      //    ,sub_department_desc, arabic_sub_department_name, hims_d_sub_department.department_id,hims_d_department.department_type \\\r\n      //    from hims_d_sub_department,hims_d_department where \\\r\n      //    hims_d_sub_department.department_id=hims_d_department.hims_d_department_id \\\r\n      //    and hims_d_department.record_status='A' and sub_department_status='A' \\\r\n      //    \" +\r\n      //     connectionString,\r\n      //   (error, result) => {\r\n      //     if (error) {\r\n      //       connection.release();\r\n      //       next(error);\r\n      //     }\r\n      //     // req.records = result;\r\n      //     //sbdepartment = extend(sbdepartment, result.body);\r\n      //     // console.log(sbdepartment);\r\n      //     //next();\r\n      //   }\r\n      // );\r\n\r\n      connection.query(\r\n        \"select hims_m_employee_department_mappings.employee_id,\\\r\n         hims_m_employee_department_mappings.sub_department_id,\\\r\n      hims_d_employee.full_name,\\\r\n      hims_d_employee.arabic_name,\\\r\n      hims_m_employee_department_mappings.services_id,\\\r\n      hims_d_sub_department.department_id,\\\r\n      hims_d_sub_department.sub_department_name,\\\r\n      hims_d_sub_department.arabic_sub_department_name\\\r\n      from hims_m_employee_department_mappings,\\\r\n      hims_d_employee,hims_d_sub_department,hims_d_department,\\\r\n      hims_d_employee_category,hims_m_category_speciality_mappings\\\r\n      where\\\r\n      hims_d_department.hims_d_department_id = hims_d_sub_department.department_id\\\r\n      and hims_m_employee_department_mappings.employee_id = hims_d_employee.hims_d_employee_id \\\r\n      and hims_d_sub_department.hims_d_sub_department_id= hims_m_employee_department_mappings.sub_department_id\\\r\n      and hims_m_employee_department_mappings.record_status='A'\\\r\n      and hims_d_department.hims_d_department_id = hims_d_sub_department.department_id\\\r\n      and hims_d_sub_department.record_status='A'\\\r\n      and hims_d_employee.record_status ='A'\\\r\n      and hims_d_sub_department.sub_department_status='A'\\\r\n      and hims_d_employee.employee_status='A'\\\r\n      and hims_d_department.department_type='CLINICAL'\\\r\n      and hims_d_employee.isdoctor='Y'\\\r\n      group by hims_m_employee_department_mappings.employee_id,hims_m_employee_department_mappings.sub_department_id;\",\r\n        (error, results) => {\r\n          connection.release();\r\n          if (error) {\r\n            next(error);\r\n          }\r\n\r\n          let departments = new LINQ(results).GroupBy(g => g.sub_department_id);\r\n          let doctors = new LINQ(results).GroupBy(g => g.employee_id);\r\n          // .SelectMany(s => {\r\n          //   return s;\r\n          // })\r\n          // .ToArray();\r\n          // .Select(s => {\r\n          //   debugLog(\"log of \", s);\r\n          //   return {\r\n          //     sub_department_id: s.sub_department_id,\r\n          //     sub_department_name: s.sub_department_name,\r\n          //     employee_id: s.employee_id\r\n          //   };\r\n          // });\r\n          //.ToArray();\r\n\r\n          req.records = { departments: departments, doctors: doctors };\r\n          //extend(sbdepartment, doctorsInfo);\r\n          next();\r\n        }\r\n      );\r\n    });\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\n\r\n//created by:irfan to get sub departments doctors and clinic\r\nlet selectDoctorsAndClinic = (req, res, next) => {\r\n  let inputClicnicalNonClinicalDept = {\r\n    department_type: \"ALL\"\r\n  };\r\n  debugFunction(\"selectdoctors\");\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    let db = req.db;\r\n\r\n    let where = extend(inputClicnicalNonClinicalDept, req.query);\r\n    db.getConnection((error, connection) => {\r\n      if (error) {\r\n        next(error);\r\n      }\r\n      let connectionString = \"\";\r\n      if (where.department_type == \"CLINICAL\") {\r\n        connectionString = \" and hims_d_department.department_type='CLINICAL' \";\r\n      } else if (where.department_type == \"NON-CLINICAL\") {\r\n        connectionString =\r\n          \" and hims_d_department.department_type='NON-CLINICAL' \";\r\n      }\r\n\r\n      connection.query(\r\n        \"select hims_m_employee_department_mappings.employee_id as provider_id,\\\r\n         hims_m_employee_department_mappings.sub_department_id as sub_dept_id,\\\r\n       hims_d_employee.full_name,\\\r\n  hims_d_employee.arabic_name,\\\r\n      hims_m_employee_department_mappings.services_id,\\\r\n      hims_d_sub_department.department_id,\\\r\n      hims_d_sub_department.sub_department_name,\\\r\n      hims_d_sub_department.arabic_sub_department_name,hims_d_appointment_clinic_id as clinic_id,AP.description as clinic_description\\\r\n      from hims_m_employee_department_mappings,\\\r\n      hims_d_employee,hims_d_sub_department,hims_d_department,\\\r\n      hims_d_employee_category,hims_m_category_speciality_mappings,hims_d_appointment_clinic AP\\\r\n      where\\\r\n      hims_d_department.hims_d_department_id = hims_d_sub_department.department_id\\\r\n      and hims_m_employee_department_mappings.employee_id = hims_d_employee.hims_d_employee_id \\\r\n      and hims_d_sub_department.hims_d_sub_department_id= hims_m_employee_department_mappings.sub_department_id\\\r\n      and hims_m_employee_department_mappings.record_status='A'\\\r\n      and hims_d_department.hims_d_department_id = hims_d_sub_department.department_id\\\r\n      and hims_d_sub_department.record_status='A'\\\r\n      and hims_d_employee.record_status ='A'\\\r\n      and hims_d_sub_department.sub_department_status='A'\\\r\n      and hims_d_employee.employee_status='A'\\\r\n      and hims_d_department.department_type='CLINICAL'\\\r\n      and hims_d_employee.isdoctor='Y'\\\r\n      and AP.record_status='A' and hims_d_employee.hims_d_employee_id=AP.provider_id \\\r\n      group by hims_m_employee_department_mappings.employee_id,hims_m_employee_department_mappings.sub_department_id;\",\r\n        (error, results) => {\r\n          connection.release();\r\n          if (error) {\r\n            next(error);\r\n          }\r\n\r\n          let departments = new LINQ(results).GroupBy(g => g.sub_dept_id);\r\n          let doctors = new LINQ(results).GroupBy(g => g.provider_id);\r\n          // .SelectMany(s => {\r\n          //   return s;\r\n          // })\r\n          // .ToArray();\r\n          // .Select(s => {\r\n          //   debugLog(\"log of \", s);\r\n          //   return {\r\n          //     sub_department_id: s.sub_department_id,\r\n          //     sub_department_name: s.sub_department_name,\r\n          //     employee_id: s.employee_id\r\n          //   };\r\n          // });\r\n          //.ToArray();\r\n\r\n          req.records = { departments: departments, doctors: doctors };\r\n          //extend(sbdepartment, doctorsInfo);\r\n          next();\r\n        }\r\n      );\r\n    });\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  addDepartment,\r\n  updateDepartment,\r\n  selectDepartment,\r\n  selectSubDepartment,\r\n  addSubDepartment,\r\n  updateSubDepartment,\r\n  deleteDepartment,\r\n  selectdoctors,\r\n  selectDoctorsAndClinic\r\n};\r\n"]}