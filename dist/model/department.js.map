{"version":3,"sources":["../../src/model/department.js"],"names":["addDepartment","req","res","next","subDepartment","hims_d_sub_department_id","sub_department_code","sub_department_name","sub_department_desc","department_id","effective_start_date","effective_end_date","sub_department_status","created_date","created_by","updated_date","updated_by","record_status","department","hims_d_department_id","department_code","department_name","department_desc","department_type","hospital_id","department_status","sub_department","db","dataBaseNotInitilizedError","departmentDetails","body","getConnection","error","connection","beginTransaction","rollback","query","Date","result","insertId","commit","resultTables","records","e","updateDepartment","queryBuilder","inputs","resultSelect","deleteDepartment","tableName","id","values","departWhereCondition","selectDepartment","pagePaging","paging","Page","pageNo","page","pageSize","condition","selectSubDepartment","subDepartmentWhereCondition","addSubDepartment","subDepartmentDetails","length","resdata","generateError","notFound","updateSubDepartment","release","selectdoctors","inputClicnicalNonClinicalDept","where","connectionString","results","departments","GroupBy","g","sub_department_id","doctors","employee_id","module","exports"],"mappings":"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","file":"department.js","sourcesContent":["\"use strict\";\nimport extend from \"extend\";\nimport {\n  selectStatement,\n  paging,\n  whereCondition,\n  deleteRecord,\n  releaseDBConnection\n} from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { LINQ } from \"node-linq\";\n// import $ from \"jquery\";\nimport { logger, debugFunction, debugLog } from \"../utils/logging\";\n\nlet addDepartment = (req, res, next) => {\n  let subDepartment = {\n    hims_d_sub_department_id: null,\n    sub_department_code: null,\n    sub_department_name: null,\n    sub_department_desc: null,\n    department_id: null,\n    effective_start_date: null,\n    effective_end_date: null,\n    sub_department_status: null,\n    created_date: null,\n    created_by: null,\n    updated_date: null,\n    updated_by: null,\n    record_status: null\n  };\n\n  let department = {\n    hims_d_department_id: null,\n    department_code: null,\n    department_name: null,\n    department_desc: null,\n    department_type: null,\n    hospital_id: null,\n    effective_start_date: null,\n    effective_end_date: null,\n    department_status: null,\n    created_date: null,\n    created_by: null,\n    updated_date: null,\n    updated_by: null,\n    record_status: null,\n    sub_department: [subDepartment]\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let departmentDetails = extend(department, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        connection.query(\n          \"INSERT INTO hims_d_department(department_code \\\n        ,department_name \\\n        ,department_desc \\\n        ,department_type \\\n        ,hospital_id \\\n        ,effective_start_date \\\n        ,effective_end_date \\\n        ,department_status \\\n        ,created_date \\\n        ,created_by \\\n        ) VALUE(?,?,?,?,?,?,?,?,?,?)\",\n          [\n            departmentDetails.department_code,\n            departmentDetails.department_name,\n            departmentDetails.department_desc,\n            departmentDetails.department_type,\n            departmentDetails.hospital_id,\n            departmentDetails.effective_start_date,\n            departmentDetails.effective_end_date,\n            departmentDetails.department_status,\n            new Date(),\n            departmentDetails.created_by\n          ],\n          (error, result) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            if (result != null) {\n              departmentDetails.hims_d_department_id = result.insertId;\n\n              connection.commit(error => {\n                if (error) {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                }\n                connection.query(\n                  \"SELECT `hims_d_department_id`, `department_code`\\\n            , `department_name`, `department_desc`, `department_type`, `hospital_id`\\\n            , `effective_start_date`, `effective_end_date`, `department_status`\\\n             FROM `hims_d_department` WHERE hims_d_department_id=?;\\\n             SELECT `hims_d_sub_department_id`, `sub_department_code`, `sub_department_name`,`arabic_sub_department_name`\\\n             ,`sub_department_desc`, `department_id`, `effective_start_date`\\\n             , `effective_end_date`, `sub_department_status` FROM `hims_d_sub_department` WHERE department_id=?;\",\n                  [\n                    departmentDetails.hims_d_department_id,\n                    departmentDetails.hims_d_department_id\n                  ],\n                  (error, resultTables) => {\n                    releaseDBConnection(db, connection);\n                    if (error) {\n                      next(error);\n                    }\n                    req.records = resultTables;\n                    next();\n                  }\n                );\n              });\n            }\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\nlet updateDepartment = (req, res, next) => {\n  try {\n    debugFunction(\"updateDepartment\");\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    debugLog(\"Input Data\", req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        let queryBuilder =\n          \"UPDATE `hims_d_department`\\\n        SET   `department_name`=?, `department_desc`=?, `department_type`=?\\\n        ,`hospital_id`=?, `effective_start_date`=?, `effective_end_date`=? \\\n        ,`department_status`=?, `updated_date`=?, `updated_by`=?\\\n        WHERE record_status='A' AND `hims_d_department_id`=?;\";\n        let inputs = [\n          departmentDetails.department_name,\n          departmentDetails.department_desc,\n          departmentDetails.department_type,\n          departmentDetails.hospital_id,\n          departmentDetails.effective_start_date,\n          departmentDetails.effective_end_date,\n          departmentDetails.department_status,\n          new Date(),\n          departmentDetails.updated_by,\n          departmentDetails.hims_d_department_id\n        ];\n\n        connection.query(queryBuilder, inputs, (error, result) => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n          connection.commit(error => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            connection.query(\n              \"SELECT `hims_d_department_id`, `department_code`\\\n        , `department_name`, `department_desc`, `department_type`, `hospital_id`\\\n        , `effective_start_date`, `effective_end_date`, `department_status`\\\n         FROM `hims_d_department` WHERE hims_d_department_id=?;\",\n              [departmentDetails.hims_d_department_id],\n              (error, resultSelect) => {\n                releaseDBConnection(db, connection);\n\n                if (error) {\n                  next(error);\n                }\n                req.records = resultSelect;\n                next();\n              }\n            );\n          });\n        });\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\nlet deleteDepartment = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    deleteRecord(\n      {\n        db: req.db,\n        tableName: \"hims_d_department\",\n        id: req.body.hims_d_department_id,\n        query:\n          \"UPDATE hims_d_department SET  record_status='I' WHERE hims_d_department_id=?\",\n        values: [req.body.hims_d_department_id]\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      }\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet departWhereCondition = {\n  department_code: \"ALL\",\n  department_name: \"ALL\",\n  department_desc: \"ALL\",\n  department_type: \"ALL\",\n  effective_start_date: \"ALL\",\n  effective_end_date: \"ALL\",\n  department_status: \"ALL\"\n};\n\nlet selectDepartment = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let pagePaging = \"\";\n    if (req.paging != null) {\n      let Page = paging(req.paging);\n      pagePaging += \" LIMIT \" + Page.pageNo + \",\" + page.pageSize;\n    }\n\n    let condition = whereCondition(extend(departWhereCondition, req.query));\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"SELECT `hims_d_department_id`, `department_code`, `department_name`\\\n    , `department_desc`, `department_type`, `hospital_id`, `effective_start_date`\\\n    , `effective_end_date`, `department_status`,`created_date` FROM `hims_d_department` WHERE record_status ='A' AND \" +\n          condition.condition +\n          \" \" +\n          pagePaging,\n        values: condition.values\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet selectSubDepartment = (req, res, next) => {\n  let subDepartmentWhereCondition = {\n    hims_d_sub_department_id: \"ALL\",\n    sub_department_code: \"ALL\",\n    sub_department_name: \"ALL\",\n    sub_department_desc: \"ALL\",\n    department_id: \"ALL\",\n    effective_start_date: \"ALL\",\n    effective_end_date: \"ALL\",\n    sub_department_status: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let condition = whereCondition(\n      extend(subDepartmentWhereCondition, req.query)\n    );\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"SELECT `hims_d_sub_department_id`, `sub_department_code`\\\n        , `sub_department_name`, `arabic_sub_department_name`, sub_department_desc`, `department_id`\\\n        , `effective_start_date`, `effective_end_date`, `sub_department_status`\\\n         FROM `hims_d_sub_department` WHERE record_status ='A' AND \" +\n          condition.condition,\n        values: condition.values\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet addSubDepartment = (req, res, next) => {\n  let subDepartment = {\n    hims_d_sub_department_id: null,\n    sub_department_code: null,\n    sub_department_name: null,\n    sub_department_desc: null,\n    department_id: null,\n    effective_start_date: null,\n    effective_end_date: null,\n    sub_department_status: null,\n    created_date: null,\n    created_by: null,\n    updated_date: null,\n    updated_by: null,\n    record_status: null\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let subDepartmentDetails = extend(subDepartment, req.body);\n    ///1\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      //2\n      connection.query(\n        \"SELECT hims_d_department_id from hims_d_department where hims_d_department_id =?\",\n        [subDepartmentDetails.department_id],\n        (error, result) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n          if (result.length != 0) {\n            connection.query(\n              \"INSERT INTO hims_d_sub_department(`sub_department_code`\\\n        , `sub_department_name`\\\n        , `sub_department_desc`\\\n        , `department_id`\\\n        , `effective_start_date`\\\n        , `effective_end_date`\\\n        , `sub_department_status`\\\n        , `created_date`\\\n        , `created_by`)VALUE(?,?,?,?,?,?,?,?,?)\",\n              [\n                subDepartmentDetails.sub_department_code,\n                subDepartmentDetails.sub_department_name,\n                subDepartmentDetails.sub_department_desc,\n                subDepartmentDetails.department_id,\n                subDepartmentDetails.effective_start_date,\n                subDepartmentDetails.effective_end_date,\n                subDepartmentDetails.sub_department_status,\n                new Date(),\n                subDepartmentDetails.created_by\n              ],\n              (error, resdata) => {\n                releaseDBConnection(db, connection);\n                if (error) {\n                  next(error);\n                }\n                req.records = resdata;\n                next();\n              }\n            );\n          } else {\n            next(\n              httpStatus.generateError(\n                httpStatus.notFound,\n                \"No such deparment exists\"\n              )\n            );\n          }\n        }\n      );\n    });\n    //3\n  } catch (e) {\n    next(e);\n  }\n};\nlet updateSubDepartment = (req, res, next) => {\n  let subDepartment = {\n    hims_d_sub_department_id: null,\n    sub_department_code: null,\n    sub_department_name: null,\n    sub_department_desc: null,\n    department_id: null,\n    effective_start_date: null,\n    effective_end_date: null,\n    sub_department_status: null,\n    created_date: null,\n    created_by: null,\n    updated_date: null,\n    updated_by: null,\n    record_status: null\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let subDepartmentDetails = extend(subDepartment, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.query(\n        \"UPDATE `hims_d_sub_department`\\\n   SET `sub_department_name`=?, `sub_department_desc`=?\\\n   , `effective_start_date`=?, `effective_end_date`=? \\\n   , `sub_department_status`=?,`updated_date`=?, `updated_by`=?\\\n   WHERE `record_status`='A' AND `hims_d_sub_department_id`=? ;\",\n        [\n          subDepartmentDetails.sub_department_name,\n          subDepartmentDetails.sub_department_desc,\n          subDepartmentDetails.effective_start_date,\n          subDepartmentDetails.effective_end_date,\n          subDepartmentDetails.sub_department_status,\n          new Date(),\n          subDepartmentDetails.updated_by,\n          subDepartmentDetails.hims_d_sub_department_id\n        ],\n        (error, result) => {\n          connection.release();\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet selectdoctors = (req, res, next) => {\n  let inputClicnicalNonClinicalDept = {\n    department_type: \"ALL\"\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = extend(inputClicnicalNonClinicalDept, req.query);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let connectionString = \"\";\n      if (where.department_type == \"CLINICAL\") {\n        connectionString = \" and hims_d_department.department_type='CLINICAL' \";\n      } else if (where.department_type == \"NON-CLINICAL\") {\n        connectionString =\n          \" and hims_d_department.department_type='NON-CLINICAL' \";\n      }\n\n      // connection.query(\n      //   \"select hims_d_sub_department.hims_d_sub_department_id ,sub_department_code,sub_department_name\\\n      //    ,sub_department_desc, arabic_sub_department_name, hims_d_sub_department.department_id,hims_d_department.department_type \\\n      //    from hims_d_sub_department,hims_d_department where \\\n      //    hims_d_sub_department.department_id=hims_d_department.hims_d_department_id \\\n      //    and hims_d_department.record_status='A' and sub_department_status='A' \\\n      //    \" +\n      //     connectionString,\n      //   (error, result) => {\n      //     if (error) {\n      //       connection.release();\n      //       next(error);\n      //     }\n      //     // req.records = result;\n      //     //sbdepartment = extend(sbdepartment, result.body);\n      //     // console.log(sbdepartment);\n      //     //next();\n      //   }\n      // );\n\n      connection.query(\n        \"select hims_m_employee_department_mappings.employee_id,\\\n         hims_m_employee_department_mappings.sub_department_id,\\\n      concat( hims_d_employee.first_name,' ',\\\n      hims_d_employee.middle_name,' ',\\\n      hims_d_employee.last_name) full_name,\\\n      hims_d_employee.arabic_name,\\\n      hims_d_employee.services_id,\\\n      hims_d_sub_department.department_id,\\\n      hims_d_sub_department.sub_department_name,\\\n      hims_d_sub_department.arabic_sub_department_name\\\n      from hims_m_employee_department_mappings,\\\n      hims_d_employee,hims_d_sub_department,hims_d_department,\\\n      hims_d_employee_category,hims_m_category_speciality_mappings\\\n      where\\\n      hims_d_department.hims_d_department_id = hims_d_sub_department.department_id\\\n      and hims_m_employee_department_mappings.employee_id = hims_d_employee.hims_d_employee_id \\\n      and hims_d_sub_department.hims_d_sub_department_id= hims_m_employee_department_mappings.sub_department_id\\\n      and hims_m_employee_department_mappings.record_status='A'\\\n      and hims_d_department.hims_d_department_id = hims_d_sub_department.department_id\\\n      and hims_d_sub_department.record_status='A'\\\n      and hims_d_employee.record_status ='A'\\\n      and hims_d_sub_department.sub_department_status='A'\\\n      and hims_d_employee.employee_status='A'\\\n      and hims_d_department.department_type='CLINICAL'\\\n      and hims_d_employee.isdoctor='Y'\\\n      group by hims_m_employee_department_mappings.employee_id,hims_m_employee_department_mappings.sub_department_id;\",\n        (error, results) => {\n          connection.release();\n          if (error) {\n            next(error);\n          }\n\n          let departments = new LINQ(results).GroupBy(g => g.sub_department_id);\n          let doctors = new LINQ(results).GroupBy(g => g.employee_id);\n          // .SelectMany(s => {\n          //   return s;\n          // })\n          // .ToArray();\n          // .Select(s => {\n          //   debugLog(\"log of \", s);\n          //   return {\n          //     sub_department_id: s.sub_department_id,\n          //     sub_department_name: s.sub_department_name,\n          //     employee_id: s.employee_id\n          //   };\n          // });\n          //.ToArray();\n\n          req.records = { departments: departments, doctors: doctors };\n          //extend(sbdepartment, doctorsInfo);\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addDepartment,\n  updateDepartment,\n  selectDepartment,\n  selectSubDepartment,\n  addSubDepartment,\n  updateSubDepartment,\n  deleteDepartment,\n  selectdoctors\n};\n"]}