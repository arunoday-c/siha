{"version":3,"sources":["../../src/model/identity.js"],"names":["addIdentity","req","res","next","identityDoc","hims_d_identity_document_id","identity_document_code","identity_document_name","created_by","userIdentity","algaeh_d_app_user_id","updated_by","db","dataBaseNotInitilizedError","insertDoc","body","getConnection","error","connection","records","newNumber","rollback","length","query","arabic_identity_document_name","Date","identity_status","result","insertId","resultData","e","updateIdentity","updateIdentityDoc","selectIdentity","selectWhereCondition","condition","values","deleteIdentity","tableName","id","module","exports"],"mappings":"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","file":"identity.js","sourcesContent":["import extend from \"extend\";\r\nimport {\r\n  selectStatement,\r\n  whereCondition,\r\n  runningNumber,\r\n  releaseDBConnection,\r\n  deleteRecord\r\n} from \"../utils\";\r\nimport httpStatus from \"../utils/httpStatus\";\r\nimport { debugLog, debugFunction } from \"../utils/logging\";\r\n\r\nlet addIdentity = (req, res, next) => {\r\n  let identityDoc = {\r\n    hims_d_identity_document_id: null,\r\n    identity_document_code: null,\r\n    identity_document_name: null,\r\n    created_by: req.userIdentity.algaeh_d_app_user_id,\r\n\r\n    updated_by: req.userIdentity.algaeh_d_app_user_id\r\n  };\r\n\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n\r\n    let db = req.db;\r\n    let insertDoc = extend(identityDoc, req.body);\r\n    db.getConnection((error, connection) => {\r\n      if (error) {\r\n        next(error);\r\n      }\r\n\r\n      runningNumber(req.db, 6, \"IDEN_DOC\", (error, records, newNumber) => {\r\n        debugLog(\"newNumber:\" + newNumber);\r\n        if (error) {\r\n          connection.rollback(() => {\r\n            releaseDBConnection(db, connection);\r\n            next(error);\r\n          });\r\n        }\r\n        if (records.length != 0) {\r\n          req.query.identity_document_code = newNumber;\r\n          req.body.identity_document_code = newNumber;\r\n          insertDoc.identity_document_code = newNumber;\r\n        }\r\n\r\n        connection.query(\r\n          \"INSERT INTO `hims_d_identity_document` \\\r\n            (`identity_document_code`, `identity_document_name`, `arabic_identity_document_name`, `created_by`\\\r\n            , `created_date`,`identity_status`)\\\r\n            VALUE (?, ?, ?, ?,?,?)\",\r\n          [\r\n            insertDoc.identity_document_code,\r\n            insertDoc.identity_document_name,\r\n            insertDoc.arabic_identity_document_name,\r\n            insertDoc.created_by,\r\n            new Date(),\r\n            insertDoc.identity_status\r\n          ],\r\n          (error, result) => {\r\n            if (error) {\r\n              releaseDBConnection(db, connection);\r\n              next(error);\r\n            }\r\n            insertDoc.hims_d_identity_document_id = result.insertId;\r\n            connection.query(\r\n              \"SELECT `hims_d_identity_document_id`, `identity_document_code`,\\\r\n         `identity_document_name`, `arabic_identity_document_name`,`identity_status` \\\r\n         FROM `hims_d_identity_document` WHERE `record_status`='A' AND \\\r\n         `hims_d_identity_document_id`=? \",\r\n              [insertDoc.hims_d_identity_document_id],\r\n              (error, resultData) => {\r\n                releaseDBConnection(db, connection);\r\n                if (error) {\r\n                  next(error);\r\n                }\r\n                req.records = resultData;\r\n                next();\r\n              }\r\n            );\r\n          }\r\n        );\r\n      });\r\n    });\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\nlet updateIdentity = (req, res, next) => {\r\n  let identityDoc = {\r\n    hims_d_identity_document_id: null,\r\n    identity_document_code: null,\r\n    identity_document_name: null,\r\n    arabic_identity_document_name: null,\r\n    created_by: req.userIdentity.algaeh_d_app_user_id,\r\n    updated_by: req.userIdentity.algaeh_d_app_user_id\r\n  };\r\n\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    let db = req.db;\r\n    let updateIdentityDoc = extend(identityDoc, req.body);\r\n    debugLog(\"updateIdentityDoc\", updateIdentityDoc);\r\n    db.getConnection((error, connection) => {\r\n      if (error) {\r\n        releaseDBConnection(db, connection);\r\n        next(error);\r\n      }\r\n      connection.query(\r\n        \"UPDATE `hims_d_identity_document`\\\r\n    SET  `identity_document_name`=?, `arabic_identity_document_name` = ?,`updated_by`=?, `updated_date`=? \\\r\n    ,`identity_status` = ? \\\r\n    WHERE `record_status`='A' AND `hims_d_identity_document_id`=?;\",\r\n        [\r\n          updateIdentityDoc.identity_document_name,\r\n          updateIdentityDoc.arabic_identity_document_name,\r\n          updateIdentityDoc.updated_by,\r\n          new Date(),\r\n          updateIdentityDoc.identity_status,\r\n          updateIdentityDoc.hims_d_identity_document_id\r\n        ],\r\n        (error, result) => {\r\n          releaseDBConnection(db, connection);\r\n          if (error) {\r\n            next(error);\r\n          }\r\n          req.records = result;\r\n          next();\r\n        }\r\n      );\r\n    });\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\n\r\nlet selectIdentity = (req, res, next) => {\r\n  let selectWhereCondition = {\r\n    hims_d_identity_document_id: \"ALL\",\r\n    identity_document_code: \"ALL\",\r\n    identity_document_name: \"ALL\"\r\n  };\r\n\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    let condition = whereCondition(extend(selectWhereCondition, req.query));\r\n    selectStatement(\r\n      {\r\n        db: req.db,\r\n        query:\r\n          \"SELECT `hims_d_identity_document_id`, `identity_document_code`, `identity_document_name`, `arabic_identity_document_name`, `identity_status`\\\r\n          ,`created_by`, `created_date`, `updated_by`, `updated_date`,`identity_status` FROM `hims_d_identity_document` WHERE record_status ='A' AND \" +\r\n          condition.condition,\r\n        values: condition.values\r\n      },\r\n      result => {\r\n        req.records = result;\r\n        next();\r\n      },\r\n      error => {\r\n        next(error);\r\n      },\r\n      true\r\n    );\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\n\r\nlet deleteIdentity = (req, res, next) => {\r\n  try {\r\n    if (req.db == null) {\r\n      next(httpStatus.dataBaseNotInitilizedError());\r\n    }\r\n    deleteRecord(\r\n      {\r\n        db: req.db,\r\n        tableName: \"hims_d_identity_document\",\r\n        id: req.body.hims_d_identity_document_id,\r\n        query:\r\n          \"UPDATE hims_d_identity_document SET  record_status='I', \\\r\n          updated_by=?,updated_date=? WHERE hims_d_identity_document_id=?\",\r\n        values: [\r\n          req.body.updated_by,\r\n          new Date(),\r\n          req.body.hims_d_identity_document_id\r\n        ]\r\n      },\r\n      result => {\r\n        req.records = result;\r\n        next();\r\n      },\r\n      error => {\r\n        next(error);\r\n      },\r\n      true\r\n    );\r\n  } catch (e) {\r\n    next(e);\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  addIdentity,\r\n  updateIdentity,\r\n  selectIdentity,\r\n  deleteIdentity\r\n};\r\n"]}