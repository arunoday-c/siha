{"version":3,"sources":["../../src/model/identity.js"],"names":["addIdentity","req","res","next","identityDoc","hims_d_identity_document_id","identity_document_code","identity_document_name","created_by","userIdentity","algaeh_d_app_user_id","updated_by","db","dataBaseNotInitilizedError","insertDoc","body","getConnection","error","connection","records","newNumber","rollback","length","query","arabic_identity_document_name","Date","identity_status","result","insertId","resultData","e","updateIdentity","updateIdentityDoc","selectIdentity","selectWhereCondition","condition","values","deleteIdentity","tableName","id","module","exports"],"mappings":"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","file":"identity.js","sourcesContent":["import extend from \"extend\";\nimport {\n  selectStatement,\n  whereCondition,\n  runningNumber,\n  releaseDBConnection,\n  deleteRecord\n} from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { debugLog, debugFunction } from \"../utils/logging\";\n\nlet addIdentity = (req, res, next) => {\n  let identityDoc = {\n    hims_d_identity_document_id: null,\n    identity_document_code: null,\n    identity_document_name: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n\n    let db = req.db;\n    let insertDoc = extend(identityDoc, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      runningNumber(req.db, 6, \"IDEN_DOC\", (error, records, newNumber) => {\n        debugLog(\"newNumber:\" + newNumber);\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        if (records.length != 0) {\n          req.query.identity_document_code = newNumber;\n          req.body.identity_document_code = newNumber;\n          insertDoc.identity_document_code = newNumber;\n        }\n\n        connection.query(\n          \"INSERT INTO `hims_d_identity_document` \\\n            (`identity_document_code`, `identity_document_name`, `arabic_identity_document_name`, `created_by`\\\n            , `created_date`,`identity_status`)\\\n            VALUE (?, ?, ?, ?,?,?)\",\n          [\n            insertDoc.identity_document_code,\n            insertDoc.identity_document_name,\n            insertDoc.arabic_identity_document_name,\n            insertDoc.created_by,\n            new Date(),\n            insertDoc.identity_status\n          ],\n          (error, result) => {\n            if (error) {\n              releaseDBConnection(db, connection);\n              next(error);\n            }\n            insertDoc.hims_d_identity_document_id = result.insertId;\n            connection.query(\n              \"SELECT `hims_d_identity_document_id`, `identity_document_code`,\\\n         `identity_document_name`, `arabic_identity_document_name`,`identity_status` \\\n         FROM `hims_d_identity_document` WHERE `record_status`='A' AND \\\n         `hims_d_identity_document_id`=? \",\n              [insertDoc.hims_d_identity_document_id],\n              (error, resultData) => {\n                releaseDBConnection(db, connection);\n                if (error) {\n                  next(error);\n                }\n                req.records = resultData;\n                next();\n              }\n            );\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\nlet updateIdentity = (req, res, next) => {\n  let identityDoc = {\n    hims_d_identity_document_id: null,\n    identity_document_code: null,\n    identity_document_name: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let updateIdentityDoc = extend(identityDoc, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n      connection.query(\n        \"UPDATE `hims_d_identity_document`\\\n    SET  `identity_document_name`=?, `updated_by`=?, `updated_date`=? \\\n    ,`identity_status` = ? \\\n    WHERE `record_status`='A' AND `hims_d_identity_document_id`=?;\",\n        [\n          updateIdentityDoc.identity_document_name,\n          updateIdentityDoc.updated_by,\n          new Date(),\n          updateIdentityDoc.identity_status,\n          updateIdentityDoc.hims_d_identity_document_id\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet selectIdentity = (req, res, next) => {\n  let selectWhereCondition = {\n    hims_d_identity_document_id: \"ALL\",\n    identity_document_code: \"ALL\",\n    identity_document_name: \"ALL\"\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let condition = whereCondition(extend(selectWhereCondition, req.query));\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"SELECT `hims_d_identity_document_id`, `identity_document_code`, `identity_document_name`, `arabic_identity_document_name`, `identity_status`\\\n          ,`created_by`, `created_date`, `updated_by`, `updated_date`,`identity_status` FROM `hims_d_identity_document` WHERE record_status ='A' AND \" +\n          condition.condition,\n        values: condition.values\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet deleteIdentity = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    deleteRecord(\n      {\n        db: req.db,\n        tableName: \"hims_d_identity_document\",\n        id: req.body.hims_d_identity_document_id,\n        query:\n          \"UPDATE hims_d_identity_document SET  record_status='I', \\\n          updated_by=?,updated_date=? WHERE hims_d_identity_document_id=?\",\n        values: [\n          req.body.updated_by,\n          new Date(),\n          req.body.hims_d_identity_document_id\n        ]\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addIdentity,\n  updateIdentity,\n  selectIdentity,\n  deleteIdentity\n};\n"]}