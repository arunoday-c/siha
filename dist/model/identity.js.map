{"version":3,"sources":["../../src/model/identity.js"],"names":["identityDoc","hims_d_identity_document_id","identity_document_code","identity_document_name","created_by","created_date","updated_by","updated_date","addIdentity","req","res","next","db","dataBaseNotInitilizedError","insertDoc","body","getConnection","error","connection","query","Date","result","insertId","resultData","records","e","updateIdentity","updateIdentityDoc","selectWhereCondition","selectIdentity","condition","values","module","exports"],"mappings":"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","file":"identity.js","sourcesContent":["import extend from \"extend\";\nimport { selectStatement, whereCondition, releaseDBConnection } from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\nlet identityDoc = {\n  hims_d_identity_document_id: null,\n  identity_document_code: null,\n  identity_document_name: null,\n  created_by: null,\n  created_date: null,\n  updated_by: null,\n  updated_date: null\n};\nlet addIdentity = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n\n    let db = req.db;\n    let insertDoc = extend(identityDoc, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.query(\n        \"INSERT INTO `hims_d_identity_document` \\\n            (`identity_document_code`, `identity_document_name`, `created_by`, `created_date`)\\\n            VALUE (?, ?, ?, ?)\",\n        [\n          insertDoc.identity_document_code,\n          insertDoc.identity_document_name,\n          insertDoc.created_by,\n          new Date()\n        ],\n        (error, result) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n          insertDoc.hims_d_identity_document_id = result.insertId;\n          connection.query(\n            \"SELECT `hims_d_identity_document_id`, `identity_document_code`,\\\n         `identity_document_name` \\\n         FROM `hims_d_identity_document` WHERE `record_status`='A' AND \\\n         `hims_d_identity_document_id`=? \",\n            [insertDoc.hims_d_identity_document_id],\n            (error, resultData) => {\n              releaseDBConnection(db, connection);\n              if (error) {\n                next(error);\n              }\n              req.records = resultData;\n              next();\n            }\n          );\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\nlet updateIdentity = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let updateIdentityDoc = extend(identityDoc, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n      connection.query(\n        \"UPDATE `hims_d_identity_document`\\\n    SET  `identity_document_name`=?, `updated_by`=?, `updated_date`=?\\\n    WHERE `record_status`='A' AND `hims_d_identity_document_id`=?;\",\n        [\n          updateIdentityDoc.identity_document_name,\n          updateIdentityDoc.updated_by,\n          new Date(),\n          updateIdentityDoc.hims_d_identity_document_id\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet selectWhereCondition = {\n  hims_d_identity_document_id: \"ALL\",\n  identity_document_code: \"ALL\",\n  identity_document_name: \"ALL\"\n};\nlet selectIdentity = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let condition = whereCondition(extend(selectWhereCondition, req.query));\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"SELECT `hims_d_identity_document_id`, `identity_document_code`, `identity_document_name`\\\n          ,`created_by`, `created_date`, `updated_by`, `updated_date` FROM `hims_d_identity_document` WHERE record_status ='A' AND \" +\n          condition.condition,\n        values: condition.values\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addIdentity,\n  updateIdentity,\n  selectIdentity\n};\n"]}