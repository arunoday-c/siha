{"version":3,"sources":["../../src/model/account.js"],"names":["getUserNamePassWord","temp","base64String","split","buffer","Buffer","UserNamePassword","toString","username","password","e","console","error","apiAuth","req","res","next","c","authModel","db","dataBaseNotInitilizedError","authHeader","headers","generateError","unAuthorized","inputData","badRequest","body","getConnection","connection","query","result","release","length","success","results","authUser","records","module","exports"],"mappings":"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","file":"account.js","sourcesContent":["import extend from \"extend\";\nimport httpStatus from \"../utils/httpStatus\";\n\nlet getUserNamePassWord = base64String => {\n  try {\n    const temp = base64String.split(\" \");\n    const buffer = new Buffer(temp[1], \"base64\");\n    const UserNamePassword = buffer.toString().split(\":\");\n    return {\n      username: UserNamePassword[0],\n      password: UserNamePassword[1]\n    };\n  } catch (e) {\n    console.error(e);\n  }\n};\n\n//api authentication\nlet apiAuth = (req, res, next) => {\n  let c;\n  let authModel = {\n    username: \"\",\n    password: \"\"\n  };\n  try {\n    let db;\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    } else {\n      db = req.db;\n    }\n    let authHeader = req.headers[\"authorization\"];\n    if (!authHeader || authHeader == \"\") {\n      next(\n        httpStatus.generateError(\n          httpStatus.unAuthorized,\n          \"Missing authorization token\"\n        )\n      );\n    }\n\n    let inputData = extend(authModel, getUserNamePassWord(authHeader));\n    if (inputData.username == null || inputData.username == \"\") {\n      next(\n        httpStatus.generateError(\n          httpStatus.badRequest,\n          \"User name can not blank\"\n        )\n      );\n    }\n    if (inputData.password == null || inputData.password == \"\") {\n      next(\n        httpStatus.generateError(\n          httpStatus.badRequest,\n          \"Password can not blank\"\n        )\n      );\n    }\n    req.body = inputData;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.query(\n        \"SELECT username FROM algaeh_d_api_auth WHERE password=md5(?)\\\n            AND record_status='A' AND username =?\",\n        [inputData.password, inputData.username],\n        (error, result) => {\n          connection.release();\n          if (error) {\n            next(error);\n          }\n          if (result.length == 1) {\n            req.result = {\n              success: true,\n              results: result[0]\n            };\n            next();\n          } else {\n            next(\n              httpStatus.generateError(\n                httpStatus.unAuthorized,\n                \"Authentication service error please contact to your service provider\"\n              )\n            );\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//api user authentication\nlet authUser = (req, res, next) => {\n  let authModel = {\n    username: \"\",\n    password: \"\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let inputData = extend(authModel, req.body);\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select algaeh_d_app_user.algaeh_d_app_user_id,algaeh_d_app_user.username, \\\n              user_displayname,user_type,locked,login_attempts,password_expiry_rule, \\\n              change_password,password_expiry_date \\\n              from algaeh_d_app_user,algaeh_d_app_password \\\n              WHERE algaeh_d_app_user.record_status='A' AND algaeh_d_app_password.record_status='A' \\\n              AND algaeh_d_app_password.password=md5(?) AND algaeh_d_app_user.username=?\",\n        [inputData.password, inputData.username],\n        (error, result) => {\n          connection.release();\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  apiAuth,\n  authUser\n};\n"]}