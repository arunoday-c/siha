{"version":3,"sources":["../../src/model/account.js"],"names":["authModel","username","password","getUserNamePassWord","temp","base64String","split","buffer","Buffer","UserNamePassword","toString","e","console","error","apiAuth","req","res","next","c","db","dataBaseNotInitilizedError","authHeader","headers","generateError","unAuthorized","inputData","badRequest","body","getConnection","connection","query","result","release","length","success","results","authUser","records","module","exports"],"mappings":"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","file":"account.js","sourcesContent":["import extend from \"extend\";\nimport httpStatus from \"../utils/httpStatus\";\n\nlet authModel = {\n  username: \"\",\n  password: \"\"\n};\nlet getUserNamePassWord = base64String => {\n  try {\n    const temp = base64String.split(\" \");\n    const buffer = new Buffer(temp[1], \"base64\");\n    const UserNamePassword = buffer.toString().split(\":\");\n    return {\n      username: UserNamePassword[0],\n      password: UserNamePassword[1]\n    };\n  } catch (e) {\n    console.error(e);\n  }\n};\nlet apiAuth = (req, res, next) => {\n  let c;\n  try {\n    let db;\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    } else {\n      db = req.db;\n    }\n    let authHeader = req.headers[\"authorization\"];\n    if (!authHeader || authHeader == \"\") {\n      next(\n        httpStatus.generateError(\n          httpStatus.unAuthorized,\n          \"Missing authorization token\"\n        )\n      );\n    }\n\n    let inputData = extend(authModel, getUserNamePassWord(authHeader));\n    if (inputData.username == null || inputData.username == \"\") {\n      next(\n        httpStatus.generateError(\n          httpStatus.badRequest,\n          \"User name can not blank\"\n        )\n      );\n    }\n    if (inputData.password == null || inputData.password == \"\") {\n      next(\n        httpStatus.generateError(\n          httpStatus.badRequest,\n          \"Password can not blank\"\n        )\n      );\n    }\n    req.body = inputData;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.query(\n        \"SELECT username FROM algaeh_d_api_auth WHERE password=md5(?)\\\n            AND record_status='A' AND username =?\",\n        [inputData.password, inputData.username],\n        (error, result) => {\n          connection.release();\n          if (error) {\n            next(error);\n          }\n          if (result.length == 1) {\n            req.result = {\n              success: true,\n              results: result[0]\n            };\n            next();\n          } else {\n            next(\n              httpStatus.generateError(\n                httpStatus.unAuthorized,\n                \"Authentication service error please contact to your service provider\"\n              )\n            );\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet authUser = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let inputData = extend(authModel, req.body);\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select algaeh_d_app_user.algaeh_d_app_user_id,algaeh_d_app_user.username, \\\n              user_displayname,user_type,locked,login_attempts,password_expiry_rule, \\\n              change_password,password_expiry_date \\\n              from algaeh_d_app_user,algaeh_d_app_password \\\n              WHERE algaeh_d_app_user.record_status='A' AND algaeh_d_app_password.record_status='A' \\\n              AND algaeh_d_app_password.password=md5(?) AND algaeh_d_app_user.username=?\",\n        [inputData.password, inputData.username],\n        (error, result) => {\n          connection.release();\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  apiAuth,\n  authUser\n};\n"]}