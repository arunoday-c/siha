{"version":3,"sources":["../../src/controller/account.js"],"names":["config","db","api","get","authenticate","session","scope","post","req","res","next","result","records","length","generateError","notFound","rowDetails","keyData","status","ok","json","success","username","user_displayname","keyResources","secureModels","locked","inputData","toUpperCase"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;AACA;;;;AACA;;AAKA;;AACA;;;;kBAEe,gBAAoB;AAAA,MAAjBA,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,EAAS,QAATA,EAAS;;AACjC,MAAIC,MAAM,sBAAV;AACA;AACAA,MAAIC,GAAJ,CACE,GADF,oBAGE,mBAASC,YAAT,CAAsB,OAAtB,EAA+B;AAC7BC,aAAS,KADoB;AAE7BC,WAAO;AAFsB,GAA/B,CAHF;;AAYA;AACAJ,MAAIK,IAAJ,CACE,WADF,qBAGE,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACA,QAAID,OAAOE,MAAP,IAAiB,CAArB,EAAwB;AACtBH,WAAK,qBAAWI,aAAX,CAAyB,qBAAWC,QAApC,EAA8C,iBAA9C,CAAL;AACD,KAFD,MAEO;AACL,UAAIJ,OAAO,CAAP,EAAU,QAAV,KAAuB,GAA3B,EAAgC;AAC9B,YAAIK,aAAaL,OAAO,CAAP,CAAjB;;AAEA,YAAIM,UAAU,8BAAWD,UAAX,CAAd;AACAP,YAAIS,MAAJ,CAAW,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BC,mBAAS,IADoB;AAE7BT,mBAAS;AACPU,sBAAUN,WAAW,UAAX,CADH;AAEPO,8BAAkBP,WAAW,kBAAX,CAFX;AAGPQ,0BAAcP,OAHP;AAIPQ,0BAAcjB,IAAIiB;AAJX;AAFoB,SAA/B;AASAf;AACD,OAdD,MAcO;AACLA,aACE,qBAAWI,aAAX,CACE,qBAAWY,MADb,EAEE,YACEC,UAAUL,QAAV,CAAmBM,WAAnB,EADF,GAEE;+CAJJ,CADF;AASD;AACF;AACF,GAlCH;;AAsCA,SAAO1B,GAAP;AACD,C","file":"account.js","sourcesContent":["import { Router } from \"express\";\r\nimport passport from \"passport\";\r\nimport { releaseConnection } from \"../utils\";\r\nimport httpStatus from \"../utils/httpStatus\";\r\nimport {\r\n  generateAccessToken,\r\n  respond,\r\n  authenticate\r\n} from \"../middleware/authmiddleware\";\r\nimport { apiAuth, authUser } from \"../model/account\";\r\nimport { encryption } from \"../utils/cryptography\";\r\n\r\nexport default ({ config, db }) => {\r\n  let api = Router();\r\n  // '/v1/apiAuth'\r\n  api.get(\r\n    \"/\",\r\n    apiAuth,\r\n    passport.authenticate(\"local\", {\r\n      session: false,\r\n      scope: []\r\n    }),\r\n\r\n    generateAccessToken,\r\n    respond\r\n  );\r\n\r\n  //'/v1/authUser\r\n  api.post(\r\n    \"/authUser\",\r\n    authUser,\r\n    (req, res, next) => {\r\n      let result = req.records;\r\n      if (result.length == 0) {\r\n        next(httpStatus.generateError(httpStatus.notFound, \"No record found\"));\r\n      } else {\r\n        if (result[0][\"locked\"] == \"N\") {\r\n          let rowDetails = result[0];\r\n\r\n          let keyData = encryption(rowDetails);\r\n          res.status(httpStatus.ok).json({\r\n            success: true,\r\n            records: {\r\n              username: rowDetails[\"username\"],\r\n              user_displayname: rowDetails[\"user_displayname\"],\r\n              keyResources: keyData,\r\n              secureModels: req.secureModels\r\n            }\r\n          });\r\n          next();\r\n        } else {\r\n          next(\r\n            httpStatus.generateError(\r\n              httpStatus.locked,\r\n              \"user ' \" +\r\n                inputData.username.toUpperCase() +\r\n                \" ' locked please\\\r\n                        contact administrator.\"\r\n            )\r\n          );\r\n        }\r\n      }\r\n    },\r\n    releaseConnection\r\n  );\r\n\r\n  return api;\r\n};\r\n"]}