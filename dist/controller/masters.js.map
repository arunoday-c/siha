{"version":3,"sources":["../../src/controller/masters.js"],"names":["api","get","req","res","next","result","records","status","ok","json","success","masterDir","join","__dirname","existsSync","JSON","parse","readFileSync","length","SelectMany","hims_d_country_id","items","country_name","arabic_country_name","states","Where","state","country_id","Select","hims_d_state_id","s","state_name","cities","c","state_id","ToArray"],"mappings":"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","file":"masters.js","sourcesContent":["import {\n  titleMaster,\n  countryMaster,\n  stateMaster,\n  cityMaster,\n  relegionMaster,\n  nationalityMaster,\n  autoGenMaster,\n  visaMaster,\n  clinicalNonClinicalAll,\n  countryStateCity\n} from \"../model/masters\";\nimport { Router } from \"express\";\nimport { releaseConnection, bulkMasters } from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { LINQ } from \"node-linq\";\nimport path from \"path\";\nimport fs from \"fs\";\nexport default () => {\n  let api = Router();\n\n  api.get(\n    \"/subDeptClinicalNonClinicalAll\",\n    clinicalNonClinicalAll,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/visa\",\n    visaMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/title\",\n    titleMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n  api.get(\n    \"/country\",\n    countryMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/state\",\n    stateMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/city\",\n    cityMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n  api.get(\n    \"/countryStateCity\",\n    (req, res, next) => {\n      const masterDir = path.join(\n        __dirname,\n        \"../../Masters/countryStateCity.json\"\n      );\n      if (fs.existsSync(masterDir)) {\n        res.status(httpStatus.ok).json({\n          records: JSON.parse(fs.readFileSync(masterDir)),\n          success: true\n        });\n      } else {\n        countryStateCity(req, res, next);\n      }\n    },\n    (req, res, next) => {\n      let result;\n      if (req.records != null) {\n        if (req.records.length != 0) {\n          result = new LINQ(req.records[0])\n            .SelectMany(items => {\n              return {\n                hims_d_country_id: items.hims_d_country_id,\n                country_name: items.country_name,\n                arabic_country_name: items.arabic_country_name,\n                states: new LINQ(req.records[1])\n                  .Where(state => state.country_id == items.hims_d_country_id)\n                  .Select(s => {\n                    return {\n                      hims_d_state_id: s.hims_d_state_id,\n                      state_name: s.state_name,\n                      country_id: s.country_id,\n                      cities: new LINQ(req.records[2])\n                        .Where(c => c.state_id == s.hims_d_state_id)\n                        .ToArray()\n                    };\n                  })\n                  .ToArray()\n              };\n            })\n            .ToArray();\n        }\n        bulkMasters(\"countryStateCity\", result);\n        res.status(httpStatus.ok).json({\n          records: result,\n          success: true\n        });\n        next();\n      }\n    },\n    releaseConnection\n  );\n  api.get(\n    \"/relegion\",\n    relegionMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/nationality\",\n    nationalityMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n  api.get(\n    \"/autogen\",\n    autoGenMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n  return api;\n};\n"]}