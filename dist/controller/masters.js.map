{"version":3,"sources":["../../src/controller/masters.js"],"names":["api","post","get","req","res","next","key","result","status","ok","json","success","records","value","resultData","masterDir","join","__dirname","existsSync","JSON","parse","readFileSync","length","SelectMany","hims_d_country_id","items","country_name","arabic_country_name","states","Where","state","country_id","Select","hims_d_state_id","s","state_name","cities","c","state_id","ToArray"],"mappings":"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","file":"masters.js","sourcesContent":["import {\n  titleMaster,\n  countryMaster,\n  stateMaster,\n  cityMaster,\n  relegionMaster,\n  nationalityMaster,\n  autoGenMaster,\n  visaMaster,\n  clinicalNonClinicalAll,\n  countryStateCity,\n  killDbConnections\n} from \"../model/masters\";\nimport { Router } from \"express\";\nimport { releaseConnection, bulkMasters } from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { LINQ } from \"node-linq\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { getCacheData, setCacheData } from \"../utils/caching\";\nimport { saveImageInTemp, showFile } from \"../utils/images\";\nexport default () => {\n  let api = Router();\n\n  api.post(\"/imageSave\", saveImageInTemp);\n  api.get(\"/getFile\", showFile);\n  api.get(\n    \"/subDeptClinicalNonClinicalAll\",\n    (req, res, next) => {\n      getCacheData({ key: \"subDeptClinicalNonClinicalAll\" }, result => {\n        if (result != null) {\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: result\n          });\n        } else {\n          next();\n        }\n      });\n    },\n    clinicalNonClinicalAll,\n    (req, res, next) => {\n      let result = req.records;\n      setCacheData(\n        {\n          key: \"subDeptClinicalNonClinicalAll\",\n          value: result\n        },\n        resultData => {\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: resultData\n          });\n          next();\n        }\n      );\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/visa\",\n    (req, res, next) => {\n      getCacheData({ key: \"visa\" }, result => {\n        if (result != null) {\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: result\n          });\n        } else {\n          next();\n        }\n      });\n    },\n    visaMaster,\n    (req, res, next) => {\n      let result = req.records;\n      setCacheData(\n        {\n          key: \"visa\",\n          value: result\n        },\n        resultData => {\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: resultData\n          });\n          next();\n        }\n      );\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/title\",\n    (req, res, next) => {\n      getCacheData({ key: \"title\" }, result => {\n        if (result != null) {\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: result\n          });\n        } else {\n          next();\n        }\n      });\n    },\n    titleMaster,\n    (req, res, next) => {\n      let result = req.records;\n\n      setCacheData(\n        {\n          key: \"title\",\n          value: result\n        },\n        resultData => {\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: resultData\n          });\n          next();\n        }\n      );\n    },\n    releaseConnection\n  );\n  api.get(\n    \"/country\",\n    countryMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/state\",\n    stateMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/city\",\n    cityMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n  api.get(\n    \"/countryStateCity\",\n    (req, res, next) => {\n      const masterDir = path.join(\n        __dirname,\n        \"../../Masters/countryStateCity.json\"\n      );\n      if (fs.existsSync(masterDir)) {\n        res.status(httpStatus.ok).json({\n          records: JSON.parse(fs.readFileSync(masterDir)),\n          success: true\n        });\n      } else {\n        countryStateCity(req, res, next);\n      }\n    },\n    (req, res, next) => {\n      let result;\n      if (req.records != null) {\n        if (req.records.length != 0) {\n          result = new LINQ(req.records[0])\n            .SelectMany(items => {\n              return {\n                hims_d_country_id: items.hims_d_country_id,\n                country_name: items.country_name,\n                arabic_country_name: items.arabic_country_name,\n                states: new LINQ(req.records[1])\n                  .Where(state => state.country_id == items.hims_d_country_id)\n                  .Select(s => {\n                    return {\n                      hims_d_state_id: s.hims_d_state_id,\n                      state_name: s.state_name,\n                      country_id: s.country_id,\n                      cities: new LINQ(req.records[2])\n                        .Where(c => c.state_id == s.hims_d_state_id)\n                        .ToArray()\n                    };\n                  })\n                  .ToArray()\n              };\n            })\n            .ToArray();\n        }\n        bulkMasters(\"countryStateCity\", result);\n        res.status(httpStatus.ok).json({\n          records: result,\n          success: true\n        });\n        next();\n      }\n    },\n    releaseConnection\n  );\n  api.get(\n    \"/relegion\",\n    (req, res, next) => {\n      getCacheData({ key: \"relegion\" }, result => {\n        if (result != null) {\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: result\n          });\n        } else {\n          next();\n        }\n      });\n    },\n    relegionMaster,\n    (req, res, next) => {\n      let result = req.records;\n\n      setCacheData(\n        {\n          key: \"relegion\",\n          value: result\n        },\n        resultData => {\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: resultData\n          });\n          next();\n        }\n      );\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/nationality\",\n    (req, res, next) => {\n      getCacheData({ key: \"nationality\" }, result => {\n        if (result != null) {\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: result\n          });\n        } else {\n          next();\n        }\n      });\n    },\n    nationalityMaster,\n    (req, res, next) => {\n      let result = req.records;\n      setCacheData(\n        {\n          key: \"nationality\",\n          value: result\n        },\n        resultData => {\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: resultData\n          });\n          next();\n        }\n      );\n    },\n    releaseConnection\n  );\n  api.get(\n    \"/autogen\",\n    autoGenMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/killDbConnections\",\n    killDbConnections,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n  return api;\n};\n"]}