{"version":3,"sources":["../../src/controller/masters.js"],"names":["api","get","req","res","next","result","records","status","ok","json","success"],"mappings":";;;;;;AAAA;;AAUA;;AACA;;AACA;;;;;;kBACe,YAAM;AACnB,MAAIA,MAAM,sBAAV;;AAEAA,MAAIC,GAAJ,CACE,OADF,uBAGE,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACAH,QAAII,MAAJ,CAAW,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BC,eAAS,IADoB;AAE7BJ,eAASD;AAFoB,KAA/B;AAIAD;AACD,GAVH;;AAcAJ,MAAIC,GAAJ,CACE,QADF,wBAGE,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACAH,QAAII,MAAJ,CAAW,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BC,eAAS,IADoB;AAE7BJ,eAASD;AAFoB,KAA/B;AAIAD;AACD,GAVH;AAaAJ,MAAIC,GAAJ,CACE,UADF,0BAGE,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACAH,QAAII,MAAJ,CAAW,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BC,eAAS,IADoB;AAE7BJ,eAASD;AAFoB,KAA/B;AAIAD;AACD,GAVH;;AAcAJ,MAAIC,GAAJ,CACE,QADF,wBAGE,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACAH,QAAII,MAAJ,CAAW,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BC,eAAS,IADoB;AAE7BJ,eAASD;AAFoB,KAA/B;AAIAD;AACD,GAVH;;AAcAJ,MAAIC,GAAJ,CACE,OADF,uBAGE,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACAH,QAAII,MAAJ,CAAW,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BC,eAAS,IADoB;AAE7BJ,eAASD;AAFoB,KAA/B;AAIAD;AACD,GAVH;;AAcAJ,MAAIC,GAAJ,CACE,WADF,2BAGE,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACAH,QAAII,MAAJ,CAAW,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BC,eAAS,IADoB;AAE7BJ,eAASD;AAFoB,KAA/B;AAIAD;AACD,GAVH;;AAcAJ,MAAIC,GAAJ,CACE,cADF,8BAGE,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACAH,QAAII,MAAJ,CAAW,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BC,eAAS,IADoB;AAE7BJ,eAASD;AAFoB,KAA/B;AAIAD;AACD,GAVH;AAaAJ,MAAIC,GAAJ,CACE,UADF,0BAGE,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACAH,QAAII,MAAJ,CAAW,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BC,eAAS,IADoB;AAE7BJ,eAASD;AAFoB,KAA/B;AAIAD;AACD,GAVH;AAaA,SAAOJ,GAAP;AACD,C","file":"masters.js","sourcesContent":["import {\n  titleMaster,\n  countryMaster,\n  stateMaster,\n  cityMaster,\n  relegionMaster,\n  nationalityMaster,\n  autoGenMaster,\n  visaMaster\n} from \"../model/masters\";\nimport { Router } from \"express\";\nimport { releaseConnection } from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\nexport default () => {\n  let api = Router();\n\n  api.get(\n    \"/visa\",\n    visaMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/title\",\n    titleMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n  api.get(\n    \"/country\",\n    countryMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/state\",\n    stateMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/city\",\n    cityMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/relegion\",\n    relegionMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/nationality\",\n    nationalityMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n  api.get(\n    \"/autogen\",\n    autoGenMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n  return api;\n};\n"]}