{"version":3,"sources":["../../src/utils/index.js"],"names":["paging","pageLimit","options","pageNo","pageSize","whereCondition","condition","values","total","Object","keys","length","i","forEach","key","push","selectStatement","successCallback","errorCallback","isreleaseConnection","success","message","db","getConnection","error","connection","query","result","releaseDBConnection","deleteRecord","sqlQuery","mysqlDb","database","tableName","tables","release","records","id","hasRecords","c","releaseConnection","req","checkIsNull","input","defaultType","runningNumberGen","module_desc","onFailure","resultNumbers","map","item","index","prefix","numgenId","intermediate_series","postfix","parseInt","increment_by","counter","numgen_seperator","newNumber","paddedNumber","padString","String","queryAtt","numUpdate","completeNumber","onSuccess","runningNumber","paramName","callBack","postfix_start","postfix_end","resultSeries","interSeries","queryGen","updateResult","paddCharacter","toString","pool","_freeConnections","indexOf","storage","diskStorage","destination","file","cb","fullFolderName","folderPath","fileName","log","fieldname","splitFiledName","split","fullFolderPath","newFileName","filename","pathDeclare","require","extname","originalname","upload","uploadFile","res","downloadFile","jsonArrayToObject","outputObject","arrayObj","sampleInputObject","userId","replaceObject","replacer","Where","w","originalKey","FirstOrDefault","NewKey","bulkInputArrayObject","outArray","objectToChang","each","keyIndex","bulkMasters","bulkObject","masterDir","join","__dirname","existsSync","mkdirSync","fPath","exists","writeStream","createWriteStream","write","JSON","stringify","end","parse","readFileSync","e","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["import pad from \"node-string-pad\";\nimport config from \"../keys/keys\";\nimport multer from \"multer\";\nimport extend from \"extend\";\nimport path from \"path\";\nimport mkdirp from \"mkdirp\";\nimport { logger, debugFunction, debugLog } from \"./logging\";\nimport fs from \"fs\";\nimport { LINQ } from \"node-linq\";\nimport Promise from \"bluebird\";\nimport _ from \"underscore\";\nlet paging = options => {\n  let pageLimit = options.paging.pageNo * options.paging.pageSize;\n  return {\n    pageNo: pageLimit,\n    pageSize: options.paging.pageSize\n  };\n};\nlet whereCondition = options => {\n  let condition = \"\";\n  let values = [];\n  let total = Object.keys(options).length;\n  let i = 0;\n  Object.keys(options).forEach(key => {\n    condition += \"(\" + key + '=? or \"ALL\"=?)';\n    if (i != total - 1) condition += \" AND \";\n    values.push(options[key]);\n    values.push(options[key]);\n    i = i + 1;\n  });\n  return {\n    condition: condition,\n    values: values\n  };\n};\n\nlet selectStatement = (\n  options,\n  successCallback,\n  errorCallback,\n  isreleaseConnection\n) => {\n  isreleaseConnection = isreleaseConnection || false;\n  if (options == null) {\n    if (typeof errorCallback == \"function\") {\n      errorCallback({\n        success: false,\n        message: \"Options can not null\"\n      });\n    }\n  }\n  let db = options.db;\n  options.values = options.values || [];\n  db.getConnection((error, connection) => {\n    connection.query(options.query, options.values, (error, result) => {\n      if (isreleaseConnection) releaseDBConnection(db, connection);\n      if (error) {\n        if (typeof errorCallback == \"function\") {\n          errorCallback(error);\n        }\n      }\n      if (typeof successCallback == \"function\") successCallback(result);\n    });\n  });\n};\nlet deleteRecord = (\n  options,\n  successCallback,\n  errorCallback,\n  isreleaseConnection\n) => {\n  isreleaseConnection = isreleaseConnection || false;\n  debugFunction(\"deleteRecord\");\n  let db = options.db;\n  db.getConnection((error, connection) => {\n    let sqlQuery =\n      \"select distinct table_name,column_name from information_schema.KEY_COLUMN_USAGE \\\n      where constraint_schema=? \\\n      and REFERENCED_TABLE_NAME=?\";\n    debugLog(\"Sql Query : \" + sqlQuery);\n    connection.query(\n      sqlQuery,\n      [config.mysqlDb.database, options.tableName],\n      (error, tables) => {\n        if (error) {\n          if (isreleaseConnection) connection.release();\n          if (typeof errorCallback == \"function\") {\n            errorCallback(error);\n            return;\n          }\n        }\n        let records = \"\";\n        let values = [];\n        debugLog(\"Existing table length : \" + tables.length);\n        for (var i = 0; i < tables.length; i++) {\n          records +=\n            \"SELECT COUNT(*) CNT FROM \" +\n            tables[i][\"table_name\"] +\n            \" WHERE \\\n           \" +\n            tables[i][\"column_name\"] +\n            \"=?;\";\n          values.push(options.id);\n        }\n        debugLog(\"rexords Query : \" + records);\n        connection.query(records, values, (error, result) => {\n          if (error) {\n            if (isreleaseConnection) connection.release();\n            if (typeof errorCallback == \"function\") {\n              errorCallback(error);\n              return;\n            }\n          } else {\n            var hasRecords = false;\n            for (var c = 0; c < result.length; c++) {\n              if (result[c][0] != null && result[c][0][\"CNT\"] == 1) {\n                hasRecords = true;\n                break;\n              }\n            }\n            if (hasRecords == true) {\n              result = {\n                success: false,\n                message: \"Record already exists..\"\n              };\n              if (isreleaseConnection) connection.release();\n              if (typeof successCallback == \"function\") {\n                successCallback(result);\n              }\n            } else {\n              connection.query(\n                options.query,\n                options.values,\n                (error, deleteRecord) => {\n                  if (error) {\n                    if (isreleaseConnection) connection.release();\n                    if (typeof errorCallback == \"function\") {\n                      errorCallback(error);\n                      return;\n                    }\n                  }\n\n                  result = {\n                    success: true,\n                    records: deleteRecord\n                  };\n                  if (isreleaseConnection) connection.release();\n                  if (typeof successCallback == \"function\") {\n                    successCallback(result);\n                  }\n                }\n              );\n            }\n          }\n        });\n      }\n    );\n  });\n};\nlet releaseConnection = req => {\n  if (req.db != null) {\n    delete req.db;\n  }\n  if (req.records != null) {\n    delete req.records;\n  }\n};\nlet checkIsNull = (input, defaultType) => {\n  return input == null || input == \"\" ? defaultType : input;\n};\n\nlet runningNumberGen = options => {\n  const db = options.db;\n\n  db.query(\n    \"SELECT  `module_desc`,`hims_f_app_numgen_id`, `prefix`, `intermediate_series`, `postfix`\\\n, `length`, `increment_by`, `numgen_seperator`, `postfix_start`\\\n,`postfix_end`, `current_num`, `pervious_num` FROM `hims_f_app_numgen`\\\n WHERE record_status='A' AND `module_desc` in (?)AND  \\\n `postfix` >= `postfix_start` AND `postfix` <= `postfix_end`\",\n    [options.module_desc],\n    (error, result) => {\n      if (error) {\n        options.onFailure(error);\n      }\n\n      if (result.length == 0) {\n        options.onFailure(\n          \"Generation series for '\" +\n            options.module_desc +\n            \"' not exist please contact administrator.\"\n        );\n      } else {\n        let resultNumbers = [];\n        result.map((item, index) => {\n          let prefix = item[\"prefix\"];\n          let numgenId = item[\"hims_f_app_numgen_id\"];\n          let intermediate_series = item[\"intermediate_series\"];\n          let postfix = item[\"postfix\"];\n          let length = parseInt(item[\"length\"]) - parseInt(prefix.length);\n          let increment_by = parseInt(item[\"increment_by\"]);\n          if (options.counter != null) {\n            increment_by = increment_by + parseInt(options.counter - 1);\n          }\n\n          let numgen_seperator = item[\"numgen_seperator\"];\n          let newNumber = parseInt(postfix) + increment_by;\n\n          let paddedNumber = padString(String(newNumber), length, \"0\");\n\n          let queryAtt =\n            \"UPDATE `hims_f_app_numgen` \\\n    SET `current_num`=?, `pervious_num`=?,postfix=? \\\n    WHERE  `record_status`='A' AND `hims_f_app_numgen_id`=?\";\n          db.query(\n            queryAtt,\n            [paddedNumber, postfix, paddedNumber, numgenId],\n            (error, numUpdate) => {\n              if (error) {\n                debugFunction(\"Error\");\n                options.onFailure(error);\n              }\n\n              let completeNumber =\n                prefix +\n                numgen_seperator +\n                intermediate_series +\n                numgen_seperator +\n                paddedNumber;\n\n              resultNumbers.push({\n                completeNumber: completeNumber,\n                module_desc: item[\"module_desc\"]\n              });\n\n              if (index == result.length - 1) {\n                options.onSuccess(resultNumbers);\n                debugLog(\"Number:\", resultNumbers);\n              }\n            }\n          );\n        });\n      }\n    }\n  );\n};\n\nlet runningNumber = (\n  db,\n  numgenId,\n  paramName,\n  callBack,\n  isreleaseConnection\n) => {\n  isreleaseConnection = isreleaseConnection || false;\n\n  db.query(\n    \"SELECT  `prefix`, `intermediate_series`, `postfix`\\\n  , `length`, `increment_by`, `numgen_seperator`, `postfix_start`\\\n  ,`postfix_end`, `current_num`, `pervious_num` FROM `hims_f_app_numgen`\\\n   WHERE record_status='A' AND hims_f_app_numgen_id=?\",\n    [numgenId],\n    (error, result) => {\n      if (error) {\n        throw error;\n      }\n      result = result[0];\n      let prefix = result[\"prefix\"];\n      let intermediate_series = result[\"intermediate_series\"];\n      let postfix = result[\"postfix\"];\n      let length = parseInt(result[\"length\"]) - parseInt(prefix.length);\n      let increment_by = result[\"increment_by\"];\n      let numgen_seperator = result[\"numgen_seperator\"];\n      let postfix_start = result[\"postfix_start\"];\n      let postfix_end = result[\"postfix_end\"];\n\n      let newNumber = parseInt(postfix) + parseInt(increment_by);\n\n      if (\n        parseInt(postfix_start) <= newNumber &&\n        parseInt(postfix_end) >= newNumber\n      ) {\n        let paddedNumber = padString(String(newNumber), length, \"0\");\n        let queryAtt =\n          \"UPDATE `hims_f_app_numgen` \\\n        SET `current_num`=?, `pervious_num`=?,postfix=? \\\n        WHERE  `record_status`='A' AND `hims_f_app_numgen_id`=?\";\n        db.query(\n          queryAtt,\n          [paddedNumber, postfix, paddedNumber, numgenId],\n          (error, numUpdate) => {\n            if (error) {\n              throw error;\n            }\n\n            let completeNumber =\n              prefix +\n              numgen_seperator +\n              intermediate_series +\n              numgen_seperator +\n              paddedNumber;\n\n            if (typeof callBack == \"function\") {\n              callBack(error, numUpdate, completeNumber);\n            }\n          }\n        );\n      } else {\n        db.query(\n          \"select  param_value from algaeh_d_app_config where \\\n        param_name =? and param_sequence =(\\\n        select param_sequence from algaeh_d_app_config \\\n        where param_name=? and param_value=? \\\n        )+1\",\n          [paramName, paramName, intermediate_series],\n          (error, resultSeries) => {\n            if (error) {\n              throw error;\n            }\n            newNumber = parseInt(postfix_start) + parseInt(increment_by);\n            paddedNumber = padString(newNumber, length, \"0\");\n\n            let interSeries = resultSeries[0][\"param_value\"];\n            let queryGen =\n              \"UPDATE `hims_f_app_numgen` SET `intermediate_series`=?,\\\n            `current_num`=?,`pervious_num`=?,postfix=? \\\n            WHERE  `record_status`='A' AND `hims_f_app_numgen_id`=?\";\n            db.query(\n              queryGen,\n              [interSeries, paddedNumber, postfix, paddedNumber, numgenId],\n              (error, updateResult) => {\n                if (error) {\n                  throw error;\n                }\n\n                let completeNumber =\n                  prefix +\n                  numgen_seperator +\n                  interSeries +\n                  numgen_seperator +\n                  paddedNumber;\n\n                if (typeof callBack == \"function\") {\n                  callBack(error, updateResult, completeNumber);\n                }\n              }\n            );\n          }\n        );\n      }\n    }\n  );\n};\n\nlet padString = (newNumber, length, paddCharacter) => {\n  return pad(newNumber.toString(), length, \"LEFT\", paddCharacter);\n};\n\nlet releaseDBConnection = (pool, connection) => {\n  if (pool._freeConnections.indexOf(connection) == -1) {\n    connection.release();\n  }\n};\n//Upload and Downloading files via multer Configuration\nvar storage = multer.diskStorage({\n  destination: function(req, file, cb) {\n    let fullFolderName = req.folderPath;\n    let fileName = \"\";\n    logger.log(\"info\", \"after Split %s\", file.fieldname);\n    let splitFiledName = file.fieldname.split(\"_\");\n    if (splitFiledName != null) {\n      logger.log(\"info\", \"after Split %j\", splitFiledName);\n      if (splitFiledName.length > 1) {\n        fullFolderName += \"/\" + splitFiledName[1];\n        fileName = \"_\" + splitFiledName[splitFiledName.length - 1];\n      }\n    } else {\n      fileName = \"_\" + file.fieldname;\n    }\n    debugLog(\"Field Name : \" + file.fieldname + \" File Name : \" + fileName);\n    req.fullFolderPath = fullFolderName;\n    req.newFileName = req.fileName + fileName;\n    mkdirp(req.fullFolderPath, error => {\n      if (error) logger.log(\"error\", \"Directory creation error: %j \", error);\n      else {\n        debugLog(\"Path setting in multer \" + req.fullFolderPath);\n        cb(null, req.fullFolderPath);\n      }\n    });\n  },\n  filename: function(req, file, cb) {\n    const pathDeclare = require(\"path\");\n    debugLog(\n      \"File Name : \" + req.newFileName + pathDeclare.extname(file.originalname)\n    );\n    cb(null, req.newFileName + pathDeclare.extname(file.originalname));\n  }\n});\nvar upload = multer({ storage: storage });\n//End multer configuration.\n//Upload file via multer\nlet uploadFile = (req, res, callBack) => {\n  debugFunction(\"Inside File Uplaod\");\n  upload(req, res, error => {\n    if (error) {\n      logger.log(\"error\", \"%j\", error);\n    }\n    callBack(error, req);\n  });\n};\n//Download file via multer\nlet downloadFile = (req, res, callBack) => {\n  upload(req, res, error => {\n    if (error) {\n      logger.log(\"error\", \"Image getting error : %j\", error);\n    }\n    callBack(error, req);\n  });\n};\n/*\n   input as array of obejct and converting to single araay object\n*/\nlet jsonArrayToObject = options => {\n  let outputObject = [];\n  for (let i = 0; i < options.arrayObj.length; i++) {\n    const item = options.arrayObj[i];\n\n    outputObject.push(\n      options.sampleInputObject.map(key => {\n        if (key == \"created_by\" || key == \"updated_by\") {\n          if (options.userId != null) {\n            return options.userId;\n          }\n        }\n        if (\n          options.replaceObject != null &&\n          options.replaceObject.length != 0\n        ) {\n          let replacer = new LINQ(options.replaceObject)\n            .Where(w => w.originalKey == key)\n            .FirstOrDefault();\n\n          if (replacer != null) {\n            if (replacer.NewKey != null) {\n              key = replacer.NewKey;\n            }\n          }\n        }\n\n        return item[key];\n      })\n    );\n  }\n  return outputObject;\n};\n\nlet bulkInputArrayObject = (arrayObj, outArray, objectToChang) => {\n  objectToChang = objectToChang || {};\n  _.each(arrayObj, (item, index) => {\n    outArray.push(\n      Object.keys(item).map((key, keyIndex) => {\n        if (objectToChang[key] != null) {\n          return objectToChang[key];\n        }\n        return item[key];\n      })\n    );\n  });\n};\nlet bulkMasters = (fileName, bulkObject) => {\n  try {\n    const masterDir = path.join(__dirname, \"../../Masters/\");\n    if (!fs.existsSync(masterDir)) {\n      fs.mkdirSync(masterDir);\n    }\n    const fPath = masterDir + fileName + \".json\";\n    if (!fs.exists(fPath)) {\n      var writeStream = fs.createWriteStream(fPath);\n      writeStream.write(JSON.stringify(bulkObject));\n      writeStream.end();\n      return bulkObject;\n    }\n    return JSON.parse(fs.readFileSync(fPath));\n  } catch (e) {\n    logger.log(\"error\", \"Bulk master save : %j\", e);\n  }\n};\n\nmodule.exports = {\n  selectStatement,\n  paging,\n  whereCondition,\n  releaseConnection,\n  checkIsNull,\n  runningNumber,\n  deleteRecord,\n  releaseDBConnection,\n  uploadFile,\n  downloadFile,\n  bulkInputArrayObject,\n  bulkMasters,\n  jsonArrayToObject,\n  runningNumberGen\n};\n"]}