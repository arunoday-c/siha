{"version":3,"sources":["../../src/utils/index.js"],"names":["paging","pageLimit","options","pageNo","pageSize","whereCondition","condition","values","total","Object","keys","length","i","forEach","key","push","selectStatement","successCallback","errorCallback","isreleaseConnection","success","message","db","getConnection","error","connection","query","result","releaseDBConnection","deleteRecord","sqlQuery","tableName","mysqlDb","database","tables","release","records","id","hasRecords","c","releaseConnection","req","checkIsNull","input","defaultType","runningNumberGen","module_desc","onFailure","resultNumbers","map","item","index","prefix","numgenId","intermediate_series","postfix","parseInt","increment_by","counter","numgen_seperator","newNumber","paddedNumber","padString","String","queryAtt","numUpdate","completeNumber","onSuccess","runningNumber","paramName","callBack","postfix_start","postfix_end","resultSeries","interSeries","queryGen","updateResult","paddCharacter","toString","pool","_freeConnections","indexOf","storage","diskStorage","destination","file","cb","fullFolderName","folderPath","fileName","log","fieldname","splitFiledName","split","fullFolderPath","newFileName","filename","pathDeclare","require","extname","originalname","upload","uploadFile","res","downloadFile","jsonArrayToObject","outputObject","internalarray","arrayObj","j","sampleInputObject","inideCreate","body","created_by","replaceObject","replacer","Where","w","originalKey","FirstOrDefault","NewKey","newFieldToInsert","row","bulkInputArrayObject","outArray","objectToChang","each","keyIndex","bulkMasters","bulkObject","masterDir","join","__dirname","existsSync","mkdirSync","fPath","exists","writeStream","createWriteStream","write","JSON","stringify","end","parse","readFileSync","e","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["import pad from \"node-string-pad\";\r\nimport config from \"../keys/keys\";\r\nimport multer from \"multer\";\r\nimport extend from \"extend\";\r\nimport path from \"path\";\r\nimport mkdirp from \"mkdirp\";\r\nimport { logger, debugFunction, debugLog } from \"./logging\";\r\nimport fs from \"fs\";\r\nimport { LINQ } from \"node-linq\";\r\nimport Promise from \"bluebird\";\r\nimport _ from \"underscore\";\r\nlet paging = options => {\r\n  let pageLimit = options.paging.pageNo * options.paging.pageSize;\r\n  return {\r\n    pageNo: pageLimit,\r\n    pageSize: options.paging.pageSize\r\n  };\r\n};\r\nlet whereCondition = options => {\r\n  let condition = \"\";\r\n  let values = [];\r\n  let total = Object.keys(options).length;\r\n  let i = 0;\r\n  Object.keys(options).forEach(key => {\r\n    condition += \"(\" + key + '=? or \"ALL\"=?)';\r\n    if (options[key] == null || options[key] == \"null\") {\r\n      options[key] = \"ALL\";\r\n    }\r\n\r\n    if (i != total - 1) condition += \" AND \";\r\n    values.push(options[key]);\r\n    values.push(options[key]);\r\n    i = i + 1;\r\n  });\r\n  return {\r\n    condition: condition,\r\n    values: values\r\n  };\r\n};\r\n\r\nlet selectStatement = (\r\n  options,\r\n  successCallback,\r\n  errorCallback,\r\n  isreleaseConnection\r\n) => {\r\n  isreleaseConnection = isreleaseConnection || false;\r\n  if (options == null) {\r\n    if (typeof errorCallback == \"function\") {\r\n      errorCallback({\r\n        success: false,\r\n        message: \"Options can not null\"\r\n      });\r\n    }\r\n  }\r\n  let db = options.db;\r\n  options.values = options.values || [];\r\n  db.getConnection((error, connection) => {\r\n    connection.query(options.query, options.values, (error, result) => {\r\n      if (isreleaseConnection) releaseDBConnection(db, connection);\r\n      if (error) {\r\n        if (typeof errorCallback == \"function\") {\r\n          errorCallback(error);\r\n        }\r\n      }\r\n      if (typeof successCallback == \"function\") successCallback(result);\r\n    });\r\n  });\r\n};\r\nlet deleteRecord = (\r\n  options,\r\n  successCallback,\r\n  errorCallback,\r\n  isreleaseConnection\r\n) => {\r\n  isreleaseConnection = isreleaseConnection || false;\r\n  debugFunction(\"deleteRecord\");\r\n  let db = options.db;\r\n  db.getConnection((error, connection) => {\r\n    let sqlQuery =\r\n      \"select distinct table_name,column_name from information_schema.KEY_COLUMN_USAGE \\\r\n      where constraint_schema=? \\\r\n      and REFERENCED_TABLE_NAME=?\";\r\n    debugLog(\"Options\", options);\r\n    debugLog(\"Sql Query : \" + sqlQuery, options.tableName);\r\n    connection.query(\r\n      sqlQuery,\r\n      [config.mysqlDb.database, options.tableName],\r\n      (error, tables) => {\r\n        if (error) {\r\n          if (isreleaseConnection) connection.release();\r\n          if (typeof errorCallback == \"function\") {\r\n            errorCallback(error);\r\n            return;\r\n          }\r\n        }\r\n        let records = \"\";\r\n        let values = [];\r\n        debugLog(\"Existing table length : \" + tables.length);\r\n\r\n        if (tables.length == 0) {\r\n          connection.query(\r\n            options.query,\r\n            options.values,\r\n            (error, deleteRecord) => {\r\n              if (error) {\r\n                if (isreleaseConnection) connection.release();\r\n                if (typeof errorCallback == \"function\") {\r\n                  errorCallback(error);\r\n                  return;\r\n                }\r\n              }\r\n\r\n              let result = {\r\n                success: true,\r\n                records: deleteRecord\r\n              };\r\n              if (isreleaseConnection) connection.release();\r\n              if (typeof successCallback == \"function\") {\r\n                successCallback(result);\r\n              }\r\n            }\r\n          );\r\n        } else {\r\n          for (var i = 0; i < tables.length; i++) {\r\n            records +=\r\n              \"SELECT COUNT(*) CNT FROM \" +\r\n              tables[i][\"table_name\"] +\r\n              \" WHERE \\\r\n             \" +\r\n              tables[i][\"column_name\"] +\r\n              \"=?;\";\r\n            values.push(options.id);\r\n          }\r\n\r\n          debugLog(\"rexords Query : \" + records);\r\n          connection.query(records, values, (error, result) => {\r\n            if (error) {\r\n              if (isreleaseConnection) connection.release();\r\n              if (typeof errorCallback == \"function\") {\r\n                errorCallback(error);\r\n                return;\r\n              }\r\n            } else {\r\n              var hasRecords = false;\r\n              for (var c = 0; c < result.length; c++) {\r\n                if (result[c][0] != null && result[c][0][\"CNT\"] == 1) {\r\n                  hasRecords = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (hasRecords == true) {\r\n                result = {\r\n                  success: false,\r\n                  message: \"Record already exists..\"\r\n                };\r\n                if (isreleaseConnection) connection.release();\r\n                if (typeof successCallback == \"function\") {\r\n                  successCallback(result);\r\n                }\r\n              } else {\r\n                connection.query(\r\n                  options.query,\r\n                  options.values,\r\n                  (error, deleteRecord) => {\r\n                    if (error) {\r\n                      if (isreleaseConnection) connection.release();\r\n                      if (typeof errorCallback == \"function\") {\r\n                        errorCallback(error);\r\n                        return;\r\n                      }\r\n                    }\r\n\r\n                    result = {\r\n                      success: true,\r\n                      records: deleteRecord\r\n                    };\r\n                    if (isreleaseConnection) connection.release();\r\n                    if (typeof successCallback == \"function\") {\r\n                      successCallback(result);\r\n                    }\r\n                  }\r\n                );\r\n              }\r\n            }\r\n          });\r\n        }\r\n      }\r\n    );\r\n  });\r\n};\r\nlet releaseConnection = req => {\r\n  if (req.db != null) {\r\n    delete req.db;\r\n  }\r\n  if (req.records != null) {\r\n    delete req.records;\r\n  }\r\n};\r\nlet checkIsNull = (input, defaultType) => {\r\n  return input == null || input == \"\" ? defaultType : input;\r\n};\r\n\r\nlet runningNumberGen = options => {\r\n  const db = options.db;\r\n\r\n  db.query(\r\n    \"SELECT  `module_desc`,`hims_f_app_numgen_id`, `prefix`, `intermediate_series`, `postfix`\\\r\n, `length`, `increment_by`, `numgen_seperator`, `postfix_start`\\\r\n,`postfix_end`, `current_num`, `pervious_num` FROM `hims_f_app_numgen`\\\r\n WHERE record_status='A' AND `module_desc` in (?)AND  \\\r\n `postfix` >= `postfix_start` AND `postfix` <= `postfix_end`\",\r\n    [options.module_desc],\r\n    (error, result) => {\r\n      if (error) {\r\n        options.onFailure(error);\r\n      }\r\n\r\n      if (result.length == 0) {\r\n        options.onFailure(\r\n          \"Generation series for '\" +\r\n            options.module_desc +\r\n            \"' not exist please contact administrator.\"\r\n        );\r\n      } else {\r\n        let resultNumbers = [];\r\n        result.map((item, index) => {\r\n          let prefix = item[\"prefix\"];\r\n          let numgenId = item[\"hims_f_app_numgen_id\"];\r\n          let intermediate_series = item[\"intermediate_series\"];\r\n          let postfix = item[\"postfix\"];\r\n          let length = parseInt(item[\"length\"]) - parseInt(prefix.length);\r\n          let increment_by = parseInt(item[\"increment_by\"]);\r\n          if (options.counter != null) {\r\n            increment_by = increment_by + parseInt(options.counter - 1);\r\n          }\r\n\r\n          let numgen_seperator = item[\"numgen_seperator\"];\r\n          let newNumber = parseInt(postfix) + increment_by;\r\n\r\n          let paddedNumber = padString(String(newNumber), length, \"0\");\r\n\r\n          let queryAtt =\r\n            \"UPDATE `hims_f_app_numgen` \\\r\n    SET `current_num`=?, `pervious_num`=?,postfix=? \\\r\n    WHERE  `record_status`='A' AND `hims_f_app_numgen_id`=?\";\r\n          db.query(\r\n            queryAtt,\r\n            [paddedNumber, postfix, paddedNumber, numgenId],\r\n            (error, numUpdate) => {\r\n              if (error) {\r\n                debugFunction(\"Error\");\r\n                options.onFailure(error);\r\n              }\r\n\r\n              let completeNumber =\r\n                prefix +\r\n                numgen_seperator +\r\n                intermediate_series +\r\n                numgen_seperator +\r\n                paddedNumber;\r\n\r\n              resultNumbers.push({\r\n                completeNumber: completeNumber,\r\n                module_desc: item[\"module_desc\"]\r\n              });\r\n\r\n              if (index == result.length - 1) {\r\n                options.onSuccess(resultNumbers);\r\n                debugLog(\"Number:\", resultNumbers);\r\n              }\r\n            }\r\n          );\r\n        });\r\n      }\r\n    }\r\n  );\r\n};\r\n\r\nlet runningNumber = (\r\n  db,\r\n  numgenId,\r\n  paramName,\r\n  callBack,\r\n  isreleaseConnection\r\n) => {\r\n  isreleaseConnection = isreleaseConnection || false;\r\n\r\n  db.query(\r\n    \"SELECT  `prefix`, `intermediate_series`, `postfix`\\\r\n  , `length`, `increment_by`, `numgen_seperator`, `postfix_start`\\\r\n  ,`postfix_end`, `current_num`, `pervious_num` FROM `hims_f_app_numgen`\\\r\n   WHERE record_status='A' AND hims_f_app_numgen_id=?\",\r\n    [numgenId],\r\n    (error, result) => {\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      result = result[0];\r\n      let prefix = result[\"prefix\"];\r\n      let intermediate_series = result[\"intermediate_series\"];\r\n      let postfix = result[\"postfix\"];\r\n      let length = parseInt(result[\"length\"]) - parseInt(prefix.length);\r\n      let increment_by = result[\"increment_by\"];\r\n      let numgen_seperator = result[\"numgen_seperator\"];\r\n      let postfix_start = result[\"postfix_start\"];\r\n      let postfix_end = result[\"postfix_end\"];\r\n\r\n      let newNumber = parseInt(postfix) + parseInt(increment_by);\r\n\r\n      if (\r\n        parseInt(postfix_start) <= newNumber &&\r\n        parseInt(postfix_end) >= newNumber\r\n      ) {\r\n        let paddedNumber = padString(String(newNumber), length, \"0\");\r\n        let queryAtt =\r\n          \"UPDATE `hims_f_app_numgen` \\\r\n        SET `current_num`=?, `pervious_num`=?,postfix=? \\\r\n        WHERE  `record_status`='A' AND `hims_f_app_numgen_id`=?\";\r\n        db.query(\r\n          queryAtt,\r\n          [paddedNumber, postfix, paddedNumber, numgenId],\r\n          (error, numUpdate) => {\r\n            if (error) {\r\n              throw error;\r\n            }\r\n\r\n            let completeNumber =\r\n              prefix +\r\n              numgen_seperator +\r\n              intermediate_series +\r\n              numgen_seperator +\r\n              paddedNumber;\r\n\r\n            if (typeof callBack == \"function\") {\r\n              callBack(error, numUpdate, completeNumber);\r\n            }\r\n          }\r\n        );\r\n      } else {\r\n        db.query(\r\n          \"select  param_value from algaeh_d_app_config where \\\r\n        param_name =? and param_sequence =(\\\r\n        select param_sequence from algaeh_d_app_config \\\r\n        where param_name=? and param_value=? \\\r\n        )+1\",\r\n          [paramName, paramName, intermediate_series],\r\n          (error, resultSeries) => {\r\n            if (error) {\r\n              throw error;\r\n            }\r\n            newNumber = parseInt(postfix_start) + parseInt(increment_by);\r\n            paddedNumber = padString(newNumber, length, \"0\");\r\n\r\n            let interSeries = resultSeries[0][\"param_value\"];\r\n            let queryGen =\r\n              \"UPDATE `hims_f_app_numgen` SET `intermediate_series`=?,\\\r\n            `current_num`=?,`pervious_num`=?,postfix=? \\\r\n            WHERE  `record_status`='A' AND `hims_f_app_numgen_id`=?\";\r\n            db.query(\r\n              queryGen,\r\n              [interSeries, paddedNumber, postfix, paddedNumber, numgenId],\r\n              (error, updateResult) => {\r\n                if (error) {\r\n                  throw error;\r\n                }\r\n\r\n                let completeNumber =\r\n                  prefix +\r\n                  numgen_seperator +\r\n                  interSeries +\r\n                  numgen_seperator +\r\n                  paddedNumber;\r\n\r\n                if (typeof callBack == \"function\") {\r\n                  callBack(error, updateResult, completeNumber);\r\n                }\r\n              }\r\n            );\r\n          }\r\n        );\r\n      }\r\n    }\r\n  );\r\n};\r\n\r\nlet padString = (newNumber, length, paddCharacter) => {\r\n  return pad(newNumber.toString(), length, \"LEFT\", paddCharacter);\r\n};\r\n\r\nlet releaseDBConnection = (pool, connection) => {\r\n  if (pool._freeConnections.indexOf(connection) == -1) {\r\n    connection.release();\r\n  }\r\n};\r\n//Upload and Downloading files via multer Configuration\r\nvar storage = multer.diskStorage({\r\n  destination: function(req, file, cb) {\r\n    let fullFolderName = req.folderPath;\r\n    let fileName = \"\";\r\n    logger.log(\"info\", \"after Split %s\", file.fieldname);\r\n    let splitFiledName = file.fieldname.split(\"_\");\r\n    if (splitFiledName != null) {\r\n      logger.log(\"info\", \"after Split %j\", splitFiledName);\r\n      if (splitFiledName.length > 1) {\r\n        fullFolderName += \"/\" + splitFiledName[1];\r\n        fileName = \"_\" + splitFiledName[splitFiledName.length - 1];\r\n      }\r\n    } else {\r\n      fileName = \"_\" + file.fieldname;\r\n    }\r\n    debugLog(\"Field Name : \" + file.fieldname + \" File Name : \" + fileName);\r\n    req.fullFolderPath = fullFolderName;\r\n    req.newFileName = req.fileName + fileName;\r\n    mkdirp(req.fullFolderPath, error => {\r\n      if (error) logger.log(\"error\", \"Directory creation error: %j \", error);\r\n      else {\r\n        debugLog(\"Path setting in multer \" + req.fullFolderPath);\r\n        cb(null, req.fullFolderPath);\r\n      }\r\n    });\r\n  },\r\n  filename: function(req, file, cb) {\r\n    const pathDeclare = require(\"path\");\r\n    debugLog(\r\n      \"File Name : \" + req.newFileName + pathDeclare.extname(file.originalname)\r\n    );\r\n    cb(null, req.newFileName + pathDeclare.extname(file.originalname));\r\n  }\r\n});\r\nvar upload = multer({ storage: storage });\r\n//End multer configuration.\r\n//Upload file via multer\r\nlet uploadFile = (req, res, callBack) => {\r\n  debugFunction(\"Inside File Uplaod\");\r\n  upload(req, res, error => {\r\n    if (error) {\r\n      logger.log(\"error\", \"%j\", error);\r\n    }\r\n    callBack(error, req);\r\n  });\r\n};\r\n//Download file via multer\r\nlet downloadFile = (req, res, callBack) => {\r\n  upload(req, res, error => {\r\n    if (error) {\r\n      logger.log(\"error\", \"Image getting error : %j\", error);\r\n    }\r\n    callBack(error, req);\r\n  });\r\n};\r\n/*\r\n   input as array of obejct and converting to single araay object\r\n*/\r\nlet jsonArrayToObject = options => {\r\n  let outputObject = [];\r\n  for (let i = 0; i < options.arrayObj.length; i++) {\r\n    let internalarray = [];\r\n    const item = options.arrayObj[i];\r\n    for (let j = 0; j < options.sampleInputObject.length; j++) {\r\n      let key = options.sampleInputObject[j];\r\n      let inideCreate = false;\r\n      if (key == \"created_by\" || key == \"updated_by\") {\r\n        internalarray.push(options.req.body.created_by);\r\n        inideCreate = true;\r\n      }\r\n      if (options.replaceObject != null && options.replaceObject.length != 0) {\r\n        let replacer = new LINQ(options.replaceObject)\r\n          .Where(w => w.originalKey == key)\r\n          .FirstOrDefault();\r\n\r\n        if (replacer != null) {\r\n          if (replacer.NewKey != null) {\r\n            key = replacer.NewKey;\r\n          }\r\n        }\r\n      }\r\n      if (!inideCreate) internalarray.push(item[key]);\r\n    }\r\n\r\n    // outputObject.push(\r\n\r\n    //   options.sampleInputObject.map(key => {\r\n    //     if (key == \"created_by\" || key == \"updated_by\") {\r\n    //       return options.req.body.created_by;\r\n    //     }\r\n    //     if (\r\n    //       options.replaceObject != null &&\r\n    //       options.replaceObject.length != 0\r\n    //     ) {\r\n    //       let replacer = new LINQ(options.replaceObject)\r\n    //         .Where(w => w.originalKey == key)\r\n    //         .FirstOrDefault();\r\n\r\n    //       if (replacer != null) {\r\n    //         if (replacer.NewKey != null) {\r\n    //           key = replacer.NewKey;\r\n    //         }\r\n    //       }\r\n    //     }\r\n\r\n    //     return item[key];\r\n    //   })\r\n    // );\r\n    if (options.newFieldToInsert != null) {\r\n      options.newFieldToInsert.map(row => {\r\n        internalarray.push(row);\r\n      });\r\n    }\r\n    outputObject.push(internalarray);\r\n  }\r\n  return outputObject;\r\n};\r\n\r\nlet bulkInputArrayObject = (arrayObj, outArray, objectToChang) => {\r\n  objectToChang = objectToChang || {};\r\n  _.each(arrayObj, (item, index) => {\r\n    outArray.push(\r\n      Object.keys(item).map((key, keyIndex) => {\r\n        if (objectToChang[key] != null) {\r\n          return objectToChang[key];\r\n        }\r\n        return item[key];\r\n      })\r\n    );\r\n  });\r\n};\r\nlet bulkMasters = (fileName, bulkObject) => {\r\n  try {\r\n    const masterDir = path.join(__dirname, \"../../Masters/\");\r\n    if (!fs.existsSync(masterDir)) {\r\n      fs.mkdirSync(masterDir);\r\n    }\r\n    const fPath = masterDir + fileName + \".json\";\r\n    if (!fs.exists(fPath)) {\r\n      var writeStream = fs.createWriteStream(fPath);\r\n      writeStream.write(JSON.stringify(bulkObject));\r\n      writeStream.end();\r\n      return bulkObject;\r\n    }\r\n    return JSON.parse(fs.readFileSync(fPath));\r\n  } catch (e) {\r\n    logger.log(\"error\", \"Bulk master save : %j\", e);\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  selectStatement,\r\n  paging,\r\n  whereCondition,\r\n  releaseConnection,\r\n  checkIsNull,\r\n  runningNumber,\r\n  deleteRecord,\r\n  releaseDBConnection,\r\n  uploadFile,\r\n  downloadFile,\r\n  bulkInputArrayObject,\r\n  bulkMasters,\r\n  jsonArrayToObject,\r\n  runningNumberGen\r\n};\r\n"]}