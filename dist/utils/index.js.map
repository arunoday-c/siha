{"version":3,"sources":["../../src/utils/index.js"],"names":["paging","pageLimit","options","pageNo","pageSize","whereCondition","condition","values","total","Object","keys","length","i","forEach","key","push","selectStatement","successCallback","errorCallback","isreleaseConnection","success","message","db","getConnection","error","connection","query","result","releaseDBConnection","deleteRecord","sqlQuery","mysqlDb","database","tableName","tables","release","records","id","hasRecords","c","releaseConnection","req","checkIsNull","input","defaultType","runningNumber","numgenId","paramName","callBack","prefix","intermediate_series","postfix","parseInt","increment_by","numgen_seperator","postfix_start","postfix_end","newNumber","paddedNumber","padString","String","queryAtt","numUpdate","completeNumber","resultSeries","interSeries","queryGen","updateResult","paddCharacter","toString","pool","_freeConnections","indexOf","base64DecodeToFile","settings","isPatient","code","file","base64String","appendFolder","folderDir","documentFolderPath","trim","fullDocPath","join","__dirname","log","decode","output","base64EncodeToFile","encode","updateApplicationObject","value","applicationObject","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["import pad from \"node-string-pad\";\nimport config from \"../keys/keys\";\nimport fileBase64 from \"file-base64\";\nimport extend from \"extend\";\nimport path from \"path\";\nimport mkdirp from \"mkdirp\";\nimport { logger, debugFunction, debugLog } from \"./logging\";\n\nlet paging = options => {\n  let pageLimit = options.paging.pageNo * options.paging.pageSize;\n  return {\n    pageNo: pageLimit,\n    pageSize: options.paging.pageSize\n  };\n};\nlet whereCondition = options => {\n  let condition = \"\";\n  let values = [];\n  let total = Object.keys(options).length;\n  let i = 0;\n  Object.keys(options).forEach(key => {\n    condition += \"(\" + key + '=? or \"ALL\"=?)';\n    if (i != total - 1) condition += \" AND \";\n    values.push(options[key]);\n    values.push(options[key]);\n    i = i + 1;\n  });\n  return {\n    condition: condition,\n    values: values\n  };\n};\n\nlet selectStatement = (\n  options,\n  successCallback,\n  errorCallback,\n  isreleaseConnection\n) => {\n  isreleaseConnection = isreleaseConnection || false;\n  if (options == null) {\n    if (typeof errorCallback == \"function\") {\n      errorCallback({\n        success: false,\n        message: \"Options can not null\"\n      });\n    }\n  }\n  let db = options.db;\n  options.values = options.values || [];\n  db.getConnection((error, connection) => {\n    connection.query(options.query, options.values, (error, result) => {\n      if (isreleaseConnection) releaseDBConnection(db, connection);\n      if (error) {\n        if (typeof errorCallback == \"function\") {\n          errorCallback(error);\n        }\n      }\n      if (typeof successCallback == \"function\") successCallback(result);\n    });\n  });\n};\nlet deleteRecord = (\n  options,\n  successCallback,\n  errorCallback,\n  isreleaseConnection\n) => {\n  isreleaseConnection = isreleaseConnection || false;\n  let db = options.db;\n  db.getConnection((error, connection) => {\n    let sqlQuery =\n      \"select distinct table_name,column_name from information_schema.KEY_COLUMN_USAGE \\\n      where constraint_schema=? \\\n      and REFERENCED_TABLE_NAME=?\";\n    connection.query(\n      sqlQuery,\n      [config.mysqlDb.database, options.tableName],\n      (error, tables) => {\n        if (error) {\n          if (isreleaseConnection) connection.release();\n          if (typeof errorCallback == \"function\") {\n            errorCallback(error);\n            return;\n          }\n        }\n        let records = \"\";\n        let values = [];\n        for (var i = 0; i < tables.length; i++) {\n          records +=\n            \"SELECT COUNT(*) CNT FROM \" +\n            tables[i][\"table_name\"] +\n            \" WHERE \\\n           \" +\n            tables[i][\"column_name\"] +\n            \"=?;\";\n          values.push(options.id);\n        }\n        connection.query(records, values, (error, result) => {\n          if (error) {\n            if (isreleaseConnection) connection.release();\n            if (typeof errorCallback == \"function\") {\n              errorCallback(error);\n              return;\n            }\n          } else {\n            var hasRecords = false;\n            for (var c = 0; c < result.length; c++) {\n              if (result[c][0] != null && result[c][0][\"CNT\"] == 1) {\n                hasRecords = true;\n                break;\n              }\n            }\n            if (hasRecords == true) {\n              result = {\n                success: false,\n                message: \"Record already exists..\"\n              };\n              if (isreleaseConnection) connection.release();\n              if (typeof successCallback == \"function\") {\n                successCallback(result);\n              }\n            } else {\n              connection.query(\n                options.query,\n                options.values,\n                (error, deleteRecord) => {\n                  if (error) {\n                    if (isreleaseConnection) connection.release();\n                    if (typeof errorCallback == \"function\") {\n                      errorCallback(error);\n                      return;\n                    }\n                  }\n\n                  result = {\n                    success: true,\n                    records: deleteRecord\n                  };\n                  if (isreleaseConnection) connection.release();\n                  if (typeof successCallback == \"function\") {\n                    successCallback(result);\n                  }\n                }\n              );\n            }\n          }\n        });\n      }\n    );\n  });\n};\nlet releaseConnection = req => {\n  if (req.db != null) {\n    delete req.db;\n  }\n  if (req.records != null) {\n    delete req.records;\n  }\n};\nlet checkIsNull = (input, defaultType) => {\n  return input == null || input == \"\" ? defaultType : input;\n};\n\nlet runningNumber = (\n  db,\n  numgenId,\n  paramName,\n  callBack,\n  isreleaseConnection\n) => {\n  isreleaseConnection = isreleaseConnection || false;\n  db.query(\n    \"SELECT  `prefix`, `intermediate_series`, `postfix`\\\n  , `length`, `increment_by`, `numgen_seperator`, `postfix_start`\\\n  ,`postfix_end`, `current_num`, `pervious_num` FROM `hims_f_app_numgen`\\\n   WHERE record_status='A' AND hims_f_app_numgen_id=?\",\n    [numgenId],\n    (error, result) => {\n      if (error) {\n        throw error;\n      }\n      result = result[0];\n      let prefix = result[\"prefix\"];\n      let intermediate_series = result[\"intermediate_series\"];\n      let postfix = result[\"postfix\"];\n      let length = parseInt(result[\"length\"]) - parseInt(prefix.length);\n      let increment_by = result[\"increment_by\"];\n      let numgen_seperator = result[\"numgen_seperator\"];\n      let postfix_start = result[\"postfix_start\"];\n      let postfix_end = result[\"postfix_end\"];\n\n      let newNumber = parseInt(postfix) + parseInt(increment_by);\n\n      if (\n        parseInt(postfix_start) <= newNumber &&\n        parseInt(postfix_end) >= newNumber\n      ) {\n        let paddedNumber = padString(String(newNumber), length, \"0\");\n        let queryAtt =\n          \"UPDATE `hims_f_app_numgen` \\\n        SET `current_num`=?, `pervious_num`=?,postfix=? \\\n        WHERE  `record_status`='A' AND `hims_f_app_numgen_id`=?\";\n        db.query(\n          queryAtt,\n          [paddedNumber, postfix, paddedNumber, numgenId],\n          (error, numUpdate) => {\n            if (error) {\n              throw error;\n            }\n\n            let completeNumber =\n              prefix +\n              numgen_seperator +\n              intermediate_series +\n              numgen_seperator +\n              paddedNumber;\n\n            if (typeof callBack == \"function\") {\n              callBack(error, numUpdate, completeNumber);\n            }\n          }\n        );\n      } else {\n        db.query(\n          \"select  param_value from algaeh_d_app_config where \\\n        param_name =? and param_sequence =(\\\n        select param_sequence from algaeh_d_app_config \\\n        where param_name=? and param_value=? \\\n        )+1\",\n          [paramName, paramName, intermediate_series],\n          (error, resultSeries) => {\n            if (error) {\n              throw error;\n            }\n            newNumber = parseInt(postfix_start) + parseInt(increment_by);\n            paddedNumber = padString(newNumber, length, \"0\");\n\n            let interSeries = resultSeries[0][\"param_value\"];\n            let queryGen =\n              \"UPDATE `hims_f_app_numgen` SET `intermediate_series`=?,\\\n            `current_num`=?,`pervious_num`=?,postfix=? \\\n            WHERE  `record_status`='A' AND `hims_f_app_numgen_id`=?\";\n            db.query(\n              queryGen,\n              [interSeries, paddedNumber, postfix, paddedNumber, numgenId],\n              (error, updateResult) => {\n                if (error) {\n                  throw error;\n                }\n\n                let completeNumber =\n                  prefix +\n                  numgen_seperator +\n                  interSeries +\n                  numgen_seperator +\n                  paddedNumber;\n\n                if (typeof callBack == \"function\") {\n                  callBack(error, updateResult, completeNumber);\n                }\n              }\n            );\n          }\n        );\n      }\n    }\n  );\n};\n\nlet padString = (newNumber, length, paddCharacter) => {\n  return pad(newNumber.toString(), length, \"LEFT\", paddCharacter);\n};\n\nlet releaseDBConnection = (pool, connection) => {\n  if (pool._freeConnections.indexOf(connection) == -1) {\n    connection.release();\n  }\n};\n//from base64 decode to a file\nlet base64DecodeToFile = options => {\n  debugFunction(\"base64DecodeToFile\");\n  let settings = extend(\n    {\n      isPatient: true,\n      code: \"\",\n      file: \"\",\n      base64String: \"\",\n      callBack: null\n    },\n    options\n  );\n  var appendFolder = \"/Patients/\";\n  if (!settings.isPatient) appendFolder = \"/Employees/\";\n  let folderDir = (\n    config.documentFolderPath +\n    appendFolder +\n    settings.code\n  ).trim();\n  debugLog(folderDir);\n  //logger,debugFunction,debugLog\n\n  let fullDocPath = path.join(__dirname, folderDir);\n  debugLog(\"DocumentPath\" + fullDocPath);\n  mkdirp(fullDocPath, error => {\n    if (error) logger.log(\"error %j\", error);\n    else {\n      debugLog(\"Document folder created successfully\");\n      fileBase64.decode(\n        settings.base64String,\n        fullDocPath + \"/\" + settings.file,\n        (error, output) => {\n          if (typeof settings.callBack == \"function\")\n            settings.callBack(error, output);\n        }\n      );\n    }\n  });\n};\n//from base64 encode to a file\nlet base64EncodeToFile = options => {\n  let settings = extend(\n    {\n      file: \"\",\n      callBack: null\n    },\n    options\n  );\n  let fullDocPath = path.join(\n    __dirname,\n    config.documentFolderPath + \"/\" + settings.file\n  );\n  fileBase64.encode(fullDocPath, (error, output) => {\n    if (typeof settings.callBack == \"function\")\n      settings.callBack(error, output);\n  });\n};\nlet updateApplicationObject = (key, value) => {\n  applicationObject;\n};\n\nmodule.exports = {\n  selectStatement,\n  paging,\n  whereCondition,\n  releaseConnection,\n  checkIsNull,\n  runningNumber,\n  deleteRecord,\n  releaseDBConnection,\n  base64DecodeToFile,\n  base64EncodeToFile\n};\n"]}