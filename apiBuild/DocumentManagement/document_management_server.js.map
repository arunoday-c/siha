{"version":3,"sources":["../../DocumentManagement/src/document_management_server.js"],"names":["app","portNumber","process","env","PORT","server","http","createServer","use","bodyParser","json","limit","keys","bodyLimit","router","on","logger","log","warning","error","reason","promise","req","res","next","status","httpStatus","internalServer","db","connection","_freeConnections","indexOf","rollback","release","success","message","sqlMessage","isSql","_error","source","originalUrl","requestClient","headers","reqUserIdentity","userIdentity","errorDescription","listen","console","module","exports"],"mappings":"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","file":"document_management_server.js","sourcesContent":["import http from \"http\";\nimport cors from \"cors\";\nimport bodyParser from \"body-parser\";\nimport exxpress from \"express\";\nimport keys from \"../../keys/keys\";\nimport router from \"./routes\";\nimport { logger } from \"./utils/logging\";\nconst app = exxpress();\nconst portNumber = process.env.PORT; //keys.port;\napp.server = http.createServer(app);\napp.use(cors());\n//parse application json\napp.use(\n  bodyParser.json({\n    limit: keys.bodyLimit\n  })\n);\n\n//api routeres v1\napp.use(\"/api/v1\", router);\nprocess.on(\"warning\", warning => {\n  logger.log(\"warn\", warning);\n});\nprocess.on(\"uncaughtException\", error => {\n  logger.log(\"error\", error);\n});\nprocess.on(\"unhandledRejection\", (reason, promise) => {\n  logger.error(\"Unhandled rejection\", { reason: reason, promise: promise });\n});\n\n//Error Handling MiddleWare\napp.use((error, req, res, next) => {\n  error.status = error.status || httpStatus.internalServer;\n  if (req.db != null) {\n    let connection = req.connection;\n    if (connection != null) {\n      if (req.db._freeConnections.indexOf(connection) == -1) {\n        if (typeof connection.rollback == \"function\") {\n          connection.rollback(() => {\n            if (typeof connection.release == \"function\") connection.release();\n\n            res.status(error.status).json({\n              success: false,\n              message:\n                error.sqlMessage != null ? error.sqlMessage : error.message,\n              isSql: error.sqlMessage != null ? true : false\n            });\n          });\n        } else {\n          if (typeof connection.release == \"function\") connection.release();\n          res.status(error.status).json({\n            success: false,\n            message:\n              error.sqlMessage != null ? error.sqlMessage : error.message,\n            isSql: error.sqlMessage != null ? true : false\n          });\n        }\n      } else {\n        res.status(error.status).json({\n          success: false,\n          message: error.sqlMessage != null ? error.sqlMessage : error.message,\n          isSql: error.sqlMessage != null ? true : false\n        });\n      }\n    } else {\n      res.status(error.status).json({\n        success: false,\n        message: error.sqlMessage != null ? error.sqlMessage : error.message,\n        isSql: error.sqlMessage != null ? true : false\n      });\n    }\n  } else {\n    res.status(error.status).json({\n      success: false,\n      message: error.sqlMessage != null ? error.sqlMessage : error.message,\n      isSql: error.sqlMessage != null ? true : false\n    });\n  }\n\n  const _error = {\n    source: req.originalUrl,\n    requestClient: req.headers[\"x-client-ip\"],\n    reqUserIdentity: req.userIdentity,\n    errorDescription: error\n  };\n  logger.log(\"error\", \"%j\", _error);\n});\napp.server.listen(portNumber);\nconsole.log(`Document management server started on port ${portNumber} *`);\n\nexport default app;\nmodule.exports = app;\n"]}