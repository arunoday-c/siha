{"version":3,"sources":["../../../DocumentManagement/src/Model/documents.js"],"names":["module","exports","saveDocument","req","res","next","buffer","on","chunk","toString","_headerFile","JSON","parse","headers","_utf","_clientID","fileType","EmployeeDocModel","findOneAndUpdate","pageName","destinationName","clientID","image","fileExtention","updatedDate","Date","error","result","status","json","success","records","_EmployeeDocModel","save","PatientDocModel","_PatientDocModel","getDocument","query","_destination","e","findOne","setHeader","bufferStream","stream","PassThrough","end","pipe","message"],"mappings":"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","file":"documents.js","sourcesContent":["import mongoose from \"mongoose\";\nimport EmployeeDocModel from \"./employeeDoc\";\nimport PatientDocModel from \"./patientDoc\";\nimport { logger, debugLog } from \"../Utils/logging\";\nimport stream from \"stream\";\nmodule.exports = db => {\n  return {\n    saveDocument: (req, res, next) => {\n      let buffer = \"\";\n      req.on(\"data\", chunk => {\n        buffer += chunk.toString();\n      });\n      req.on(\"end\", () => {\n        const _headerFile = JSON.parse(req.headers[\"x-file-details\"]);\n\n        // const _utf =\n        //   _headerFile.needConvertion == true\n        //     ? new Buffer.from(buffer, \"base64\")\n        //     : buffer;\n        const _utf = buffer;\n        const _clientID = req.headers[\"x-client-ip\"];\n        if (_headerFile.fileType == \"Employees\") {\n          EmployeeDocModel.findOneAndUpdate(\n            {\n              pageName: _headerFile.pageName,\n              destinationName: _headerFile.destinationName\n            },\n            {\n              pageName: _headerFile.pageName,\n              destinationName: _headerFile.destinationName,\n              clientID: _clientID,\n              image: _utf,\n              fileExtention: _headerFile.fileExtention,\n              updatedDate: new Date()\n            },\n            (error, result) => {\n              if (error) {\n                res.status(400).json({\n                  success: false,\n                  records: error\n                });\n              } else {\n                if (result == null) {\n                  let _EmployeeDocModel = new EmployeeDocModel();\n                  _EmployeeDocModel.pageName = _headerFile.pageName;\n                  _EmployeeDocModel.destinationName =\n                    _headerFile.destinationName;\n                  _EmployeeDocModel.clientID = _clientID;\n                  _EmployeeDocModel.image = _utf;\n                  _EmployeeDocModel.fileExtention = _headerFile.fileExtention;\n                  _EmployeeDocModel.updatedDate = new Date();\n                  _EmployeeDocModel.save();\n                }\n              }\n              res.status(200).json({\n                success: true,\n                records: \"Success\"\n              });\n            }\n          );\n        } else if (_headerFile.fileType == \"Patients\") {\n          PatientDocModel.findOneAndUpdate(\n            {\n              pageName: _headerFile.pageName,\n              destinationName: _headerFile.destinationName\n            },\n            {\n              pageName: _headerFile.pageName,\n              destinationName: _headerFile.destinationName,\n              clientID: _clientID,\n              image: _utf,\n              fileExtention: _headerFile.fileExtention,\n              updatedDate: new Date()\n            },\n            (error, result) => {\n              if (error) {\n                res.status(400).json({\n                  success: false,\n                  records: error\n                });\n              } else {\n                if (result == null) {\n                  let _PatientDocModel = new PatientDocModel();\n                  _PatientDocModel.pageName = _headerFile.pageName;\n                  _PatientDocModel.destinationName =\n                    _headerFile.destinationName;\n                  _PatientDocModel.clientID = _clientID;\n                  _PatientDocModel.image = _utf;\n                  _PatientDocModel.fileExtention = _headerFile.fileExtention;\n                  _PatientDocModel.updatedDate = new Date();\n                  _PatientDocModel.save();\n                }\n              }\n\n              res.status(200).json({\n                success: true,\n                records: \"Success\"\n              });\n            }\n          );\n        }\n      });\n    },\n    getDocument: (req, res, next) => {\n      const _headerFile = req.query;\n      let _destination = _headerFile.destinationName;\n      try {\n        _destination = JSON.parse(_destination);\n      } catch (e) {\n        _destination = _headerFile.destinationName;\n      }\n\n      if (_headerFile.fileType == \"Employees\") {\n        EmployeeDocModel.findOne(\n          { destinationName: _headerFile.destinationName },\n          (error, result) => {\n            if (error) {\n              res.status(400).json({\n                success: false,\n                records: error\n              });\n            } else {\n              if (result != null) {\n                res.setHeader(\"content-type\", result.fileExtention);\n                res.status(200);\n\n                let bufferStream = new stream.PassThrough();\n                bufferStream.end(result.image, \"base64\");\n                bufferStream.pipe(res);\n              } else {\n                res.status(400).json({\n                  success: false,\n                  message: \"file not found\"\n                });\n              }\n            }\n          }\n        );\n      } else if (_headerFile.fileType == \"Patients\") {\n        PatientDocModel.findOne(\n          { destinationName: _headerFile.destinationName },\n          (error, result) => {\n            if (error) {\n              res.status(400).json({\n                success: false,\n                records: error\n              });\n            } else {\n              if (result != null) {\n                res.setHeader(\"content-type\", result.fileExtention);\n                res.status(200);\n\n                let bufferStream = new stream.PassThrough();\n                bufferStream.end(result.image, \"base64\");\n                bufferStream.pipe(res);\n              } else {\n                res.status(400).json({\n                  success: false,\n                  message: \"file not found\"\n                });\n              }\n            }\n          }\n        );\n      }\n    }\n  };\n};\n"]}