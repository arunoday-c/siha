{"version":3,"sources":["../../HrManagement/src/hr_server.js"],"names":["app","server","http","createServer","use","_port","process","env","PORT","bodyParser","json","limit","keys","bodyLimit","req","res","next","reqH","headers","_token","utliites","AlgaehUtilities","logger","log","_verify","tokenVerify","header","decryption","userIdentity","reqUser","getTokenData","id","dateTime","Date","toLocaleString","requestIdentity","requestClient","requestAPIUser","reqUserIdentity","requestUrl","originalUrl","requestHeader","host","origin","requestMethod","method","setHeader","status","httpStatus","unAuthorized","success","message","routes","on","warning","error","reason","promise","internalServer","isSql","sqlMessage","listen","console","module","exports"],"mappings":"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","file":"hr_server.js","sourcesContent":["import http from \"http\";\nimport cors from \"cors\";\nimport bodyParser from \"body-parser\";\nimport exxpress from \"express\";\nimport keys from \"../../keys/keys\";\nimport utliites from \"../../AlgaehUtilities\";\nimport routes from \"./routes\";\nimport compression from \"compression\";\nconst app = exxpress();\napp.server = http.createServer(app);\napp.use(cors());\nconst _port = process.env.PORT;\napp.use(\n  bodyParser.json({\n    limit: keys.bodyLimit\n  })\n);\napp.use(compression());\napp.use((req, res, next) => {\n  const reqH = req.headers;\n  const _token = reqH[\"x-api-key\"];\n\n  utliites\n    .AlgaehUtilities()\n    .logger()\n    .log(\"Xapi\", _token, \"debug\");\n  const _verify = utliites.AlgaehUtilities().tokenVerify(_token);\n  if (_verify) {\n    let header = reqH[\"x-app-user-identity\"];\n    if (header != null && header != \"\" && header != \"null\") {\n      header = utliites.AlgaehUtilities().decryption(header);\n      req.userIdentity = header;\n      let reqUser = utliites.AlgaehUtilities().getTokenData(_token).id;\n      utliites\n        .AlgaehUtilities()\n        .logger(\"res-tracking\")\n        .log(\n          \"\",\n          {\n            dateTime: new Date().toLocaleString(),\n            requestIdentity: {\n              requestClient: reqH[\"x-client-ip\"],\n              requestAPIUser: reqUser,\n              reqUserIdentity: req.userIdentity\n            },\n            requestUrl: req.originalUrl,\n            requestHeader: {\n              host: reqH.host,\n              \"user-agent\": reqH[\"user-agent\"],\n              \"cache-control\": reqH[\"cache-control\"],\n              origin: reqH.origin\n            },\n            requestMethod: req.method\n          },\n          \"info\"\n        );\n    }\n\n    res.setHeader(\"connection\", \"keep-alive\");\n    next();\n  } else {\n    res.status(utliites.AlgaehUtilities().httpStatus().unAuthorized).json({\n      success: false,\n      message: \"unauthorized access\"\n    });\n  }\n});\n\napp.use(\"/api/v1\", routes);\n\nprocess.on(\"warning\", warning => {\n  utliites\n    .AlgaehUtilities()\n    .logger()\n    .log(\"warn\", warning, \"warn\");\n});\nprocess.on(\"uncaughtException\", error => {\n  utliites\n    .AlgaehUtilities()\n    .logger()\n    .log(\"uncatched Exception\", error, \"error\");\n});\nprocess.on(\"unhandledRejection\", (reason, promise) => {\n  utliites\n    .AlgaehUtilities()\n    .logger()\n    .log(\"Unhandled rejection\", { reason: reason, promise: promise }, \"error\");\n});\napp.use((error, req, res, next) => {\n  error.status =\n    error.status || utliites.AlgaehUtilities().httpStatus().internalServer;\n  res.status(error.status).json({\n    success: false,\n    isSql: error.sqlMessage != null ? true : false,\n    message: error.sqlMessage != null ? error.sqlMessage : error.message\n  });\n});\napp.server.listen(_port);\nconsole.log(`HR MANAGEMENT Server is running  on PORT  - ${_port}`);\nexport default app;\nmodule.exports = app;\n"]}