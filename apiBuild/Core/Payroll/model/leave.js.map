{"version":3,"sources":["../../../../src/Payroll/model/leave.js"],"names":["getEmployeeLeaveData","req","res","next","db","httpStatus","dataBaseNotInitilizedError","year","format","getConnection","error","connection","query","employee_id","result","records","e","applyEmployeeLeave","input","body","m_fromDate","from_date","m_toDate","to_date","from_year","to_year","from_leave_session","to_leave_session","leave_already_exist","message","leave_id","length","m_total_eligible","m_availed_till_date","m_close_balance","total_applied_days","clashing_sessions","LINQ","Where","w","Select","hims_f_leave_application_id","s","leave_application_code","ToArray","clashing_to_leave_session","clashing_from_leave_session","not_clashing_sessions","_","xorBy","Promise","resolve","reject","curr_from_session","curr_to_session","location","i","prev_from_leave_session_FH","FirstOrDefault","prev_from_leave_session_SH","prev_from_leave_session_FD","then","prev_to_leave_session_FH","prev_to_leave_session_FD","prev_to_leave_session_SH","prev2_from_leave_session_FH","saveF","msg","beginTransaction","rollback","module_desc","onFailure","onSuccess","numGenLeave","Date","sub_department_id","leave_type","leave_applied_from","created_by","updated_by","results","affectedRows","commit","getEmployeeLeaveHistory","undefined","invalid_input","getLeaveBalance","module","exports"],"mappings":"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","file":"leave.js","sourcesContent":["\"use strict\";\nimport extend from \"extend\";\nimport {\n  selectStatement,\n  whereCondition,\n  deleteRecord,\n  runningNumberGen,\n  releaseDBConnection,\n  jsonArrayToObject\n} from \"../../utils\";\nimport httpStatus from \"../../utils/httpStatus\";\nimport { LINQ } from \"node-linq\";\n\nimport { debugLog } from \"../../utils/logging\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n//created by irfan:\nlet getEmployeeLeaveData = (req, res, next) => {\n  // let selectWhere = {\n  //   employee_id: \"ALL\"\n  // };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    //let where = whereCondition(extend(selectWhere, req.query));\n    const year = moment().format(\"YYYY\");\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_f_employee_monthly_leave_id, employee_id, year, leave_id, L.leave_code,\\\n        L.leave_description,total_eligible, availed_till_date, close_balance\\\n        from hims_f_employee_monthly_leave  ML inner join hims_d_leave L on  \\\n        ML.leave_id=L.hims_d_leave_id and L.record_status='A'\\\n        where ML.employee_id=? and ML.year=?\",\n        [req.query.employee_id, year],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:\nlet applyEmployeeLeave = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    debugLog(\"input:\", input);\n\n    const m_fromDate = moment(input.from_date).format(\"YYYY-MM-DD\");\n    debugLog(\"m_fromDate:\", m_fromDate);\n    const m_toDate = moment(input.to_date).format(\"YYYY-MM-DD\");\n    debugLog(\"m_toDate:\", m_toDate);\n\n    const from_year = moment(input.from_date).format(\"YYYY\");\n    const to_year = moment(input.to_date).format(\"YYYY\");\n\n    debugLog(\"from_year:\", from_year);\n    debugLog(\"to_year:\", to_year);\n\n    if (\n      m_fromDate > m_toDate ||\n      (m_fromDate == m_toDate &&\n        ((input.from_leave_session == \"SH\" && input.to_leave_session == \"FH\") ||\n          (input.from_leave_session == \"SH\" && input.to_leave_session == \"FD\")))\n    ) {\n      debugLog(\"ffffffffffffffff:\");\n\n      req.records = {\n        leave_already_exist: true,\n        message: \"select proper sessions\"\n      };\n\n      next();\n      return;\n    }\n\n    if (from_year == to_year) {\n      db.getConnection((error, connection) => {\n        connection.query(\n          \"select hims_f_employee_monthly_leave_id, employee_id, year, leave_id, total_eligible,\\\n        availed_till_date, close_balance,\\\n        L.hims_d_leave_id,L.leave_code,L.leave_description,L.leave_type from \\\n        hims_f_employee_monthly_leave ML inner join\\\n        hims_d_leave L on ML.leave_id=L.hims_d_leave_id and L.record_status='A'\\\n        where ML.employee_id=? and ML.leave_id=? and  ML.year in (?)\",\n          [input.employee_id, input.leave_id, [from_year, to_year]],\n          (error, result) => {\n            if (error) {\n              releaseDBConnection(db, connection);\n              next(error);\n            }\n\n            debugLog(\"result:\", result);\n            if (result.length > 0) {\n              let m_total_eligible = result[0][\"total_eligible\"];\n              let m_availed_till_date = result[0][\"availed_till_date\"];\n              let m_close_balance = result[0][\"close_balance\"];\n\n              debugLog(\"m_total_eligible:\", m_total_eligible);\n              debugLog(\"m_availed_till_date:\", m_availed_till_date);\n              debugLog(\"m_close_balance:\", m_close_balance);\n\n              if (m_close_balance >= input.total_applied_days) {\n                //folow start here\n\n                connection.query(\n                  \"select hims_f_leave_application_id,employee_id,leave_application_code,from_leave_session,from_date,to_leave_session,\\\n                to_date from hims_f_leave_application\\\n                where cancelled='N' and ((  date(?)>=date(from_date) and date(?)<=date(to_date)) or\\\n                ( date(?)>=date(from_date) and   date(?)<=date(to_date))   or (date(from_date)>= date(?) and date(from_date)<=date(?) ) or \\\n                (date(to_date)>=date(?) and date(to_date)<= date(?) )\\\n                )and employee_id=?\",\n                  [\n                    input.from_date,\n                    input.from_date,\n                    input.to_date,\n                    input.to_date,\n                    input.from_date,\n                    input.to_date,\n                    input.from_date,\n                    input.to_date,\n                    input.employee_id\n                  ],\n                  (error, result) => {\n                    if (error) {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    }\n                    debugLog(\"result:\", result);\n                    // DISCARDING LEAVE APPLICATION\n                    if (result.length > 0) {\n                      //clashing both from_leave_session and  to_leave_session\n                      const clashing_sessions = new LINQ(result)\n                        .Where(\n                          w =>\n                            w.to_date == m_fromDate || w.from_date == m_toDate\n                        )\n                        .Select(s => {\n                          return {\n                            hims_f_leave_application_id:\n                              s.hims_f_leave_application_id,\n                            employee_id: s.employee_id,\n                            leave_application_code: s.leave_application_code,\n                            from_leave_session: s.from_leave_session,\n                            from_date: s.from_date,\n                            to_leave_session: s.to_leave_session,\n                            to_date: s.to_date\n                          };\n                        })\n                        .ToArray();\n\n                      debugLog(\"clashing_sessions:\", clashing_sessions);\n                      //clashing only  new from_leave_session  with existing  to_leave_session\n                      const clashing_to_leave_session = new LINQ(result)\n                        .Where(w => w.to_date == m_fromDate)\n                        .Select(s => {\n                          return {\n                            hims_f_leave_application_id:\n                              s.hims_f_leave_application_id,\n                            employee_id: s.employee_id,\n                            leave_application_code: s.leave_application_code,\n                            from_leave_session: s.from_leave_session,\n                            from_date: s.from_date,\n                            to_leave_session: s.to_leave_session,\n                            to_date: s.to_date\n                          };\n                        })\n                        .ToArray();\n\n                      debugLog(\n                        \"clashing_to_leave_session:\",\n                        clashing_to_leave_session\n                      );\n\n                      //clashing only  new to_leave_session with existing  from_leave_session\n                      const clashing_from_leave_session = new LINQ(result)\n                        .Where(w => w.from_date == m_toDate)\n                        .Select(s => {\n                          return {\n                            hims_f_leave_application_id:\n                              s.hims_f_leave_application_id,\n                            employee_id: s.employee_id,\n                            leave_application_code: s.leave_application_code,\n                            from_leave_session: s.from_leave_session,\n                            from_date: s.from_date,\n                            to_leave_session: s.to_leave_session,\n                            to_date: s.to_date\n                          };\n                        })\n                        .ToArray();\n\n                      debugLog(\n                        \"clashing_from_leave_session:\",\n                        clashing_from_leave_session\n                      );\n                      //----------------------------------\n\n                      let not_clashing_sessions = _.xorBy(\n                        result,\n                        clashing_sessions,\n                        \"hims_f_leave_application_id\"\n                      );\n\n                      debugLog(\"not_clashing_sessions:\", not_clashing_sessions);\n                      new Promise((resolve, reject) => {\n                        try {\n                          let curr_from_session = input.from_leave_session;\n                          let curr_to_session = input.to_leave_session;\n                          if (not_clashing_sessions.length > 0) {\n                            //\n                            debugLog(\"inside not classing loop \");\n                            releaseDBConnection(db, connection);\n                            req.records = {\n                              leave_already_exist: true,\n                              location:\n                                \"inside not_clashing_sessions: date clash not session\",\n                              message:\n                                \" leave is already there between this dates \" +\n                                not_clashing_sessions[0][\"from_date\"] +\n                                \" AND \" +\n                                not_clashing_sessions[0][\"to_date\"]\n                            };\n                            next();\n                            return;\n                          } else if (\n                            clashing_from_leave_session.length > 0 ||\n                            clashing_to_leave_session.length > 0\n                          ) {\n                            debugLog(\"inside clashing_sessions BOTH  \");\n\n                            new Promise((resolve, reject) => {\n                              try {\n                                if (clashing_from_leave_session.length > 0) {\n                                  debugLog(\n                                    \"inside clashing_from_leave_session:\"\n                                  );\n                                  for (\n                                    let i = 0;\n                                    i < clashing_from_leave_session.length;\n                                    i++\n                                  ) {\n                                    let prev_from_leave_session_FH = new LINQ([\n                                      clashing_from_leave_session[i]\n                                    ])\n                                      .Where(w => w.from_leave_session == \"FH\")\n                                      .Select(s => s.from_leave_session)\n                                      .FirstOrDefault();\n\n                                    debugLog(\n                                      \"prev_from_leave_session_FH:\",\n                                      prev_from_leave_session_FH\n                                    );\n\n                                    let prev_from_leave_session_SH = new LINQ([\n                                      clashing_from_leave_session[i]\n                                    ])\n                                      .Where(w => w.from_leave_session == \"SH\")\n                                      .Select(s => s.from_leave_session)\n                                      .FirstOrDefault();\n                                    debugLog(\n                                      \"prev_from_leave_session_SH:\",\n                                      prev_from_leave_session_SH\n                                    );\n\n                                    let prev_from_leave_session_FD = new LINQ([\n                                      clashing_from_leave_session[i]\n                                    ])\n                                      .Where(w => w.from_leave_session == \"FD\")\n                                      .Select(s => s.from_leave_session)\n                                      .FirstOrDefault();\n                                    debugLog(\n                                      \"prev_from_leave_session_FD:\",\n                                      prev_from_leave_session_FD\n                                    );\n\n                                    if (\n                                      (prev_from_leave_session_FH == \"FH\" &&\n                                        curr_to_session == \"FD\") ||\n                                      (prev_from_leave_session_SH == \"SH\" &&\n                                        curr_to_session == \"FD\") ||\n                                      (prev_from_leave_session_FD == \"FD\" &&\n                                        curr_to_session == \"FD\") ||\n                                      (prev_from_leave_session_FD == \"FD\" &&\n                                        curr_to_session == \"FH\") ||\n                                      (prev_from_leave_session_FH == \"FH\" &&\n                                        curr_to_session == \"FH\") ||\n                                      (prev_from_leave_session_FH == \"FH\" &&\n                                        curr_to_session == \"SH\" &&\n                                        curr_from_session == \"FH\") ||\n                                      (prev_from_leave_session_FD == \"FD\" &&\n                                        curr_to_session == \"SH\") ||\n                                      (prev_from_leave_session_SH == \"SH\" &&\n                                        curr_to_session == \"SH\")\n                                    ) {\n                                      debugLog(\"rejction two:\");\n                                      //clashing only  new to_leave_session with existing  from_leave_session\n                                      releaseDBConnection(db, connection);\n                                      req.records = {\n                                        leave_already_exist: true,\n                                        location:\n                                          \"inside clashing_from_leave_session: session error: comparing prev_from_leave_session with  current:to_leave_session \",\n                                        message:\n                                          \"leave is already there between this dates \" +\n                                          clashing_from_leave_session[i][\n                                            \"from_date\"\n                                          ] +\n                                          \" AND \" +\n                                          clashing_from_leave_session[i][\n                                            \"to_date\"\n                                          ]\n                                      };\n                                      next();\n                                      return;\n                                    }\n\n                                    if (\n                                      i ==\n                                      clashing_from_leave_session.length - 1\n                                    ) {\n                                      debugLog(\n                                        \"clashing_from_leave_session last iteration:\"\n                                      );\n                                      resolve({});\n                                    }\n                                  }\n                                } else {\n                                  resolve({});\n                                }\n                              } catch (e) {\n                                reject(e);\n                              }\n                            }).then(fromSessionREsult => {\n                              if (clashing_to_leave_session.length > 0) {\n                                debugLog(\"inside clashing_to_leave_session:\");\n\n                                for (\n                                  let i = 0;\n                                  i < clashing_to_leave_session.length;\n                                  i++\n                                ) {\n                                  //fetch all previous to_leave_sessions\n\n                                  let prev_to_leave_session_FH = new LINQ([\n                                    clashing_to_leave_session[i]\n                                  ])\n                                    .Where(w => w.to_leave_session == \"FH\")\n                                    .Select(s => s.to_leave_session)\n                                    .FirstOrDefault();\n\n                                  debugLog(\n                                    \"prev_to_leave_session_FH:\",\n                                    prev_to_leave_session_FH\n                                  );\n\n                                  let prev_to_leave_session_FD = new LINQ([\n                                    clashing_to_leave_session[i]\n                                  ])\n                                    .Where(w => w.to_leave_session == \"FD\")\n                                    .Select(s => s.to_leave_session)\n                                    .FirstOrDefault();\n\n                                  debugLog(\n                                    \"prev_to_leave_session_FD:\",\n                                    prev_to_leave_session_FD\n                                  );\n\n                                  let prev_to_leave_session_SH = new LINQ([\n                                    clashing_to_leave_session[i]\n                                  ])\n                                    .Where(w => w.to_leave_session == \"SH\")\n                                    .Select(s => s.to_leave_session)\n                                    .FirstOrDefault();\n\n                                  debugLog(\n                                    \"prev_to_leave_session_SH:\",\n                                    prev_to_leave_session_SH\n                                  );\n\n                                  let prev2_from_leave_session_FH = new LINQ([\n                                    clashing_to_leave_session[i]\n                                  ])\n                                    .Where(w => w.from_leave_session == \"FH\")\n                                    .Select(s => s.from_leave_session)\n                                    .FirstOrDefault();\n\n                                  debugLog(\n                                    \"2nd time prev_to_leave_session_SH:\",\n                                    prev2_from_leave_session_FH\n                                  );\n                                  //rejection of to_leave_sessions\n\n                                  if (\n                                    (prev_to_leave_session_FH == \"FH\" &&\n                                      curr_from_session == \"FH\") ||\n                                    (prev_to_leave_session_FD == \"FD\" &&\n                                      curr_from_session == \"FH\") ||\n                                    (prev2_from_leave_session_FH == \"FH\" &&\n                                      prev_to_leave_session_SH == \"SH\" &&\n                                      curr_from_session == \"FH\") ||\n                                    ((prev_to_leave_session_FD == \"FD\" &&\n                                      curr_from_session == \"SH\") ||\n                                      (prev_to_leave_session_SH == \"SH\" &&\n                                        curr_from_session == \"SH\")) ||\n                                    ((prev_to_leave_session_FH == \"FH\" &&\n                                      curr_from_session == \"FD\") ||\n                                      (prev_to_leave_session_FD == \"FD\" &&\n                                        curr_from_session == \"FD\") ||\n                                      (prev_to_leave_session_SH == \"SH\" &&\n                                        curr_from_session == \"FD\"))\n                                  ) {\n                                    debugLog(\"rejction_one:\");\n                                    //clashing only  new from_leave_session  with existing  to_leave_session\n                                    releaseDBConnection(db, connection);\n                                    req.records = {\n                                      leave_already_exist: true,\n                                      location:\n                                        \" inside clashing_to_leave_session:session error: comparing prev_to_leave_session with  current: from_leave_session \",\n                                      message:\n                                        \"leave is already there between this dates \" +\n                                        clashing_to_leave_session[i][\n                                          \"from_date\"\n                                        ] +\n                                        \" AND \" +\n                                        clashing_to_leave_session[i][\"to_date\"]\n                                    };\n                                    next();\n                                    return;\n                                  }\n\n                                  if (\n                                    i ==\n                                    clashing_to_leave_session.length - 1\n                                  ) {\n                                    debugLog(\n                                      \"clashing_to_leave_session last iteration:\"\n                                    );\n                                    saveF(req, db, next, connection, input, 5);\n                                  }\n                                }\n                              } else {\n                                debugLog(\"else of clashing_to_leave_session\");\n                                saveF(req, db, next, connection, input, 6);\n                              }\n                            });\n                          } else {\n                            resolve({});\n                          }\n                        } catch (e) {\n                          reject(e);\n                        }\n                      }).then(noClashResult => {\n                        saveF(req, db, next, connection, input, 1);\n                      });\n                    } else {\n                      debugLog(\"Accept leave application here  with Num gen\");\n                      saveF(req, db, next, connection, input, 2);\n                    }\n                  }\n                );\n\n                // req.records = result;\n                // next();\n              } else {\n                req.records = {\n                  leave_already_exist: true,\n                  message: \"leave application exceed total eligible leaves\"\n                };\n                releaseDBConnection(db, connection);\n                next();\n                return;\n              }\n            } else {\n              req.records = {\n                leave_already_exist: true,\n                message: \"you cant apply for this leave type\"\n              };\n              releaseDBConnection(db, connection);\n              next();\n              return;\n            }\n          }\n        );\n      });\n    } else {\n      req.records = {\n        leave_already_exist: true,\n        message: \"cannot apply leave for next year \"\n      };\n\n      next();\n      return;\n    }\n  } catch (e) {\n    next(e);\n  }\n};\nlet saveF = (req, db, next, connection, input, msg) => {\n  connection.beginTransaction(error => {\n    if (error) {\n      connection.rollback(() => {\n        releaseDBConnection(db, connection);\n        next(error);\n      });\n    }\n\n    debugLog(\"inside saveF:\", msg);\n    new Promise((resolve, reject) => {\n      try {\n        runningNumberGen({\n          db: connection,\n          module_desc: [\"EMPLOYEE_LEAVE\"],\n          onFailure: error => {\n            reject(error);\n          },\n          onSuccess: result => {\n            resolve(result);\n          }\n        });\n      } catch (e) {\n        connection.rollback(() => {\n          releaseDBConnection(db, connection);\n          reject(e);\n        });\n      }\n    }).then(numGenLeave => {\n      connection.query(\n        \"INSERT INTO `hims_f_leave_application` (leave_application_code,employee_id,application_date,sub_department_id,leave_id,leave_type,\\\n    from_date,to_date,from_leave_session,to_leave_session,leave_applied_from,total_applied_days, created_date, created_by, updated_date, updated_by)\\\n    VALUE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n        [\n          numGenLeave[0][\"completeNumber\"],\n          input.employee_id,\n          new Date(),\n          input.sub_department_id,\n          input.leave_id,\n          input.leave_type,\n          input.from_date,\n          input.to_date,\n          input.from_leave_session,\n          input.to_leave_session,\n          input.leave_applied_from,\n          input.total_applied_days,\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, results) => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n          debugLog(\"inside leave application\");\n          if (results.affectedRows > 0) {\n            debugLog(\"affectedRows\");\n\n            connection.commit(error => {\n              if (error) {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n\n              debugLog(\"commit\");\n              releaseDBConnection(db, connection);\n              req.records = results;\n              next();\n            });\n          } else {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n        }\n      );\n    });\n  });\n};\n\n//created by irfan:\nlet getEmployeeLeaveHistory = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    if (req.query.employee_id != \"null\" && req.query.employee_id != undefined) {\n      db.getConnection((error, connection) => {\n        connection.query(\n          \"select hims_f_leave_application_id,leave_application_code,employee_id,application_date,\\\n        leave_id,from_date,to_date,from_leave_session,to_leave_session,\\\n        leave_applied_from,total_applied_days,total_approved_days,status,authorized,remarks,L.leave_code,\\\n        L.leave_description from hims_f_leave_application LA inner join hims_d_leave L on\\\n         LA.leave_id=L.hims_d_leave_id and L.record_status='A'\\\n         where LA.record_status='A' and LA.employee_id=? order by hims_f_leave_application_id desc\",\n          [req.query.employee_id],\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n            req.records = result;\n            next();\n          }\n        );\n      });\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet getLeaveBalance = (req, res, next) => {\n  // let selectWhere = {\n  //   employee_id: \"ALL\"\n  // };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    //let where = whereCondition(extend(selectWhere, req.query));\n    const from_year = moment(input.from_date).format(\"YYYY\");\n    const to_year = moment(input.to_date).format(\"YYYY\");\n\n    debugLog(\"from_year:\", from_year);\n    debugLog(\"to_year:\", to_year);\n    if (from_year == to_year) {\n      db.getConnection((error, connection) => {\n        connection.query(\n          \"select hims_f_employee_monthly_leave_id, employee_id, year, leave_id, total_eligible,\\\n        availed_till_date, close_balance,\\\n        L.hims_d_leave_id,L.leave_code,L.leave_description,L.leave_type from \\\n        hims_f_employee_monthly_leave ML inner join\\\n        hims_d_leave L on ML.leave_id=L.hims_d_leave_id and L.record_status='A'\\\n        where ML.employee_id=? and ML.leave_id=? and  ML.year in (?)\",\n          [input.employee_id, input.leave_id, [from_year, to_year]],\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              releaseDBConnection(db, connection);\n              next(error);\n            }\n\n            debugLog(\"result:\", result);\n            if (result.length > 0) {\n              let m_total_eligible = result[0][\"total_eligible\"];\n              let m_availed_till_date = result[0][\"availed_till_date\"];\n              let m_close_balance = result[0][\"close_balance\"];\n\n              debugLog(\"m_total_eligible:\", m_total_eligible);\n              debugLog(\"m_availed_till_date:\", m_availed_till_date);\n              debugLog(\"m_close_balance:\", m_close_balance);\n\n              if (m_close_balance >= input.total_applied_days) {\n                //folow start here\n\n                req.records = result;\n                next();\n              } else {\n                req.records = {\n                  leave_already_exist: true,\n                  message: \"leave application exceed total eligible leaves\"\n                };\n                next();\n                return;\n              }\n            } else {\n              req.records = {\n                leave_already_exist: true,\n                message: \"you cant apply for this leave type\"\n              };\n              next();\n              return;\n            }\n          }\n        );\n      });\n    } else {\n      req.records = {\n        leave_already_exist: true,\n        message: \"cannot apply leave for next year \"\n      };\n      next();\n      return;\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n//only DATE validation\n// select hims_f_leave_application_id,employee_id,leave_application_code,from_date,to_date from hims_f_leave_application\n// where cancelled='N' and (('2018-12-01'>=from_date and '2018-12-01'<=to_date) or ('2018-12-04'>=from_date and\n// '2018-12-04'<=to_date) ) and employee_id=94\nmodule.exports = {\n  getEmployeeLeaveData,\n  applyEmployeeLeave,\n  getEmployeeLeaveHistory,\n  getLeaveBalance\n};\n"]}