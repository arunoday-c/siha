{"version":3,"sources":["../../../../src/Payroll/model/loan.js"],"names":["addLoanApplication","req","res","next","db","httpStatus","dataBaseNotInitilizedError","input","body","getConnection","error","connection","beginTransaction","rollback","Promise","resolve","reject","module_desc","onFailure","onSuccess","result","e","then","query","numGenLoan","employee_id","loan_id","application_reason","Date","loan_amount","start_month","start_year","loan_tenure","installment_amount","created_by","updated_by","results","affectedRows","commit","records","getLoanApplication","employee","range","from_date","to_date","auth_level","userIdentity","getLoanLevels","userPrivilege","loan_authorize_privilege","auth_levels","push","name","value","authorizeLoan","invalid_input","authorized","approved_amount","hims_f_loan_application_id","rejResult","qry","module","exports"],"mappings":"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","file":"loan.js","sourcesContent":["\"use strict\";\nimport extend from \"extend\";\nimport {\n  selectStatement,\n  whereCondition,\n  deleteRecord,\n  runningNumberGen,\n  releaseDBConnection,\n  jsonArrayToObject\n} from \"../../utils\";\nimport httpStatus from \"../../utils/httpStatus\";\n//import { LINQ } from \"node-linq\";\n\nimport { debugLog } from \"../../utils/logging\";\n//import moment from \"moment\";\n\n//created by irfan:\nlet addLoanApplication = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n\n        new Promise((resolve, reject) => {\n          try {\n            runningNumberGen({\n              db: connection,\n              module_desc: [\"EMPLOYEE_LOAN\"],\n              onFailure: error => {\n                reject(error);\n              },\n              onSuccess: result => {\n                resolve(result);\n              }\n            });\n          } catch (e) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              reject(e);\n            });\n          }\n        }).then(numGenLoan => {\n          connection.query(\n            \"INSERT INTO `hims_f_loan_application` (loan_application_number,employee_id,loan_id,\\\n              application_reason,loan_application_date,loan_amount,start_month,start_year,loan_tenure,\\\n              installment_amount, pending_loan,created_date, created_by, updated_date, updated_by)\\\n        VALUE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n            [\n              numGenLoan[0][\"completeNumber\"],\n              input.employee_id,\n              input.loan_id,\n              input.application_reason,\n              new Date(),\n              input.loan_amount,\n              input.start_month,\n              input.start_year,\n              input.loan_tenure,\n              input.installment_amount,\n              input.loan_amount,\n              new Date(),\n              input.created_by,\n              new Date(),\n              input.updated_by\n            ],\n            (error, results) => {\n              if (error) {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n              debugLog(\"inside loan application\");\n              if (results.affectedRows > 0) {\n                connection.commit(error => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n\n                  debugLog(\"commit\");\n                  releaseDBConnection(db, connection);\n                  req.records = results;\n                  next();\n                });\n              } else {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n            }\n          );\n        });\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:\nlet getLoanApplication = (req, res, next) => {\n  // let selectWhere = {\n  //   hims_f_loan_application_id: \"ALL\"\n  // };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    // let where = whereCondition(extend(selectWhere, req.query));\n\n    let employee = \"\";\n    let range = \"\";\n\n    if (\n      req.query.employee_id != \"\" &&\n      req.query.employee_id != null &&\n      req.query.employee_id != \"null\"\n    ) {\n      employee = ` and employee_id=${req.query.employee_id} `;\n    }\n\n    if (\n      req.query.from_date != \"null\" &&\n      req.query.from_date != \"\" &&\n      req.query.from_date != null &&\n      req.query.to_date != \"null\" &&\n      req.query.to_date != \"\" &&\n      req.query.to_date != null\n    ) {\n      range = ` and date(loan_application_date)\nbetween date('${req.query.from_date}') and date('${req.query.to_date}') `;\n    }\n\n    let auth_level = \"\";\n    if (req.query.auth_level == \"L1\") {\n      auth_level = \" and authorized1='P' \";\n    } else if (req.query.auth_level == \"L2\") {\n      auth_level = \" and authorized1='A' and authorized2='P' \";\n    }\n    debugLog(\"level:\", auth_level);\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_f_loan_application_id,loan_application_number,employee_id,loan_id,L.loan_code,L.loan_description,\\\n        L.loan_account,L.loan_limit_type,L.loan_maximum_amount,LA.application_reason,\\\n        loan_application_date,loan_authorized,authorized_date,authorized_by,loan_closed,loan_amount,approved_amount,\\\n        start_month,start_year,loan_tenure,installment_amount,pending_loan,authorized1_by,authorized1_date,\\\n        authorized1,authorized2_by,authorized2_date,authorized2 ,E.full_name as employee_name ,E.employee_code from hims_f_loan_application LA  inner join \\\n        hims_d_loan L on LA.loan_id=L.hims_d_loan_id  inner join hims_d_employee E on LA.employee_id=E.hims_d_employee_id\\\n         and E.record_status='A' where L.record_status='A' \" +\n          employee +\n          \"\" +\n          range +\n          \"\" +\n          auth_level,\n\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n\n          debugLog(\"user iden:\", req.userIdentity);\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:\nlet getLoanLevels = (req, res, next) => {\n  try {\n    let userPrivilege = req.userIdentity.loan_authorize_privilege;\n\n    let auth_levels = [];\n    switch (userPrivilege) {\n      case \"AL1\":\n        auth_levels.push({ name: \"Level 1\", value: 1 });\n        break;\n      case \"AL2\":\n        auth_levels.push(\n          { name: \"Level 2\", value: 2 },\n          { name: \"Level 1\", value: 1 }\n        );\n        break;\n    }\n\n    debugLog(\"auth_levels:\", auth_levels);\n    debugLog(\"user iden:\", req.userIdentity);\n    req.records = { auth_levels };\n    next();\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:\nlet authorizeLoan = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.body);\n\n    if (input.auth_level != \"L1\" && input.auth_level != \"L2\") {\n      debugLog(\"L1 and L2 not defind\");\n      req.records = { invalid_input: true };\n      next();\n    } else if (input.auth_level == \"L1\") {\n      db.getConnection((error, connection) => {\n        connection.beginTransaction(error => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n          connection.query(\n            \"UPDATE hims_f_loan_application SET authorized1_by=?,authorized1_date=?,\\\n          authorized1=?,approved_amount=?,start_year=?,start_month=?,installment_amount=?,\\\n          loan_tenure=?, updated_date=?, updated_by=?  WHERE hims_f_loan_application_id=?\",\n\n            [\n              input.updated_by,\n              new Date(),\n              input.authorized,\n              input.approved_amount,\n              input.start_year,\n              input.start_month,\n              input.installment_amount,\n              input.loan_tenure,\n              new Date(),\n              input.updated_by,\n              input.hims_f_loan_application_id\n            ],\n            (error, result) => {\n              if (error) {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n              debugLog(\"L1 result:\", result);\n              if (result.affectedRows > 0 && input.authorized == \"R\") {\n                connection.query(\n                  \"update hims_f_loan_application set loan_authorized='REJ'\\\n                  where record_status='A' and loan_authorized='PEN' and hims_f_loan_application_id=?\",\n                  [input.hims_f_loan_application_id],\n                  (error, rejResult) => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n\n                    connection.commit(error => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                      releaseDBConnection(db, connection);\n                      req.records = rejResult;\n                      debugLog(\"L1 rejResult:\", rejResult);\n                      next();\n                    });\n                  }\n                );\n              } else if (result.affectedRows > 0) {\n                connection.commit(error => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n                  releaseDBConnection(db, connection);\n                  req.records = result;\n                  next();\n                });\n              } else {\n                req.records = { invalid_input: true };\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n            }\n          );\n        });\n      });\n    } else if (input.auth_level == \"L2\") {\n      db.getConnection((error, connection) => {\n        connection.beginTransaction(error => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n          connection.query(\n            \"UPDATE hims_f_loan_application SET authorized2_by=?,authorized2_date=?,\\\n            authorized2=?,approved_amount=?,start_year=?,start_month=?,installment_amount=?,\\\n          loan_tenure=?, updated_date=?, updated_by=?  WHERE hims_f_loan_application_id=?\",\n\n            [\n              input.updated_by,\n              new Date(),\n              input.authorized,\n              input.approved_amount,\n              input.start_year,\n              input.start_month,\n              input.installment_amount,\n              input.loan_tenure,\n              new Date(),\n              input.updated_by,\n              input.hims_f_loan_application_id\n            ],\n            (error, result) => {\n              if (error) {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n              debugLog(\"L2 result:\", result);\n              if (\n                result.affectedRows > 0 &&\n                (input.authorized == \"R\" || input.authorized == \"A\")\n              ) {\n                let qry = \"\";\n\n                if (input.authorized == \"R\") {\n                  qry = `update hims_f_loan_application set loan_authorized='REJ'\\\n                  where record_status='A' and loan_authorized='PEN' and hims_f_loan_application_id=${\n                    input.hims_f_loan_application_id\n                  }`;\n                } else if (input.authorized == \"A\") {\n                  qry = `update hims_f_loan_application set loan_authorized='APR'\\\n                  where record_status='A' and loan_authorized='PEN' and hims_f_loan_application_id=${\n                    input.hims_f_loan_application_id\n                  }`;\n                }\n                connection.query(qry, (error, rejResult) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n\n                  connection.commit(error => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n                    releaseDBConnection(db, connection);\n                    req.records = rejResult;\n                    next();\n                  });\n                });\n              } else if (result.affectedRows > 0) {\n                connection.commit(error => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n                  releaseDBConnection(db, connection);\n                  req.records = result;\n                  next();\n                });\n              } else {\n                req.records = { invalid_input: true };\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n            }\n          );\n        });\n      });\n    } else {\n      debugLog(\"top else\");\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addLoanApplication,\n  getLoanApplication,\n  getLoanLevels,\n  authorizeLoan\n};\n"]}