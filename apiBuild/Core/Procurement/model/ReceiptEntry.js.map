{"version":3,"sources":["../../../../src/Procurement/model/ReceiptEntry.js"],"names":["addReceiptEntry","req","res","next","db","httpStatus","dataBaseNotInitilizedError","input","body","connection","requestCounter","Promise","resolve","reject","counter","module_desc","onFailure","error","onSuccess","result","then","documentCode","completeNumber","today","format","year","period","query","grn_for","pharmcy_location_id","inventory_location_id","location_type","vendor_id","po_id","dn_id","payment_terms","comment","description","sub_total","detail_discount","extended_total","sheet_level_discount_percent","sheet_level_discount_amount","net_total","total_tax","net_payable","additional_cost","reciept_total","userIdentity","algaeh_d_app_user_id","Date","headerResult","rollback","insertId","insurtColumns","join","sampleInputObject","arrayObj","dn_entry_detail","newFieldToInsert","detailResult","records","grn_number","hims_f_procurement_grn_header_id","e","getReceiptEntry","selectWhere","where","getConnection","condition","values","length","receipt_entry_detail","updateReceiptEntry","beginTransaction","inputParam","posted","details","qry","i","recieved_quantity","batchno","rejected_quantity","outstanding_quantity","expiry_date","hims_f_procurement_grn_detail_id","updateDNEntry","complete","partial_recived","LINQ","Where","w","ToArray","dn_detail_id","dnrecords","module","exports"],"mappings":"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","file":"ReceiptEntry.js","sourcesContent":["\"use strict\";\nimport {\n  whereCondition,\n  releaseDBConnection,\n  jsonArrayToObject,\n  runningNumberGen\n} from \"../../utils\";\nimport extend from \"extend\";\nimport httpStatus from \"../../utils/httpStatus\";\nimport { debugLog } from \"../../utils/logging\";\nimport moment, { now } from \"moment\";\nimport { LINQ } from \"node-linq\";\nimport Promise from \"bluebird\";\n\n//created by Nowshad: to save Receipt Entry\nlet addReceiptEntry = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    debugLog(\"ReceiptEntry: \", \"Delivery Note Entry\");\n    let connection = req.connection;\n\n    let requestCounter = 1;\n\n    return new Promise((resolve, reject) => {\n      runningNumberGen({\n        db: connection,\n        counter: requestCounter,\n        module_desc: [\"RE_NUM\"],\n        onFailure: error => {\n          reject(error);\n        },\n        onSuccess: result => {\n          resolve(result);\n        }\n      });\n    }).then(result => {\n      let documentCode = result[0].completeNumber;\n\n      debugLog(\"documentCode:\", documentCode);\n\n      let today = moment().format(\"YYYY-MM-DD\");\n      debugLog(\"today:\", today);\n\n      let year = moment().format(\"YYYY\");\n      debugLog(\"onlyyear:\", year);\n\n      let period = moment().format(\"MM\");\n      debugLog(\"period:\", period);\n\n      connection.query(\n        \"INSERT INTO `hims_f_procurement_grn_header` (grn_number,grn_date, grn_for, `year`, period, pharmcy_location_id,\\\n              inventory_location_id,location_type,vendor_id, po_id, dn_id, payment_terms, comment, description, sub_total, \\\n              detail_discount, extended_total,sheet_level_discount_percent, sheet_level_discount_amount,\\\n              net_total,total_tax, net_payable, additional_cost,reciept_total, created_by,created_date, \\\n              updated_by,updated_date) \\\n            VALUE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n        [\n          documentCode,\n          today,\n          input.grn_for,\n          year,\n          period,\n          input.pharmcy_location_id,\n          input.inventory_location_id,\n          input.location_type,\n          input.vendor_id,\n          input.po_id,\n          input.dn_id,\n\n          input.payment_terms,\n          input.comment,\n          input.description,\n          input.sub_total,\n          input.detail_discount,\n          input.extended_total,\n          input.sheet_level_discount_percent,\n          input.sheet_level_discount_amount,\n\n          input.net_total,\n          input.total_tax,\n          input.net_payable,\n          input.additional_cost,\n          input.reciept_total,\n\n          req.userIdentity.algaeh_d_app_user_id,\n          new Date(),\n          req.userIdentity.algaeh_d_app_user_id,\n          new Date()\n        ],\n        (error, headerResult) => {\n          if (error) {\n            debugLog(\"error: \", \"Check\");\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n\n          debugLog(\" pos header id :\", headerResult);\n\n          if (headerResult.insertId != null) {\n            const insurtColumns = [\n              \"phar_item_category\",\n              \"phar_item_group\",\n              \"phar_item_id\",\n              \"inv_item_category_id\",\n              \"inv_item_group_id\",\n              \"inv_item_id\",\n              \"po_quantity\",\n              \"dn_quantity\",\n              \"recieved_quantity\",\n              \"pharmacy_uom_id\",\n              \"inventory_uom_id\",\n              \"unit_cost\",\n              \"extended_cost\",\n              \"discount_percentage\",\n              \"discount_amount\",\n              \"net_extended_cost\",\n              \"tax_percentage\",\n              \"tax_amount\",\n              \"total_amount\",\n              \"batchno_expiry_required\",\n              \"batchno\",\n              \"expiry_date\"\n            ];\n\n            connection.query(\n              \"INSERT INTO hims_f_procurement_grn_detail(\" +\n                insurtColumns.join(\",\") +\n                \",grn_header_id) VALUES ?\",\n              [\n                jsonArrayToObject({\n                  sampleInputObject: insurtColumns,\n                  arrayObj: req.body.dn_entry_detail,\n                  newFieldToInsert: [headerResult.insertId],\n                  req: req\n                })\n              ],\n              (error, detailResult) => {\n                if (error) {\n                  debugLog(\"Error: \", error);\n\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                }\n\n                req.records = {\n                  grn_number: documentCode,\n                  hims_f_procurement_grn_header_id: headerResult.insertId,\n                  year: year,\n                  period: period\n                };\n                next();\n              }\n            );\n          } else {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n        }\n      );\n    });\n    // });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to get ReceiptEntry\nlet getReceiptEntry = (req, res, next) => {\n  let selectWhere = {\n    grn_number: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    debugLog(\"where\", where);\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"SELECT * from  hims_f_procurement_grn_header\\\n          where \" +\n          where.condition,\n        where.values,\n        (error, headerResult) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          debugLog(\"result: \", headerResult);\n          if (headerResult.length != 0) {\n            debugLog(\n              \"hims_f_procurement_grn_header_id: \",\n              headerResult[0].hims_f_procurement_grn_header_id\n            );\n            connection.query(\n              \"select * from hims_f_procurement_grn_detail where grn_header_id=?\",\n              headerResult[0].hims_f_procurement_grn_header_id,\n              (error, receipt_entry_detail) => {\n                if (error) {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                }\n                req.records = {\n                  ...headerResult[0],\n                  ...{ receipt_entry_detail }\n                };\n                releaseDBConnection(db, connection);\n                next();\n              }\n            );\n          } else {\n            req.records = headerResult;\n            releaseDBConnection(db, connection);\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet updateReceiptEntry = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    // db.getConnection((error, connection) => {\n    //   if (error) {\n    //     next(error);\n    //   }\n    let connection = req.connection;\n    connection.beginTransaction(error => {\n      if (error) {\n        connection.rollback(() => {\n          releaseDBConnection(db, connection);\n          next(error);\n        });\n      }\n      let inputParam = extend({}, req.body);\n      debugLog(\"req.body: \", req.body);\n\n      connection.query(\n        \"UPDATE `hims_f_procurement_grn_header` SET `posted`=?, `posted_date`=?, `posted_by`=? \\\n      WHERE `hims_f_procurement_grn_header_id`=?\",\n        [\n          inputParam.posted,\n          new Date(),\n          req.userIdentity.algaeh_d_app_user_id,\n          inputParam.hims_f_procurement_grn_header_id\n        ],\n        (error, result) => {\n          debugLog(\"result: \", result);\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n\n          if (result !== \"\" && result != null) {\n            let details = inputParam.receipt_entry_detail;\n\n            let qry = \"\";\n\n            for (let i = 0; i < details.length; i++) {\n              qry +=\n                \" UPDATE `hims_f_procurement_grn_detail` SET recieved_quantity='\" +\n                details[i].recieved_quantity +\n                \"',batchno='\" +\n                details[i].batchno +\n                \"',rejected_quantity='\" +\n                (details[i].rejected_quantity || 0) +\n                \"',outstanding_quantity='\" +\n                (details[i].outstanding_quantity || 0);\n\n              if (details[i].expiry_date != null) {\n                qry += \"',expiry_date='\" + (details[i].expiry_date || null);\n              }\n              qry +=\n                \"' WHERE hims_f_procurement_grn_detail_id='\" +\n                details[i].hims_f_procurement_grn_detail_id +\n                \"';\";\n            }\n            debugLog(\"qry: \", qry);\n\n            if (qry != \"\") {\n              connection.query(qry, (error, detailResult) => {\n                if (error) {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                }\n                req.records = detailResult;\n                next();\n                // connection.commit(error => {\n                //   if (error) {\n                //     connection.rollback(() => {\n                //       releaseDBConnection(db, connection);\n                //       next(error);\n                //     });\n                //   }\n                //   releaseDBConnection(db, connection);\n                //   req.records = detailResult;\n                //   next();\n                // });\n              });\n            } else {\n              releaseDBConnection(db, connection);\n              req.records = {};\n              next();\n            }\n          } else {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              req.records = {};\n              next();\n            });\n          }\n        }\n      );\n    });\n    // });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to Update PO Entry\nlet updateDNEntry = (req, res, next) => {\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  let connection = req.connection;\n  let inputParam = extend({}, req.body);\n  let complete = \"Y\";\n  const partial_recived = new LINQ(inputParam.receipt_entry_detail)\n    .Where(w => w.outstanding_quantity != 0)\n    .ToArray();\n\n  if (partial_recived.length > 0) {\n    complete = \"N\";\n  }\n\n  debugLog(\"inputParam.dn_id: \", inputParam.dn_id);\n  connection.query(\n    \"UPDATE `hims_f_procurement_dn_header` SET `is_completed`=?, `completed_date`=?, `updated_by` = ?,`updated_date` = ? \\\n      WHERE `hims_f_procurement_dn_header_id`=?\",\n    [\n      complete,\n      new Date(),\n      req.userIdentity.algaeh_d_app_user_id,\n      new Date(),\n      inputParam.dn_id\n    ],\n    (error, result) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n\n      if (result != \"\" && result != null) {\n        let details = inputParam.receipt_entry_detail;\n\n        let qry = \"\";\n\n        for (let i = 0; i < details.length; i++) {\n          qry +=\n            \" UPDATE `hims_f_procurement_dn_detail` SET quantity_outstanding='\" +\n            details[i].outstanding_quantity +\n            \"' WHERE hims_f_procurement_dn_detail_id='\" +\n            details[i].dn_detail_id +\n            \"';\";\n        }\n        debugLog(\"qry: \", qry);\n\n        if (qry != \"\") {\n          connection.query(qry, (error, detailResult) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            req.dnrecords = detailResult;\n\n            next();\n          });\n        } else {\n          releaseDBConnection(db, connection);\n          req.records = {};\n          next();\n        }\n      } else {\n        connection.rollback(() => {\n          releaseDBConnection(db, connection);\n          req.records = {};\n          next();\n        });\n      }\n      // req.data = req.records.delivery_note_number;\n      // next();\n    }\n  );\n};\n\nmodule.exports = {\n  addReceiptEntry,\n  getReceiptEntry,\n  updateReceiptEntry,\n  updateDNEntry\n};\n"]}