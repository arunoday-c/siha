{"version":3,"sources":["../../../../src/Procurement/model/DeliveryNoteEntry.js"],"names":["addDeliveryNoteEntry","req","res","next","db","httpStatus","dataBaseNotInitilizedError","input","body","connection","beginTransaction","error","rollback","requestCounter","Promise","resolve","reject","counter","module_desc","onFailure","onSuccess","result","then","documentCode","completeNumber","today","format","query","dn_type","dn_from","pharmcy_location_id","inventory_location_id","location_type","vendor_id","purchase_order_id","from_multiple_purchase_orders","payment_terms","comment","sub_total","detail_discount","extended_total","sheet_level_discount_percent","sheet_level_discount_amount","description","net_total","total_tax","net_payable","userIdentity","algaeh_d_app_user_id","Date","headerResult","insertId","insurtColumns","join","sampleInputObject","arrayObj","dn_entry_detail","newFieldToInsert","detailResult","records","delivery_note_number","hims_f_procurement_dn_header_id","e","getDeliveryNoteEntry","selectWhere","where","getConnection","condition","values","length","updateDeliveryNoteEntry","inputParam","authorize1","hims_f_procurement_po_header_id","details","qry","i","authorize_quantity","rejected_quantity","quantity_recieved","quantity_outstanding","hims_f_procurement_po_detail_id","commit","getAuthPurchaseList","strQuery","updatePOEntry","complete","partial_recived","LINQ","Where","w","ToArray","purchase_order_detail_id","porecords","module","exports"],"mappings":"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","file":"DeliveryNoteEntry.js","sourcesContent":["\"use strict\";\nimport {\n  whereCondition,\n  releaseDBConnection,\n  jsonArrayToObject,\n  runningNumberGen\n} from \"../../utils\";\nimport extend from \"extend\";\nimport httpStatus from \"../../utils/httpStatus\";\nimport { debugLog } from \"../../utils/logging\";\nimport moment, { now } from \"moment\";\nimport { LINQ } from \"node-linq\";\nimport Promise from \"bluebird\";\n\n//created by Nowshad: to save Delivery Note Entry\nlet addDeliveryNoteEntry = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    debugLog(\"DeliveryNoteEntry: \", \"Delivery Note Entry\");\n    let connection = req.connection;\n\n    connection.beginTransaction(error => {\n      if (error) {\n        connection.rollback(() => {\n          releaseDBConnection(db, connection);\n          next(error);\n        });\n      }\n      let requestCounter = 1;\n\n      return new Promise((resolve, reject) => {\n        runningNumberGen({\n          db: connection,\n          counter: requestCounter,\n          module_desc: [\"DN_NUM\"],\n          onFailure: error => {\n            reject(error);\n          },\n          onSuccess: result => {\n            resolve(result);\n          }\n        });\n      }).then(result => {\n        let documentCode = result[0].completeNumber;\n\n        debugLog(\"documentCode:\", documentCode);\n\n        let today = moment().format(\"YYYY-MM-DD\");\n        debugLog(\"today:\", today);\n\n        connection.query(\n          \"INSERT INTO `hims_f_procurement_dn_header` (delivery_note_number,dn_date,dn_type,dn_from, pharmcy_location_id,\\\n              inventory_location_id,location_type,vendor_id, purchase_order_id, from_multiple_purchase_orders, \\\n              payment_terms, comment, sub_total, detail_discount, extended_total,sheet_level_discount_percent, \\\n              sheet_level_discount_amount,description,net_total,total_tax, net_payable, created_by,created_date, \\\n              updated_by,updated_date) \\\n            VALUE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n          [\n            documentCode,\n            today,\n            input.dn_type,\n            input.dn_from,\n            input.pharmcy_location_id,\n            input.inventory_location_id,\n            input.location_type,\n            input.vendor_id,\n            input.purchase_order_id,\n            input.from_multiple_purchase_orders,\n            input.payment_terms,\n            input.comment,\n            input.sub_total,\n            input.detail_discount,\n            input.extended_total,\n            input.sheet_level_discount_percent,\n            input.sheet_level_discount_amount,\n            input.description,\n\n            input.net_total,\n            input.total_tax,\n            input.net_payable,\n\n            req.userIdentity.algaeh_d_app_user_id,\n            new Date(),\n            req.userIdentity.algaeh_d_app_user_id,\n            new Date()\n          ],\n          (error, headerResult) => {\n            if (error) {\n              debugLog(\"error: \", \"Check\");\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n\n            debugLog(\" pos header id :\", headerResult);\n\n            if (headerResult.insertId != null) {\n              const insurtColumns = [\n                \"phar_item_category\",\n                \"phar_item_group\",\n                \"phar_item_id\",\n                \"inv_item_category_id\",\n                \"inv_item_group_id\",\n                \"inv_item_id\",\n                \"po_quantity\",\n                \"dn_quantity\",\n                \"quantity_outstanding\",\n                \"pharmacy_uom_id\",\n                \"inventory_uom_id\",\n                \"unit_cost\",\n                \"extended_cost\",\n                \"discount_percentage\",\n                \"discount_amount\",\n                \"net_extended_cost\",\n                \"tax_percentage\",\n                \"tax_amount\",\n                \"total_amount\",\n                \"item_type\",\n                \"quantity_recieved_todate\",\n                \"batchno_expiry_required\",\n                \"batchno\",\n                \"expiry_date\",\n                \"purchase_order_header_id\",\n                \"purchase_order_detail_id\"\n              ];\n\n              connection.query(\n                \"INSERT INTO hims_f_procurement_dn_detail(\" +\n                  insurtColumns.join(\",\") +\n                  \",hims_f_procurement_dn_header_id) VALUES ?\",\n                [\n                  jsonArrayToObject({\n                    sampleInputObject: insurtColumns,\n                    arrayObj: req.body.dn_entry_detail,\n                    newFieldToInsert: [headerResult.insertId],\n                    req: req\n                  })\n                ],\n                (error, detailResult) => {\n                  if (error) {\n                    debugLog(\"Error: \", error);\n\n                    connection.rollback(() => {\n                      debugLog(\"Roll Back: \", error);\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n\n                  req.records = {\n                    delivery_note_number: documentCode,\n                    hims_f_procurement_dn_header_id: headerResult.insertId\n                  };\n                  next();\n                }\n              );\n            } else {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to get DeliveryNoteEntry\nlet getDeliveryNoteEntry = (req, res, next) => {\n  let selectWhere = {\n    delivery_note_number: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    debugLog(\"where\", where);\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"SELECT * from  hims_f_procurement_dn_header\\\n          where \" +\n          where.condition,\n        where.values,\n        (error, headerResult) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          debugLog(\"result: \", headerResult);\n          if (headerResult.length != 0) {\n            debugLog(\n              \"hims_f_procurement_dn_header_id: \",\n              headerResult[0].hims_f_procurement_dn_header_id\n            );\n            connection.query(\n              \"select * from hims_f_procurement_dn_detail where hims_f_procurement_dn_header_id=?\",\n              headerResult[0].hims_f_procurement_dn_header_id,\n              (error, dn_entry_detail) => {\n                if (error) {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                }\n                req.records = {\n                  ...headerResult[0],\n                  ...{ dn_entry_detail }\n                };\n                releaseDBConnection(db, connection);\n                next();\n              }\n            );\n          } else {\n            req.records = headerResult;\n            releaseDBConnection(db, connection);\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet updateDeliveryNoteEntry = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        let inputParam = extend({}, req.body);\n        debugLog(\"req.body: \", req.body);\n\n        connection.query(\n          \"UPDATE `hims_f_procurement_po_header` SET `authorize1`=?, `authorize_by_date`=?, `authorize_by_1`=? \\\n      WHERE `hims_f_procurement_po_header_id`=?\",\n          [\n            inputParam.authorize1,\n            new Date(),\n            req.userIdentity.algaeh_d_app_user_id,\n            inputParam.hims_f_procurement_po_header_id\n          ],\n          (error, result) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n\n            if (result !== \"\" && result != null) {\n              let details = inputParam.dn_entry_detail;\n\n              let qry = \"\";\n\n              for (let i = 0; i < details.length; i++) {\n                qry +=\n                  \" UPDATE `hims_f_procurement_po_detail` SET authorize_quantity='\" +\n                  details[i].authorize_quantity +\n                  \"',rejected_quantity='\" +\n                  details[i].rejected_quantity +\n                  \"',quantity_recieved='\" +\n                  (details[i].quantity_recieved || 0) +\n                  \"',quantity_outstanding='\" +\n                  (details[i].quantity_outstanding || 0) +\n                  \"' WHERE hims_f_procurement_po_detail_id='\" +\n                  details[i].hims_f_procurement_po_detail_id +\n                  \"';\";\n              }\n\n              if (qry != \"\") {\n                connection.query(qry, (error, detailResult) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n\n                  connection.commit(error => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n                    releaseDBConnection(db, connection);\n                    req.records = detailResult;\n                    next();\n                  });\n                });\n              } else {\n                releaseDBConnection(db, connection);\n                req.records = {};\n                next();\n              }\n            } else {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                req.records = {};\n                next();\n              });\n            }\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to get Pharmacy Requisition Entry\nlet getAuthPurchaseList = (req, res, next) => {\n  let selectWhere = {\n    pharmcy_location_id: null,\n    inventory_location_id: null\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let inputParam = extend(selectWhere, req.query);\n\n    let strQuery =\n      \"SELECT * from  hims_f_procurement_po_header\\\n    where cancelled='N' \";\n\n    if (inputParam.pharmcy_location_id !== null) {\n      strQuery =\n        strQuery +\n        \" and pharmcy_location_id = \" +\n        inputParam.pharmcy_location_id;\n    }\n    if (inputParam.inventory_location_id !== null) {\n      strQuery =\n        strQuery +\n        \" and inventory_location_id = \" +\n        inputParam.inventory_location_id;\n    }\n    // if (inputParam.authorize1 !== null) {\n    //   strQuery = strQuery + \" and authorize1 = '\" + inputParam.authorize1 + \"'\";\n    // }\n    // if (inputParam.authorie2 !== null) {\n    //   strQuery = strQuery + \" and authorie2 = '\" + inputParam.authorie2 + \"'\";\n    // }\n\n    debugLog(\"strQuery\", strQuery);\n    db.getConnection((error, connection) => {\n      connection.query(\n        strQuery,\n\n        (error, headerResult) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          debugLog(\"result: \", headerResult);\n          req.records = headerResult;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to Update PO Entry\nlet updatePOEntry = (req, res, next) => {\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  let connection = req.connection;\n  let inputParam = extend({}, req.body);\n  let complete = \"Y\";\n  const partial_recived = new LINQ(inputParam.dn_entry_detail)\n    .Where(w => w.quantity_outstanding != 0)\n    .ToArray();\n\n  if (partial_recived.length > 0) {\n    complete = \"N\";\n  }\n\n  connection.query(\n    \"UPDATE `hims_f_procurement_po_header` SET `is_completed`=?, `completed_date`=?, `updated_by` = ?,`updated_date` = ? \\\n      WHERE `hims_f_procurement_po_header_id`=?\",\n    [\n      complete,\n      new Date(),\n      req.userIdentity.algaeh_d_app_user_id,\n      new Date(),\n      inputParam.purchase_order_id\n    ],\n    (error, result) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n\n      if (result != \"\" && result != null) {\n        let details = inputParam.dn_entry_detail;\n\n        let qry = \"\";\n\n        for (let i = 0; i < details.length; i++) {\n          qry +=\n            \" UPDATE `hims_f_procurement_po_detail` SET quantity_outstanding='\" +\n            details[i].quantity_outstanding +\n            \"' WHERE hims_f_procurement_po_detail_id='\" +\n            details[i].purchase_order_detail_id +\n            \"';\";\n        }\n        debugLog(\"qry: \", qry);\n\n        if (qry != \"\") {\n          connection.query(qry, (error, detailResult) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            req.porecords = detailResult;\n\n            next();\n          });\n        } else {\n          releaseDBConnection(db, connection);\n          req.records = {};\n          next();\n        }\n      } else {\n        connection.rollback(() => {\n          releaseDBConnection(db, connection);\n          req.records = {};\n          next();\n        });\n      }\n    }\n  );\n};\n\nmodule.exports = {\n  addDeliveryNoteEntry,\n  getDeliveryNoteEntry,\n  updateDeliveryNoteEntry,\n  getAuthPurchaseList,\n  updatePOEntry\n};\n"]}