{"version":3,"sources":["../../../../src/Procurement/model/PurchaseOrderEntry.js"],"names":["addPurchaseOrderEntry","req","res","next","db","httpStatus","dataBaseNotInitilizedError","input","body","connection","requestCounter","beginTransaction","error","rollback","Promise","resolve","reject","counter","module_desc","onFailure","onSuccess","result","then","documentCode","completeNumber","today","format","query","po_type","po_from","pharmcy_location_id","inventory_location_id","location_type","vendor_id","expected_date","on_hold","requisition_id","inv_requisition_id","from_multiple_requisition","payment_terms","comment","sub_total","detail_discount","extended_total","sheet_level_discount_percent","sheet_level_discount_amount","description","net_total","total_tax","net_payable","userIdentity","algaeh_d_app_user_id","Date","headerResult","insertId","insurtColumns","join","sampleInputObject","arrayObj","po_entry_detail","newFieldToInsert","detailResult","records","purchase_number","e","getPurchaseOrderEntry","selectWhere","where","getConnection","condition","values","length","hims_f_procurement_po_header_id","updatePurchaseOrderEntry","inputParam","authorize1","details","qry","i","authorize_quantity","rejected_quantity","quantity_recieved","quantity_outstanding","hims_f_procurement_po_detail_id","commit","getPharRequisitionEntryPO","material_requisition_number","RequisitionEntry","from_location_id","hims_f_pharamcy_material_header_id","to_location_id","getInvRequisitionEntryPO","hims_f_inventory_material_header_id","getAuthPurchaseList","strQuery","updatePharReqEntry","phar_requisition_id","pharmacy_stock_detail","pharmacy_requisition_id","total_quantity","data","updateInvReqEntry","inventory_stock_detail","inventory_requisition_id","module","exports"],"mappings":"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","file":"PurchaseOrderEntry.js","sourcesContent":["\"use strict\";\nimport {\n  whereCondition,\n  releaseDBConnection,\n  jsonArrayToObject,\n  runningNumberGen\n} from \"../../utils\";\nimport extend from \"extend\";\nimport httpStatus from \"../../utils/httpStatus\";\nimport { debugLog } from \"../../utils/logging\";\nimport moment, { now } from \"moment\";\n\nimport Promise from \"bluebird\";\n\n//created by Nowshad: to save Purchase Order Entry\nlet addPurchaseOrderEntry = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    debugLog(\"PurchaseOrderEntry: \", \"Purchase Order Entry\");\n    let connection = req.connection;\n\n    let requestCounter = 1;\n\n    connection.beginTransaction(error => {\n      if (error) {\n        connection.rollback(() => {\n          releaseDBConnection(db, connection);\n          next(error);\n        });\n      }\n      return new Promise((resolve, reject) => {\n        runningNumberGen({\n          db: connection,\n          counter: requestCounter,\n          module_desc: [\"PO_NUM\"],\n          onFailure: error => {\n            reject(error);\n          },\n          onSuccess: result => {\n            resolve(result);\n          }\n        });\n      }).then(result => {\n        let documentCode = result[0].completeNumber;\n\n        debugLog(\"documentCode:\", documentCode);\n\n        let today = moment().format(\"YYYY-MM-DD\");\n        debugLog(\"today:\", today);\n\n        connection.query(\n          \"INSERT INTO `hims_f_procurement_po_header` (purchase_number,po_date,po_type,po_from, pharmcy_location_id,\\\n              inventory_location_id,location_type,vendor_id,expected_date,on_hold, phar_requisition_id,inv_requisition_id, \\\n              from_multiple_requisition, payment_terms, comment, sub_total, detail_discount, extended_total,sheet_level_discount_percent, \\\n              sheet_level_discount_amount,description,net_total,total_tax, net_payable,created_by,created_date, \\\n              updated_by,updated_date) \\\n            VALUE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n          [\n            documentCode,\n            today,\n            input.po_type,\n            input.po_from,\n            input.pharmcy_location_id,\n            input.inventory_location_id,\n            input.location_type,\n            input.vendor_id,\n            input.expected_date,\n            input.on_hold,\n            input.requisition_id,\n            input.inv_requisition_id,\n            input.from_multiple_requisition,\n            input.payment_terms,\n            input.comment,\n            input.sub_total,\n            input.detail_discount,\n            input.extended_total,\n            input.sheet_level_discount_percent,\n            input.sheet_level_discount_amount,\n            input.description,\n\n            input.net_total,\n            input.total_tax,\n            input.net_payable,\n\n            req.userIdentity.algaeh_d_app_user_id,\n            new Date(),\n            req.userIdentity.algaeh_d_app_user_id,\n            new Date()\n          ],\n          (error, headerResult) => {\n            debugLog(\"Success: \", \"Check\");\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n\n            debugLog(\" pos header id :\", headerResult);\n\n            if (headerResult.insertId != null) {\n              const insurtColumns = [\n                \"phar_item_category\",\n                \"phar_item_group\",\n                \"phar_item_id\",\n                \"inv_item_category_id\",\n                \"inv_item_group_id\",\n                \"inv_item_id\",\n                \"order_quantity\",\n                \"total_quantity\",\n                \"pharmacy_uom_id\",\n                \"inventory_uom_id\",\n                \"unit_price\",\n                \"extended_price\",\n                \"sub_discount_percentage\",\n                \"sub_discount_amount\",\n                \"extended_cost\",\n                \"net_extended_cost\",\n                \"unit_cost\",\n                \"expected_arrival_date\",\n                \"pharmacy_requisition_id\",\n                \"inventory_requisition_id\",\n                \"tax_percentage\",\n                \"tax_amount\",\n                \"total_amount\",\n                \"item_type\"\n              ];\n\n              connection.query(\n                \"INSERT INTO hims_f_procurement_po_detail(\" +\n                  insurtColumns.join(\",\") +\n                  \",procurement_header_id) VALUES ?\",\n                [\n                  jsonArrayToObject({\n                    sampleInputObject: insurtColumns,\n                    arrayObj: req.body.po_entry_detail,\n                    newFieldToInsert: [headerResult.insertId],\n                    req: req\n                  })\n                ],\n                (error, detailResult) => {\n                  if (error) {\n                    debugLog(\"error: \", \"Check\");\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n\n                  req.records = {\n                    purchase_number: documentCode\n                  };\n                  next();\n                }\n              );\n            } else {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to get PurchaseOrderEntry\nlet getPurchaseOrderEntry = (req, res, next) => {\n  let selectWhere = {\n    purchase_number: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    debugLog(\"where\", where);\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"SELECT * from  hims_f_procurement_po_header\\\n          where \" +\n          where.condition,\n        where.values,\n        (error, headerResult) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          debugLog(\"result: \", headerResult);\n          if (headerResult.length != 0) {\n            debugLog(\n              \"hims_f_procurement_po_header_id: \",\n              headerResult[0].hims_f_procurement_po_header_id\n            );\n            connection.query(\n              \"select * from hims_f_procurement_po_detail where procurement_header_id=?\",\n              headerResult[0].hims_f_procurement_po_header_id,\n              (error, po_entry_detail) => {\n                if (error) {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                }\n                req.records = {\n                  ...headerResult[0],\n                  ...{ po_entry_detail }\n                };\n                releaseDBConnection(db, connection);\n                next();\n              }\n            );\n          } else {\n            req.records = headerResult;\n            releaseDBConnection(db, connection);\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet updatePurchaseOrderEntry = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        let inputParam = extend({}, req.body);\n        debugLog(\"req.body: \", req.body);\n\n        connection.query(\n          \"UPDATE `hims_f_procurement_po_header` SET `authorize1`=?, `authorize_by_date`=?, `authorize_by_1`=? \\\n      WHERE `hims_f_procurement_po_header_id`=?\",\n          [\n            inputParam.authorize1,\n            new Date(),\n            req.userIdentity.algaeh_d_app_user_id,\n            inputParam.hims_f_procurement_po_header_id\n          ],\n          (error, result) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n\n            if (result !== \"\" && result != null) {\n              let details = inputParam.po_entry_detail;\n\n              let qry = \"\";\n\n              for (let i = 0; i < details.length; i++) {\n                qry +=\n                  \" UPDATE `hims_f_procurement_po_detail` SET authorize_quantity='\" +\n                  details[i].authorize_quantity +\n                  \"',rejected_quantity='\" +\n                  details[i].rejected_quantity +\n                  \"',quantity_recieved='\" +\n                  (details[i].quantity_recieved || 0) +\n                  \"',quantity_outstanding='\" +\n                  (details[i].quantity_outstanding || 0) +\n                  \"' WHERE hims_f_procurement_po_detail_id='\" +\n                  details[i].hims_f_procurement_po_detail_id +\n                  \"';\";\n              }\n\n              if (qry != \"\") {\n                connection.query(qry, (error, detailResult) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n\n                  connection.commit(error => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n                    releaseDBConnection(db, connection);\n                    req.records = detailResult;\n                    next();\n                  });\n                });\n              } else {\n                releaseDBConnection(db, connection);\n                req.records = {};\n                next();\n              }\n            } else {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                req.records = {};\n                next();\n              });\n            }\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to get Pharmacy Requisition Entry to PO\nlet getPharRequisitionEntryPO = (req, res, next) => {\n  let selectWhere = {\n    material_requisition_number: \"ALL\"\n  };\n  let RequisitionEntry = {\n    material_requisition_number: null,\n    from_location_id: null\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    // let where = whereCondition(extend(selectWhere, req.query));\n    let inputParam = extend(RequisitionEntry, req.query);\n\n    debugLog(\"inputParam: \", inputParam);\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"SELECT * from  hims_f_pharamcy_material_header \\\n            where material_requisition_number=?\",\n        [inputParam.material_requisition_number],\n        (error, headerResult) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          debugLog(\"result: \", headerResult);\n          if (headerResult.length != 0) {\n            debugLog(\n              \"hims_f_pharamcy_material_header_id: \",\n              headerResult[0].hims_f_pharamcy_material_header_id\n            );\n            debugLog(\"from_location_id: \", inputParam.from_location_id);\n\n            debugLog(\"to_location_id: \", headerResult[0].to_location_id);\n            connection.query(\n              \"select * from hims_f_pharmacy_material_detail p left outer join hims_d_item_master l \\\n                on l.hims_d_item_master_id =p.item_id where pharmacy_header_id=?\",\n              [headerResult[0].hims_f_pharamcy_material_header_id],\n              (error, po_entry_detail) => {\n                if (error) {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                }\n                req.records = {\n                  ...headerResult[0],\n                  ...{ po_entry_detail }\n                };\n                releaseDBConnection(db, connection);\n                next();\n              }\n            );\n          } else {\n            req.records = headerResult;\n            releaseDBConnection(db, connection);\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to get Inventory Requisition Entry to PO\nlet getInvRequisitionEntryPO = (req, res, next) => {\n  let selectWhere = {\n    material_requisition_number: \"ALL\"\n  };\n  let RequisitionEntry = {\n    material_requisition_number: null,\n    from_location_id: null\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    // let where = whereCondition(extend(selectWhere, req.query));\n    let inputParam = extend(RequisitionEntry, req.query);\n\n    debugLog(\"inputParam: \", inputParam);\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"SELECT * from  hims_f_inventory_material_header \\\n            where material_requisition_number=?\",\n        [inputParam.material_requisition_number],\n        (error, headerResult) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          debugLog(\"result: \", headerResult);\n          if (headerResult.length != 0) {\n            debugLog(\n              \"hims_f_inventory_material_header_id: \",\n              headerResult[0].hims_f_inventory_material_header_id\n            );\n            debugLog(\"from_location_id: \", inputParam.from_location_id);\n\n            debugLog(\"to_location_id: \", headerResult[0].to_location_id);\n            connection.query(\n              \"select * from hims_f_inventory_material_detail p left outer join hims_d_item_master l \\\n                on l.hims_d_item_master_id =p.item_id where inventory_header_id=?\",\n              [headerResult[0].hims_f_inventory_material_header_id],\n              (error, po_entry_detail) => {\n                if (error) {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                }\n                req.records = {\n                  ...headerResult[0],\n                  ...{ po_entry_detail }\n                };\n                releaseDBConnection(db, connection);\n                next();\n              }\n            );\n          } else {\n            req.records = headerResult;\n            releaseDBConnection(db, connection);\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to get Pharmacy Requisition Entry\nlet getAuthPurchaseList = (req, res, next) => {\n  let selectWhere = {\n    pharmcy_location_id: null,\n    inventory_location_id: null\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let inputParam = extend(selectWhere, req.query);\n\n    let strQuery =\n      \"SELECT * from  hims_f_procurement_po_header\\\n    where cancelled='N' \";\n\n    if (inputParam.pharmcy_location_id !== null) {\n      strQuery =\n        strQuery +\n        \" and pharmcy_location_id = \" +\n        inputParam.pharmcy_location_id;\n    }\n    if (inputParam.inventory_location_id !== null) {\n      strQuery =\n        strQuery +\n        \" and inventory_location_id = \" +\n        inputParam.inventory_location_id;\n    }\n    // if (inputParam.authorize1 !== null) {\n    //   strQuery = strQuery + \" and authorize1 = '\" + inputParam.authorize1 + \"'\";\n    // }\n    // if (inputParam.authorie2 !== null) {\n    //   strQuery = strQuery + \" and authorie2 = '\" + inputParam.authorie2 + \"'\";\n    // }\n\n    debugLog(\"strQuery\", strQuery);\n    db.getConnection((error, connection) => {\n      connection.query(\n        strQuery,\n\n        (error, headerResult) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          debugLog(\"result: \", headerResult);\n          req.records = headerResult;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to Update Pharmacy Requisition Entry\nlet updatePharReqEntry = (req, res, next) => {\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  let connection = req.connection;\n  let inputParam = extend({}, req.body);\n\n  connection.query(\n    \"UPDATE `hims_f_pharamcy_material_header` SET `is_completed`=?, `completed_date`=? \\\n      WHERE `hims_f_pharamcy_material_header_id`=?\",\n    [\"Y\", new Date(), inputParam.phar_requisition_id],\n    (error, result) => {\n      if (error) {\n        connection.rollback(() => {\n          releaseDBConnection(db, connection);\n          next(error);\n        });\n      }\n      if (result !== \"\" && result != null) {\n        let details = inputParam.pharmacy_stock_detail;\n\n        let qry = \"\";\n\n        for (let i = 0; i < details.length; i++) {\n          debugLog(\"Data:n \", details[i].pharmacy_requisition_id);\n          qry +=\n            \" UPDATE `hims_f_pharmacy_material_detail` SET po_created_date=now()\" +\n            \",po_created='\" +\n            \"Y\" +\n            \"',po_created_quantity='\" +\n            details[i].total_quantity +\n            \"' WHERE hims_f_pharmacy_material_detail_id='\" +\n            details[i].pharmacy_requisition_id +\n            \"';\";\n        }\n\n        if (qry != \"\") {\n          connection.query(qry, (error, detailResult) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n\n            req.data = req.records.purchase_number;\n            next();\n            // connection.commit(error => {\n            //   if (error) {\n            //     connection.rollback(() => {\n            //       releaseDBConnection(db, connection);\n            //       next(error);\n            //     });\n            //   }\n            //   releaseDBConnection(db, connection);\n            //   req.records = req.records.purchase_number;\n            //   next();\n            // });\n          });\n        } else {\n          releaseDBConnection(db, connection);\n          req.records = {};\n          next();\n        }\n      } else {\n        connection.rollback(() => {\n          releaseDBConnection(db, connection);\n          req.records = {};\n          next();\n        });\n      }\n    }\n  );\n};\n\n//created by Nowshad: to Update Inventory Requisition Entry\nlet updateInvReqEntry = (req, res, next) => {\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  let connection = req.connection;\n  let inputParam = extend({}, req.body);\n\n  connection.query(\n    \"UPDATE `hims_f_inventory_material_header` SET `is_completed`=?, `completed_date`=? \\\n      WHERE `hims_f_inventory_material_header_id`=?\",\n    [\"Y\", new Date(), inputParam.inv_requisition_id],\n    (error, result) => {\n      if (error) {\n        connection.rollback(() => {\n          releaseDBConnection(db, connection);\n          next(error);\n        });\n      }\n      if (result !== \"\" && result != null) {\n        let details = inputParam.inventory_stock_detail;\n\n        let qry = \"\";\n\n        for (let i = 0; i < details.length; i++) {\n          qry +=\n            \" UPDATE `hims_f_inventory_material_detail` SET po_created_date=now()\" +\n            \",po_created='\" +\n            \"Y\" +\n            \"',po_created_quantity='\" +\n            details[i].total_quantity +\n            \"' WHERE hims_f_inventory_material_detail_id='\" +\n            details[i].inventory_requisition_id +\n            \"';\";\n        }\n\n        if (qry != \"\") {\n          connection.query(qry, (error, detailResult) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n\n            req.data = req.records.purchase_number;\n            next();\n\n            // connection.commit(error => {\n            //   if (error) {\n            //     connection.rollback(() => {\n            //       releaseDBConnection(db, connection);\n            //       next(error);\n            //     });\n            //   }\n            //   releaseDBConnection(db, connection);\n            //   req.records = detailResult;\n            //   next();\n            // });\n          });\n        } else {\n          releaseDBConnection(db, connection);\n          req.records = {};\n          next();\n        }\n      } else {\n        connection.rollback(() => {\n          releaseDBConnection(db, connection);\n          req.records = {};\n          next();\n        });\n      }\n    }\n  );\n};\n\nmodule.exports = {\n  addPurchaseOrderEntry,\n  getPurchaseOrderEntry,\n  updatePurchaseOrderEntry,\n  getAuthPurchaseList,\n  getInvRequisitionEntryPO,\n  getPharRequisitionEntryPO,\n  updatePharReqEntry,\n  updateInvReqEntry\n};\n"]}