{"version":3,"sources":["../../../../src/Procurement/controller/ReceiptEntry.js"],"names":["config","db","api","post","generateDbConnection","addReceiptEntry","updateDNEntry","req","res","next","connection","commit","error","rollback","releaseDBConnection","result","records","status","httpStatus","ok","json","success","releaseConnection","get","getReceiptEntry","put","updateReceiptEntry","body","grn_for"],"mappings":";;;;;;AAAA;;AACA;;AACA;;;;AACA;;AAMA;;AACA;;AACA;;;;kBAEe,gBAAoB;AAAA,MAAjBA,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,EAAS,QAATA,EAAS;;AACjC,MAAIC,MAAM,sBAAV;;AAEA;AACAA,MAAIC,IAAJ,CACE,kBADF,EAEEC,2BAFF,EAGEC,6BAHF,EAIEC,2BAJF,EAKE,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,aAAaH,IAAIG,UAArB;AACAA,eAAWC,MAAX,CAAkB,iBAAS;AACzB,UAAIC,KAAJ,EAAW;AACT,+BAAS,cAAT,EAAyBA,KAAzB;AACAF,mBAAWG,QAAX,CAAoB,YAAM;AACxBC,8BAAoBb,EAApB,EAAwBS,UAAxB;AACAD,eAAKG,KAAL;AACD,SAHD;AAID,OAND,MAMO;AACL,YAAIG,SAASR,IAAIS,OAAjB;AACA,+BAAS,UAAT,EAAqBD,MAArB;AACAP,YAAIS,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BC,mBAAS,IADoB;AAE7BL,mBAASD;AAFoB,SAA/B;AAIAN;AACD;AACF,KAhBD;AAiBD,GAxBH,EAyBEa,wBAzBF;;AA4BA;AACApB,MAAIqB,GAAJ,CACE,kBADF,EAEEC,6BAFF,EAGE,UAACjB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIM,SAASR,IAAIS,OAAjB;AACAR,QAAIS,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BC,eAAS,IADoB;AAE7BL,eAASD;AAFoB,KAA/B;AAIAN;AACD,GAVH,EAWEa,wBAXF;;AAcA;AACApB,MAAIuB,GAAJ,CACE,qBADF,EAEErB,2BAFF,EAGEsB,gCAHF,EAIE,UAACnB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,2BAAS,cAAT,EAAyBF,IAAIoB,IAA7B;AACA,QAAIpB,IAAIoB,IAAJ,CAASC,OAAT,IAAoB,KAAxB,EAA+B;AAC7B,kDAAuBrB,GAAvB,EAA4BC,GAA5B,EAAiCC,IAAjC;AACD,KAFD,MAEO;AACLA;AACD;AACF,GAXH,EAYE,UAACF,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,2BAAS,cAAT,EAAyBF,IAAIoB,IAA7B;AACA,QAAIpB,IAAIoB,IAAJ,CAASC,OAAT,IAAoB,KAAxB,EAA+B;AAC7B,6BAAS,cAAT,EAAyB,KAAzB;AACA,sDAA0BrB,GAA1B,EAA+BC,GAA/B,EAAoCC,IAApC;AACD,KAHD,MAGO;AACLA;AACD;AACF,GApBH,EAsBE,UAACF,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,aAAaH,IAAIG,UAArB;AACAA,eAAWC,MAAX,CAAkB,iBAAS;AACzB,UAAIC,KAAJ,EAAW;AACT,+BAAS,cAAT,EAAyBA,KAAzB;AACAF,mBAAWG,QAAX,CAAoB,YAAM;AACxBC,8BAAoBb,EAApB,EAAwBS,UAAxB;AACAD,eAAKG,KAAL;AACD,SAHD;AAID,OAND,MAMO;AACL,YAAIG,SAASR,IAAIS,OAAjB;AACAR,YAAIS,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BC,mBAAS,IADoB;AAE7BL,mBAASD;AAFoB,SAA/B;AAIAN;AACD;AACF,KAfD;AAgBA;AACA;AACA;AACA;AACA;AACA;AACD,GA9CH,EA+CEa,wBA/CF;;AAkDA,SAAOpB,GAAP;AACD,C","file":"ReceiptEntry.js","sourcesContent":["import { Router } from \"express\";\nimport { releaseConnection, generateDbConnection } from \"../../utils\";\nimport httpStatus from \"../../utils/httpStatus\";\nimport {\n  addReceiptEntry,\n  getReceiptEntry,\n  updateReceiptEntry,\n  updateDNEntry\n} from \"../model/ReceiptEntry\";\nimport { debugFunction, debugLog } from \"../../utils/logging\";\nimport { updateIntoItemLocation } from \"../../Pharmacy/model/commonFunction\";\nimport { updateIntoInvItemLocation } from \"../../Inventory/model/commonFunction\";\n\nexport default ({ config, db }) => {\n  let api = Router();\n\n  // created by Nowshad :to add Pharmacy Initial Stock\n  api.post(\n    \"/addReceiptEntry\",\n    generateDbConnection,\n    addReceiptEntry,\n    updateDNEntry,\n    (req, res, next) => {\n      let connection = req.connection;\n      connection.commit(error => {\n        if (error) {\n          debugLog(\"Contorller: \", error);\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        } else {\n          let result = req.records;\n          debugLog(\"result: \", result);\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: result\n          });\n          next();\n        }\n      });\n    },\n    releaseConnection\n  );\n\n  // created by Nowshad :to getReceiptEntry\n  api.get(\n    \"/getReceiptEntry\",\n    getReceiptEntry,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  // created by Nowshad :update Item Storage\n  api.put(\n    \"/updateReceiptEntry\",\n    generateDbConnection,\n    updateReceiptEntry,\n    (req, res, next) => {\n      debugLog(\"phr.req.body\", req.body);\n      if (req.body.grn_for == \"PHR\") {\n        updateIntoItemLocation(req, res, next);\n      } else {\n        next();\n      }\n    },\n    (req, res, next) => {\n      debugLog(\"inv.req.body\", req.body);\n      if (req.body.grn_for == \"INV\") {\n        debugLog(\"Data Exist: \", \"Yes\");\n        updateIntoInvItemLocation(req, res, next);\n      } else {\n        next();\n      }\n    },\n\n    (req, res, next) => {\n      let connection = req.connection;\n      connection.commit(error => {\n        if (error) {\n          debugLog(\"Contorller: \", error);\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        } else {\n          let result = req.records;\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: result\n          });\n          next();\n        }\n      });\n      // let results = req.records;\n      // res.status(httpStatus.ok).json({\n      //   success: true,\n      //   records: results\n      // });\n      // next();\n    },\n    releaseConnection\n  );\n\n  return api;\n};\n"]}