{"version":3,"sources":["../../../../src/Procurement/controller/PurchaseOrderEntry.js"],"names":["config","db","api","post","generateDbConnection","addPurchaseOrderEntry","req","res","next","body","po_from","phar_requisition_id","inv_requisition_id","connection","commit","error","rollback","releaseDBConnection","result","records","status","httpStatus","ok","json","success","releaseConnection","get","getPurchaseOrderEntry","getAuthPurchaseList","getPharRequisitionEntryPO","getInvRequisitionEntryPO","put","updatePurchaseOrderEntry","results"],"mappings":"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","file":"PurchaseOrderEntry.js","sourcesContent":["import { Router } from \"express\";\nimport { releaseConnection, generateDbConnection } from \"../../utils\";\nimport httpStatus from \"../../utils/httpStatus\";\nimport {\n  addPurchaseOrderEntry,\n  getPurchaseOrderEntry,\n  updatePurchaseOrderEntry,\n  getAuthPurchaseList,\n  getInvRequisitionEntryPO,\n  getPharRequisitionEntryPO,\n  updatePharReqEntry,\n  updateInvReqEntry\n} from \"../model/PurchaseOrderEntry\";\nimport { debugFunction, debugLog } from \"../../utils/logging\";\nexport default ({ config, db }) => {\n  let api = Router();\n\n  // created by Nowshad :to add Pharmacy Initial Stock\n  api.post(\n    \"/addPurchaseOrderEntry\",\n    generateDbConnection,\n    addPurchaseOrderEntry,\n\n    (req, res, next) => {\n      debugLog(\"phr.req.body\", req.body);\n      if (req.body.po_from == \"PHR\" && req.body.phar_requisition_id != null) {\n        updatePharReqEntry(req, res, next);\n      } else {\n        next();\n      }\n    },\n    (req, res, next) => {\n      debugLog(\"inv.req.body\", req.body);\n      if (req.body.po_from == \"INV\" && req.body.inv_requisition_id != null) {\n        debugLog(\"Data Exist: \", \"Yes\");\n        updateInvReqEntry(req, res, next);\n      } else {\n        next();\n      }\n    },\n\n    (req, res, next) => {\n      let connection = req.connection;\n      connection.commit(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        } else {\n          let result = req.records;\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: result\n          });\n          next();\n        }\n      });\n    },\n    releaseConnection\n  );\n\n  // created by Nowshad :to getPharmacyInitialStock\n  api.get(\n    \"/getPurchaseOrderEntry\",\n    getPurchaseOrderEntry,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  // created by Nowshad :to getAuthrequisitionList\n  api.get(\n    \"/getAuthPurchaseList\",\n    getAuthPurchaseList,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  // created by Nowshad :to get Pharmacy RequisitionEntry for PO\n  api.get(\n    \"/getPharRequisitionEntryPO\",\n    getPharRequisitionEntryPO,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  // created by Nowshad :to get Inventory RequisitionEntry for PO\n  api.get(\n    \"/getInvRequisitionEntryPO\",\n    getInvRequisitionEntryPO,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  // created by Nowshad :update Item Storage\n  api.put(\n    \"/updatePurchaseOrderEntry\",\n    updatePurchaseOrderEntry,\n    (req, res, next) => {\n      let results = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: results\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  return api;\n};\n"]}