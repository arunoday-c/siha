{"version":3,"sources":["../../../../src/Inventory/model/inventorytransferEntry.js"],"names":["addtransferEntry","req","res","next","db","httpStatus","dataBaseNotInitilizedError","input","body","getConnection","error","connection","beginTransaction","rollback","requestCounter","Promise","resolve","reject","counter","module_desc","onFailure","onSuccess","result","then","documentCode","completeNumber","year","format","today","month","period","query","hims_f_inventory_material_header_id","from_location_type","from_location_id","material_requisition_number","to_location_id","to_location_type","description","completed","completed_date","completed_lines","transfer_quantity","requested_quantity","recieved_quantity","outstanding_quantity","cancelled","cancelled_by","cancelled_date","headerResult","insertId","insurtColumns","join","sampleInputObject","arrayObj","inventory_stock_detail","newFieldToInsert","detailResult","commit","records","transfer_number","hims_f_inventory_transfer_header_id","e","gettransferEntry","selectWhere","where","condition","values","length","updatetransferEntry","TransferEntry","updated_by","userIdentity","algaeh_d_app_user_id","inputParam","Date","output","options","i","location_id","location_type","sales_uom","uom_transferred_id","operation","catch","getrequisitionEntryTransfer","RequisitionEntry","module","exports"],"mappings":"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","file":"inventorytransferEntry.js","sourcesContent":["\"use strict\";\nimport {\n  whereCondition,\n  releaseDBConnection,\n  jsonArrayToObject,\n  runningNumberGen\n} from \"../../utils\";\nimport extend from \"extend\";\nimport httpStatus from \"../../utils/httpStatus\";\nimport { debugLog } from \"../../utils/logging\";\nimport moment from \"moment\";\n// import { getBillDetailsFunctionality } from \"../../model/billing\";\nimport { updateIntoInvItemLocation } from \"./commonFunction\";\nimport Promise from \"bluebird\";\n\n//created by Nowshad: to Insert Requisition Entry\nlet addtransferEntry = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    debugLog(\"Requisition: \", \"add Requisition\");\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n\n        let requestCounter = 1;\n\n        return new Promise((resolve, reject) => {\n          runningNumberGen({\n            db: connection,\n            counter: requestCounter,\n            module_desc: [\"INV_TRN_NUM\"],\n            onFailure: error => {\n              reject(error);\n            },\n            onSuccess: result => {\n              resolve(result);\n            }\n          });\n        }).then(result => {\n          let documentCode = result[0].completeNumber;\n          //   debugLog(\"connection\", JSON.stringify(connection));\n          debugLog(\"documentCode:\", documentCode);\n\n          let year = moment().format(\"YYYY\");\n          debugLog(\"onlyyear:\", year);\n\n          let today = moment().format(\"YYYY-MM-DD\");\n          debugLog(\"today:\", today);\n\n          let month = moment().format(\"MM\");\n          debugLog(\"month:\", month);\n          let period = month;\n\n          connection.query(\n            \"INSERT INTO `hims_f_inventory_transfer_header` (transfer_number,transfer_date,`year`,period,\\\n                hims_f_inventory_material_header_id,from_location_type,from_location_id, material_requisition_number, to_location_id, \\\n                to_location_type, description, completed, completed_date, completed_lines, \\\n                transfer_quantity,requested_quantity,recieved_quantity,outstanding_quantity, \\\n                cancelled, cancelled_by,cancelled_date) \\\n            VALUE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n            [\n              documentCode,\n              today,\n              year,\n              period,\n              input.hims_f_inventory_material_header_id,\n              input.from_location_type,\n              input.from_location_id,\n              input.material_requisition_number,\n              input.to_location_id,\n              input.to_location_type,\n              input.description,\n              input.completed,\n              input.completed_date,\n              input.completed_lines,\n              input.transfer_quantity,\n              input.requested_quantity,\n              input.recieved_quantity,\n              input.outstanding_quantity,\n              input.cancelled,\n              input.cancelled_by,\n              input.cancelled_date\n            ],\n            (error, headerResult) => {\n              debugLog(\"error: \", \"Check\");\n              if (error) {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n\n              debugLog(\" pos header id :\", headerResult);\n\n              if (headerResult.insertId != null) {\n                const insurtColumns = [\n                  \"item_id\",\n                  \"item_category_id\",\n                  \"item_group_id\",\n                  \"batchno\",\n                  \"expiry_date\",\n                  \"to_qtyhand\",\n                  \"from_qtyhand\",\n                  \"quantity_requested\",\n                  \"quantity_authorized\",\n                  \"uom_requested_id\",\n                  \"quantity_transferred\",\n                  \"uom_transferred_id\",\n                  \"quantity_recieved\",\n                  \"uom_recieved_id\",\n                  \"quantity_outstanding\",\n                  \"transfer_to_date\",\n                  \"grnno\",\n                  \"unit_cost\",\n                  \"sales_uom\",\n                  \"material_requisition_header_id\",\n                  \"material_requisition_detail_id\"\n                ];\n\n                connection.query(\n                  \"INSERT INTO hims_f_inventory_transfer_detail(\" +\n                    insurtColumns.join(\",\") +\n                    \",transfer_header_id) VALUES ?\",\n                  [\n                    jsonArrayToObject({\n                      sampleInputObject: insurtColumns,\n                      arrayObj: req.body.inventory_stock_detail,\n                      newFieldToInsert: [headerResult.insertId],\n                      req: req\n                    })\n                  ],\n                  (error, detailResult) => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n\n                    connection.commit(error => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                      releaseDBConnection(db, connection);\n                      req.records = {\n                        transfer_number: documentCode,\n                        hims_f_inventory_transfer_header_id:\n                          headerResult.insertId,\n                        year: year,\n                        period: period\n                      };\n                      next();\n                    });\n                  }\n                );\n              } else {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n            }\n          );\n        });\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to get inventory Requisition Entry\nlet gettransferEntry = (req, res, next) => {\n  let selectWhere = {\n    transfer_number: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"SELECT * from  hims_f_inventory_transfer_header\\\n          where \" +\n          where.condition,\n        where.values,\n        (error, headerResult) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          debugLog(\"result: \", headerResult);\n          if (headerResult.length != 0) {\n            debugLog(\n              \"hims_f_inventory_transfer_header_id: \",\n              headerResult[0].hims_f_inventory_transfer_header_id\n            );\n            connection.query(\n              \"select * from hims_f_inventory_transfer_detail where transfer_header_id=?\",\n              headerResult[0].hims_f_inventory_transfer_header_id,\n              (error, inventory_stock_detail) => {\n                if (error) {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                }\n                req.records = {\n                  ...headerResult[0],\n                  ...{ inventory_stock_detail }\n                };\n                releaseDBConnection(db, connection);\n                next();\n              }\n            );\n          } else {\n            req.records = headerResult;\n            releaseDBConnection(db, connection);\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to Post Requisition Entry\nlet updatetransferEntry = (req, res, next) => {\n  let TransferEntry = {\n    completed: null,\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let connection = req.connection;\n\n    connection.beginTransaction(error => {\n      if (error) {\n        connection.rollback(() => {\n          releaseDBConnection(db, connection);\n          next(error);\n        });\n      }\n      return new Promise((resolve, reject) => {\n        let inputParam = extend(TransferEntry, req.body);\n\n        debugLog(\"completed\", inputParam.completed);\n        debugLog(\"inventory_stock_detail\", req.body.inventory_stock_detail);\n        connection.query(\n          \"UPDATE `hims_f_inventory_transfer_header` SET `completed`=?, `completed_date`=? \\\n          WHERE `hims_f_inventory_transfer_header_id`=?\",\n          [\n            inputParam.completed,\n            new Date(),\n            inputParam.hims_f_inventory_transfer_header_id\n          ],\n          (error, result) => {\n            debugLog(\"error\", error);\n            releaseDBConnection(db, connection);\n            if (error) {\n              reject(error);\n            } else {\n              resolve(result);\n            }\n          }\n        );\n      })\n        .then(output => {\n          return new Promise((resolve, reject) => {\n            debugLog(\"output\", output);\n            req.options = {\n              db: connection,\n              onFailure: error => {\n                reject(error);\n              },\n              onSuccess: result => {\n                resolve(result);\n              }\n            };\n            //Update From Location\n            debugLog(\"From\", \"Data\");\n            updateIntoInvItemLocation(req, res, next);\n          });\n        })\n        .then(output => {\n          return new Promise((resolve, reject) => {\n            debugLog(\"output\", output);\n            req.options = {\n              db: connection,\n              onFailure: error => {\n                reject(error);\n              },\n              onSuccess: result => {\n                resolve(result);\n              }\n            };\n            //Update To location\n            for (let i = 0; i < req.body.inventory_stock_detail.length; i++) {\n              req.body.inventory_stock_detail[i].location_id =\n                req.body.to_location_id;\n              req.body.inventory_stock_detail[i].location_type =\n                req.body.to_location_type;\n\n              req.body.inventory_stock_detail[i].sales_uom =\n                req.body.inventory_stock_detail[i].uom_transferred_id;\n\n              delete req.body.inventory_stock_detail[i].operation;\n              req.body.inventory_stock_detail[i].operation = \"+\";\n            }\n\n            debugLog(\"To \", \"Data\");\n            updateIntoInvItemLocation(req, res, next);\n          })\n\n            .then(records => {\n              connection.commit(error => {\n                if (error) {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                }\n                req.records = records;\n                releaseDBConnection(db, connection);\n                next();\n              });\n            })\n            .catch(error => {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            });\n        })\n        .catch(error => {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to get inventory Requisition Entry to transfer\nlet getrequisitionEntryTransfer = (req, res, next) => {\n  let RequisitionEntry = {\n    material_requisition_number: null,\n    from_location_id: null\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    // let where = whereCondition(extend(selectWhere, req.query));\n    let inputParam = extend(RequisitionEntry, req.query);\n\n    debugLog(\"inputParam: \", inputParam);\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"SELECT * from  hims_f_inventory_material_header \\\n            where material_requisition_number=?\",\n        [inputParam.material_requisition_number],\n        (error, headerResult) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          debugLog(\"result: \", headerResult);\n          if (headerResult.length != 0) {\n            debugLog(\n              \"hims_f_inventory_material_header_id: \",\n              headerResult[0].hims_f_inventory_material_header_id\n            );\n            debugLog(\"from_location_id: \", inputParam.from_location_id);\n\n            debugLog(\"to_location_id: \", headerResult[0].to_location_id);\n            connection.query(\n              \"select * from hims_f_inventory_material_detail p left outer join hims_m_inventory_item_location l \\\n                on l.item_id =p.item_id where inventory_header_id=? and l.record_status='A'and l.inventory_location_id=? \\\n                and l.expirydt > now() and l.qtyhand>0  order by l.expirydt asc limit 0,1\",\n              [\n                headerResult[0].hims_f_inventory_material_header_id,\n                headerResult[0].to_location_id\n              ],\n              (error, inventory_stock_detail) => {\n                debugLog(\"inventory_stock_detail: \", inventory_stock_detail);\n                if (error) {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                }\n                req.records = {\n                  ...headerResult[0],\n                  ...{ inventory_stock_detail }\n                };\n                releaseDBConnection(db, connection);\n                next();\n              }\n            );\n          } else {\n            req.records = headerResult;\n            releaseDBConnection(db, connection);\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addtransferEntry,\n  gettransferEntry,\n  updatetransferEntry,\n  getrequisitionEntryTransfer\n};\n"]}