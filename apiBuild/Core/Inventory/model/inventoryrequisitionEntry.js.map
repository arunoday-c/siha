{"version":3,"sources":["../../../../src/Inventory/model/inventoryrequisitionEntry.js"],"names":["addinventoryrequisitionEntry","req","res","next","db","httpStatus","dataBaseNotInitilizedError","input","body","getConnection","error","connection","beginTransaction","rollback","requestCounter","Promise","resolve","reject","counter","module_desc","onFailure","onSuccess","result","then","documentCode","completeNumber","today","format","query","from_location_type","from_location_id","expiration_date","required_date","userIdentity","algaeh_d_app_user_id","on_hold","to_location_id","to_location_type","description","comment","is_completed","completed_date","completed_lines","requested_lines","purchase_created_lines","status","requistion_type","no_of_transfers","no_of_po","authorize1","authorize1_date","authorize1_by","authorie2","authorize2_date","authorize2_by","cancelled","cancelled_by","cancelled_date","headerResult","insertId","insurtColumns","join","sampleInputObject","arrayObj","inventory_stock_detail","newFieldToInsert","detailResult","commit","records","material_requisition_number","e","getinventoryrequisitionEntry","selectWhere","where","condition","values","length","hims_f_inventory_material_header_id","updateinventoryrequisitionEntry","inputParam","Date","updated_by","details","qry","i","inventory_header_id","completed","item_category_id","item_group_id","item_id","quantity_required","quantity_authorized","item_uom","quantity_recieved","quantity_outstanding","hims_f_inventory_material_detail_id","getinventoryAuthrequisitionList","strQuery","updateinvreqEntryOnceTranfer","complete","partial_recived","LINQ","Where","w","ToArray","material_requisition_detail_id","module","exports"],"mappings":"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","file":"inventoryrequisitionEntry.js","sourcesContent":["\"use strict\";\nimport {\n  whereCondition,\n  releaseDBConnection,\n  jsonArrayToObject,\n  runningNumberGen\n} from \"../../utils\";\nimport extend from \"extend\";\nimport httpStatus from \"../../utils/httpStatus\";\nimport { debugLog } from \"../../utils/logging\";\nimport moment from \"moment\";\nimport Promise from \"bluebird\";\nimport { LINQ } from \"node-linq\";\n\n//created by Nowshad: to Insert Requisition Entry\nlet addinventoryrequisitionEntry = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    debugLog(\"Requisition: \", \"add Requisition\");\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n\n        let requestCounter = 1;\n\n        return new Promise((resolve, reject) => {\n          runningNumberGen({\n            db: connection,\n            counter: requestCounter,\n            module_desc: [\"INV_REQ_NUM\"],\n            onFailure: error => {\n              reject(error);\n            },\n            onSuccess: result => {\n              resolve(result);\n            }\n          });\n        }).then(result => {\n          let documentCode = result[0].completeNumber;\n          //   debugLog(\"connection\", JSON.stringify(connection));\n          debugLog(\"documentCode:\", documentCode);\n\n          let today = moment().format(\"YYYY-MM-DD\");\n          debugLog(\"today:\", today);\n\n          connection.query(\n            \"INSERT INTO `hims_f_inventory_material_header` (material_requisition_number,requistion_date,from_location_type,\\\n                from_location_id, expiration_date,required_date,requested_by,on_hold, to_location_id, \\\n                to_location_type, description, comment, is_completed, completed_date, completed_lines,requested_lines, \\\n                purchase_created_lines,status,requistion_type,no_of_transfers,no_of_po, authorize1,authorize1_date, \\\n                authorize1_by,authorie2,authorize2_date,authorize2_by,cancelled, cancelled_by,cancelled_date) \\\n            VALUE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n            [\n              documentCode,\n              today,\n              input.from_location_type,\n              input.from_location_id,\n              input.expiration_date,\n              input.required_date,\n              req.userIdentity.algaeh_d_app_user_id,\n              input.on_hold,\n              input.to_location_id,\n              input.to_location_type,\n              input.description,\n              input.comment,\n              input.is_completed,\n              input.completed_date,\n              input.completed_lines,\n              input.requested_lines,\n              input.purchase_created_lines,\n\n              input.status,\n              input.requistion_type,\n              input.no_of_transfers,\n\n              input.no_of_po,\n              input.authorize1,\n              input.authorize1_date,\n              input.authorize1_by,\n              input.authorie2,\n              input.authorize2_date,\n              input.authorize2_by,\n              input.cancelled,\n              input.cancelled_by,\n              input.cancelled_date\n            ],\n            (error, headerResult) => {\n              debugLog(\"error: \", \"Check\");\n              if (error) {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n\n              debugLog(\" pos header id :\", headerResult);\n\n              if (headerResult.insertId != null) {\n                const insurtColumns = [\n                  \"item_id\",\n                  \"item_category_id\",\n                  \"item_group_id\",\n                  \"item_uom\",\n                  \"to_qtyhand\",\n                  \"from_qtyhand\",\n                  \"quantity_required\"\n                ];\n\n                connection.query(\n                  \"INSERT INTO hims_f_inventory_material_detail(\" +\n                    insurtColumns.join(\",\") +\n                    \",inventory_header_id) VALUES ?\",\n                  [\n                    jsonArrayToObject({\n                      sampleInputObject: insurtColumns,\n                      arrayObj: req.body.inventory_stock_detail,\n                      newFieldToInsert: [headerResult.insertId],\n                      req: req\n                    })\n                  ],\n                  (error, detailResult) => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n\n                    connection.commit(error => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                      releaseDBConnection(db, connection);\n                      req.records = {\n                        material_requisition_number: documentCode\n                      };\n                      next();\n                    });\n                  }\n                );\n              } else {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n            }\n          );\n        });\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to get inventory Requisition Entry\nlet getinventoryrequisitionEntry = (req, res, next) => {\n  let selectWhere = {\n    material_requisition_number: \"ALL\",\n    from_location_id: \"ALL\",\n    to_location_id: \"ALL\",\n    authorize1: \"ALL\",\n    authorie2: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    debugLog(\"where\", where);\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"SELECT * from  hims_f_inventory_material_header\\\n          where \" +\n          where.condition,\n        where.values,\n        (error, headerResult) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          debugLog(\"result: \", headerResult);\n          if (headerResult.length != 0) {\n            debugLog(\n              \"hims_f_inventory_material_header_id: \",\n              headerResult[0].hims_f_inventory_material_header_id\n            );\n            connection.query(\n              \"select * from hims_f_inventory_material_detail where inventory_header_id=?\",\n              headerResult[0].hims_f_inventory_material_header_id,\n              (error, inventory_stock_detail) => {\n                if (error) {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                }\n                req.records = {\n                  ...headerResult[0],\n                  ...{ inventory_stock_detail }\n                };\n                releaseDBConnection(db, connection);\n                next();\n              }\n            );\n          } else {\n            req.records = headerResult;\n            releaseDBConnection(db, connection);\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to Post Requisition Entry\n\nlet updateinventoryrequisitionEntry = (req, res, next) => {\n  // let RequisitionEntry = {\n  //   posted: null,\n  //   updated_by: req.userIdentity.algaeh_d_app_user_id\n  // };\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n\n    connection.beginTransaction(error => {\n      if (error) {\n        connection.rollback(() => {\n          releaseDBConnection(db, connection);\n          next(error);\n        });\n      }\n      let inputParam = extend({}, req.body);\n\n      connection.query(\n        \"UPDATE `hims_f_inventory_material_header` SET `authorize1`=?, `authorize1_date`=?, `authorize1_by`=?, \\\n      `authorie2`=?, `authorize2_date`=?, `authorize2_by`=? \\\n      WHERE `hims_f_inventory_material_header_id`=?\",\n        [\n          inputParam.authorize1,\n          new Date(),\n          inputParam.updated_by,\n          inputParam.authorie2,\n          new Date(),\n          inputParam.updated_by,\n          inputParam.hims_f_inventory_material_header_id\n        ],\n        (error, result) => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n\n          if (result !== \"\" && result != null) {\n            let details = inputParam.inventory_stock_detail;\n\n            let qry = \"\";\n\n            for (let i = 0; i < details.length; i++) {\n              qry +=\n                \" UPDATE `hims_f_inventory_material_detail` SET inventory_header_id='\" +\n                details[i].inventory_header_id +\n                \"',completed='\" +\n                details[i].completed +\n                \"',item_category_id='\" +\n                details[i].item_category_id +\n                \"',item_group_id='\" +\n                details[i].item_group_id +\n                \"',item_id='\" +\n                details[i].item_id +\n                \"',quantity_required='\" +\n                details[i].quantity_required +\n                \"',quantity_authorized='\" +\n                details[i].quantity_authorized +\n                \"',item_uom='\" +\n                details[i].item_uom +\n                \"',quantity_recieved='\" +\n                (details[i].quantity_recieved || 0) +\n                \"',quantity_outstanding='\" +\n                (details[i].quantity_outstanding || 0) +\n                \"' WHERE hims_f_inventory_material_detail_id='\" +\n                details[i].hims_f_inventory_material_detail_id +\n                \"';\";\n            }\n\n            if (qry != \"\") {\n              connection.query(qry, (error, detailResult) => {\n                if (error) {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                }\n\n                connection.commit(error => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n                  releaseDBConnection(db, connection);\n                  req.records = detailResult;\n                  next();\n                });\n              });\n            } else {\n              releaseDBConnection(db, connection);\n              req.records = {};\n              next();\n            }\n          } else {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              req.records = {};\n              next();\n            });\n          }\n        }\n      );\n    });\n  });\n};\n\n//created by Nowshad: to get inventory Requisition Entry\nlet getinventoryAuthrequisitionList = (req, res, next) => {\n  let selectWhere = {\n    from_location_id: null,\n    to_location_id: null,\n    authorize1: null,\n    authorie2: null\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let inputParam = extend(selectWhere, req.query);\n\n    let strQuery =\n      \"SELECT * from  hims_f_inventory_material_header\\\n    where cancelled='N' \";\n\n    if (inputParam.from_location_id !== null) {\n      strQuery =\n        strQuery + \" and from_location_id = \" + inputParam.from_location_id;\n    }\n    if (inputParam.to_location_id !== null) {\n      strQuery =\n        strQuery + \" and to_location_id = \" + inputParam.to_location_id;\n    }\n    if (inputParam.authorize1 !== null) {\n      strQuery = strQuery + \" and authorize1 = '\" + inputParam.authorize1 + \"'\";\n    }\n    if (inputParam.authorie2 !== null) {\n      strQuery = strQuery + \" and authorie2 = '\" + inputParam.authorie2 + \"'\";\n    }\n\n    debugLog(\"strQuery\", strQuery);\n    db.getConnection((error, connection) => {\n      connection.query(\n        strQuery,\n\n        (error, headerResult) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          debugLog(\"result: \", headerResult);\n          req.records = headerResult;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n//created by Nowshad: to Update Requisition Entry\nlet updateinvreqEntryOnceTranfer = (req, res, next) => {\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  let connection = req.connection;\n  let inputParam = extend({}, req.body);\n  let complete = \"Y\";\n\n  debugLog(\"updateinvreqEntryOnceTranfer: \", complete);\n  const partial_recived = new LINQ(inputParam.inventory_stock_detail)\n    .Where(w => w.quantity_outstanding != 0)\n    .ToArray();\n\n  if (partial_recived.length > 0) {\n    complete = \"N\";\n  }\n  connection.query(\n    \"UPDATE `hims_f_inventory_material_header` SET `is_completed`=?, `completed_date`=? \\\n      WHERE `hims_f_inventory_material_header_id`=?\",\n    [complete, new Date(), inputParam.hims_f_inventory_material_header_id],\n    (error, result) => {\n      if (error) {\n        connection.rollback(() => {\n          releaseDBConnection(db, connection);\n          next(error);\n        });\n      }\n\n      if (result != \"\" && result != null) {\n        let details = inputParam.inventory_stock_detail;\n\n        let qry = \"\";\n\n        for (let i = 0; i < details.length; i++) {\n          qry +=\n            \" UPDATE `hims_f_inventory_material_detail` SET quantity_outstanding='\" +\n            details[i].quantity_outstanding +\n            \"' WHERE hims_f_inventory_material_detail_id='\" +\n            details[i].material_requisition_detail_id +\n            \"';\";\n        }\n        debugLog(\"qry: \", qry);\n\n        if (qry != \"\") {\n          connection.query(qry, (error, detailResult) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            req.records = detailResult;\n            next();\n          });\n        } else {\n          releaseDBConnection(db, connection);\n          req.records = {};\n          next();\n        }\n      } else {\n        connection.rollback(() => {\n          releaseDBConnection(db, connection);\n          req.records = {};\n          next();\n        });\n      }\n      // releaseDBConnection(db, connection);\n      // req.records = result;\n      // next();\n    }\n  );\n};\n\nmodule.exports = {\n  addinventoryrequisitionEntry,\n  getinventoryrequisitionEntry,\n  updateinventoryrequisitionEntry,\n  getinventoryAuthrequisitionList,\n  updateinvreqEntryOnceTranfer\n};\n"]}