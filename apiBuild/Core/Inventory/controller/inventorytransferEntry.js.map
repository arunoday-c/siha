{"version":3,"sources":["../../../../src/Inventory/controller/inventorytransferEntry.js"],"names":["config","db","api","post","addtransferEntry","req","res","next","result","records","status","httpStatus","ok","json","success","releaseConnection","get","gettransferEntry","put","generateDbConnection","updatetransferEntry","updateinvreqEntryOnceTranfer","connection","commit","error","rollback","getrequisitionEntryTransfer"],"mappings":";;;;;;AAAA;;AACA;;AACA;;;;AACA;;AAMA;;AACA;;;;kBAEe,gBAAoB;AAAA,MAAjBA,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,EAAS,QAATA,EAAS;;AACjC,MAAIC,MAAM,sBAAV;;AAEA;AACAA,MAAIC,IAAJ,CACE,mBADF,EAEEC,wCAFF,EAGE,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACAH,QAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BC,eAAS,IADoB;AAE7BL,eAASD;AAFoB,KAA/B;AAIAD;AACD,GAVH,EAWEQ,wBAXF;;AAcA;AACAb,MAAIc,GAAJ,CACE,mBADF,EAEEC,wCAFF,EAGE,UAACZ,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACAH,QAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BC,eAAS,IADoB;AAE7BL,eAASD;AAFoB,KAA/B;AAIAD;AACD,GAVH,EAWEQ,wBAXF;;AAcA;AACAb,MAAIgB,GAAJ,CACE,sBADF,EAEEC,2BAFF,EAGEC,2CAHF,EAIEC,uDAJF,EAKE,UAAChB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIe,aAAajB,IAAIiB,UAArB;AACAA,eAAWC,MAAX,CAAkB,iBAAS;AACzB,6BAAS,OAAT,EAAkBC,KAAlB;AACA,6BAAS,cAAT,EAAyBA,KAAzB;AACA,UAAIA,KAAJ,EAAW;AACT,+BAAS,YAAT,EAAuBA,KAAvB;AACAF,mBAAWG,QAAX,CAAoB,YAAM;AACxBlB,eAAKiB,KAAL;AACD,SAFD;AAGD,OALD,MAKO;AACL,YAAIhB,SAASH,IAAII,OAAjB;AACAH,YAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BC,mBAAS,IADoB;AAE7BL,mBAASD;AAFoB,SAA/B;AAIAD;AACD;AACF,KAhBD;AAiBD,GAxBH,EAyBEQ,wBAzBF;;AA4BA;AACAb,MAAIc,GAAJ,CACE,8BADF,EAEEU,mDAFF,EAGE,UAACrB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACAH,QAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BC,eAAS,IADoB;AAE7BL,eAASD;AAFoB,KAA/B;AAIAD;AACD,GAVH,EAWEQ,wBAXF;;AAcA,SAAOb,GAAP;AACD,C","file":"inventorytransferEntry.js","sourcesContent":["import { Router } from \"express\";\nimport { releaseConnection, generateDbConnection } from \"../../utils\";\nimport httpStatus from \"../../utils/httpStatus\";\nimport {\n  addtransferEntry,\n  gettransferEntry,\n  updatetransferEntry,\n  getrequisitionEntryTransfer\n} from \"../model/inventorytransferEntry\";\nimport { debugFunction, debugLog } from \"../../utils/logging\";\nimport { updateinvreqEntryOnceTranfer } from \"../model/inventoryrequisitionEntry\";\n\nexport default ({ config, db }) => {\n  let api = Router();\n\n  // created by Nowshad :to add Pharmacy POS Entry\n  api.post(\n    \"/addtransferEntry\",\n    addtransferEntry,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  // created by Nowshad :to get Pos Entry\n  api.get(\n    \"/gettransferEntry\",\n    gettransferEntry,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  // created by Nowshad :update Item Storage and POS\n  api.put(\n    \"/updatetransferEntry\",\n    generateDbConnection,\n    updatetransferEntry,\n    updateinvreqEntryOnceTranfer,\n    (req, res, next) => {\n      let connection = req.connection;\n      connection.commit(error => {\n        debugLog(\"error\", error);\n        debugLog(\"commit error\", error);\n        if (error) {\n          debugLog(\"roll error\", error);\n          connection.rollback(() => {\n            next(error);\n          });\n        } else {\n          let result = req.records;\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: result\n          });\n          next();\n        }\n      });\n    },\n    releaseConnection\n  );\n\n  // created by Nowshad :to get Pos Entry\n  api.get(\n    \"/getrequisitionEntryTransfer\",\n    getrequisitionEntryTransfer,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  return api;\n};\n"]}