{"version":3,"sources":["../../../../src/SelfService/model/selfService.js"],"names":["getEmployeeBasicDetails","req","res","next","db","httpStatus","dataBaseNotInitilizedError","getConnection","error","connection","query","userIdentity","employee_id","result","records","e","getEmployeeDependentDetails","getEmployeeIdentificationDetails","updateEmployeeIdentificationDetails","input","body","hims_d_employee_identification_id","undefined","identity_documents_id","identity_number","valid_upto","issue_date","alert_required","alert_date","Date","updated_by","affectedRows","invalid_input","updateEmployeeDependentDetails","hims_d_employee_dependents_id","dependent_type","dependent_name","dependent_identity_type","dependent_identity_no","updateEmployeeBasicDetails","hims_d_employee_id","full_name","arabic_name","date_of_birth","sex","present_address","permanent_address","primary_contact_no","email","getLeaveMaster","addEmployeeDependentDetails","created_by","deleteEmployeeDependentDetails","tableName","id","values","module","exports"],"mappings":"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","file":"selfService.js","sourcesContent":["\"use strict\";\nimport extend from \"extend\";\nimport {\n  selectStatement,\n  whereCondition,\n  deleteRecord,\n  releaseDBConnection,\n  jsonArrayToObject\n} from \"../../utils\";\nimport httpStatus from \"../../utils/httpStatus\";\n\nimport { debugLog } from \"../../utils/logging\";\n\n//created by irfan: to get eployee basic details\nlet getEmployeeBasicDetails = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"SELECT E.hims_d_employee_id,E.employee_code,E.title_id,E.full_name,E.arabic_name,E.employee_designation_id,\\\n         D.designation_code,D.designation,\\\n            E.license_number,E.sex,E.date_of_birth,E.date_of_joining,E.date_of_resignation,E.present_address,E.present_address2,\\\n            E.present_pincode,E.present_pincode,E.present_state_id,S.state_name as present_state_name ,E.present_country_id,C.country_name present_country_name,\\\n            E.permanent_address , E.permanent_address2, E.permanent_pincode, E.permanent_city_id, E.permanent_state_id,\\\n            E.permanent_country_id, E.primary_contact_no, E.secondary_contact_no,E.email,\\\n            E.emergency_contact_person,E.emergency_contact_no,E.blood_group,\\\n            E.isdoctor,E.employee_status,E.exclude_machine_data ,E.company_bank_id ,E.employee_bank_name , E.effective_start_date,E.effective_end_date,\\\n            E.employee_bank_ifsc_code , E.employee_account_number, E.mode_of_payment, E.accomodation_provided,\\\n            E.late_coming_rule, E.leave_salary_process, E.entitled_daily_ot, E.suspend_salary, E.gratuity_applicable, E.contract_type, E.employee_group_id,\\\n            E.weekoff_from,E.overtime_group_id, E.reporting_to_id,REP.full_name as reporting_to_name, E.hospital_id ,\\\n            H.hospital_code,H.hospital_name ,E.sub_department_id  ,DEP.sub_department_name \\\n            from hims_d_employee E left join hims_d_designation D on E.employee_designation_id=D.hims_d_designation_id\\\n            left join hims_d_country C on E.present_country_id=C.hims_d_country_id  \\\n            left join hims_d_state S on  E.present_state_id=S.hims_d_state_id\\\n            left join hims_d_employee REP on E.reporting_to_id=REP.hims_d_employee_id and REP.record_status='A'\\\n            left join hims_d_hospital H on  E.hospital_id  =H.hims_d_hospital_id and H.record_status='A'\\\n            left join hims_d_sub_department DEP on E.sub_department_id=DEP.hims_d_sub_department_id and DEP.record_status='A'\\\n        where E.record_status='A' and E.hims_d_employee_id=?\",\n        req.userIdentity.employee_id,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get\nlet getEmployeeDependentDetails = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_d_employee_id, employee_code, hims_d_employee_dependents_id, ED.dependent_type,ED.dependent_name,\\\n        ED.dependent_identity_no,ED.dependent_identity_type,ID.identity_document_name\\\n        from hims_d_employee E left join hims_d_employee_dependents ED on\\\n        E.hims_d_employee_id=ED.employee_id and ED.record_status='A'\\\n        left join hims_d_identity_document ID on ED.dependent_identity_type=ID.hims_d_identity_document_id \\\n        and ID.record_status='A' where E.record_status='A' and E.hims_d_employee_id=?\",\n        req.userIdentity.employee_id,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get\nlet getEmployeeIdentificationDetails = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_d_employee_id, employee_code,  full_name ,\\\n        hims_d_employee_identification_id,  identity_documents_id, \\\n        identity_number, valid_upto, issue_date ,ID.identity_document_name from hims_d_employee E \\\n        left join hims_d_employee_identification EI on E.hims_d_employee_id=EI.employee_id and  EI.record_status='A'\\\n        left join hims_d_identity_document ID on EI.identity_documents_id=ID.hims_d_identity_document_id \\\n        and  ID.record_status='A' where  E.record_status='A' and E.hims_d_employee_id=?\",\n        req.userIdentity.employee_id,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:\nlet updateEmployeeIdentificationDetails = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    if (\n      input.hims_d_employee_identification_id != \"null\" &&\n      input.hims_d_employee_identification_id != undefined\n    ) {\n      db.getConnection((error, connection) => {\n        if (error) {\n          next(error);\n        }\n\n        connection.query(\n          \" update hims_d_employee_identification set \\\n        identity_documents_id=?, identity_number=?, valid_upto=?, \\\n        issue_date=?, alert_required=?, alert_date=?,  updated_date=?, updated_by=?\\\n        where record_status='A' and hims_d_employee_identification_id=?;\",\n          [\n            input.identity_documents_id,\n            input.identity_number,\n            input.valid_upto,\n            input.issue_date,\n            input.alert_required,\n            input.alert_date,\n            new Date(),\n            input.updated_by,\n            input.hims_d_employee_identification_id\n          ],\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n            if (result.affectedRows > 0) {\n              req.records = result;\n              next();\n            } else {\n              req.records = { invalid_input: true };\n              next();\n            }\n          }\n        );\n      });\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:\nlet updateEmployeeDependentDetails = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    if (\n      input.hims_d_employee_dependents_id != \"null\" &&\n      input.hims_d_employee_dependents_id != undefined\n    ) {\n      db.getConnection((error, connection) => {\n        if (error) {\n          next(error);\n        }\n\n        connection.query(\n          \" update hims_d_employee_dependents set dependent_type=?,dependent_name=?,\\\n          dependent_identity_type=?,dependent_identity_no=?, updated_date=?, updated_by=?\\\n        where record_status='A' and hims_d_employee_dependents_id=?;\",\n          [\n            input.dependent_type,\n            input.dependent_name,\n            input.dependent_identity_type,\n            input.dependent_identity_no,\n            new Date(),\n            input.updated_by,\n            input.hims_d_employee_dependents_id\n          ],\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n            if (result.affectedRows > 0) {\n              req.records = result;\n              next();\n            } else {\n              req.records = { invalid_input: true };\n              next();\n            }\n          }\n        );\n      });\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:\nlet updateEmployeeBasicDetails = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    if (\n      input.hims_d_employee_id != \"null\" &&\n      input.hims_d_employee_id != undefined\n    ) {\n      db.getConnection((error, connection) => {\n        if (error) {\n          next(error);\n        }\n\n        connection.query(\n          \" update hims_d_employee set full_name=?,arabic_name=?,\\\n          date_of_birth=?,sex=?,present_address=?,permanent_address=?,primary_contact_no=?,email=?,\\\n           updated_date=?, updated_by=?\\\n        where record_status='A' and hims_d_employee_id=?;\",\n          [\n            input.full_name,\n            input.arabic_name,\n            input.date_of_birth,\n            input.sex,\n            input.present_address,\n            input.permanent_address,\n            input.primary_contact_no,\n            input.email,\n            new Date(),\n            input.updated_by,\n            input.hims_d_employee_id\n          ],\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n            if (result.affectedRows > 0) {\n              req.records = result;\n              next();\n            } else {\n              req.records = { invalid_input: true };\n              next();\n            }\n          }\n        );\n      });\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet getLeaveMaster = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    //, , , , , , ,\n    //, , , , , , created_by, created_date, updated_date, updated_by, record_status\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_d_leave_id, leave_code,  leave_description, leave_type, include_weekoff, religion_required\\\n      include_holiday,  leave_mode, leave_accrual, leave_encash, leave_carry_forward, leave_status, religion_id \\\n       from hims_d_leave where record_status='A' and leave_status='A'\",\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:api to\nlet addEmployeeDependentDetails = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT  INTO hims_d_employee_dependents ( employee_id, dependent_type, dependent_name, \\\n          dependent_identity_type, dependent_identity_no,\\\n          created_date,created_by,updated_date,updated_by) values(\\\n            ?,?,?,?,?,?,?,?,?)\",\n        [\n          input.employee_id,\n          input.dependent_type,\n          input.dependent_name,\n          input.dependent_identity_type,\n          input.dependent_identity_no,\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by:irfan to delete\nlet deleteEmployeeDependentDetails = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let input = extend({}, req.body);\n    if (\n      input.hims_d_employee_dependents_id != \"null\" &&\n      input.hims_d_employee_dependents_id != undefined\n    ) {\n      deleteRecord(\n        {\n          db: req.db,\n          tableName: \"hims_d_employee_dependents\",\n          id: req.body.hims_d_employee_dependents_id,\n          query:\n            \"UPDATE hims_d_employee_dependents SET  record_status='I' WHERE  record_status='A' and hims_d_employee_dependents_id=?\",\n          values: [req.body.hims_d_employee_dependents_id]\n        },\n        result => {\n          if (result.records.affectedRows > 0) {\n            req.records = result;\n            next();\n          } else {\n            req.records = { invalid_input: true };\n            next();\n          }\n        },\n        error => {\n          next(error);\n        },\n        true\n      );\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  getEmployeeBasicDetails,\n  getEmployeeDependentDetails,\n  getEmployeeIdentificationDetails,\n  updateEmployeeIdentificationDetails,\n  updateEmployeeDependentDetails,\n  updateEmployeeBasicDetails,\n  getLeaveMaster,\n  addEmployeeDependentDetails,\n  deleteEmployeeDependentDetails\n};\n"]}