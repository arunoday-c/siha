{"version":3,"sources":["../../../src/controller/patientType.js"],"names":["config","db","api","delete","deletePatientType","req","res","next","result","records","status","httpStatus","ok","json","releaseConnection","get","selectPattypeStatement","undefined","Object","total_pages","success","getPatientType","length","generateError","notFound","post","addPatientType","put","updatePatientType"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;AAOA;;;;;;kBACe,gBAAoB;AAAA,MAAjBA,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,EAAS,QAATA,EAAS;;AACjC,MAAIC,MAAM,sBAAV;;AAEAA,MAAIC,MAAJ,CACE,SADF,EAEEC,8BAFF,EAGE,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACAH,QAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+BL,MAA/B;AACAD;AACD,GAPH,EAQEO,wBARF;;AAWAZ,MAAIa,GAAJ,CACE,MADF,EAEEC,mCAFF,EAGE,UAACX,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,2BAAS,QAAT,EAAmBF,IAAII,OAAvB;AACA,QAAID,eAAJ;AACA,QAAIH,IAAII,OAAJ,KAAgBQ,SAApB,EAA+B;AAC7BT,eAAS,IAAIU,MAAJ,EAAT;AACAV,aAAO,YAAP,IAAuBH,IAAII,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkBU,WAAzC;AACAX,aAAO,MAAP,IAAiBH,IAAII,OAAJ,CAAY,CAAZ,CAAjB;AACD;AACD,2BAAS,QAAT,EAAmBD,MAAnB;AACAF,QAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BO,eAAS,IADoB;AAE7BX,eAASD;AAFoB,KAA/B;AAIAD;AACD,GAjBH,EAkBEO,wBAlBF;;AAqBAZ,MAAIa,GAAJ,CACE,iBADF,EAEEM,2BAFF,EAGE,UAAChB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACA,QAAID,OAAOc,MAAP,IAAiB,CAArB,EAAwB;AACtBf,WAAKI,qBAAWY,aAAX,CAAyBZ,qBAAWa,QAApC,EAA8C,kBAA9C,CAAL;AACD,KAFD,MAEO;AACLlB,UAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BO,iBAAS,IADoB;AAE7BX,iBAASD;AAFoB,OAA/B;AAID;AACDD;AACD,GAdH,EAeEO,wBAfF;;AAkBAZ,MAAIuB,IAAJ,CACE,MADF,EAEEC,2BAFF,EAGE,UAACrB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACA,QAAID,OAAOc,MAAP,IAAiB,CAArB,EAAwB;AACtBhB,UAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BO,iBAAS,IADoB;AAE7BX,iBAASD;AAFoB,OAA/B;AAIAD;AACD,KAND,MAMO;AACLA,WAAKI,qBAAWY,aAAX,CAAyBZ,qBAAWa,QAApC,EAA8C,kBAA9C,CAAL;AACD;AACF,GAdH,EAeEV,wBAfF;AAiBAZ,MAAIyB,GAAJ,CACE,SADF,EAEEC,8BAFF,EAGE,UAACvB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACA,QAAID,OAAOc,MAAP,IAAiB,CAArB,EAAwB;AACtBhB,UAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BO,iBAAS,IADoB;AAE7BX,iBAASD;AAFoB,OAA/B;AAIAD;AACD,KAND,MAMO;AACLA,WAAKI,qBAAWY,aAAX,CAAyBZ,qBAAWa,QAApC,EAA8C,kBAA9C,CAAL;AACD;AACF,GAdH,EAeEV,wBAfF;AAiBA,SAAOZ,GAAP;AACD,C","file":"patientType.js","sourcesContent":["import { Router } from \"express\";\nimport { releaseConnection } from \"../utils\";\nimport { debugLog } from \"../utils/logging\";\nimport {\n  selectPattypeStatement,\n  addPatientType,\n  updatePatientType,\n  deletePatientType,\n  getPatientType\n} from \"../model/patientType\";\nimport httpStatus from \"../utils/httpStatus\";\nexport default ({ config, db }) => {\n  let api = Router();\n\n  api.delete(\n    \"/delete\",\n    deletePatientType,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json(result);\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/get\",\n    selectPattypeStatement,\n    (req, res, next) => {\n      debugLog(\"Data: \", req.records);\n      let result;\n      if (req.records !== undefined) {\n        result = new Object();\n        result[\"totalPages\"] = req.records[1][0].total_pages;\n        result[\"data\"] = req.records[0];\n      }\n      debugLog(\"Data: \", result);\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/getPatientType\",\n    getPatientType,\n    (req, res, next) => {\n      let result = req.records;\n      if (result.length == 0) {\n        next(httpStatus.generateError(httpStatus.notFound, \"No records found\"));\n      } else {\n        res.status(httpStatus.ok).json({\n          success: true,\n          records: result\n        });\n      }\n      next();\n    },\n    releaseConnection\n  );\n\n  api.post(\n    \"/add\",\n    addPatientType,\n    (req, res, next) => {\n      let result = req.records;\n      if (result.length != 0) {\n        res.status(httpStatus.ok).json({\n          success: true,\n          records: result\n        });\n        next();\n      } else {\n        next(httpStatus.generateError(httpStatus.notFound, \"No records found\"));\n      }\n    },\n    releaseConnection\n  );\n  api.put(\n    \"/update\",\n    updatePatientType,\n    (req, res, next) => {\n      let result = req.records;\n      if (result.length != 0) {\n        res.status(httpStatus.ok).json({\n          success: true,\n          records: result\n        });\n        next();\n      } else {\n        next(httpStatus.generateError(httpStatus.notFound, \"No records found\"));\n      }\n    },\n    releaseConnection\n  );\n  return api;\n};\n"]}