{"version":3,"sources":["../../../src/controller/labmasters.js"],"names":["api","delete","deleteSection","req","res","next","result","records","status","httpStatus","ok","json","releaseConnection","get","selectSection","length","generateError","notFound","success","post","insertSection","put","updateSection","deleteContainer","selectContainer","insertContainer","updateContainer","deleteSpecimen","selectSpecimen","insertSpecimen","updateSpecimen","deleteAnalytes","selectTestCategory","insertAnalytes","updateAnalytes","deleteTestCategory","selectAnalytes","insertTestCategory","updateTestCategory"],"mappings":";;;;;;AAAA;;AAsBA;;AACA;;AACA;;;;AACA;;;;kBACe,YAAM;AACnB,MAAIA,MAAM,sBAAV;;AAEA;AACAA,MAAIC,MAAJ,CACE,gBADF,EAEEC,yBAFF,EAGE,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACAH,QAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+BL,MAA/B;AACAD;AACD,GAPH,EAQEO,wBARF;;AAWAZ,MAAIa,GAAJ,CACE,gBADF,EAEEC,yBAFF,EAGE,UAACX,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACA,QAAID,OAAOS,MAAP,IAAiB,CAArB,EAAwB;AACtBV,WAAKI,qBAAWO,aAAX,CAAyBP,qBAAWQ,QAApC,EAA8C,kBAA9C,CAAL;AACD,KAFD,MAEO;AACLb,UAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BO,iBAAS,IADoB;AAE7BX,iBAASD;AAFoB,OAA/B;AAID;AACDD;AACD,GAdH,EAeEO,wBAfF;;AAkBAZ,MAAImB,IAAJ,CACE,gBADF,EAEEC,yBAFF,EAGE,UAACjB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACA,QAAID,OAAOS,MAAP,IAAiB,CAArB,EAAwB;AACtBX,UAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BO,iBAAS,IADoB;AAE7BX,iBAASD;AAFoB,OAA/B;AAIAD;AACD,KAND,MAMO;AACLA,WAAKI,qBAAWO,aAAX,CAAyBP,qBAAWQ,QAApC,EAA8C,kBAA9C,CAAL;AACD;AACF,GAdH,EAeEL,wBAfF;;AAkBAZ,MAAIqB,GAAJ,CACE,gBADF,EAEEC,yBAFF,EAGE,UAACnB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACA,QAAID,OAAOS,MAAP,IAAiB,CAArB,EAAwB;AACtBX,UAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BO,iBAAS,IADoB;AAE7BX,iBAASD;AAFoB,OAA/B;AAIAD;AACD,KAND,MAMO;AACLA,WAAKI,qBAAWO,aAAX,CAAyBP,qBAAWQ,QAApC,EAA8C,kBAA9C,CAAL;AACD;AACF,GAdH,EAeEL,wBAfF;;AAkBA;AACAZ,MAAIC,MAAJ,CACE,kBADF,EAEEsB,2BAFF,EAGE,UAACpB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACAH,QAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+BL,MAA/B;AACAD;AACD,GAPH,EAQEO,wBARF;;AAWAZ,MAAIa,GAAJ,CACE,kBADF,EAEEW,2BAFF,EAGE,UAACrB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACA,QAAID,OAAOS,MAAP,IAAiB,CAArB,EAAwB;AACtBV,WAAKI,qBAAWO,aAAX,CAAyBP,qBAAWQ,QAApC,EAA8C,kBAA9C,CAAL;AACD,KAFD,MAEO;AACLb,UAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BO,iBAAS,IADoB;AAE7BX,iBAASD;AAFoB,OAA/B;AAID;AACDD;AACD,GAdH,EAeEO,wBAfF;;AAkBAZ,MAAImB,IAAJ,CACE,kBADF,EAEEM,2BAFF,EAGE,UAACtB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACA,QAAID,OAAOS,MAAP,IAAiB,CAArB,EAAwB;AACtBX,UAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BO,iBAAS,IADoB;AAE7BX,iBAASD;AAFoB,OAA/B;AAIAD;AACD,KAND,MAMO;AACLA,WAAKI,qBAAWO,aAAX,CAAyBP,qBAAWQ,QAApC,EAA8C,kBAA9C,CAAL;AACD;AACF,GAdH,EAeEL,wBAfF;AAiBAZ,MAAIqB,GAAJ,CACE,kBADF,EAEEK,2BAFF,EAGE,UAACvB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACA,QAAID,OAAOS,MAAP,IAAiB,CAArB,EAAwB;AACtBX,UAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BO,iBAAS,IADoB;AAE7BX,iBAASD;AAFoB,OAA/B;AAIAD;AACD,KAND,MAMO;AACLA,WAAKI,qBAAWO,aAAX,CAAyBP,qBAAWQ,QAApC,EAA8C,kBAA9C,CAAL;AACD;AACF,GAdH,EAeEL,wBAfF;;AAkBA;AACAZ,MAAIC,MAAJ,CACE,iBADF,EAEE0B,0BAFF,EAGE,UAACxB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACAH,QAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+BL,MAA/B;AACAD;AACD,GAPH,EAQEO,wBARF;;AAWAZ,MAAIa,GAAJ,CACE,iBADF,EAEEe,0BAFF,EAGE,UAACzB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACA,QAAID,OAAOS,MAAP,IAAiB,CAArB,EAAwB;AACtBV,WAAKI,qBAAWO,aAAX,CAAyBP,qBAAWQ,QAApC,EAA8C,kBAA9C,CAAL;AACD,KAFD,MAEO;AACLb,UAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BO,iBAAS,IADoB;AAE7BX,iBAASD;AAFoB,OAA/B;AAID;AACDD;AACD,GAdH,EAeEO,wBAfF;;AAkBAZ,MAAImB,IAAJ,CACE,iBADF,EAEEU,0BAFF,EAGE,UAAC1B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACA,QAAID,OAAOS,MAAP,IAAiB,CAArB,EAAwB;AACtBX,UAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BO,iBAAS,IADoB;AAE7BX,iBAASD;AAFoB,OAA/B;AAIAD;AACD,KAND,MAMO;AACLA,WAAKI,qBAAWO,aAAX,CAAyBP,qBAAWQ,QAApC,EAA8C,kBAA9C,CAAL;AACD;AACF,GAdH,EAeEL,wBAfF;AAiBAZ,MAAIqB,GAAJ,CACE,iBADF,EAEES,0BAFF,EAGE,UAAC3B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACA,QAAID,OAAOS,MAAP,IAAiB,CAArB,EAAwB;AACtBX,UAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BO,iBAAS,IADoB;AAE7BX,iBAASD;AAFoB,OAA/B;AAIAD;AACD,KAND,MAMO;AACLA,WAAKI,qBAAWO,aAAX,CAAyBP,qBAAWQ,QAApC,EAA8C,kBAA9C,CAAL;AACD;AACF,GAdH,EAeEL,wBAfF;;AAkBA;AACAZ,MAAIC,MAAJ,CACE,iBADF,EAEE8B,0BAFF,EAGE,UAAC5B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACAH,QAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+BL,MAA/B;AACAD;AACD,GAPH,EAQEO,wBARF;;AAWAZ,MAAIa,GAAJ,CACE,qBADF,EAEEmB,8BAFF,EAGE,UAAC7B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACA,QAAID,OAAOS,MAAP,IAAiB,CAArB,EAAwB;AACtBV,WAAKI,qBAAWO,aAAX,CAAyBP,qBAAWQ,QAApC,EAA8C,kBAA9C,CAAL;AACD,KAFD,MAEO;AACLb,UAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BO,iBAAS,IADoB;AAE7BX,iBAASD;AAFoB,OAA/B;AAID;AACDD;AACD,GAdH,EAeEO,wBAfF;;AAkBAZ,MAAImB,IAAJ,CACE,iBADF,EAEEc,0BAFF,EAGE,UAAC9B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACA,QAAID,OAAOS,MAAP,IAAiB,CAArB,EAAwB;AACtBX,UAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BO,iBAAS,IADoB;AAE7BX,iBAASD;AAFoB,OAA/B;AAIAD;AACD,KAND,MAMO;AACLA,WAAKI,qBAAWO,aAAX,CAAyBP,qBAAWQ,QAApC,EAA8C,kBAA9C,CAAL;AACD;AACF,GAdH,EAeEL,wBAfF;AAiBAZ,MAAIqB,GAAJ,CACE,iBADF,EAEEa,0BAFF,EAGE,UAAC/B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACA,QAAID,OAAOS,MAAP,IAAiB,CAArB,EAAwB;AACtBX,UAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BO,iBAAS,IADoB;AAE7BX,iBAASD;AAFoB,OAA/B;AAIAD;AACD,KAND,MAMO;AACLA,WAAKI,qBAAWO,aAAX,CAAyBP,qBAAWQ,QAApC,EAA8C,kBAA9C,CAAL;AACD;AACF,GAdH,EAeEL,wBAfF;;AAkBA;AACAZ,MAAIC,MAAJ,CACE,qBADF,EAEEkC,8BAFF,EAGE,UAAChC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACAH,QAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+BL,MAA/B;AACAD;AACD,GAPH,EAQEO,wBARF;;AAWAZ,MAAIa,GAAJ,CACE,iBADF,EAEEuB,0BAFF,EAGE,UAACjC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACA,QAAID,OAAOS,MAAP,IAAiB,CAArB,EAAwB;AACtBV,WAAKI,qBAAWO,aAAX,CAAyBP,qBAAWQ,QAApC,EAA8C,kBAA9C,CAAL;AACD,KAFD,MAEO;AACLb,UAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BO,iBAAS,IADoB;AAE7BX,iBAASD;AAFoB,OAA/B;AAID;AACDD;AACD,GAdH,EAeEO,wBAfF;;AAkBAZ,MAAImB,IAAJ,CACE,qBADF,EAEEkB,8BAFF,EAGE,UAAClC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACA,QAAID,OAAOS,MAAP,IAAiB,CAArB,EAAwB;AACtBX,UAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BO,iBAAS,IADoB;AAE7BX,iBAASD;AAFoB,OAA/B;AAIAD;AACD,KAND,MAMO;AACLA,WAAKI,qBAAWO,aAAX,CAAyBP,qBAAWQ,QAApC,EAA8C,kBAA9C,CAAL;AACD;AACF,GAdH,EAeEL,wBAfF;AAiBAZ,MAAIqB,GAAJ,CACE,qBADF,EAEEiB,8BAFF,EAGE,UAACnC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClB,QAAIC,SAASH,IAAII,OAAjB;AACA,QAAID,OAAOS,MAAP,IAAiB,CAArB,EAAwB;AACtBX,UAAII,MAAJ,CAAWC,qBAAWC,EAAtB,EAA0BC,IAA1B,CAA+B;AAC7BO,iBAAS,IADoB;AAE7BX,iBAASD;AAFoB,OAA/B;AAIAD;AACD,KAND,MAMO;AACLA,WAAKI,qBAAWO,aAAX,CAAyBP,qBAAWQ,QAApC,EAA8C,kBAA9C,CAAL;AACD;AACF,GAdH,EAeEL,wBAfF;;AAkBA,SAAOZ,GAAP;AACD,C","file":"labmasters.js","sourcesContent":["import {\n  selectSection,\n  insertSection,\n  updateSection,\n  deleteSection,\n  selectContainer,\n  insertContainer,\n  updateContainer,\n  deleteContainer,\n  selectSpecimen,\n  insertSpecimen,\n  updateSpecimen,\n  deleteSpecimen,\n  selectAnalytes,\n  insertAnalytes,\n  updateAnalytes,\n  deleteAnalytes,\n  selectTestCategory,\n  insertTestCategory,\n  updateTestCategory,\n  deleteTestCategory\n} from \"../model/labmasters\";\nimport { Router } from \"express\";\nimport { releaseConnection, bulkMasters } from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { debugLog } from \"../utils/logging\";\nexport default () => {\n  let api = Router();\n\n  //Section\n  api.delete(\n    \"/deleteSection\",\n    deleteSection,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json(result);\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/selectSection\",\n    selectSection,\n    (req, res, next) => {\n      let result = req.records;\n      if (result.length == 0) {\n        next(httpStatus.generateError(httpStatus.notFound, \"No records found\"));\n      } else {\n        res.status(httpStatus.ok).json({\n          success: true,\n          records: result\n        });\n      }\n      next();\n    },\n    releaseConnection\n  );\n\n  api.post(\n    \"/insertSection\",\n    insertSection,\n    (req, res, next) => {\n      let result = req.records;\n      if (result.length != 0) {\n        res.status(httpStatus.ok).json({\n          success: true,\n          records: result\n        });\n        next();\n      } else {\n        next(httpStatus.generateError(httpStatus.notFound, \"No records found\"));\n      }\n    },\n    releaseConnection\n  );\n\n  api.put(\n    \"/updateSection\",\n    updateSection,\n    (req, res, next) => {\n      let result = req.records;\n      if (result.length != 0) {\n        res.status(httpStatus.ok).json({\n          success: true,\n          records: result\n        });\n        next();\n      } else {\n        next(httpStatus.generateError(httpStatus.notFound, \"No records found\"));\n      }\n    },\n    releaseConnection\n  );\n\n  //Container\n  api.delete(\n    \"/deleteContainer\",\n    deleteContainer,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json(result);\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/selectContainer\",\n    selectContainer,\n    (req, res, next) => {\n      let result = req.records;\n      if (result.length == 0) {\n        next(httpStatus.generateError(httpStatus.notFound, \"No records found\"));\n      } else {\n        res.status(httpStatus.ok).json({\n          success: true,\n          records: result\n        });\n      }\n      next();\n    },\n    releaseConnection\n  );\n\n  api.post(\n    \"/insertContainer\",\n    insertContainer,\n    (req, res, next) => {\n      let result = req.records;\n      if (result.length != 0) {\n        res.status(httpStatus.ok).json({\n          success: true,\n          records: result\n        });\n        next();\n      } else {\n        next(httpStatus.generateError(httpStatus.notFound, \"No records found\"));\n      }\n    },\n    releaseConnection\n  );\n  api.put(\n    \"/updateContainer\",\n    updateContainer,\n    (req, res, next) => {\n      let result = req.records;\n      if (result.length != 0) {\n        res.status(httpStatus.ok).json({\n          success: true,\n          records: result\n        });\n        next();\n      } else {\n        next(httpStatus.generateError(httpStatus.notFound, \"No records found\"));\n      }\n    },\n    releaseConnection\n  );\n\n  //Specimen\n  api.delete(\n    \"/deleteSpecimen\",\n    deleteSpecimen,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json(result);\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/selectSpecimen\",\n    selectSpecimen,\n    (req, res, next) => {\n      let result = req.records;\n      if (result.length == 0) {\n        next(httpStatus.generateError(httpStatus.notFound, \"No records found\"));\n      } else {\n        res.status(httpStatus.ok).json({\n          success: true,\n          records: result\n        });\n      }\n      next();\n    },\n    releaseConnection\n  );\n\n  api.post(\n    \"/insertSpecimen\",\n    insertSpecimen,\n    (req, res, next) => {\n      let result = req.records;\n      if (result.length != 0) {\n        res.status(httpStatus.ok).json({\n          success: true,\n          records: result\n        });\n        next();\n      } else {\n        next(httpStatus.generateError(httpStatus.notFound, \"No records found\"));\n      }\n    },\n    releaseConnection\n  );\n  api.put(\n    \"/updateSpecimen\",\n    updateSpecimen,\n    (req, res, next) => {\n      let result = req.records;\n      if (result.length != 0) {\n        res.status(httpStatus.ok).json({\n          success: true,\n          records: result\n        });\n        next();\n      } else {\n        next(httpStatus.generateError(httpStatus.notFound, \"No records found\"));\n      }\n    },\n    releaseConnection\n  );\n\n  //Analyte\n  api.delete(\n    \"/deleteAnalytes\",\n    deleteAnalytes,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json(result);\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/selectTestCategory\",\n    selectTestCategory,\n    (req, res, next) => {\n      let result = req.records;\n      if (result.length == 0) {\n        next(httpStatus.generateError(httpStatus.notFound, \"No records found\"));\n      } else {\n        res.status(httpStatus.ok).json({\n          success: true,\n          records: result\n        });\n      }\n      next();\n    },\n    releaseConnection\n  );\n\n  api.post(\n    \"/insertAnalytes\",\n    insertAnalytes,\n    (req, res, next) => {\n      let result = req.records;\n      if (result.length != 0) {\n        res.status(httpStatus.ok).json({\n          success: true,\n          records: result\n        });\n        next();\n      } else {\n        next(httpStatus.generateError(httpStatus.notFound, \"No records found\"));\n      }\n    },\n    releaseConnection\n  );\n  api.put(\n    \"/updateAnalytes\",\n    updateAnalytes,\n    (req, res, next) => {\n      let result = req.records;\n      if (result.length != 0) {\n        res.status(httpStatus.ok).json({\n          success: true,\n          records: result\n        });\n        next();\n      } else {\n        next(httpStatus.generateError(httpStatus.notFound, \"No records found\"));\n      }\n    },\n    releaseConnection\n  );\n\n  //TestCategory\n  api.delete(\n    \"/deleteTestCategory\",\n    deleteTestCategory,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json(result);\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/selectAnalytes\",\n    selectAnalytes,\n    (req, res, next) => {\n      let result = req.records;\n      if (result.length == 0) {\n        next(httpStatus.generateError(httpStatus.notFound, \"No records found\"));\n      } else {\n        res.status(httpStatus.ok).json({\n          success: true,\n          records: result\n        });\n      }\n      next();\n    },\n    releaseConnection\n  );\n\n  api.post(\n    \"/insertTestCategory\",\n    insertTestCategory,\n    (req, res, next) => {\n      let result = req.records;\n      if (result.length != 0) {\n        res.status(httpStatus.ok).json({\n          success: true,\n          records: result\n        });\n        next();\n      } else {\n        next(httpStatus.generateError(httpStatus.notFound, \"No records found\"));\n      }\n    },\n    releaseConnection\n  );\n  api.put(\n    \"/updateTestCategory\",\n    updateTestCategory,\n    (req, res, next) => {\n      let result = req.records;\n      if (result.length != 0) {\n        res.status(httpStatus.ok).json({\n          success: true,\n          records: result\n        });\n        next();\n      } else {\n        next(httpStatus.generateError(httpStatus.notFound, \"No records found\"));\n      }\n    },\n    releaseConnection\n  );\n\n  return api;\n};\n"]}