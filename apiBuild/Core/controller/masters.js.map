{"version":3,"sources":["../../../src/controller/masters.js"],"names":["api","get","getFormula","req","res","next","_recordds","records","status","httpStatus","ok","json","success","length","post","_xheaders","headers","request","url","body","err","resp","statusCode","JSON","parse","qs","query","message","_result","_resultData","fileExtention","notFound","_mime","mime","getType","setHeader","bufferStream","stream","PassThrough","end","Buffer","from","pipe","key","result","clinicalNonClinicalAll","value","resultData","releaseConnection","visaMaster","titleMaster","countryMaster","stateMaster","cityMaster","masterDir","path","join","__dirname","fs","existsSync","readFileSync","LINQ","SelectMany","hims_d_country_id","items","country_name","arabic_country_name","states","Where","state","country_id","Select","hims_d_state_id","s","state_name","cities","c","state_id","ToArray","relegionMaster","nationalityMaster","autoGenMaster","killDbConnections","getBank"],"mappings":"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","file":"masters.js","sourcesContent":["import {\n  titleMaster,\n  countryMaster,\n  stateMaster,\n  cityMaster,\n  relegionMaster,\n  nationalityMaster,\n  autoGenMaster,\n  visaMaster,\n  clinicalNonClinicalAll,\n  countryStateCity,\n  killDbConnections,\n  getBank\n} from \"../model/masters\";\nimport { Router } from \"express\";\nimport { releaseConnection, bulkMasters } from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { LINQ } from \"node-linq\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { getCacheData, setCacheData } from \"../utils/caching\";\nimport { saveImageInTemp, showFile } from \"../utils/images\";\nimport { getFormula } from \"../model/algaeh_formulas\";\nimport request from \"request\";\nimport { debugLog } from \"../utils/logging\";\nimport mime from \"mime/lite\";\nimport stream from \"stream\";\nexport default () => {\n  let api = Router();\n\n  api.get(\"/algaehFormula\", getFormula, (req, res, next) => {\n    const _recordds = req.records;\n    res.status(httpStatus.ok).json({\n      success: true,\n      records: _recordds.length > 0 ? _recordds[0] : {}\n    });\n  });\n\n  // api.post(\"/imageSave\", saveImageInTemp);\n  api.post(\"/imageSave\", (req, res, next) => {\n    const _xheaders = req.headers[\"x-file-details\"];\n    request.post(\n      {\n        headers: {\n          \"Content-Type\": \"application/octet-stream\",\n          \"x-file-details\": _xheaders,\n          \"access-control-allow-origin\": \"*\"\n        },\n        url: \"http://localhost:3010/api/v1/Document/save\",\n        body: req\n      },\n      (err, resp, body) => {\n        if (err) {\n          next(err);\n        }\n        res.status(resp.statusCode).json(JSON.parse(resp.body));\n      }\n    );\n  });\n  api.get(\"/getFile\", (req, res, next) => {\n    request.get(\n      {\n        url: \"http://localhost:3010/api/v1/Document/get\",\n        qs: req.query\n      },\n      (err, resp, body) => {\n        if (err) {\n          res.status(resp.statusCode).json({\n            success: false,\n            message: err\n          });\n        } else {\n          const _result = JSON.parse(body);\n\n          if (_result.success) {\n            const _resultData = _result.records;\n            if (_result.fileExtention == null) {\n              res.status(httpStatus.notFound).json({\n                success: false,\n                message: \"No file exits\"\n              });\n            } else {\n              const _mime = mime.getType(_result.fileExtention);\n              res.setHeader(\"content-type\", _mime);\n              let bufferStream = new stream.PassThrough();\n              bufferStream.end(new Buffer.from(_resultData, \"base64\"));\n              bufferStream.pipe(res);\n            }\n          } else {\n            res.status(httpStatus.notFound).json({\n              success: false,\n              message: \"file not found\"\n            });\n          }\n        }\n      }\n    );\n  });\n  api.get(\n    \"/subDeptClinicalNonClinicalAll\",\n    (req, res, next) => {\n      getCacheData({ key: \"subDeptClinicalNonClinicalAll\" }, result => {\n        if (result != null) {\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: result\n          });\n        } else {\n          next();\n        }\n      });\n    },\n    clinicalNonClinicalAll,\n    (req, res, next) => {\n      let result = req.records;\n      setCacheData(\n        {\n          key: \"subDeptClinicalNonClinicalAll\",\n          value: result\n        },\n        resultData => {\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: resultData\n          });\n          next();\n        }\n      );\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/visa\",\n    (req, res, next) => {\n      getCacheData({ key: \"visa\" }, result => {\n        if (result != null) {\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: result\n          });\n        } else {\n          next();\n        }\n      });\n    },\n    visaMaster,\n    (req, res, next) => {\n      let result = req.records;\n      setCacheData(\n        {\n          key: \"visa\",\n          value: result\n        },\n        resultData => {\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: resultData\n          });\n          next();\n        }\n      );\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/title\",\n    (req, res, next) => {\n      getCacheData({ key: \"title\" }, result => {\n        if (result != null) {\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: result\n          });\n        } else {\n          next();\n        }\n      });\n    },\n    titleMaster,\n    (req, res, next) => {\n      let result = req.records;\n\n      setCacheData(\n        {\n          key: \"title\",\n          value: result\n        },\n        resultData => {\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: resultData\n          });\n          next();\n        }\n      );\n    },\n    releaseConnection\n  );\n  api.get(\n    \"/country\",\n    countryMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/state\",\n    stateMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/city\",\n    cityMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n  api.get(\n    \"/countryStateCity\",\n    (req, res, next) => {\n      const masterDir = path.join(\n        __dirname,\n        \"../../Masters/countryStateCity.json\"\n      );\n      if (fs.existsSync(masterDir)) {\n        res.status(httpStatus.ok).json({\n          records: JSON.parse(fs.readFileSync(masterDir)),\n          success: true\n        });\n      } else {\n        countryStateCity(req, res, next);\n      }\n    },\n    (req, res, next) => {\n      let result;\n      if (req.records != null) {\n        if (req.records.length != 0) {\n          result = new LINQ(req.records[0])\n            .SelectMany(items => {\n              return {\n                hims_d_country_id: items.hims_d_country_id,\n                country_name: items.country_name,\n                arabic_country_name: items.arabic_country_name,\n                states: new LINQ(req.records[1])\n                  .Where(state => state.country_id == items.hims_d_country_id)\n                  .Select(s => {\n                    return {\n                      hims_d_state_id: s.hims_d_state_id,\n                      state_name: s.state_name,\n                      country_id: s.country_id,\n                      cities: new LINQ(req.records[2])\n                        .Where(c => c.state_id == s.hims_d_state_id)\n                        .ToArray()\n                    };\n                  })\n                  .ToArray()\n              };\n            })\n            .ToArray();\n        }\n        bulkMasters(\"countryStateCity\", result);\n        res.status(httpStatus.ok).json({\n          records: result,\n          success: true\n        });\n        next();\n      }\n    },\n    releaseConnection\n  );\n  api.get(\n    \"/relegion\",\n    (req, res, next) => {\n      getCacheData({ key: \"relegion\" }, result => {\n        if (result != null) {\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: result\n          });\n        } else {\n          next();\n        }\n      });\n    },\n    relegionMaster,\n    (req, res, next) => {\n      let result = req.records;\n\n      setCacheData(\n        {\n          key: \"relegion\",\n          value: result\n        },\n        resultData => {\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: resultData\n          });\n          next();\n        }\n      );\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/nationality\",\n    (req, res, next) => {\n      getCacheData({ key: \"nationality\" }, result => {\n        if (result != null) {\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: result\n          });\n        } else {\n          next();\n        }\n      });\n    },\n    nationalityMaster,\n    (req, res, next) => {\n      let result = req.records;\n      setCacheData(\n        {\n          key: \"nationality\",\n          value: result\n        },\n        resultData => {\n          res.status(httpStatus.ok).json({\n            success: true,\n            records: resultData\n          });\n          next();\n        }\n      );\n    },\n    releaseConnection\n  );\n  api.get(\n    \"/autogen\",\n    autoGenMaster,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/killDbConnections\",\n    killDbConnections,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n\n  api.get(\n    \"/getBank\",\n    getBank,\n    (req, res, next) => {\n      let result = req.records;\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: result\n      });\n      next();\n    },\n    releaseConnection\n  );\n  return api;\n};\n"]}