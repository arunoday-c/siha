{"version":3,"sources":["../../../src/utils/images.js"],"names":["logDirectory","path","join","__dirname","fs","existsSync","mkdirSync","downloadImage","dataString","folderName","imageName","matches","match","response","length","Error","type","data","Buffer","writeFile","err","readFileToBase64","filePath","bitmap","readFileSync","bufferFile","toString","saveImageInTemp","req","res","next","storage","multer","diskStorage","destination","file","_ip","headers","_fileDetails","JSON","parse","config","fileStorageInDB","_filePath","saveDirectly","fileType","destinationName","_path","error","filename","_fileExtention","extname","originalname","_fileName","tempFileName","pageName","upload","Fupload","fields","name","maxCount","httpStatus","generateError","internalServer","status","ok","json","success","records","showFile","_body","query","_folders","readdirSync","_fileSelection","LINQ","Where","w","includes","fileName","FirstOrDefault","_fileLocation","_resizeFormat","resize","setHeader","mime","getType","replace","width","height","resizeImage","format","pipe","createReadStream","forbidden","_filepath","readStream","transform","_format","undefined","toFormat","fit","sharp","fill","module","exports"],"mappings":"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","file":"images.js","sourcesContent":["import { debugLog } from \"../utils/logging\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport multer from \"multer\";\nimport httpStatus from \"../utils/httpStatus\";\nimport mkdirp from \"mkdirp\";\nimport { LINQ } from \"node-linq\";\nimport sharp from \"sharp\";\nimport mime from \"mime/lite\";\nimport config from \"../keys/keys\";\nlet logDirectory = path.join(__dirname, \"../../Documents\");\nif (!fs.existsSync(logDirectory)) {\n  fs.mkdirSync(logDirectory);\n}\nlet downloadImage = (dataString, folderName, imageName) => {\n  if (!fs.existsSync(logDirectory + \"/\" + folderName)) {\n    fs.mkdirSync(logDirectory + \"/\" + folderName);\n  }\n\n  var matches = dataString.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/),\n    response = {};\n  if (matches.length !== 3) {\n    return new Error(\"Invalid input string\");\n  }\n  response.type = matches[1];\n  response.data = new Buffer(matches[2], \"base64\");\n  // return response;\n  fs.writeFile(\n    logDirectory + \"/\" + folderName + \"/\" + imageName + \".webp\",\n    response.data,\n    function(err) {\n      if (err) {\n        debugLog(\"Image error for image \" + imageName, err);\n      }\n    }\n  );\n};\nfunction readFileToBase64(folderName, imageName) {\n  const filePath = logDirectory + \"/\" + folderName + \"/\" + imageName + \".webp\";\n  if (!fs.existsSync(filePath)) {\n    return null;\n  }\n  var bitmap = fs.readFileSync(filePath);\n  let bufferFile = new Buffer(bitmap).toString(\"base64\");\n  //PAT-A-0000377 convert binary data to base64 encoded string\n  return bufferFile;\n}\n\nconst saveImageInTemp = (req, res, next) => {\n  const storage = multer.diskStorage({\n    destination: function(req, file, next) {\n      debugLog(\"Inside destination\");\n      const _ip = req.headers[\"x-client-ip\"];\n      if (_ip != null && _ip != \"\") {\n        const _fileDetails = JSON.parse(req.headers[\"x-file-details\"]);\n\n        if (!config.fileStorageInDB) {\n          let _filePath = \"../../Documents\";\n\n          if (_fileDetails.saveDirectly) {\n            _filePath +=\n              \"/\" + _fileDetails.fileType + \"/\" + _fileDetails.destinationName;\n          } else {\n            _filePath += \"/TempStore/\" + _ip;\n          }\n\n          const _path = path.join(__dirname, _filePath);\n          mkdirp(_path, error => {\n            if (error) throw error;\n            else {\n              next(null, _path);\n            }\n          });\n        } else {\n          next(null);\n        }\n      } else {\n        throw \"Unknow client IP not recorded\";\n      }\n    },\n    filename: function(req, file, next) {\n      debugLog(\"Inside filename\");\n      const _fileDetails = JSON.parse(req.headers[\"x-file-details\"]);\n      const _fileExtention = path.extname(file.originalname);\n      let _fileName = _fileDetails.saveDirectly\n        ? _fileDetails.tempFileName + _fileExtention\n        : _fileDetails.pageName +\n          \"_\" +\n          _fileDetails.tempFileName +\n          _fileExtention;\n\n      next(null, _fileName);\n    }\n  });\n  let upload = multer({ storage: storage });\n  let Fupload = upload.fields([{ name: \"file\", maxCount: 12 }]);\n  Fupload(req, res, err => {\n    if (err) {\n      debugLog(\"An error occurred when uploading\", err);\n      next(httpStatus.generateError(httpStatus.internalServer, err));\n    } else {\n      debugLog(\"Success In Image\");\n      res.status(httpStatus.ok).json({\n        success: true,\n        records: \"Successfully uploaded image\"\n      });\n    }\n  });\n};\nlet showFile = (req, res, next) => {\n  const _body = req.query;\n  debugLog(\"Print Body \", _body);\n  const _path =\n    logDirectory + \"/\" + _body.fileType + \"/\" + _body.destinationName;\n\n  const _folders = fs.readdirSync(_path);\n\n  if (_folders) {\n    const _fileSelection = new LINQ(_folders)\n      .Where(w => w.includes(_body.fileName))\n      .FirstOrDefault();\n    if (_fileSelection != null) {\n      const _fileLocation = _path + \"/\" + _fileSelection;\n      if (fs.existsSync(_fileLocation)) {\n        const _resizeFormat = JSON.parse(_body.resize);\n        res.setHeader(\n          \"content-type\",\n          mime.getType(path.extname(_fileLocation).replace(\".\", \"\"))\n        );\n        if (\n          _resizeFormat != null &&\n          _resizeFormat.width != null &&\n          _resizeFormat.height != null\n        ) {\n          resizeImage(\n            _fileLocation,\n            _resizeFormat.format,\n            _resizeFormat.width,\n            _resizeFormat.height\n          ).pipe(res);\n        } else {\n          fs.createReadStream(_fileLocation).pipe(res);\n        }\n      } else {\n        next(httpStatus.generateError(httpStatus.forbidden, \"File not exits\"));\n      }\n    } else {\n      next(httpStatus.generateError(httpStatus.forbidden, \"File not exits\"));\n    }\n  } else {\n    next(httpStatus.generateError(httpStatus.forbidden, \"File not exits\"));\n  }\n};\nconst resizeImage = (_filepath, format, width, height) => {\n  const readStream = fs.createReadStream(_filepath);\n  let transform = sharp();\n  let _format = \"\";\n  if (format === undefined || format === null || format === \"\") {\n    _format = path.extname(_filepath);\n  } else {\n    _format = format;\n  }\n  _format = _format.replace(\".\", \"\");\n  transform = transform.toFormat(_format);\n  if (width || height) {\n    transform = transform.resize(width, height, {\n      fit: sharp.fit.fill\n    });\n  }\n  return readStream.pipe(transform);\n};\nmodule.exports = {\n  downloadImage,\n  readFileToBase64,\n  showFile,\n  saveImageInTemp\n};\n"]}