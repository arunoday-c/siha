{"version":3,"sources":["../../../src/utils/index.js"],"names":["paging","pageLimit","options","pageNo","pageSize","whereCondition","condition","values","total","Object","keys","length","i","forEach","key","push","selectStatement","successCallback","errorCallback","isreleaseConnection","success","message","db","getConnection","error","connection","query","result","releaseDBConnection","deleteRecord","sqlQuery","tableName","config","mysqlDb","database","tables","release","records","id","hasRecords","c","releaseConnection","req","res","flush","checkIsNull","input","defaultType","runningNumberGen","module_desc","onFailure","resultNumbers","map","item","index","prefix","numgenId","intermediate_series","postfix","parseInt","increment_by","counter","numgen_seperator","newNumber","paddedNumber","padString","String","queryAtt","numUpdate","completeNumber","onSuccess","runningNumber","paramName","callBack","postfix_start","postfix_end","resultSeries","interSeries","queryGen","updateResult","paddCharacter","toString","pool","_freeConnections","indexOf","storage","multer","diskStorage","destination","file","cb","fullFolderName","folderPath","fileName","logger","log","fieldname","splitFiledName","split","fullFolderPath","newFileName","filename","pathDeclare","require","extname","originalname","upload","uploadFile","downloadFile","jsonArrayToObject","outputObject","internalarray","arrayObj","j","sampleInputObject","inideCreate","body","created_by","replaceObject","replacer","LINQ","Where","w","originalKey","FirstOrDefault","NewKey","newFieldToInsert","row","bulkInputArrayObject","outArray","objectToChang","_","each","keyIndex","bulkMasters","bulkObject","testobj","JSON","stringify","masterDir","path","join","__dirname","fs","existsSync","mkdirSync","fPath","exists","writeStream","createWriteStream","write","end","parse","readFileSync","e","generateDbConnection","next","_db","httpStatus","dataBaseNotInitilizedError","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["import pad from \"node-string-pad\";\nimport config from \"../keys/keys\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport mkdirp from \"mkdirp\";\nimport { logger, debugFunction, debugLog } from \"./logging\";\nimport fs from \"fs\";\nimport { LINQ } from \"node-linq\";\n\nimport _ from \"underscore\";\nlet paging = options => {\n  let pageLimit = options.paging.pageNo * options.paging.pageSize;\n  return {\n    pageNo: pageLimit,\n    pageSize: options.paging.pageSize\n  };\n};\nlet whereCondition = options => {\n  let condition = \"\";\n  let values = [];\n  let total = Object.keys(options).length;\n  let i = 0;\n  Object.keys(options).forEach(key => {\n    condition += \"(\" + key + '=? or \"ALL\"=?)';\n    if (options[key] == null || options[key] == \"null\") {\n      options[key] = \"ALL\";\n    }\n\n    if (i != total - 1) condition += \" AND \";\n    values.push(options[key]);\n    values.push(options[key]);\n    i = i + 1;\n  });\n  return {\n    condition: condition,\n    values: values\n  };\n};\n\nlet selectStatement = (\n  options,\n  successCallback,\n  errorCallback,\n  isreleaseConnection\n) => {\n  isreleaseConnection = isreleaseConnection || false;\n  if (options == null) {\n    if (typeof errorCallback == \"function\") {\n      errorCallback({\n        success: false,\n        message: \"Options can not null\"\n      });\n    }\n  }\n  let db = options.db;\n  options.values = options.values || [];\n  db.getConnection((error, connection) => {\n    connection.query(options.query, options.values, (error, result) => {\n      if (isreleaseConnection) releaseDBConnection(db, connection);\n      if (error) {\n        if (typeof errorCallback == \"function\") {\n          errorCallback(error);\n        }\n      }\n      if (typeof successCallback == \"function\") successCallback(result);\n    });\n  });\n};\n\nlet deleteRecord = (\n  options,\n  successCallback,\n  errorCallback,\n  isreleaseConnection\n) => {\n  isreleaseConnection = isreleaseConnection || false;\n\n  let db = options.db;\n  db.getConnection((error, connection) => {\n    let sqlQuery =\n      \"select distinct table_name,column_name from information_schema.KEY_COLUMN_USAGE \\\n      where constraint_schema=? \\\n      and REFERENCED_TABLE_NAME=?\";\n    debugLog(\"Options\", options);\n    debugLog(\"Sql Query : \" + sqlQuery, options.tableName);\n    connection.query(\n      sqlQuery,\n      [config.mysqlDb.database, options.tableName],\n      (error, tables) => {\n        if (error) {\n          if (isreleaseConnection) connection.release();\n          if (typeof errorCallback == \"function\") {\n            errorCallback(error);\n            return;\n          }\n        }\n        let records = \"\";\n        let values = [];\n\n        if (tables.length == 0) {\n          connection.query(\n            options.query,\n            options.values,\n            (error, deleteRecord) => {\n              if (error) {\n                if (isreleaseConnection) connection.release();\n                if (typeof errorCallback == \"function\") {\n                  errorCallback(error);\n                  return;\n                }\n              }\n\n              let result = {\n                success: true,\n                records: deleteRecord\n              };\n              if (isreleaseConnection) connection.release();\n              if (typeof successCallback == \"function\") {\n                successCallback(result);\n              }\n            }\n          );\n        } else {\n          for (var i = 0; i < tables.length; i++) {\n            records +=\n              \"SELECT COUNT(*) CNT FROM \" +\n              tables[i][\"table_name\"] +\n              \" WHERE \\\n             \" +\n              tables[i][\"column_name\"] +\n              \"=?;\";\n            values.push(options.id);\n          }\n\n          connection.query(records, values, (error, result) => {\n            if (error) {\n              if (isreleaseConnection) connection.release();\n              if (typeof errorCallback == \"function\") {\n                errorCallback(error);\n                return;\n              }\n            } else {\n              var hasRecords = false;\n\n              for (var c = 0; c < result.length; c++) {\n                if (result[c][0] != null) {\n                  if (result[c][0][\"CNT\"] > 0) {\n                    hasRecords = true;\n                    break;\n                  }\n                } else {\n                  if (result[c][\"CNT\"] > 0) {\n                    hasRecords = true;\n                    break;\n                  }\n                }\n              }\n\n              if (hasRecords == true) {\n                result = {\n                  success: false,\n                  message: \"Record already in use..\"\n                };\n                if (isreleaseConnection) connection.release();\n                if (typeof successCallback == \"function\") {\n                  successCallback(result);\n                }\n              } else {\n                connection.query(\n                  options.query,\n                  options.values,\n                  (error, deleteRecord) => {\n                    if (error) {\n                      if (isreleaseConnection) connection.release();\n                      if (typeof errorCallback == \"function\") {\n                        errorCallback(error);\n                        return;\n                      }\n                    }\n\n                    result = {\n                      success: true,\n                      records: deleteRecord\n                    };\n                    if (isreleaseConnection) connection.release();\n                    if (typeof successCallback == \"function\") {\n                      successCallback(result);\n                    }\n                  }\n                );\n              }\n            }\n          });\n        }\n      }\n    );\n  });\n};\nlet releaseConnection = (req, res) => {\n  if (req.db != null) {\n    delete req.db;\n  }\n  if (req.records != null) {\n    delete req.records;\n  }\n  res.flush();\n};\nlet checkIsNull = (input, defaultType) => {\n  return input == null || input == \"\" ? defaultType : input;\n};\n\nlet runningNumberGen = options => {\n  const db = options.db;\n\n  db.query(\n    \"SELECT  `module_desc`,`hims_f_app_numgen_id`, `prefix`, `intermediate_series`, `postfix`\\\n, `length`, `increment_by`, `numgen_seperator`, `postfix_start`\\\n,`postfix_end`, `current_num`, `pervious_num` FROM `hims_f_app_numgen`\\\n WHERE record_status='A' AND `module_desc` in (?)AND  \\\n `postfix` >= `postfix_start` AND `postfix` <= `postfix_end`\",\n    [options.module_desc],\n    (error, result) => {\n      if (error) {\n        options.onFailure(error);\n      }\n\n      if (result.length == 0) {\n        options.onFailure(\n          \"Generation series for '\" +\n            options.module_desc +\n            \"' not exist please contact administrator.\"\n        );\n      } else {\n        let resultNumbers = [];\n        result.map((item, index) => {\n          let prefix = item[\"prefix\"];\n          let numgenId = item[\"hims_f_app_numgen_id\"];\n          let intermediate_series = item[\"intermediate_series\"];\n          let postfix = item[\"postfix\"];\n          let length =\n            parseInt(item[\"length\"], 10) - parseInt(prefix.length, 10);\n          let increment_by = parseInt(item[\"increment_by\"], 10);\n          if (options.counter != null) {\n            increment_by = increment_by + parseInt(options.counter - 1, 10);\n          }\n\n          let numgen_seperator = item[\"numgen_seperator\"];\n          let newNumber = parseInt(postfix, 10) + increment_by;\n\n          let paddedNumber = padString(String(newNumber), length, \"0\");\n\n          let queryAtt =\n            \"UPDATE `hims_f_app_numgen` \\\n    SET `current_num`=?, `pervious_num`=?,postfix=? \\\n    WHERE  `record_status`='A' AND `hims_f_app_numgen_id`=?\";\n          db.query(\n            queryAtt,\n            [paddedNumber, postfix, paddedNumber, numgenId],\n            (error, numUpdate) => {\n              if (error) {\n                debugFunction(\"Error\");\n                options.onFailure(error);\n              }\n\n              let completeNumber =\n                prefix +\n                numgen_seperator +\n                intermediate_series +\n                numgen_seperator +\n                paddedNumber;\n\n              resultNumbers.push({\n                completeNumber: completeNumber,\n                module_desc: item[\"module_desc\"]\n              });\n\n              if (index == result.length - 1) {\n                options.onSuccess(resultNumbers);\n                debugLog(\"Number:\", resultNumbers);\n              }\n            }\n          );\n        });\n      }\n    }\n  );\n};\n\nlet runningNumber = (\n  db,\n  numgenId,\n  paramName,\n  callBack,\n  isreleaseConnection\n) => {\n  isreleaseConnection = isreleaseConnection || false;\n\n  db.query(\n    \"SELECT  `prefix`, `intermediate_series`, `postfix`\\\n  , `length`, `increment_by`, `numgen_seperator`, `postfix_start`\\\n  ,`postfix_end`, `current_num`, `pervious_num` FROM `hims_f_app_numgen`\\\n   WHERE record_status='A' AND hims_f_app_numgen_id=?\",\n    [numgenId],\n    (error, result) => {\n      if (error) {\n        throw error;\n      }\n      result = result[0];\n      let prefix = result[\"prefix\"];\n      let intermediate_series = result[\"intermediate_series\"];\n      let postfix = result[\"postfix\"];\n      let length = parseInt(result[\"length\"], 10) - parseInt(prefix.length, 10);\n      let increment_by = result[\"increment_by\"];\n      let numgen_seperator = result[\"numgen_seperator\"];\n      let postfix_start = result[\"postfix_start\"];\n      let postfix_end = result[\"postfix_end\"];\n\n      let newNumber = parseInt(postfix, 10) + parseInt(increment_by, 10);\n\n      if (\n        parseInt(postfix_start, 10) <= newNumber &&\n        parseInt(postfix_end, 10) >= newNumber\n      ) {\n        let paddedNumber = padString(String(newNumber), length, \"0\");\n        let queryAtt =\n          \"UPDATE `hims_f_app_numgen` \\\n        SET `current_num`=?, `pervious_num`=?,postfix=? \\\n        WHERE  `record_status`='A' AND `hims_f_app_numgen_id`=?\";\n        db.query(\n          queryAtt,\n          [paddedNumber, postfix, paddedNumber, numgenId],\n          (error, numUpdate) => {\n            if (error) {\n              throw error;\n            }\n\n            let completeNumber =\n              prefix +\n              numgen_seperator +\n              intermediate_series +\n              numgen_seperator +\n              paddedNumber;\n\n            if (typeof callBack == \"function\") {\n              callBack(error, numUpdate, completeNumber);\n            }\n          }\n        );\n      } else {\n        db.query(\n          \"select  param_value from algaeh_d_app_config where \\\n        param_name =? and param_sequence =(\\\n        select param_sequence from algaeh_d_app_config \\\n        where param_name=? and param_value=? \\\n        )+1\",\n          [paramName, paramName, intermediate_series],\n          (error, resultSeries) => {\n            if (error) {\n              throw error;\n            }\n            newNumber =\n              parseInt(postfix_start, 10) + parseInt(increment_by, 10);\n            paddedNumber = padString(newNumber, length, \"0\");\n\n            let interSeries = resultSeries[0][\"param_value\"];\n            let queryGen =\n              \"UPDATE `hims_f_app_numgen` SET `intermediate_series`=?,\\\n            `current_num`=?,`pervious_num`=?,postfix=? \\\n            WHERE  `record_status`='A' AND `hims_f_app_numgen_id`=?\";\n            db.query(\n              queryGen,\n              [interSeries, paddedNumber, postfix, paddedNumber, numgenId],\n              (error, updateResult) => {\n                if (error) {\n                  throw error;\n                }\n\n                let completeNumber =\n                  prefix +\n                  numgen_seperator +\n                  interSeries +\n                  numgen_seperator +\n                  paddedNumber;\n\n                if (typeof callBack == \"function\") {\n                  callBack(error, updateResult, completeNumber);\n                }\n              }\n            );\n          }\n        );\n      }\n    }\n  );\n};\n\nlet padString = (newNumber, length, paddCharacter) => {\n  return pad(newNumber.toString(), length, \"LEFT\", paddCharacter);\n};\n\nlet releaseDBConnection = (pool, connection) => {\n  if (pool._freeConnections.indexOf(connection) == -1) {\n    connection.release();\n  }\n};\n//Upload and Downloading files via multer Configuration\nvar storage = multer.diskStorage({\n  destination: function(req, file, cb) {\n    let fullFolderName = req.folderPath;\n    let fileName = \"\";\n    logger.log(\"info\", \"after Split %s\", file.fieldname);\n    let splitFiledName = file.fieldname.split(\"_\");\n    if (splitFiledName != null) {\n      logger.log(\"info\", \"after Split %j\", splitFiledName);\n      if (splitFiledName.length > 1) {\n        fullFolderName += \"/\" + splitFiledName[1];\n        fileName = \"_\" + splitFiledName[splitFiledName.length - 1];\n      }\n    } else {\n      fileName = \"_\" + file.fieldname;\n    }\n    debugLog(\"Field Name : \" + file.fieldname + \" File Name : \" + fileName);\n    req.fullFolderPath = fullFolderName;\n    req.newFileName = req.fileName + fileName;\n    mkdirp(req.fullFolderPath, error => {\n      if (error) logger.log(\"error\", \"Directory creation error: %j \", error);\n      else {\n        debugLog(\"Path setting in multer \" + req.fullFolderPath);\n        cb(null, req.fullFolderPath);\n      }\n    });\n  },\n  filename: function(req, file, cb) {\n    const pathDeclare = require(\"path\");\n    debugLog(\n      \"File Name : \" + req.newFileName + pathDeclare.extname(file.originalname)\n    );\n    cb(null, req.newFileName + pathDeclare.extname(file.originalname));\n  }\n});\nvar upload = multer({ storage: storage });\n//End multer configuration.\n//Upload file via multer\nlet uploadFile = (req, res, callBack) => {\n  debugFunction(\"Inside File Uplaod\");\n  upload(req, res, error => {\n    if (error) {\n      logger.log(\"error\", \"%j\", error);\n    }\n    callBack(error, req);\n  });\n};\n//Download file via multer\nlet downloadFile = (req, res, callBack) => {\n  upload(req, res, error => {\n    if (error) {\n      logger.log(\"error\", \"Image getting error : %j\", error);\n    }\n    callBack(error, req);\n  });\n};\n/*\n   input as array of obejct and converting to single araay object\n*/\nlet jsonArrayToObject = options => {\n  let outputObject = [];\n  for (let i = 0; i < options.arrayObj.length; i++) {\n    let internalarray = [];\n    const item = options.arrayObj[i];\n    for (let j = 0; j < options.sampleInputObject.length; j++) {\n      let key = options.sampleInputObject[j];\n      let inideCreate = false;\n      if (key == \"created_by\" || key == \"updated_by\") {\n        internalarray.push(options.req.body.created_by);\n        inideCreate = true;\n      }\n      if (options.replaceObject != null && options.replaceObject.length != 0) {\n        let replacer = new LINQ(options.replaceObject)\n          .Where(w => w.originalKey == key)\n          .FirstOrDefault();\n\n        if (replacer != null) {\n          if (replacer.NewKey != null) {\n            key = replacer.NewKey;\n          }\n        }\n      }\n      if (!inideCreate) internalarray.push(item[key]);\n    }\n\n    // outputObject.push(\n\n    //   options.sampleInputObject.map(key => {\n    //     if (key == \"created_by\" || key == \"updated_by\") {\n    //       return options.req.body.created_by;\n    //     }\n    //     if (\n    //       options.replaceObject != null &&\n    //       options.replaceObject.length != 0\n    //     ) {\n    //       let replacer = new LINQ(options.replaceObject)\n    //         .Where(w => w.originalKey == key)\n    //         .FirstOrDefault();\n\n    //       if (replacer != null) {\n    //         if (replacer.NewKey != null) {\n    //           key = replacer.NewKey;\n    //         }\n    //       }\n    //     }\n\n    //     return item[key];\n    //   })\n    // );\n    if (options.newFieldToInsert != null) {\n      options.newFieldToInsert.map(row => {\n        internalarray.push(row);\n      });\n    }\n    outputObject.push(internalarray);\n  }\n  return outputObject;\n};\n\nlet bulkInputArrayObject = (arrayObj, outArray, objectToChang) => {\n  objectToChang = objectToChang || {};\n  _.each(arrayObj, (item, index) => {\n    outArray.push(\n      Object.keys(item).map((key, keyIndex) => {\n        if (objectToChang[key] != null) {\n          return objectToChang[key];\n        }\n        return item[key];\n      })\n    );\n  });\n};\nlet bulkMasters = (fileName, bulkObject) => {\n  try {\n    let testobj = JSON.stringify(bulkObject);\n    if (testobj == \"\" || testobj == null) {\n      return;\n    }\n    const masterDir = path.join(__dirname, \"../../Masters/\");\n    if (!fs.existsSync(masterDir)) {\n      fs.mkdirSync(masterDir);\n    }\n    const fPath = masterDir + fileName + \".json\";\n    if (!fs.exists(fPath)) {\n      var writeStream = fs.createWriteStream(fPath);\n      writeStream.write(testobj);\n      writeStream.end();\n      return bulkObject;\n    }\n    return JSON.parse(fs.readFileSync(fPath));\n  } catch (e) {\n    logger.log(\"error\", \"Bulk master save : %j\", e);\n  }\n};\n\nconst generateDbConnection = (req, res, next) => {\n  const _db = req.db;\n  if (_db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  _db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    req[\"connection\"] = connection;\n    debugLog(\"connection\", connection);\n    next();\n  });\n};\n\nmodule.exports = {\n  generateDbConnection,\n  selectStatement,\n  paging,\n  whereCondition,\n  releaseConnection,\n  checkIsNull,\n  runningNumber,\n  deleteRecord,\n  releaseDBConnection,\n  uploadFile,\n  downloadFile,\n  bulkInputArrayObject,\n  bulkMasters,\n  jsonArrayToObject,\n  runningNumberGen\n};\n"]}