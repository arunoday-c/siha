{"version":3,"sources":["../../../src/utils/caching.js"],"names":["filePath","path","join","__dirname","db","loki","getCacheData","options","callBack","masterCollection","fs","existsSync","loadJSON","readFileSync","getCollection","key","data","length","e","console","error","setCacheData","addCollection","disableMeta","insert","value","save","deleteFromCache","tableName","clear","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA,IAAIA,WAAWC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,uCAArB,CAAf;AACA,IAAIC,KAAK,IAAIC,gBAAJ,CAASL,QAAT,CAAT;;AAEA;AACA,IAAIM,eAAe,SAAfA,YAAe,CAACC,OAAD,EAAUC,QAAV,EAAuB;AACxC,MAAI;AACF,QAAIC,mBAAmB,IAAvB;AACA,QAAIC,aAAGC,UAAH,CAAcX,QAAd,CAAJ,EAA6B;AAC3BI,SAAGQ,QAAH,CAAYF,aAAGG,YAAH,CAAgBb,QAAhB,CAAZ;AACAS,yBAAmBL,GAAGU,aAAH,CAAiBP,QAAQQ,GAAzB,CAAnB;AACD;AACDN,uBAAmBL,GAAGU,aAAH,CAAiBP,QAAQQ,GAAzB,CAAnB;;AAEA,QAAIC,OAAOP,oBAAoB,IAApB,GAA2BA,iBAAiBO,IAA5C,GAAmD,IAA9D;AACA,QAAIA,QAAQ,IAAR,IAAgBA,KAAKC,MAAL,IAAe,CAAnC,EAAsC;AACpCD,aAAO,IAAP;AACD;AACD,QAAI,OAAOR,QAAP,IAAmB,UAAvB,EAAmCA,SAASQ,IAAT;AACpC,GAbD,CAaE,OAAOE,CAAP,EAAU;AACVC,YAAQC,KAAR,CAAc,wBAAd,EAAwCF,CAAxC;AACD;AACF,CAjBD;;AAmBA;AACA,IAAIG,eAAe,SAAfA,YAAe,CAACd,OAAD,EAAUC,QAAV,EAAuB;AACxC,MAAI;AACF,QAAIC,mBAAmBL,GAAGkB,aAAH,CAAiBf,QAAQQ,GAAzB,EAA8B;AACnDQ,mBAAa;AADsC,KAA9B,CAAvB;AAGAd,qBAAiBe,MAAjB,CAAwBjB,QAAQkB,KAAhC;AACArB,OAAGsB,IAAH;AACA,QAAI,OAAOlB,QAAP,IAAmB,UAAvB,EAAmCA,SAASD,QAAQkB,KAAjB;AACpC,GAPD,CAOE,OAAOP,CAAP,EAAU;AACVC,YAAQC,KAAR,CAAc,wBAAd,EAAwCF,CAAxC;AACD;AACF,CAXD;;AAaA;AACA,IAAIS,kBAAkB,SAAlBA,eAAkB,YAAa;AACjC,MAAIlB,mBAAmB,IAAvB;AACA,MAAIC,aAAGC,UAAH,CAAcX,QAAd,CAAJ,EAA6B;AAC3BI,OAAGQ,QAAH,CAAYF,aAAGG,YAAH,CAAgBb,QAAhB,CAAZ;AACAS,uBAAmBL,GAAGU,aAAH,CAAiBc,SAAjB,CAAnB;AACD;;AAED,MAAInB,oBAAoB,IAAxB,EAA8B;AAC5B,2BAAS,eAAT,EAA0BA,gBAA1B;AACAA,qBAAiBoB,KAAjB;AACAzB,OAAGsB,IAAH;AACA,2BAAS,cAAT;AACD;AACF,CAbD;;AAeAI,OAAOC,OAAP,GAAiB;AACfzB,4BADe;AAEfe,4BAFe;AAGfM;AAHe,CAAjB","file":"caching.js","sourcesContent":["import loki from \"lokijs\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { debugLog, debugFunction } from \"../utils/logging\";\nlet filePath = path.join(__dirname, \"../../Masters/generalMasterCache.json\");\nlet db = new loki(filePath);\n\n//Get From cache(.Json)\nlet getCacheData = (options, callBack) => {\n  try {\n    let masterCollection = null;\n    if (fs.existsSync(filePath)) {\n      db.loadJSON(fs.readFileSync(filePath));\n      masterCollection = db.getCollection(options.key);\n    }\n    masterCollection = db.getCollection(options.key);\n\n    let data = masterCollection != null ? masterCollection.data : null;\n    if (data != null && data.length == 0) {\n      data = null;\n    }\n    if (typeof callBack == \"function\") callBack(data);\n  } catch (e) {\n    console.error(\"Error in Cache data : \", e);\n  }\n};\n\n//Add From cache(.Json)\nlet setCacheData = (options, callBack) => {\n  try {\n    let masterCollection = db.addCollection(options.key, {\n      disableMeta: true\n    });\n    masterCollection.insert(options.value);\n    db.save();\n    if (typeof callBack == \"function\") callBack(options.value);\n  } catch (e) {\n    console.error(\"Error in Cache data : \", e);\n  }\n};\n\n//Delete From cache(.Json)\nlet deleteFromCache = tableName => {\n  let masterCollection = null;\n  if (fs.existsSync(filePath)) {\n    db.loadJSON(fs.readFileSync(filePath));\n    masterCollection = db.getCollection(tableName);\n  }\n\n  if (masterCollection != null) {\n    debugLog(\"before Remove\", masterCollection);\n    masterCollection.clear();\n    db.save();\n    debugLog(\"after Remove\");\n  }\n};\n\nmodule.exports = {\n  getCacheData,\n  setCacheData,\n  deleteFromCache\n};\n"]}