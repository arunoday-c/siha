{"version":3,"sources":["../../../../src/EHR/model/workBenchSetup.js"],"names":["addVitalMasterHeader","req","res","next","db","httpStatus","dataBaseNotInitilizedError","input","body","getConnection","error","connection","query","vitals_name","uom","general","display","Date","created_by","updated_by","result","records","e","getVitalMasterHeader","selectWhere","hims_d_vitals_header_id","where","condition","values","deleteVitalMasterHeader","tableName","id","updateVitalMasterHeader","addVitalMasterDetail","vitals_header_id","gender","min_age","max_age","min_value","max_value","getVitalMasterDetail","deleteVitalMasterDetail","hims_d_vitals_details_id","updateVitalMasterDetail","addDepartmentVitalMap","insurtColumns","join","sampleInputObject","arrayObj","vitals","newFieldToInsert","department_id","getDepartmentVitalMap","hims_m_department_vital_mapping_id","module","exports"],"mappings":"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","file":"workBenchSetup.js","sourcesContent":["\"use strict\";\nimport extend from \"extend\";\nimport {\n  \n  whereCondition,\n  releaseDBConnection,\n  deleteRecord,\n  jsonArrayToObject\n  \n} from \"../../utils\";\nimport httpStatus from \"../../utils/httpStatus\";\n//import { LINQ } from \"node-linq\";\n// import moment from \"moment\";\n import { debugFunction, debugLog } from \"../../utils/logging\";\n// import formater from \"../../keys/keys\";\n// import { decryption } from \"../../utils/cryptography\";\n\n\n//created by irfan: to add vital header\nlet addVitalMasterHeader = (req, res, next) => {\n    try {\n      if (req.db == null) {\n        next(httpStatus.dataBaseNotInitilizedError());\n      }\n      let db = req.db;\n      let input = extend({}, req.body);\n  \n      db.getConnection((error, connection) => {\n        if (error) {\n          next(error);\n        }\n  \n        connection.query(\n          \"INSERT INTO `hims_d_vitals_header` (vitals_name, uom,general,display,created_date, created_by, updated_date, updated_by)\\\n            VALUE(?,?,?,?,?,?,?,?)\",\n          [\n            input.vitals_name,\n            input.uom,\n            input.general,\n            input.display,\n            new Date(),\n            input.created_by,\n            new Date(),\n            input.updated_by\n          ],\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n            req.records = result;\n            next();\n          }\n        );\n      });\n    } catch (e) {\n      next(e);\n    }\n  };\n\n\n  //created by irfan: to getVitalMasterHeader\nlet getVitalMasterHeader = (req, res, next) => {\n    let selectWhere = {\n      hims_d_vitals_header_id: \"ALL\"\n    };\n    try {\n      if (req.db == null) {\n        next(httpStatus.dataBaseNotInitilizedError());\n      }\n      let db = req.db;\n  \n      let where = whereCondition(extend(selectWhere, req.query));\n  \n      db.getConnection((error, connection) => {\n        connection.query(\n          \"select hims_d_vitals_header_id,uom, vitals_name,general,display FROM hims_d_vitals_header where record_status='A' AND\" +\n            where.condition+\" order by hims_d_vitals_header_id desc\",\n          where.values,\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n            req.records = result;\n            next();\n          }\n        );\n      });\n    } catch (e) {\n      next(e);\n    }\n  };\n\n//created by irfan: to deleteVitalMasterHeader\nlet deleteVitalMasterHeader = (req, res, next) => {\n    try {\n      if (req.db == null) {\n        next(httpStatus.dataBaseNotInitilizedError());\n      }\n  \n  \n      deleteRecord(\n        {\n          db: req.db,\n          tableName: \"hims_d_vitals_header\",\n          id: req.body.hims_d_vitals_header_id,\n          query:\n            \"UPDATE hims_d_vitals_header SET  record_status='I' WHERE hims_d_vitals_header_id=?\",\n          values: [req.body.hims_d_vitals_header_id]\n        },\n        result => {\n          req.records = result;\n          next();\n        },\n        error => {\n          next(error);\n        },\n        true\n      );\n    } catch (e) {\n      next(e);\n    }\n  };\n  \n//created by irfan: to updateVitalMasterHeader\nlet updateVitalMasterHeader = (req, res, next) => {\n    try {\n      if (req.db == null) {\n        next(httpStatus.dataBaseNotInitilizedError());\n      }\n      let db = req.db;\n      let input = extend({}, req.body);\n      db.getConnection((error, connection) => {\n        if (error) {\n          next(error);\n        }\n  \n        connection.query(\n          \"UPDATE `hims_d_vitals_header` SET vitals_name=?,uom=?,general=?,display=?,\\\n             updated_date=?, updated_by=?  WHERE  `record_status`='A' and `hims_d_vitals_header_id`=?;\",\n          [\n            input.vitals_name,\n            input.uom, \n            input.general, \n            input.display, \n            new Date(),\n            input.updated_by,      \n            input.hims_d_vitals_header_id\n          ],\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n            req.records = result;\n            next();\n          }\n        );\n      });\n    } catch (e) {\n      next(e);\n    }\n  };\n\n//created by irfan: to add vital detail\nlet addVitalMasterDetail = (req, res, next) => {\n    try {\n      if (req.db == null) {\n        next(httpStatus.dataBaseNotInitilizedError());\n      }\n      let db = req.db;\n      let input = extend({}, req.body);\n  \n      db.getConnection((error, connection) => {\n        if (error) {\n          next(error);\n        }\n  \n        connection.query(\n          \"INSERT INTO `hims_d_vitals_details` (vitals_header_id, gender, min_age, max_age, min_value, max_value, created_date, created_by, updated_date, updated_by)\\\n            VALUE(?,?,?,?,?,?,?,?,?,?)\",\n          [\n            input.vitals_header_id,\n            input.gender,\n            input.min_age,\n            input.max_age,\n            input.min_value,\n            input.max_value,\n            new Date(),\n            input.created_by,\n            new Date(),\n            input.updated_by\n          ],\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n            req.records = result;\n            next();\n          }\n        );\n      });\n    } catch (e) {\n      next(e);\n    }\n  };\n\n\n//created by irfan: to getVitalMasterHeader\nlet getVitalMasterDetail = (req, res, next) => {\n  let selectWhere = {\n    vitals_header_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_d_vitals_details_id, vitals_header_id, gender, min_age, max_age, min_value, max_value FROM hims_d_vitals_details where record_status='A' AND\" +\n          where.condition+\" order by vitals_header_id desc\",\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to deleteVitalMasterDetail\nlet deleteVitalMasterDetail = (req, res, next) => {\n    try {\n      if (req.db == null) {\n        next(httpStatus.dataBaseNotInitilizedError());\n      }\n  \n  \n      deleteRecord(\n        {\n          db: req.db,\n          tableName: \"hims_d_vitals_details\",\n          id: req.body.hims_d_vitals_details_id,\n          query:\n            \"UPDATE hims_d_vitals_details SET  record_status='I' WHERE hims_d_vitals_details_id=?\",\n          values: [req.body.hims_d_vitals_details_id]\n        },\n        result => {\n          req.records = result;\n          next();\n        },\n        error => {\n          next(error);\n        },\n        true\n      );\n    } catch (e) {\n      next(e);\n    }\n  };\n  \n//created by irfan: to updateVitalMasterDetail\nlet updateVitalMasterDetail = (req, res, next) => {\n    try {\n      if (req.db == null) {\n        next(httpStatus.dataBaseNotInitilizedError());\n      }\n      let db = req.db;\n      let input = extend({}, req.body);\n      db.getConnection((error, connection) => {\n        if (error) {\n          next(error);\n        }\n  \n        connection.query(\n          \"UPDATE `hims_d_vitals_details` SET  vitals_header_id=?, gender=?, min_age=?, max_age=?, min_value=?, max_value=?,\\\n             updated_date=?, updated_by=?  WHERE  `record_status`='A' and `hims_d_vitals_details_id`=?;\",\n          [\n            input.vitals_header_id,\n            input.gender,\n            input.min_age,\n            input.max_age,\n            input.min_value,\n            input.max_value,\n            new Date(),\n            input.updated_by,      \n            input.hims_d_vitals_details_id\n          ],\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n            req.records = result;\n            next();\n          }\n        );\n      });\n    } catch (e) {\n      next(e);\n    }\n  };\n\n\n//created by irfan: to add \nlet addDepartmentVitalMap = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n\n      const insurtColumns = [\"vital_header_id\", \"created_by\", \"updated_by\"];\n\n      \n      connection.query(\n        \"INSERT INTO hims_m_department_vital_mapping(\" +\n          insurtColumns.join(\",\") +\n          \",`department_id`,created_date,updated_date) VALUES ?\",\n        [\n          jsonArrayToObject({\n            sampleInputObject: insurtColumns,\n            arrayObj: req.body.vitals,\n            newFieldToInsert: [input.department_id, new Date(), new Date()],\n            req: req\n          })\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n\n          debugLog(\"Results are recorded...\");\n          req.records = result;\n          next();\n        }\n      );\n\n\n    \n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n //created by irfan: to \n let getDepartmentVitalMap = (req, res, next) => {\n  let selectWhere = {\n    hims_m_department_vital_mapping_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_m_department_vital_mapping_id,department_id,vital_header_id FROM hims_m_department_vital_mapping where record_status='A' AND\" +\n          where.condition+\" order by hims_m_department_vital_mapping_id desc\",\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n\n\n\nmodule.exports = {\n    addVitalMasterHeader,\n    addVitalMasterDetail,\n    getVitalMasterHeader,\n    getVitalMasterDetail,\n    deleteVitalMasterHeader,\n    deleteVitalMasterDetail,\n    updateVitalMasterHeader,\n    updateVitalMasterDetail,\n    addDepartmentVitalMap,\n    getDepartmentVitalMap\n    \n}"]}