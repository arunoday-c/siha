{"version":3,"sources":["../../../../src/EHR/model/hpi.js"],"names":["addIcd","req","res","next","addIcdModel","hims_d_icd_id","icd_code","icd_description","long_icd_description","icd_level","icd_type","created_by","updated_by","db","httpStatus","dataBaseNotInitilizedError","input","body","getConnection","error","connection","query","results","records","e","addPlanAndPolicy","beginTransaction","rollback","model","jsonArr","models","i","obj","network_type","insurance_provider_id","insurance_sub_id","effective_start_date","effective_end_date","Date","result","length","network_id","hospital_id","deductible","deductable_type","min_value","max_value","copay_consultation","deductible_lab","for_alllab","copay_percent","deductible_rad","for_allrad","copay_percent_rad","copay_percent_trt","copay_percent_dental","copay_medicine","insur_network_limit","deductible_trt","deductible_dental","deductible_medicine","lab_min","lab_max","rad_min","rad_max","trt_max","trt_min","dental_min","dental_max","medicine_min","medicine_max","invoice_max_liability","for_alltrt","for_alldental","for_allmedicine","invoice_max_deduct","price_from","employer","policy_number","follow_up","preapp_limit","deductible_ip","copay_ip","ip_min","ip_max","for_allip","consult_limit","preapp_limit_from","copay_maternity","maternity_min","maternity_max","copay_optical","optical_min","optical_max","copay_diagnostic","diagnostic_min","diagnostic_max","resultoff","commit","getHpiElements","inputData","hpi_header_id","addHpiElement","element_description","element_type","patient_id","insertId","episode_id","resultPatientEP","addPatientHpiBACKUP","hpi_detail_id","addPatientHpi","insurtColumns","join","sampleInputObject","arrayObj","hpi_detail_ids","newFieldToInsert","getPatientHpi","module","exports"],"mappings":"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","file":"hpi.js","sourcesContent":["\"use strict\";\nimport extend from \"extend\";\nimport {\n  selectStatement,\n  paging,\n  whereCondition,\n  deleteRecord,\n  releaseDBConnection,\n  jsonArrayToObject\n} from \"../../utils\";\nimport httpStatus from \"../../utils/httpStatus\";\n//import { LINQ } from \"node-linq\";\n\nimport { logger, debugFunction, debugLog } from \"../../utils/logging\";\n\n//code\n\n//created by irfan:  to add ICD\nlet addIcd = (req, res, next) => {\n  let addIcdModel = {\n    hims_d_icd_id: null,\n    icd_code: null,\n    icd_description: null,\n    long_icd_description: null,\n    icd_level: null,\n    icd_type: null,\n    created_by: null,\n    updated_by: null\n  };\n\n  debugFunction(\"addIcd\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend(addIcdModel, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n\n      connection.query(\n        \"insert into hims_d_icd(\\\n            icd_code,icd_description,long_icd_description,icd_level,icd_type,created_by,updated_by)values(\\\n                ?,?,?,?,?,?,?)\",\n        [\n          input.icd_code,\n          input.icd_description,\n          input.long_icd_description,\n          input.icd_level,\n          input.icd_type,\n          input.created_by,\n          input.updated_by\n        ],\n        (error, results) => {\n          if (error) {\n            next(error);\n            releaseDBConnection(db, connection);\n          }\n          debugLog(\"Results are recorded...\");\n          req.records = results;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add  hpi header and details\nlet addPlanAndPolicy = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n\n        let model = {};\n\n        let jsonArr = extend(models, req.body);\n\n        for (let i = 0; i < jsonArr.length; i++) {\n          let obj = jsonArr[i];\n          debugLog(\"single:\", obj);\n\n          connection.query(\n            \"INSERT INTO hims_d_insurance_network(`network_type`,`insurance_provider_id`,`insurance_sub_id`,\\\n        `effective_start_date`,`effective_end_date`,`created_date`,`created_by`,\\\n        `updated_date`,`updated_by`)\\\n        VALUE(?,?,?,?,?,?,?,?,?)\",\n            [\n              obj.network_type,\n              obj.insurance_provider_id,\n              obj.insurance_sub_id,\n              obj.effective_start_date,\n              obj.effective_end_date,\n              new Date(),\n              obj.created_by,\n              new Date(),\n              obj.updated_by\n            ],\n            (error, result) => {\n              if (error) {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n              // req.records = result;\n              // next();\n              if (result != null && result.length != 0) {\n                obj.network_id = result[\"insertId\"];\n\n                // let inputparam = extend(NetworkOfficeModel, req.body);\n                connection.query(\n                  \"INSERT INTO hims_d_insurance_network_office(`network_id`,`hospital_id`,`deductible`,`deductable_type`,`min_value`,`max_value`,`copay_consultation`,\\\n              `deductible_lab`,`for_alllab`,`copay_percent`,`deductible_rad`,`for_allrad`,`copay_percent_rad`,`copay_percent_trt`,\\\n              `copay_percent_dental`,`copay_medicine`,`insur_network_limit`,`deductible_trt`,`deductible_dental`,`deductible_medicine`,`lab_min`,\\\n              `lab_max`,`rad_min`,`rad_max`,`trt_max`,`trt_min`,`dental_min`,`dental_max`,`medicine_min`,`medicine_max`,`invoice_max_liability`,\\\n              `for_alltrt`,`for_alldental`,`for_allmedicine`,`invoice_max_deduct`,`price_from`,`employer`,`policy_number`,`follow_up`,`preapp_limit`,\\\n              `deductible_ip`,`copay_ip`,`ip_min`,`ip_max`,`for_allip`,`consult_limit`,`preapp_limit_from`,`copay_maternity`,`maternity_min`,`maternity_max`,\\\n              `copay_optical`,`optical_min`,`optical_max`,`copay_diagnostic`,`diagnostic_min`,`diagnostic_max`,`created_date`,`created_by`,`updated_date`,`updated_by`)\\\n              VALUE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n                  [\n                    obj.network_id,\n                    obj.hospital_id,\n                    obj.deductible,\n                    obj.deductable_type,\n                    obj.min_value,\n                    obj.max_value,\n                    obj.copay_consultation,\n                    obj.deductible_lab,\n                    obj.for_alllab,\n                    obj.copay_percent,\n                    obj.deductible_rad,\n                    obj.for_allrad,\n                    obj.copay_percent_rad,\n                    obj.copay_percent_trt,\n                    obj.copay_percent_dental,\n                    obj.copay_medicine,\n                    obj.insur_network_limit,\n                    obj.deductible_trt,\n                    obj.deductible_dental,\n                    obj.deductible_medicine,\n                    obj.lab_min,\n                    obj.lab_max,\n                    obj.rad_min,\n                    obj.rad_max,\n                    obj.trt_max,\n                    obj.trt_min,\n                    obj.dental_min,\n                    obj.dental_max,\n                    obj.medicine_min,\n                    obj.medicine_max,\n                    obj.invoice_max_liability,\n                    obj.for_alltrt,\n                    obj.for_alldental,\n                    obj.for_allmedicine,\n                    obj.invoice_max_deduct,\n                    obj.price_from,\n                    obj.employer,\n                    obj.policy_number,\n                    obj.follow_up,\n                    obj.preapp_limit,\n                    obj.deductible_ip,\n                    obj.copay_ip,\n                    obj.ip_min,\n                    obj.ip_max,\n                    obj.for_allip,\n                    obj.consult_limit,\n                    obj.preapp_limit_from,\n                    obj.copay_maternity,\n                    obj.maternity_min,\n                    obj.maternity_max,\n                    obj.copay_optical,\n                    obj.optical_min,\n                    obj.optical_max,\n                    obj.copay_diagnostic,\n                    obj.diagnostic_min,\n                    obj.diagnostic_max,\n                    new Date(),\n                    obj.created_by,\n                    new Date(),\n                    obj.updated_by\n                  ],\n                  (error, resultoff) => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n\n                    connection.commit(error => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                      req.records = resultoff;\n                      next();\n                    });\n                    // req.records = resultoff;\n                    // next();\n                  }\n                );\n              }\n            }\n          );\n        }\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n// created by : irfan to get chief complaint elements (hpi details)\nlet getHpiElements = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let inputData = extend({}, req.query);\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_d_hpi_details_id,hpi_header_id,element_description,element_type,created_date \\\n        from hims_d_hpi_details  where hpi_header_id=? and record_status='A';\",\n        [inputData.hpi_header_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n// created by : irfan to ADD chief complaint elements(hpi details)\nlet addHpiElement = (req, res, next) => {\n  debugFunction(\"addHpiElement\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n\n        connection.query(\n          \"insert into hims_d_hpi_details(hpi_header_id,element_description,element_type,created_date,created_by,updated_date,updated_by) \\\n        values(?,?,?,?,?,?,?)\",\n          [\n            input.hpi_header_id,\n            input.element_description,\n            input.element_type,\n            new Date(),\n            input.created_by,\n            new Date(),\n            input.updated_by\n          ],\n          (error, results) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            //adding HPI element to [patient]\n\n            if (input.patient_id != null && results.insertId != null) {\n              connection.query(\n                \"insert into hims_f_episode_hpi(patient_id,episode_id, hpi_header_id, hpi_detail_id,created_date,created_by,updated_date,updated_by) \\\n    values(?,?,?,?,?,?,?,?)\",\n                [\n                  input.patient_id,\n                  input.episode_id,\n                  input.hpi_header_id,\n                  results.insertId,\n                  new Date(),\n                  input.created_by,\n                  new Date(),\n                  input.updated_by\n                ],\n                (error, resultPatientEP) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n\n                  connection.commit(error => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n                    releaseDBConnection(db, connection);\n                    req.records = resultPatientEP;\n                    next();\n                  });\n                }\n              );\n            } else {\n              debugFunction(\"esle\");\n              connection.commit(error => {\n                if (error) {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                }\n                releaseDBConnection(db, connection);\n                req.records = results;\n                next();\n              });\n            }\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n// created by : irfan to addPatientHpi\nlet addPatientHpiBACKUP = (req, res, next) => {\n  debugFunction(\"addPatientHpi\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n\n      connection.query(\n        \"insert into hims_f_episode_hpi(patient_id,episode_id, hpi_header_id, hpi_detail_id,created_date,created_by,updated_date,updated_by) \\\n        values(?,?,?,?,?,?,?,?)\",\n        [\n          input.patient_id,\n          input.episode_id,\n          input.hpi_header_id,\n          input.hpi_detail_id,\n\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, results) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          debugLog(\"Results are recorded...\");\n          req.records = results;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n// created by : irfan to addPatientHpi\nlet addPatientHpi = (req, res, next) => {\n  debugFunction(\"addPatientHpi\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n\n      const insurtColumns = [\"hpi_detail_id\", \"created_by\", \"updated_by\"];\n\n      connection.query(\n        \"INSERT INTO hims_f_episode_hpi(\" +\n          insurtColumns.join(\",\") +\n          \",patient_id,episode_id, hpi_header_id,created_date,updated_date) VALUES ?\",\n        [\n          jsonArrayToObject({\n            sampleInputObject: insurtColumns,\n            arrayObj: req.body.hpi_detail_ids,\n            newFieldToInsert: [\n              input.patient_id,\n              input.episode_id,\n              input.hpi_header_id,\n              new Date(),\n              new Date()\n            ],\n            req: req\n          })\n        ],\n\n        (error, results) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          debugLog(\"Results are recorded...\");\n          req.records = results;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n// created by : irfan to getPatientHpi hpi elements\nlet getPatientHpi = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let inputData = extend({}, req.query);\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select EH.patient_id, EH.hpi_header_id,hpi_description as chief_complaint, hpi_detail_id, HD.element_description,HD.element_type, episode_id\\\n        from hims_f_episode_hpi EH,hims_d_hpi_details HD,hims_d_hpi_header HH\\\n        where EH.record_status='A' and   HH.record_status='A'  and  HD.record_status='A'  and\\\n        EH.hpi_detail_id=HD.hims_d_hpi_details_id and \\\n        EH.hpi_header_id=HH.hims_d_hpi_header_id and EH.episode_id=?;\",\n        [inputData.episode_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addIcd,\n  getHpiElements,\n  addHpiElement,\n  addPatientHpi,\n  getPatientHpi\n};\n\n// localhost:3002/api/v1/doctorsWorkBench/getPatientVitals?patient_id=48\n\n// localhost:3002/api/v1/doctorsWorkBench/addPatientVitals\n\n// {\n\n//   \"patient_id\":48,\n//            \"visit_id\":93,\n//            \"visit_date\":\"20180909\",\n//            \"visit_time\":\"12:12:00\",\n//            \"case_type\":\"op\",\n//            \"vital_id\":1,\n//            \"vital_value\":10,\n//            \"vital_value_one\":null,\n//            \"vital_value_two\":null,\n//            \"formula_value\":null\n\n// }\n\n// localhost:3002/api/v1/doctorsWorkBench/getVitalsHeaderMaster\n"]}