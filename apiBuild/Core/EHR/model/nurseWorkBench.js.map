{"version":3,"sources":["../../../../src/EHR/model/nurseWorkBench.js"],"names":["addPatientNurseChiefComplaints","req","res","next","db","httpStatus","dataBaseNotInitilizedError","getConnection","error","connection","beginTransaction","rollback","insurtColumns","query","join","sampleInputObject","arrayObj","body","chief_complaints","newFieldToInsert","Date","Result","insertId","undefined","patient_vitals","results","nurse_notes","updated_by","hims_f_patient_encounter_id","updateResult","commit","records","e","getPatientNurseChiefComplaints","inputData","episode_id","result","deletePatientNurseChiefComplaints","hims_f_nurse_episode_chief_complaint_id","updatePatientNurseChiefComplaints","inputParam","qry","i","length","_complaint_inactive_date","complaint_inactive_date","chief_complaint_id","onset_date","interval","duration","severity","score","pain","toLocaleString","getNurseMyDay","getMydayWhere","provider_id","sub_department_id","dateDiff","fromDate","toDate","format","formater","dbFormat","date","statusFlag","status","where","condition","values","module","exports"],"mappings":"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","file":"nurseWorkBench.js","sourcesContent":["\"use strict\";\nimport extend from \"extend\";\nimport {\n  paging,\n  whereCondition,\n  releaseDBConnection,\n  jsonArrayToObject\n} from \"../../utils\";\nimport httpStatus from \"../../utils/httpStatus\";\nimport { debugFunction, debugLog } from \"../../utils/logging\";\nimport moment from \"moment\";\nimport formater from \"../../keys/keys\";\n\n// created by : irfan to\nlet addPatientNurseChiefComplaints = (req, res, next) => {\n  debugFunction(\"addPatientNurseChiefComplaints\");\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    //let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n\n        const insurtColumns = [\n          \"episode_id\",\n          \"patient_id\",\n          \"chief_complaint_id\",\n          \"onset_date\",\n          \"duration\",\n          \"interval\",\n          \"severity\",\n          \"score\",\n          \"pain\",\n          \"comment\",\n          \"created_by\",\n          \"updated_by\"\n        ];\n\n        connection.query(\n          \"INSERT INTO hims_f_nurse_episode_chief_complaint(`\" +\n            insurtColumns.join(\"`,`\") +\n            \"`,created_date,updated_date) VALUES ?\",\n          [\n            jsonArrayToObject({\n              sampleInputObject: insurtColumns,\n              arrayObj: req.body.chief_complaints,\n              newFieldToInsert: [new Date(), new Date()],\n              req: req\n            })\n          ],\n          (error, Result) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n\n            if (Result.insertId != null && Result.insertId != undefined) {\n              const insurtColumns = [\n                \"patient_id\",\n                \"visit_id\",\n                \"visit_date\",\n                \"visit_time\",\n                \"case_type\",\n                \"vital_id\",\n                \"vital_value\",\n                \"vital_value_one\",\n                \"vital_value_two\",\n                \"formula_value\",\n                \"created_by\",\n                \"updated_by\"\n              ];\n\n              connection.query(\n                \"INSERT INTO hims_f_patient_vitals(\" +\n                  insurtColumns.join(\",\") +\n                  \",created_date,updated_date) VALUES ?\",\n                [\n                  jsonArrayToObject({\n                    sampleInputObject: insurtColumns,\n                    arrayObj: req.body.patient_vitals,\n                    newFieldToInsert: [new Date(), new Date()],\n                    req: req\n                  })\n                ],\n\n                (error, results) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n\n                  if (\n                    results.insertId != null &&\n                    results.insertId != undefined\n                  ) {\n                    connection.query(\n                      \"UPDATE `hims_f_patient_encounter` SET nurse_examine='Y', nurse_notes=?,\\\n                     updated_date=?, updated_by=? WHERE  `record_status`='A' and `hims_f_patient_encounter_id`=?;\",\n                      [\n                        req.body.nurse_notes,\n                        new Date(),\n                        req.body.updated_by,\n                        req.body.hims_f_patient_encounter_id\n                      ],\n                      (error, updateResult) => {\n                        if (error) {\n                          connection.rollback(() => {\n                            releaseDBConnection(db, connection);\n                            next(error);\n                          });\n                        }\n\n                        connection.commit(error => {\n                          if (error) {\n                            connection.rollback(() => {\n                              releaseDBConnection(db, connection);\n                              next(error);\n                            });\n                          }\n                          releaseDBConnection(db, connection);\n                          req.records = updateResult;\n                          next();\n                        });\n                      }\n                    );\n                  } else {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n                }\n              );\n            } else {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to\nlet getPatientNurseChiefComplaints = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let inputData = extend({}, req.query);\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hh.hims_d_hpi_header_id,hh.hpi_description as chief_complaint_name,PE.hims_f_patient_encounter_id,PE.patient_id,\\\n        max(PE.updated_date) as Encounter_Date , NC.hims_f_nurse_episode_chief_complaint_id,NC.episode_id,NC.chief_complaint_id,\\\n        NC.onset_date,NC.`interval`,NC.duration,NC.severity,NC.score,NC.pain,NC.`comment`\\\n        from ( (hims_f_nurse_episode_chief_complaint NC inner join hims_d_hpi_header hh on hh.hims_d_hpi_header_id=NC.chief_complaint_id ) \\\n           inner join hims_f_patient_encounter PE on PE.episode_id=NC.episode_id)\\\n        where NC.record_status='A'and NC.episode_id=? group by chief_complaint_id \",\n        [inputData.episode_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          debugLog(\"result\", result);\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:\nlet deletePatientNurseChiefComplaints = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    //let inputData = extend({}, req.query);\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"update hims_f_nurse_episode_chief_complaint set record_status='I',updated_date=?,\\\n        updated_by=? where `record_status`='A' and hims_f_nurse_episode_chief_complaint_id=?\",\n        [\n          new Date(),\n          req.body.updated_by,\n          req.body.hims_f_nurse_episode_chief_complaint_id\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:\nlet updatePatientNurseChiefComplaints = (req, res, next) => {\n  try {\n    debugFunction(\"updatePatientNurseChiefComplaints\");\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n\n        let inputParam = extend([], req.body.chief_complaints);\n\n        let qry = \"\";\n\n        for (let i = 0; i < req.body.chief_complaints.length; i++) {\n          const _complaint_inactive_date =\n            inputParam[i].complaint_inactive_date != null\n              ? \"'\" + inputParam[i].complaint_inactive_date + \"'\"\n              : null;\n          qry +=\n            \"UPDATE `hims_f_nurse_episode_chief_complaint` SET  episode_id='\" +\n            inputParam[i].episode_id +\n            \"', chief_complaint_id='\" +\n            inputParam[i].chief_complaint_id +\n            \"', onset_date='\" +\n            inputParam[i].onset_date +\n            \"', `interval`='\" +\n            inputParam[i].interval +\n            \"', duration='\" +\n            inputParam[i].duration +\n            \"', severity='\" +\n            inputParam[i].severity +\n            \"', score='\" +\n            inputParam[i].score +\n            \"', pain='\" +\n            inputParam[i].pain +\n            \"\\\n            , nurse_notes='\" +\n            inputParam[i].nurse_notes +\n            \"', updated_date='\" +\n            new Date().toLocaleString() +\n            \"',updated_by=\\\n'\" +\n            req.body.updated_by +\n            \"' WHERE hims_f_nurse_episode_chief_complaint_id='\" +\n            inputParam[i].hims_f_nurse_episode_chief_complaint_id +\n            \"';\";\n        }\n\n        connection.query(qry, (error, updateResult) => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n\n          connection.commit(error => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            releaseDBConnection(db, connection);\n            req.records = updateResult;\n            next();\n          });\n        });\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to getNursesMyDay in nurse work bench , to show list of todays patients\nlet getNurseMyDay = (req, res, next) => {\n  let getMydayWhere = {\n    provider_id: \"ALL\",\n    sub_department_id: \"ALL\"\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let dateDiff = \"\";\n    if (req.query.fromDate != null && req.query.toDate != null) {\n      dateDiff +=\n        \" date(E.created_date) BETWEEN date('\" +\n        moment(req.query.fromDate).format(formater.dbFormat.date) +\n        \"') AND date('\" +\n        moment(req.query.toDate).format(formater.dbFormat.date) +\n        \"')\";\n      delete req.query.fromDate;\n      delete req.query.toDate;\n    } else if (req.query.toDate != null) {\n      dateDiff = \" date(E.created_date) = date('\" + req.query.toDate + \"')\";\n      delete req.query.toDate;\n    }\n\n    let statusFlag = \"\";\n    if (req.query.status == \"A\") {\n      statusFlag = \" E.status <> 'V' AND\";\n      delete req.query.status;\n    } else if (req.query.status == \"V\") {\n      statusFlag = \" E.status='V' AND\";\n      delete req.query.status;\n    }\n\n    debugLog(\"req query:\", req.query);\n    let where = whereCondition(extend(getMydayWhere, req.query));\n\n    debugLog(\"where conditn:\", where);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      db.query(\n        \"select  E.hims_f_patient_encounter_id,P.patient_code,P.full_name,E.patient_id ,V.appointment_patient,E.provider_id,E.`status`,E.nurse_examine,E.checked_in,\\\n         E.payment_type,E.episode_id,E.encounter_id,E.`source`,E.updated_date as encountered_date,E.visit_id ,sub_department_id from hims_f_patient_encounter E\\\n         INNER JOIN hims_f_patient P ON E.patient_id=P.hims_d_patient_id \\\n            inner join hims_f_patient_visit V on E.visit_id=V.hims_f_patient_visit_id  where E.record_status='A' AND  V.record_status='A' AND \" +\n          statusFlag +\n          \"\" +\n          dateDiff +\n          \" AND \" +\n          where.condition +\n          \" order by E.updated_date desc\",\n        where.values,\n\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\nmodule.exports = {\n  addPatientNurseChiefComplaints,\n  getPatientNurseChiefComplaints,\n  deletePatientNurseChiefComplaints,\n  updatePatientNurseChiefComplaints,\n  getNurseMyDay\n};\n"]}