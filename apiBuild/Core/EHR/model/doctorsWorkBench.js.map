{"version":3,"sources":["../../../../src/EHR/model/doctorsWorkBench.js"],"names":["physicalExaminationHeader","req","res","next","physicalExaminationHeaderModel","hims_d_physical_examination_header","examination_type","description","sub_department_id","assesment_type","mandatory","created_by","updated_by","db","httpStatus","dataBaseNotInitilizedError","input","body","getConnection","error","connection","query","results","records","e","physicalExaminationDetails","physicalExaminationDetailsModel","hims_d_physical_examination_details_id","physical_examination_header_id","physicalExaminationSubDetails","physicalExaminationSubDetailsModel","hims_d_physical_examination_subdetails_id","physical_examination_details_id","addOrder","hims_f_lab_orderModel","hims_f_lab_order_id","patient_id","visit_id","provider_id","service_id","status","billed","cancelled","ordered_date","test_type","addSample","hims_d_lab_sampleModel","hims_d_lab_sample_id","order_id","sample_id","collected","collected_date","addAnalytes","AnalytesModel","hims_d_lab_analytes_id","analyte_id","result","text","addReviewOfSysHeader","reviewOfSysHeaderModel","addReviewOfSysDetails","reviewOfSysDetailsModel","review_of_system_heder_id","addAllergy","AllergyModel","hims_d_allergy_id","allergy_type","allergy_name","getAllergyDetails","addChronicalConditions","ChronicalConditionsModel","hims_d_chronic_conditions_id","name","getChronicalConditions","addEncounterReview","EncounterReviewMOdel","hims_f_encounter_review_id","encounter_id","review_header_id","review_details_id","getEncounterReview","getMyDay","getMydayWhere","userIdentity","employee_id","dateDiff","fromDate","toDate","format","formater","dbFormat","date","statusFlag","where","condition","values","updatdePatEncntrStatus","currentEncounterNo","nextEncounterNo","Date","updateResult","rollback","patient_encounter_id","getPatientProfile","inputData","episode_id","getPatientVitalsOLD","selectWhere","getPatientVitals","rec","_limit","length","getPatientAllergies","getPatientDiet","getPatientDiagnosis","getChiefComplaints","addNewChiefComplaint","header","headers","insurtColumns","join","sampleInputObject","arrayObj","newFieldToInsert","addPatientChiefComplaints","Result","getPatientChiefComplaints","deletePatientChiefComplaints","hims_f_episode_chief_complaint_id","addPatientNewAllergy","inputparam","allergy_id","onset","onset_date","severity","comment","allergy_inactive","getAllAllergies","getPatientAllergy","updatePatientChiefComplaints","beginTransaction","inputParam","chief_complaints","qry","i","_complaint_inactive_date","complaint_inactive_date","chief_complaint_id","interval","duration","score","pain","chronic","complaint_inactive","toLocaleString","commit","addPatientDiagnosis","addPatientROS","updatePatientDiagnosis","queryBuilder","inputs","diagnosis_type","final_daignosis","record_status","hims_f_patient_diagnosis_id","getReviewOfSystem","hims_d_review_of_system_header_id","ROS_header","undefined","getPatientROS","updatePatientROS","addPatientVitalsOLD","visit_date","visit_time","case_type","height","weight","bmi","oxysat","temperature_from","temperature_farenhiet","temperature_celsisus","systolic","diastolic","systolic_stand","diastolic_stand","systolic_supine","diastolic_supine","glucose_fbs","glucose_rbs","glucose_pbs","head_circumference","bsa","heart_rate","respiratory_rate","addPatientVitals","addPatientPhysicalExamination","exam_header_id","exam_details_id","exam_subdetails_id","comments","updatePatientAllergy","hims_f_patient_allergy_id","getPhysicalExamination","hims_d_physical_examination_header_id","getAllPhysicalExamination","_all","allDept","addDietAdvice","dietadvice","hims_f_patient_diet_id","diet_id","algaeh_d_app_user_id","till_date","getEpisodeDietAdvice","Diet","pagePaging","paging","Page","pageNo","page","pageSize","addReferalDoctor","referraldoc","hims_f_patient_referral_id","referral_type","hospital_name","reason","doctor_id","addFollowUp","followup","hims_f_patient_followup_id","followup_type","followup_date","getPatientPhysicalExamination","updatePatientPhysicalExam","hims_f_episode_examination_id","getVitalsHeaderMaster","addPatientHistory","patient_history","getPatientHistoryBACKUP","getPatientHistory","social","LINQ","Where","w","history_type","Select","hims_f_patient_history_id","s","provider_name","remarks","ToArray","medical","surgical","family","birth","getFollowUp","strQuery","date_of_recall","getPatientEpisodeSummary","module","exports"],"mappings":"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","file":"doctorsWorkBench.js","sourcesContent":["\"use strict\";\nimport extend from \"extend\";\nimport {\n  selectStatement,\n  paging,\n  whereCondition,\n  releaseDBConnection,\n  jsonArrayToObject\n} from \"../../utils\";\nimport httpStatus from \"../../utils/httpStatus\";\nimport { LINQ } from \"node-linq\";\nimport moment from \"moment\";\nimport { debugFunction, debugLog } from \"../../utils/logging\";\nimport formater from \"../../keys/keys\";\nimport { decryption } from \"../../utils/cryptography\";\n\n//created by irfan: to add  physical_examination_header\nlet physicalExaminationHeader = (req, res, next) => {\n  let physicalExaminationHeaderModel = {\n    hims_d_physical_examination_header: null,\n    examination_type: null,\n    description: null,\n    sub_department_id: null,\n    assesment_type: null,\n    mandatory: null,\n    created_by: null,\n    updated_by: null\n  };\n\n  debugFunction(\"physicalExaminationHeader\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend(physicalExaminationHeaderModel, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n\n      connection.query(\n        \"insert into hims_d_physical_examination_header(\\\n            examination_type,description,sub_department_id,assesment_type,\\\n            mandatory,created_by,updated_by)values(\\\n            ?,?,?,?,?,?,?)\",\n        [\n          input.examination_type,\n          input.description,\n          input.sub_department_id,\n          input.assesment_type,\n          input.mandatory,\n          input.created_by,\n          input.updated_by\n        ],\n        (error, results) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          debugLog(\"Results are recorded...\");\n          req.records = results;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add  physical_examination_details\nlet physicalExaminationDetails = (req, res, next) => {\n  let physicalExaminationDetailsModel = {\n    hims_d_physical_examination_details_id: null,\n    physical_examination_header_id: null,\n    description: null,\n    mandatory: null,\n    created_by: null,\n    updated_by: null\n  };\n\n  debugFunction(\"physicalExaminationDetails\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend(physicalExaminationDetailsModel, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n\n      connection.query(\n        \"insert into hims_d_physical_examination_details(\\\n            physical_examination_header_id,description,mandatory,created_by,updated_by)values(\\\n              ?,?,?,?,?)\",\n        [\n          input.physical_examination_header_id,\n          input.description,\n          input.mandatory,\n          input.created_by,\n          input.updated_by\n        ],\n        (error, results) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          debugLog(\"Results are recorded...\");\n          req.records = results;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add  physical_examination_subdetails\nlet physicalExaminationSubDetails = (req, res, next) => {\n  let physicalExaminationSubDetailsModel = {\n    hims_d_physical_examination_subdetails_id: null,\n    physical_examination_details_id: null,\n    description: null,\n    mandatory: null,\n    created_by: null,\n    updated_by: null\n  };\n\n  debugFunction(\"physicalExaminationSubDetails\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend(physicalExaminationSubDetailsModel, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n\n      connection.query(\n        \"insert into hims_d_physical_examination_subdetails(\\\n            physical_examination_details_id,\\\n            description,mandatory,created_by,updated_by)values(\\\n                ?,?,?,?,?)\",\n        [\n          input.physical_examination_details_id,\n          input.description,\n          input.mandatory,\n          input.created_by,\n          input.updated_by\n        ],\n        (error, results) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          debugLog(\"Results are recorded...\");\n          req.records = results;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:  to add order\nlet addOrder = (req, res, next) => {\n  let hims_f_lab_orderModel = {\n    hims_f_lab_order_id: null,\n    patient_id: null,\n    visit_id: null,\n    provider_id: null,\n    service_id: null,\n    status: null,\n    billed: null,\n    cancelled: null,\n    ordered_date: null,\n    test_type: null,\n    created_by: null,\n    updated_by: null\n  };\n\n  debugFunction(\"addOrder\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend(hims_f_lab_orderModel, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n\n      connection.query(\n        \"insert into hims_f_lab_order(\\\n          patient_id,visit_id,provider_id,service_id,status,billed,\\\n          cancelled,ordered_date,test_type,created_by,updated_by)values(\\\n              ?,?,?,?,?,?,?,?,?,?,?)\",\n        [\n          input.patient_id,\n          input.visit_id,\n          input.provider_id,\n          input.service_id,\n          input.status,\n          input.billed,\n          input.cancelled,\n          input.ordered_date,\n          input.test_type,\n          input.created_by,\n          input.updated_by\n        ],\n        (error, results) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          debugLog(\"Results are recorded...\");\n          req.records = results;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add sample\nlet addSample = (req, res, next) => {\n  let hims_d_lab_sampleModel = {\n    hims_d_lab_sample_id: null,\n    order_id: null,\n    sample_id: null,\n    status: null,\n    collected: null,\n    collected_date: null,\n    created_by: null,\n    updated_by: null\n  };\n\n  debugFunction(\"addSample\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend(hims_d_lab_sampleModel, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n\n      connection.query(\n        \"insert into hims_d_lab_sample(\\\n          order_id,sample_id,status,collected,\\\n          collected_date,created_by,updated_by)values(\\\n              ?,?,?,?,?,?,?)\",\n        [\n          input.order_id,\n          input.sample_id,\n          input.status,\n          input.collected,\n          input.collected_date,\n          input.created_by,\n          input.updated_by\n        ],\n        (error, results) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          debugLog(\"Results are recorded...\");\n          req.records = results;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add Analytes\nlet addAnalytes = (req, res, next) => {\n  let AnalytesModel = {\n    hims_d_lab_analytes_id: null,\n    sample_id: null,\n    analyte_id: null,\n    result: null,\n    text: null,\n    status: null,\n    created_by: null,\n    updated_by: null\n  };\n\n  debugFunction(\"addAnalytes\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend(AnalytesModel, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n\n      connection.query(\n        \"insert into hims_d_lab_analytes(\\\n          sample_id,analyte_id,result,text,status,created_by,updated_by)values(\\\n              ?,?,?,?,?,?,?)\",\n        [\n          input.sample_id,\n          input.analyte_id,\n          input.result,\n          input.text,\n          input.status,\n          input.created_by,\n          input.updated_by\n        ],\n        (error, results) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          debugLog(\"Results are recorded...\");\n          req.records = results;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add ReviewOfSysHeader\nlet addReviewOfSysHeader = (req, res, next) => {\n  let reviewOfSysHeaderModel = {\n    description: null,\n    created_by: null,\n    updated_by: null\n  };\n\n  debugFunction(\"addReviewOfSysHeader\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend(reviewOfSysHeaderModel, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n\n      connection.query(\n        \"insert into hims_d_review_of_system_header(\\\n          description,created_by,updated_by)values(\\\n              ?,?,?)\",\n        [input.description, input.created_by, input.updated_by],\n        (error, results) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          debugLog(\"Results are recorded...\");\n          req.records = results;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add ReviewOfSysDetails\nlet addReviewOfSysDetails = (req, res, next) => {\n  let reviewOfSysDetailsModel = {\n    review_of_system_heder_id: null,\n    description: null,\n    created_by: null,\n    updated_by: null\n  };\n\n  debugFunction(\"addReviewOfSysDetails\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend(reviewOfSysDetailsModel, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n\n      connection.query(\n        \"insert into hims_d_review_of_system_details(\\\n          review_of_system_heder_id,description,created_by,updated_by)values(\\\n              ?,?,?,?)\",\n        [\n          input.review_of_system_heder_id,\n          input.description,\n          input.created_by,\n          input.updated_by\n        ],\n        (error, results) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          debugLog(\"Results are recorded...\");\n          req.records = results;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:  to add allergic details\nlet addAllergy = (req, res, next) => {\n  let AllergyModel = {\n    hims_d_allergy_id: null,\n    allergy_type: null,\n    allergy_name: null,\n    created_by: null,\n    updated_by: null\n  };\n\n  debugFunction(\"addAllergy\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend(AllergyModel, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n\n      connection.query(\n        \"insert into hims_d_allergy(\\\n          allergy_type,allergy_name,created_by,updated_by)values(\\\n              ?,?,?,?)\",\n        [\n          input.allergy_type,\n          input.allergy_name,\n          input.created_by,\n          input.updated_by\n        ],\n        (error, results) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          debugLog(\"Results are recorded...\");\n          req.records = results;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:  to get allergic details\nlet getAllergyDetails = (req, res, next) => {\n  debugFunction(\"getAllergyDetails\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n\n      connection.query(\"SELECT * FROM hims_d_allergy\", (error, results) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        debugLog(\"Results fetched\");\n        req.records = results;\n        next();\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:  to add chronical conditions\nlet addChronicalConditions = (req, res, next) => {\n  let ChronicalConditionsModel = {\n    hims_d_chronic_conditions_id: null,\n    name: null,\n    created_by: null,\n    updated_by: null\n  };\n\n  debugFunction(\"addChronicalConditions\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend(ChronicalConditionsModel, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n\n      connection.query(\n        \"insert into hims_d_chronic_conditions(\\\n          name,created_by,updated_by)values(\\\n              ?,?,?)\",\n        [input.name, input.created_by, input.updated_by],\n        (error, results) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          debugLog(\"Results are recorded...\");\n          req.records = results;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:  to get chronical conditions\nlet getChronicalConditions = (req, res, next) => {\n  debugFunction(\"getChronicalConditions\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n\n      connection.query(\n        \"SELECT * FROM hims_d_chronic_conditions;\",\n        (error, results) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          debugLog(\"Results fetched\");\n          req.records = results;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:  to add encounter review\nlet addEncounterReview = (req, res, next) => {\n  let EncounterReviewMOdel = {\n    hims_f_encounter_review_id: null,\n    encounter_id: null,\n    review_header_id: null,\n    review_details_id: null,\n    created_by: null,\n    updated_by: null\n  };\n\n  debugFunction(\"addEncounterReview\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend(EncounterReviewMOdel, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n\n      connection.query(\n        \"insert into hims_f_encounter_review(\\\n          encounter_id,review_header_id,review_details_id,created_by,updated_by)values(\\\n              ?,?,?,?,?)\",\n        [\n          input.encounter_id,\n          input.review_header_id,\n          input.review_details_id,\n          input.created_by,\n          input.updated_by\n        ],\n        (error, results) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          debugLog(\"Results are recorded...\");\n          req.records = results;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:  to getEncounterReview\nlet getEncounterReview = (req, res, next) => {\n  debugFunction(\"getEncounterReview\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n      let encounter_id = req.query.encounter_id;\n      connection.query(\n        \"SELECT * FROM hims_f_encounter_review where encounter_id=?\",\n        [encounter_id],\n        (error, results) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          debugLog(\"Results fetched\");\n          req.records = results;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: get MYDAY in doctors work bench , to show list of todays patients\nlet getMyDay = (req, res, next) => {\n  let getMydayWhere = {\n    provider_id: req.userIdentity.employee_id,\n    sub_department_id: req.userIdentity.sub_department_id\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let dateDiff = \"\";\n    if (req.query.fromDate != null && req.query.toDate != null) {\n      dateDiff +=\n        \" date(E.created_date) BETWEEN date('\" +\n        moment(req.query.fromDate).format(formater.dbFormat.date) +\n        \"') AND date('\" +\n        moment(req.query.toDate).format(formater.dbFormat.date) +\n        \"')\";\n      delete req.query.fromDate;\n      delete req.query.toDate;\n    } else if (req.query.toDate != null) {\n      dateDiff = \" date(E.created_date) = date('\" + req.query.toDate + \"')\";\n      delete req.query.toDate;\n    }\n\n    let statusFlag = \"\";\n    if (req.query.status == \"A\") {\n      statusFlag = \" E.status <> 'V' AND\";\n      delete req.query.status;\n    } else if (req.query.status == \"V\") {\n      statusFlag = \" E.status='V' AND\";\n      delete req.query.status;\n    }\n\n    let where = whereCondition(extend(getMydayWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      db.query(\n        \"select  E.hims_f_patient_encounter_id,P.patient_code,P.full_name,E.patient_id ,V.appointment_patient,E.provider_id,E.`status`,E.nurse_examine,E.checked_in,\\\n         E.payment_type,E.episode_id,E.encounter_id,E.`source`,E.updated_date as encountered_date,E.visit_id ,sub_department_id from hims_f_patient_encounter E\\\n         INNER JOIN hims_f_patient P ON E.patient_id=P.hims_d_patient_id \\\n            inner join hims_f_patient_visit V on E.visit_id=V.hims_f_patient_visit_id  where E.record_status='A' AND  V.record_status='A' AND \" +\n          statusFlag +\n          \"\" +\n          dateDiff +\n          \" AND \" +\n          where.condition +\n          \" order by E.updated_date desc\",\n        where.values,\n\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to update patient encounter status to WIP\nlet updatdePatEncntrStatus = (req, res, next) => {\n  try {\n    debugFunction(\"updatdePatEncntrStatus\");\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    debugLog(\"Input Data\", req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      let currentEncounterNo = null;\n\n      connection.query(\n        \"SELECT encounter_id FROM algaeh_d_app_config where param_name='VISITEXPERIDAY';\",\n        (error, result) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          currentEncounterNo = result[0].encounter_id;\n          debugLog(\"currentEncounterNo:\", currentEncounterNo);\n\n          if (currentEncounterNo > 0) {\n            let nextEncounterNo = currentEncounterNo + 1;\n            debugLog(\"nextEncounterNo:\", nextEncounterNo);\n\n            connection.query(\n              \"update algaeh_d_app_config set encounter_id=?,updated_by=?,updated_date=? where param_name='VISITEXPERIDAY'\",\n              [nextEncounterNo, req.body.updated_by, new Date()],\n              (error, updateResult) => {\n                if (error) {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                }\n\n                if (updateResult != null) {\n                  connection.query(\n                    \"UPDATE  hims_f_patient_encounter SET  `status`='W',encounter_id=?,updated_by=?,updated_date=? WHERE\\\n         hims_f_patient_encounter_id=? AND  record_status='A';\",\n                    [\n                      currentEncounterNo,\n                      req.body.updated_by,\n                      new Date(),\n                      req.body.patient_encounter_id\n                    ],\n                    (error, result) => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                      releaseDBConnection(db, connection);\n                      req.records = result;\n                      next();\n                    }\n                  );\n                }\n              }\n            );\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get patient profile\nlet getPatientProfile = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let inputData = extend({}, req.query);\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"SELECT P.hims_d_patient_id,P.full_name,P.patient_code,P.vat_applicable,P.gender,P.date_of_birth,P.contact_number,N.nationality,\\\n        PV.age_in_years,PV.age_in_months,PV.age_in_days,PE.payment_type,PE.updated_date as Encounter_Date \\\nfrom ( (hims_f_patient P inner join hims_f_patient_encounter PE  on P.hims_d_patient_id=PE.patient_id)\\\ninner join hims_d_nationality N on N.hims_d_nationality_id=P.nationality_id ) inner join hims_f_patient_visit PV on \\\nPV.hims_f_patient_visit_id=PE.visit_id where P.hims_d_patient_id=? and PE.episode_id=?;\",\n        [inputData.patient_id, inputData.episode_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to  get Patient Vitals\nlet getPatientVitalsOLD = (req, res, next) => {\n  let selectWhere = {\n    patient_id: \"ALL\",\n    visit_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    // let inputData = extend({}, req.query);\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select * from hims_f_patient_vitals where \" +\n          where.condition +\n          \" order by visit_date desc, visit_time desc;\",\n        where.values,\n\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to  get Patient Vitals\nlet getPatientVitals = (req, res, next) => {\n  let selectWhere = {\n    patient_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    // let inputData = extend({}, req.query);\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.query(\n        \"select count(hims_d_vitals_header_id) cnt from hims_d_vitals_header where record_status='A'\",\n        (error, rec) => {\n          if (error) {\n            next(error);\n          }\n          const _limit = (rec.length > 0 ? rec[0][\"cnt\"] : 0) * 5;\n          connection.query(\n            \"select hims_f_patient_vitals_id, patient_id, visit_id, visit_date, visit_time,\\\ncase_type, vital_id,PH.vitals_name,vital_short_name,PH.uom, vital_value, vital_value_one, vital_value_two, formula_value from \\\nhims_f_patient_vitals PV,hims_d_vitals_header PH where PV.record_status='A' and \\\nPH.record_status='A' and PV.vital_id=PH.hims_d_vitals_header_id and \" +\n              where.condition +\n              \" group by visit_date , vital_id order by visit_date , visit_time desc LIMIT 0,\" +\n              _limit +\n              \";\",\n            where.values,\n\n            (error, result) => {\n              releaseDBConnection(db, connection);\n              if (error) {\n                next(error);\n              }\n              req.records = result;\n              next();\n            }\n          );\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to  getPatientAllergies\nlet getPatientAllergies = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let inputData = extend({}, req.query);\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_f_patient_allergy_id,patient_id,allergy_id, onset, onset_date, severity, comment, allergy_inactive,A.allergy_type,A.allergy_name from\\\n        hims_f_patient_allergy PA,hims_d_allergy A where PA.record_status='A' and patient_id=?\\\n        and PA.allergy_id=A.hims_d_allergy_id order by hims_f_patient_allergy_id desc;\",\n        [inputData.patient_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to  getPatientDiet\nlet getPatientDiet = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let inputData = extend({}, req.query);\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"SELECT hims_f_patient_diet_id, patient_id, episode_id, diet_id, comments, till_date, DM.hims_d_diet_description,DM.diet_status,DM.hims_d_diet_note FROM\\\n        hims_f_patient_diet PD,hims_d_diet_master DM where patient_id=? and episode_id=? and DM.record_status='A'\\\n        and DM.hims_d_diet_master_id=PD.diet_id\",\n        [inputData.patient_id, inputData.episode_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to  getPatientDiagnosis\nlet getPatientDiagnosis = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let inputData = extend({}, req.query);\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_f_patient_diagnosis_id, patient_id, episode_id, daignosis_id,icd.icd_code , icd.icd_description ,\\\n        diagnosis_type, final_daignosis from hims_f_patient_diagnosis pd,hims_d_icd icd where pd.record_status='A'\\\n        and patient_id=? and episode_id=? and pd.daignosis_id=icd.hims_d_icd_id;\",\n        [inputData.patient_id, inputData.episode_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n//created by irfan: to get chief complaints(HPI header) against (doctors)sub-department_id\nlet getChiefComplaints = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let sub_department_id = req.userIdentity.sub_department_id;\n    debugLog(\"sub_dp_id:\", sub_department_id);\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_d_hpi_header_id,hpi_description,created_date from hims_d_hpi_header where sub_department_id=? and record_status='A';\",\n        [sub_department_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:  to add new chief complaints (hpi header)\nlet addNewChiefComplaint = (req, res, next) => {\n  debugFunction(\"addNewChiefComplaint\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    let header = req.headers[\"x-app-user-identity\"];\n    header = decryption(header);\n    input.sub_department_id = header.sub_department_id;\n    debugLog(\"sub_department_id:\", header.sub_department_id);\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n\n      const insurtColumns = [\"hpi_description\", \"created_by\", \"updated_by\"];\n\n      connection.query(\n        \"INSERT INTO hims_d_hpi_header(\" +\n          insurtColumns.join(\",\") +\n          \",`sub_department_id`,created_date,update_date) VALUES ?\",\n        [\n          jsonArrayToObject({\n            sampleInputObject: insurtColumns,\n            arrayObj: req.body,\n            newFieldToInsert: [input.sub_department_id, new Date(), new Date()],\n            req: req\n          })\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n\n          debugLog(\"Results are recorded...\");\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n// created by : irfan to ADD  patient-chief complaint\nlet addPatientChiefComplaints = (req, res, next) => {\n  debugFunction(\"addPatientChiefComplaints\");\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    //let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n\n      const insurtColumns = [\n        \"episode_id\",\n        \"patient_id\",\n        \"chief_complaint_id\",\n        \"icd_code_id\",\n        \"onset_date\",\n        \"duration\",\n        \"interval\",\n        \"severity\",\n        \"score\",\n        \"pain\",\n        \"comment\",\n        \"created_by\",\n        \"updated_by\"\n      ];\n\n      connection.query(\n        \"INSERT INTO hims_f_episode_chief_complaint(`\" +\n          insurtColumns.join(\"`,`\") +\n          \"`,created_date,updated_date) VALUES ?\",\n        [\n          jsonArrayToObject({\n            sampleInputObject: insurtColumns,\n            arrayObj: req.body,\n            newFieldToInsert: [new Date(), new Date()],\n            req: req\n          })\n        ],\n        (error, Result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = Result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get patient ChiefComplaints\nlet getPatientChiefComplaints = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let inputData = extend({}, req.query);\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hh.hims_d_hpi_header_id,hh.hpi_description as chief_complaint_name,PE.hims_f_patient_encounter_id,PE.patient_id,\\\n        max(PE.updated_date) as Encounter_Date , ecc.hims_f_episode_chief_complaint_id,ecc.episode_id,ecc.chief_complaint_id,\\\n        ecc.onset_date,ecc.`interval`,ecc.duration,ecc.severity,ecc.score,ecc.pain,ecc.`comment`,ecc.`chronic`,ecc.`complaint_inactive`,ecc.`complaint_inactive_date`\\\n        from ( (hims_f_episode_chief_complaint ecc inner join hims_d_hpi_header hh on hh.hims_d_hpi_header_id=ecc.chief_complaint_id )    inner join hims_f_patient_encounter PE on PE.episode_id=ecc.episode_id)\\\n        where ecc.record_status='A'and ecc.episode_id=? group by chief_complaint_id \",\n        [inputData.episode_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          debugLog(\"result\", result);\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to DELETE patient ChiefComplaints\nlet deletePatientChiefComplaints = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    //let inputData = extend({}, req.query);\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"update hims_f_episode_chief_complaint set record_status='I',updated_date=?,updated_by=? where `record_status`='A' and hims_f_episode_chief_complaint_id=?\",\n        [\n          new Date(),\n          req.body.updated_by,\n          req.body.hims_f_episode_chief_complaint_id\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add new allergy for a patient\nlet addPatientNewAllergy = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let inputparam = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT INTO `hims_f_patient_allergy` (`patient_id`, `allergy_id`, onset, onset_date, severity, `comment`, allergy_inactive,created_date,`created_by`,updated_date,`updated_by`)\\\n        VALUE(?,?,?,?,?,?,?,?,?,?,?)\",\n        [\n          inputparam.patient_id,\n          inputparam.allergy_id,\n          inputparam.onset,\n          inputparam.onset_date,\n          inputparam.severity,\n          inputparam.comment,\n          inputparam.allergy_inactive,\n          new Date(),\n          inputparam.created_by,\n          new Date(),\n          inputparam.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get all allergies\nlet getAllAllergies = (req, res, next) => {\n  let selectWhere = {\n    allergy_type: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_d_allergy_id,allergy_type,\\\n        allergy_name from hims_d_allergy where record_status='A' AND\" +\n          where.condition,\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get all allergies\nlet getPatientAllergy = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let inputData = extend({}, req.query);\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_f_patient_allergy_id,patient_id,allergy_id, onset, onset_date, severity, comment, allergy_inactive,A.allergy_type,A.allergy_name from\\\n        hims_f_patient_allergy PA,hims_d_allergy A where PA.record_status='A' and patient_id=?\\\n        and PA.allergy_id=A.hims_d_allergy_id order by hims_f_patient_allergy_id desc; \",\n        [inputData.patient_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n//created by irfan: to add updatePatientChiefComplaints\nlet updatePatientChiefComplaints = (req, res, next) => {\n  try {\n    debugFunction(\"updatePatientChiefComplaints\");\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n\n        let inputParam = extend([], req.body.chief_complaints);\n\n        let qry = \"\";\n\n        for (let i = 0; i < req.body.chief_complaints.length; i++) {\n          const _complaint_inactive_date =\n            inputParam[i].complaint_inactive_date != null\n              ? \"'\" + inputParam[i].complaint_inactive_date + \"'\"\n              : null;\n          qry +=\n            \"UPDATE `hims_f_episode_chief_complaint` SET  episode_id='\" +\n            inputParam[i].episode_id +\n            \"', chief_complaint_id='\" +\n            inputParam[i].chief_complaint_id +\n            \"', onset_date='\" +\n            inputParam[i].onset_date +\n            \"', `interval`='\" +\n            inputParam[i].interval +\n            \"', duration='\" +\n            inputParam[i].duration +\n            \"', severity='\" +\n            inputParam[i].severity +\n            \"', score='\" +\n            inputParam[i].score +\n            \"', pain='\" +\n            inputParam[i].pain +\n            \"', chronic='\" +\n            inputParam[i].chronic +\n            \"', complaint_inactive='\" +\n            inputParam[i].complaint_inactive +\n            \"', complaint_inactive_date=\" +\n            _complaint_inactive_date +\n            \"\\\n            , comment='\" +\n            inputParam[i].comment +\n            \"', updated_date='\" +\n            new Date().toLocaleString() +\n            \"',updated_by=\\\n'\" +\n            req.body.updated_by +\n            \"' WHERE hims_f_episode_chief_complaint_id='\" +\n            inputParam[i].hims_f_episode_chief_complaint_id +\n            \"';\";\n        }\n\n        connection.query(qry, (error, updateResult) => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n\n          connection.commit(error => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            releaseDBConnection(db, connection);\n            req.records = updateResult;\n            next();\n          });\n        });\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add patient_diagnosis\nlet addPatientDiagnosis = (req, res, next) => {\n  debugLog(\"addPatientDiagnosis\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      const insurtColumns = [\n        \"patient_id\",\n        \"episode_id\",\n        \"daignosis_id\",\n        \"diagnosis_type\",\n        \"final_daignosis\",\n        \"created_by\",\n        \"updated_by\"\n      ];\n\n      connection.query(\n        \"INSERT INTO hims_f_patient_diagnosis(\" +\n          insurtColumns.join(\",\") +\n          \") VALUES ?\",\n        [\n          jsonArrayToObject({\n            sampleInputObject: insurtColumns,\n            arrayObj: req.body,\n            req: req\n          })\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add patient encounter review\nlet addPatientROS = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let inputparam = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT INTO `hims_f_encounter_review` (patient_id,episode_id,review_header_id,review_details_id,`comment`,created_date,created_by,updated_date,updated_by)\\\n        VALUE(?,?,?,?,?,?,?,?,?)\",\n        [\n          inputparam.patient_id,\n          inputparam.episode_id,\n          inputparam.review_header_id,\n          inputparam.review_details_id,\n          inputparam.comment,\n          new Date(),\n          inputparam.created_by,\n          new Date(),\n          inputparam.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to update PatientDiagnosis\nlet updatePatientDiagnosis = (req, res, next) => {\n  try {\n    debugFunction(\"updatePatientDiagnosis\");\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    debugLog(\"Input Data\", req.body);\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        let queryBuilder =\n          \"update hims_f_patient_diagnosis set diagnosis_type=?,\\\n           final_daignosis=?,updated_date=?,updated_by=?, record_status=? where `record_status`='A' and hims_f_patient_diagnosis_id=?;\";\n        let inputs = [\n          input.diagnosis_type,\n          input.final_daignosis,\n          new Date(),\n          input.updated_by,\n          input.record_status,\n          input.hims_f_patient_diagnosis_id\n        ];\n\n        connection.query(queryBuilder, inputs, (error, result) => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n          connection.commit(error => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            releaseDBConnection(db, connection);\n            req.records = result;\n            next();\n          });\n        });\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by:irfan,to get ROS header& details\nlet getReviewOfSystem = (req, res, next) => {\n  let selectWhere = {\n    hims_d_review_of_system_header_id: \"ALL\"\n  };\n\n  debugFunction(\"getReviewOfSystem\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let ROS_header = req.query.hims_d_review_of_system_header_id;\n      let where = whereCondition(extend(selectWhere, req.query));\n      debugLog(\"ROS_header:\", ROS_header);\n      if (ROS_header == \"null\" || ROS_header === undefined) {\n        connection.query(\n          \"SELECT hims_d_review_of_system_header_id, description FROM hims_d_review_of_system_header where record_status='A'\",\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n            req.records = result;\n            next();\n          }\n        );\n      } else {\n        connection.query(\n          \"select RH.hims_d_review_of_system_header_id,RH.description as header_description,RD.hims_d_review_of_system_details_id,RD.description as detail_description from\\\n        hims_d_review_of_system_header RH,hims_d_review_of_system_details RD where\\\n         RH.hims_d_review_of_system_header_id=RD.review_of_system_heder_id and RD.record_status='A' and RH.record_status='A' and\" +\n            where.condition,\n          where.values,\n\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n            req.records = result;\n            next();\n          }\n        );\n      }\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by:irfan,to get Patient ROS\nlet getPatientROS = (req, res, next) => {\n  debugFunction(\"getPatientROS\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let input = extend({}, req.query);\n\n      connection.query(\n        \"select hims_f_encounter_review_id, review_header_id,RH.description as  header_description,review_details_id ,\\\n        RD.description as  detail_description,comment,ER.patient_id,ER.episode_id from ((hims_f_encounter_review ER \\\n          inner join hims_d_review_of_system_details RD on ER.review_details_id=RD.hims_d_review_of_system_details_id)\\\n         inner join hims_d_review_of_system_header RH on ER.review_header_id=RH.hims_d_review_of_system_header_id)\\\n          where ER.record_status='A' and ER.patient_id=? and ER.episode_id=?\",\n        [input.patient_id, input.episode_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to update Patient ROS\nlet updatePatientROS = (req, res, next) => {\n  try {\n    debugFunction(\"updatePatientROS\");\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    debugLog(\"Input Data\", req.body);\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n\n        let queryBuilder =\n          \" update hims_f_encounter_review set patient_id=?, episode_id=?,review_header_id=?,review_details_id=?,`comment`=?,\\\n          updated_date=?,updated_by=?, record_status=? where `record_status`='A' and hims_f_encounter_review_id=?;\";\n        let inputs = [\n          input.patient_id,\n          input.episode_id,\n          input.review_header_id,\n          input.review_details_id,\n          input.comment,\n          new Date(),\n          input.updated_by,\n          input.record_status,\n          input.hims_f_encounter_review_id\n        ];\n\n        connection.query(queryBuilder, inputs, (error, result) => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n          connection.commit(error => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            releaseDBConnection(db, connection);\n            req.records = result;\n            next();\n          });\n        });\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add patient vitals\nlet addPatientVitalsOLD = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let inputparam = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT INTO `hims_f_patient_vitals` (`patient_id`, `visit_id`, `visit_date`, `visit_time`,\\\n         `case_type`, `height`, `weight`, `bmi`, `oxysat`, `temperature_from`, `temperature_farenhiet`, \\\n         `temperature_celsisus`,  `systolic`, `diastolic`,systolic_stand, diastolic_stand, systolic_supine, diastolic_supine, glucose_fbs, glucose_rbs,\\\n          glucose_pbs, head_circumference, bsa, heart_rate, respiratory_rate,`created_date`, `created_by`, `updated_date`, `updated_by`)\\\n        VALUE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n        [\n          inputparam.patient_id,\n          inputparam.visit_id,\n          inputparam.visit_date,\n          inputparam.visit_time,\n          inputparam.case_type,\n          inputparam.height,\n          inputparam.weight,\n          inputparam.bmi,\n          inputparam.oxysat,\n          inputparam.temperature_from,\n          inputparam.temperature_farenhiet,\n          inputparam.temperature_celsisus,\n          inputparam.systolic,\n          inputparam.diastolic,\n\n          inputparam.systolic_stand,\n          inputparam.diastolic_stand,\n          inputparam.systolic_supine,\n          inputparam.diastolic_supine,\n          inputparam.glucose_fbs,\n          inputparam.glucose_rbs,\n          inputparam.glucose_pbs,\n          inputparam.head_circumference,\n          inputparam.bsa,\n          inputparam.heart_rate,\n          inputparam.respiratory_rate,\n\n          new Date(),\n          inputparam.created_by,\n          new Date(),\n          inputparam.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n//created by irfan: to add patient vitals\nlet addPatientVitals = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let inputparam = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      // connection.query(\n      //   \"INSERT INTO `hims_f_patient_vitals` (patient_id, visit_id, visit_date, visit_time, case_type,\\\n      //     vital_id, vital_value, vital_value_one, vital_value_two, formula_value,`created_date`, `created_by`, `updated_date`, `updated_by`)\\\n      //   VALUE(?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n      //   [\n      //     inputparam.patient_id,\n      //     inputparam.visit_id,\n      //     inputparam.visit_date,\n      //     inputparam.visit_time,\n      //     inputparam.case_type,\n      //     inputparam.vital_id,\n      //     inputparam.vital_value,\n      //     inputparam.vital_value_one,\n      //     inputparam.vital_value_two,\n      //     inputparam.formula_value,\n      //     new Date(),\n      //     inputparam.created_by,\n      //     new Date(),\n      //     inputparam.updated_by\n      //   ],\n      //   (error, result) => {\n      //     releaseDBConnection(db, connection);\n      //     if (error) {\n      //       next(error);\n      //     }\n      //     req.records = result;\n      //     next();\n      //   }\n      // );\n\n      const insurtColumns = [\n        \"patient_id\",\n        \"visit_id\",\n        \"visit_date\",\n        \"visit_time\",\n        \"case_type\",\n        \"vital_id\",\n        \"vital_value\",\n        \"vital_value_one\",\n        \"vital_value_two\",\n        \"formula_value\",\n        \"created_by\",\n        \"updated_by\"\n      ];\n\n      connection.query(\n        \"INSERT INTO hims_f_patient_vitals(\" +\n          insurtColumns.join(\",\") +\n          \",created_date,updated_date) VALUES ?\",\n        [\n          jsonArrayToObject({\n            sampleInputObject: insurtColumns,\n            arrayObj: req.body,\n            newFieldToInsert: [new Date(), new Date()],\n            req: req\n          })\n        ],\n\n        (error, results) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          debugLog(\"Results are recorded...\");\n          req.records = results;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add patient physical examination\nlet addPatientPhysicalExamination = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let inputparam = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT INTO hims_f_episode_examination (`patient_id`, `episode_id`, `exam_header_id`, \\\n        `exam_details_id`, `exam_subdetails_id`, `comments`, `created_date`, `created_by`, `updated_date`, `updated_by`) \\\n        VALUE(?,?,?,?,?,?,?,?,?,?)\",\n        [\n          inputparam.patient_id,\n          inputparam.episode_id,\n          inputparam.exam_header_id,\n          inputparam.exam_details_id,\n          inputparam.exam_subdetails_id,\n          inputparam.comments,\n          new Date(),\n          inputparam.created_by,\n          new Date(),\n          inputparam.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to updatePatientAllergy\nlet updatePatientAllergy = (req, res, next) => {\n  try {\n    debugFunction(\"updatePatientAllergy\");\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    debugLog(\"Input Data\", req.body);\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        let queryBuilder =\n          \"update hims_f_patient_allergy set allergy_inactive=?,\\\n          `comment`=?,onset=?,severity=?,onset_date=?, updated_date=?,updated_by=?, record_status=? where `record_status`='A' and  hims_f_patient_allergy_id=?;\";\n        let inputs = [\n          input.allergy_inactive,\n          input.comment,\n          input.onset,\n          input.severity,\n          input.onset_date,\n          new Date(),\n          input.updated_by,\n          input.record_status,\n          input.hims_f_patient_allergy_id\n        ];\n\n        connection.query(queryBuilder, inputs, (error, result) => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n\n          connection.commit(error => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            releaseDBConnection(db, connection);\n            req.records = result;\n            next();\n          });\n        });\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get physical examination\nlet getPhysicalExamination = (req, res, next) => {\n  try {\n    debugFunction(\"getPhysicalExamination\");\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    debugLog(\"Input Data\", req.query);\n    let input = extend({}, req.query);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      let queryBuilder = \"\";\n\n      let input = req.query;\n\n      debugLog(\"separtment:\", req.userIdentity.sub_department_id);\n\n      if (\n        input.hims_d_physical_examination_details_id == \"null\" &&\n        input.hims_d_physical_examination_header_id == \"null\"\n      ) {\n        queryBuilder =\n          \"SELECT hims_d_physical_examination_header_id, examination_type, \\\n            description as header_description, sub_department_id, assesment_type, \\\n            mandatory as header_mandatory FROM hims_d_physical_examination_header where record_status='A'and examination_type='G';\\\n            SELECT hims_d_physical_examination_header_id, examination_type,description as header_description, sub_department_id, assesment_type,\\\n            mandatory as header_mandatory FROM hims_d_physical_examination_header where record_status='A'and examination_type='S' and sub_department_id='\" +\n          req.userIdentity.sub_department_id +\n          \"';\";\n        debugLog(\"only physical header\");\n      } else if (\n        input.hims_d_physical_examination_header_id != \"null\" &&\n        input.hims_d_physical_examination_details_id == \"null\"\n      ) {\n        queryBuilder =\n          \"SELECT hims_d_physical_examination_details_id, physical_examination_header_id,\\\n          description as detail_description, mandatory as detail_mandatory FROM hims_d_physical_examination_details\\\n           where   record_status='A' and  physical_examination_header_id='\" +\n          input.hims_d_physical_examination_header_id +\n          \"';\";\n        debugLog(\"only detail \");\n      } else if (input.hims_d_physical_examination_details_id != \"null\") {\n        queryBuilder =\n          \"SELECT hims_d_physical_examination_subdetails_id, physical_examination_details_id, description as sub_detail_description,\\\n          mandatory as sub_detail_mandatory from hims_d_physical_examination_subdetails where record_status='A' and physical_examination_details_id='\" +\n          input.hims_d_physical_examination_details_id +\n          \"'\";\n        debugLog(\"only sub -detail \");\n      }\n      debugLog(\"Query Physical Exam\", queryBuilder);\n      connection.query(queryBuilder, (error, result) => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        releaseDBConnection(db, connection);\n        debugLog(\"result\", result[1]);\n\n        req.records = result;\n        next();\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Noor: to get all physical examination\nlet getAllPhysicalExamination = (req, res, next) => {\n  try {\n    debugFunction(\"getPhysicalExamination\");\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      const _all = req.query.allDept == \"G\" ? \"\" : \" and sub_department_id=?\";\n      let queryBuilder =\n        \"SELECT hims_d_physical_examination_header_id,\\\n      examination_type,h.description,assesment_type,\\\n      h.mandatory,hims_d_physical_examination_details_id,\\\n      d.description as dtl_description,\\\n      sd.description as sub_dtl_description,\\\n      sd.mandatory ,sd.hims_d_physical_examination_subdetails_id FROM hims_d_physical_examination_header h left outer join  hims_d_physical_examination_details d \\\n      on h.hims_d_physical_examination_header_id = d.physical_examination_header_id left outer join \\\n      hims_d_physical_examination_subdetails sd  on sd.physical_examination_details_id=d.hims_d_physical_examination_details_id \\\n       where \\\n      h.record_status='A' \" +\n        _all;\n      connection.query(\n        queryBuilder,\n        [req.userIdentity.sub_department_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet addDietAdvice = (req, res, next) => {\n  let dietadvice = {\n    hims_f_patient_diet_id: null,\n    patient_id: null,\n    episode_id: null,\n    diet_id: null,\n    comments: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    let inputParam = extend(dietadvice, req.body);\n    connection.query(\n      \"INSERT INTO `hims_f_patient_diet` (`patient_id`, `episode_id`,`diet_id`, `comments`, `till_date` \\\n      , `created_by` ,`created_date`,updated_date,updated_by) \\\n   VALUES ( ?, ?, ?, ?, ?, ?, ?,?,?)\",\n      [\n        inputParam.patient_id,\n        inputParam.episode_id,\n        inputParam.diet_id,\n        inputParam.comments,\n        inputParam.till_date,\n        inputParam.created_by,\n        new Date(),\n        new Date(),\n        inputParam.updated_by\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\n\nlet getEpisodeDietAdvice = (req, res, next) => {\n  let Diet = {\n    hims_f_patient_diet_id: \"ALL\",\n    patient_id: \"ALL\",\n    episode_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let pagePaging = \"\";\n    if (req.paging != null) {\n      let Page = paging(req.paging);\n      pagePaging += \" LIMIT \" + Page.pageNo + \",\" + page.pageSize;\n    }\n\n    let condition = whereCondition(extend(Diet, req.query));\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"SELECT * FROM `hims_f_patient_diet` WHERE `record_status`='A' AND \" +\n          condition.condition +\n          \" \" +\n          pagePaging,\n        values: condition.values\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet addReferalDoctor = (req, res, next) => {\n  let referraldoc = {\n    hims_f_patient_referral_id: null,\n    patient_id: null,\n    episode_id: null,\n    referral_type: null,\n    sub_department_id: null,\n    hospital_name: null,\n    reason: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    let inputParam = extend(referraldoc, req.body);\n    connection.query(\n      \"INSERT INTO `hims_f_patient_referral` (`patient_id`, `episode_id`,`referral_type`, `sub_department_id`, \\\n      `doctor_id` ,`hospital_name`, `reason`, `created_by` ,`created_date`) \\\n      VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?)\",\n      [\n        inputParam.patient_id,\n        inputParam.episode_id,\n        inputParam.referral_type,\n        inputParam.sub_department_id,\n        inputParam.doctor_id,\n        inputParam.hospital_name,\n        inputParam.reason,\n        inputParam.created_by,\n        new Date()\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\n\nlet addFollowUp = (req, res, next) => {\n  let followup = {\n    hims_f_patient_followup_id: null,\n    patient_id: null,\n    doctor_id: null,\n    followup_type: null,\n    followup_date: null,\n    reason: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    let inputParam = extend(followup, req.body);\n    connection.query(\n      \"INSERT INTO `hims_f_patient_followup` (`patient_id`, `doctor_id`,`followup_type`, \\\n       `followup_date`, `reason`, `created_by` ,`created_date`) \\\n      VALUES ( ?, ?, ?, ?, ?, ?, ?)\",\n      [\n        inputParam.patient_id,\n        inputParam.doctor_id,\n        inputParam.followup_type,\n        inputParam.followup_date,\n        inputParam.reason,\n        inputParam.created_by,\n        new Date()\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\n\n//created by:irfan,to get Patient physical examination\nlet getPatientPhysicalExamination = (req, res, next) => {\n  debugFunction(\"getPatientPhysicalExamination\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let input = extend({}, req.query);\n\n      // select hims_f_episode_examination_id,  comments ,\\\n      //   hims_d_physical_examination_header_id, PH.examination_type, PH.description as header_description,PH.sub_department_id, PH.assesment_type, PH.mandatory as header_mandatory,\\\n      //               hims_d_physical_examination_details_id,PD.description as detail_description, PD.mandatory as detail_mandatory,\\\n      //               hims_d_physical_examination_subdetails_id,PS.description as subdetail_description, PS.mandatory as subdetail_mandatory \\\n      //               from hims_f_episode_examination EE,hims_d_physical_examination_header PH ,hims_d_physical_examination_details PD,hims_d_physical_examination_subdetails PS\\\n      //               where EE.exam_header_id=PH.hims_d_physical_examination_header_id and EE.exam_details_id=PD.hims_d_physical_examination_details_id and EE.exam_subdetails_id=PS.hims_d_physical_examination_subdetails_id and \\\n      //               EE.record_status='A' and EE.patient_id= ? and EE.episode_id=?\n      connection.query(\n        \"select hims_f_episode_examination_id, patient_id, episode_id, exam_header_id, exam_details_id,exam_subdetails_id, comments ,\\\n        hims_d_physical_examination_header_id, PH.examination_type, PH.description as header_description,PH.sub_department_id, PH.assesment_type, PH.mandatory as header_mandatory,\\\n                    hims_d_physical_examination_details_id,PD.description as detail_description, PD.mandatory as detail_mandatory,\\\n                    hims_d_physical_examination_subdetails_id,PS.description as subdetail_description, PS.mandatory as subdetail_mandatory\\\n                    from  ((hims_f_episode_examination EE  join hims_d_physical_examination_header PH on EE.exam_header_id=PH.hims_d_physical_examination_header_id) left join hims_d_physical_examination_details PD on\\\n                      EE.exam_details_id=PD.hims_d_physical_examination_details_id )\\\n                    left join hims_d_physical_examination_subdetails PS on EE.exam_subdetails_id=PS.hims_d_physical_examination_subdetails_id \\\n                   where  EE.record_status='A' and EE.patient_id= ? and EE.episode_id=?\",\n        [input.patient_id, input.episode_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to update or delete Patient physical examination\nlet updatePatientPhysicalExam = (req, res, next) => {\n  try {\n    debugFunction(\"updatePatientPhysicalExam\");\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    debugLog(\"Input Data\", req.body);\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        let queryBuilder =\n          \"UPDATE `hims_f_episode_examination` SET  `patient_id`=?,\\\n          `episode_id`=?, `exam_header_id`=?, `exam_details_id`=?, `exam_subdetails_id`=?, `comments`=?,\\\n          `updated_date`=?, `updated_by`=?, `record_status`=? WHERE `record_status`='A' and `hims_f_episode_examination_id`=?;\";\n        let inputs = [\n          input.patient_id,\n          input.episode_id,\n          input.exam_header_id,\n          input.exam_details_id,\n          input.exam_subdetails_id,\n          input.comments,\n          new Date(),\n          input.updated_by,\n          input.record_status,\n          input.hims_f_episode_examination_id\n        ];\n\n        connection.query(queryBuilder, inputs, (error, result) => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n\n          connection.commit(error => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            req.records = result;\n            releaseDBConnection(db, connection);\n            next();\n          });\n        });\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get\nlet getVitalsHeaderMaster = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.query(\n        \"with vitals (hims_d_vitals_header_id,vitals_name, uom, general,display,mandatory,vital_short_name) as \\\n        ( \\\n        SELECT H.hims_d_vitals_header_id, vitals_name, uom, general,display,mandatory,vital_short_name FROM hims_d_vitals_header H \\\n         where general='Y' and H.record_status='A' \\\n          UNION ALL \\\n          select H.hims_d_vitals_header_id, vitals_name, uom, general,display,mandatory,vital_short_name from hims_d_vitals_header H,hims_m_department_vital_mapping M \\\n         where general='N' and H.record_status='A' and H.hims_d_vitals_header_id =M.vital_header_id and  M.department_id=?  \\\n        ) \\\n        SELECT hims_d_vitals_header_id,vitals_name, uom, general,display,mandatory,vital_short_name from vitals\",\n        [req.userIdentity.sub_department_id],\n\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add patient_historty\nlet addPatientHistory = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let input = extend({}, req.body);\n\n      const insurtColumns = [\n        \"history_type\",\n        \"remarks\",\n        \"created_by\",\n        \"updated_by\"\n      ];\n\n      connection.query(\n        \"INSERT INTO hims_f_patient_history(\" +\n          insurtColumns.join(\",\") +\n          \",patient_id,provider_id, created_date,updated_date) VALUES ?\",\n        [\n          jsonArrayToObject({\n            sampleInputObject: insurtColumns,\n            arrayObj: req.body.patient_history,\n            newFieldToInsert: [\n              input.patient_id,\n              input.provider_id,\n              new Date(),\n              new Date()\n            ],\n            req: req\n          })\n        ],\n\n        (error, results) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          debugLog(\"Results are recorded...\");\n          req.records = results;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to getPatientHistory\nlet getPatientHistoryBACKUP = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_f_patient_history_id,history_type, provider_id, patient_id, remarks from hims_f_patient_history\\\n        where record_status='A' and patient_id=?\",\n        [req.query.patient_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n//created by irfan: to getPatientHistory\nlet getPatientHistory = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_f_patient_history_id,history_type, provider_id,E.full_name as provider_name, patient_id, remarks from hims_f_patient_history PH,\\\n        hims_d_employee E where  PH.provider_id= E.hims_d_employee_id and PH.record_status='A' and E.record_status='A' and  \\\n         patient_id=? \",\n        [req.query.patient_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n\n          let social = new LINQ(result)\n            .Where(w => w.history_type == \"SOH\")\n            .Select(s => {\n              return {\n                hims_f_patient_history_id: s.hims_f_patient_history_id,\n                history_type: s.history_type,\n                provider_id: s.provider_id,\n                provider_name: s.provider_name,\n                patient_id: s.patient_id,\n                remarks: s.remarks\n              };\n            })\n            .ToArray();\n          debugLog(\"social:\", social);\n\n          let medical = new LINQ(result)\n            .Where(w => w.history_type == \"MEH\")\n            .Select(s => {\n              return {\n                hims_f_patient_history_id: s.hims_f_patient_history_id,\n                history_type: s.history_type,\n                provider_id: s.provider_id,\n                provider_name: s.provider_name,\n                patient_id: s.patient_id,\n                remarks: s.remarks\n              };\n            })\n            .ToArray();\n          debugLog(\"medical:\", medical);\n\n          let surgical = new LINQ(result)\n            .Where(w => w.history_type == \"SGH\")\n            .Select(s => {\n              return {\n                hims_f_patient_history_id: s.hims_f_patient_history_id,\n                history_type: s.history_type,\n                provider_id: s.provider_id,\n                provider_name: s.provider_name,\n                patient_id: s.patient_id,\n                remarks: s.remarks\n              };\n            })\n            .ToArray();\n          debugLog(\"surgical:\", surgical);\n\n          let family = new LINQ(result)\n            .Where(w => w.history_type == \"FMH\")\n            .Select(s => {\n              return {\n                hims_f_patient_history_id: s.hims_f_patient_history_id,\n                history_type: s.history_type,\n                provider_id: s.provider_id,\n                provider_name: s.provider_name,\n                patient_id: s.patient_id,\n                remarks: s.remarks\n              };\n            })\n            .ToArray();\n          debugLog(\"family:\", family);\n\n          let birth = new LINQ(result)\n            .Where(w => w.history_type == \"BRH\")\n            .Select(s => {\n              return {\n                hims_f_patient_history_id: s.hims_f_patient_history_id,\n                history_type: s.history_type,\n                provider_id: s.provider_id,\n                provider_name: s.provider_name,\n                patient_id: s.patient_id,\n                remarks: s.remarks\n              };\n            })\n            .ToArray();\n          debugLog(\"birth:\", birth);\n\n          req.records = { social, medical, surgical, family, birth };\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet getFollowUp = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let inputData = extend({}, req.query);\n\n    // let followup_date = \"date(inputData.date_of_recall)\"\";\n    let strQuery =\n      \"SELECT p.patient_code,p.full_name, p.registration_date,p.gender,p.date_of_birth,p.contact_number \\\n      FROM hims_f_patient_followup, hims_f_patient p where hims_f_patient_followup.patient_id = p.hims_d_patient_id \\\n      and hims_f_patient_followup.doctor_id=?\";\n\n    if (\n      inputData.date_of_recall != undefined ||\n      inputData.date_of_recall != null\n    ) {\n      let followup_date =\n        \"date(followup_date)= date('\" + inputData.date_of_recall + \"')\";\n\n      strQuery = strQuery + \" and \" + followup_date;\n    }\n\n    debugLog(\"strQuery: \", strQuery);\n    db.getConnection((error, connection) => {\n      connection.query(strQuery, [inputData.doctor_id], (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get\nlet getPatientEpisodeSummary = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"SELECT hims_f_episode_chief_complaint_id, ECC.episode_id, ECC.patient_id, chief_complaint_id, \\\n        onset_date, `interval`, duration, severity, score, pain, chronic, complaint_inactive ,\\\n        hpi_description as chief_complaint,full_name as patient_name,arabic_name,gender,age\\\n        ,hims_f_patient_visit_id,visit_date ,sub_department_name from\\\n        hims_f_episode_chief_complaint  ECC\\\n        inner join hims_d_hpi_header HH on ECC.chief_complaint_id =HH.hims_d_hpi_header_id \\\n        inner join hims_f_patient P on ECC.patient_id=P.hims_d_patient_id \\\n        inner join hims_f_patient_visit V on ECC.episode_id=V.episode_id\\\n        inner join hims_d_sub_department SD on V.sub_department_id=SD.hims_d_sub_department_id\\\n        where ECC.episode_id=?    group by  ECC.chief_complaint_id \",\n        [req.query.episode_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  physicalExaminationHeader,\n  physicalExaminationDetails,\n  physicalExaminationSubDetails,\n  getPhysicalExamination,\n  addOrder,\n  addSample,\n  addAnalytes,\n  addAllergy,\n  getAllergyDetails,\n  addChronicalConditions,\n  getChronicalConditions,\n  addEncounterReview,\n  getEncounterReview,\n  getMyDay,\n  updatdePatEncntrStatus,\n  getPatientProfile,\n  getChiefComplaints,\n  getFollowUp,\n\n  addPatientChiefComplaints,\n  addNewChiefComplaint,\n  getPatientChiefComplaints,\n  deletePatientChiefComplaints,\n  addPatientNewAllergy,\n  getAllAllergies,\n  getPatientAllergy,\n  updatePatientChiefComplaints,\n  addPatientDiagnosis,\n  addPatientROS,\n  getPatientROS,\n  updatePatientROS,\n  addReviewOfSysHeader,\n  addReviewOfSysDetails,\n  getReviewOfSystem,\n  updatePatientDiagnosis,\n  addPatientVitals,\n  addPatientPhysicalExamination,\n  updatePatientAllergy,\n  addDietAdvice,\n  getEpisodeDietAdvice,\n  addReferalDoctor,\n  addFollowUp,\n  getPatientPhysicalExamination,\n  updatePatientPhysicalExam,\n  getPatientVitals,\n  getPatientAllergies,\n  getPatientDiagnosis,\n  getPatientDiet,\n  getAllPhysicalExamination,\n  getVitalsHeaderMaster,\n  addPatientHistory,\n  getPatientHistory,\n  getPatientEpisodeSummary\n};\n"]}