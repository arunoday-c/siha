{"version":3,"sources":["../../../src/model/radiology.js"],"names":["getRadOrderedServices","req","res","next","db","httpStatus","dataBaseNotInitilizedError","whereOrder","query","from_date","undefined","to_date","where","getConnection","error","connection","condition","values","result","records","e","insertRadOrderedServices","insurtColumns","ResultOfFetchOrderIds","Services","body","billdetails","radServices","LINQ","Where","w","service_type_id","appsettings","hims_d_service_type","Radiology","Select","ordered_services_id","s","hims_f_ordered_services_id","patient_id","provider_id","visit_id","service_id","services_id","billed","ordered_date","created_date","ordered_by","userIdentity","algaeh_d_app_user_id","test_type","ToArray","length","join","sampleInputObject","arrayObj","newFieldToInsert","updateRadOrderedServices","RadList","hims_f_rad_order_id","status","cancelled","scheduled_date_time","scheduled_by","arrived_date","arrived","validate_by","validate_date_time","attended_by","attended_date_time","technician_id","exam_start_date_time","exam_end_date_time","exam_status","report_type","template_id","inputParam","getRadTemplateList","whereStatement","updateRadOrderedBilled","OrderServices","updated_date","Date","updated_by","qry","i","toLocaleString","RAD","module","exports"],"mappings":"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","file":"radiology.js","sourcesContent":["\"use strict\";\nimport extend from \"extend\";\nimport {\n  whereCondition,\n  releaseDBConnection,\n  jsonArrayToObject\n} from \"../utils\";\n\nimport httpStatus from \"../utils/httpStatus\";\nimport { LINQ } from \"node-linq\";\nimport appsettings from \"../utils/appsettings.json\";\nimport { debugFunction, debugLog } from \"../utils/logging\";\n\n//created by nowshad: to get lad orders for sample collection\nlet getRadOrderedServices = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let whereOrder = \"\";\n    if (req.query.from_date != undefined) {\n      whereOrder =\n        \"date(ordered_date) between date('\" +\n        req.query.from_date +\n        \"') AND date('\" +\n        req.query.to_date +\n        \"')\";\n    } else {\n      whereOrder = \"date(ordered_date) <= date(now())\";\n    }\n\n    delete req.query.from_date;\n    delete req.query.to_date;\n    let where = whereCondition(req.query);\n\n    debugLog(\"where Dates:\", whereOrder);\n    debugLog(\"where conditn:\", where);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      db.query(\n        \"SELECT hims_f_rad_order_id,patient_id,visit_id,provider_id, template_id, billed, service_id,SR.service_code,SR.service_name,\\\n        status, cancelled, ordered_by, ordered_date, test_type, technician_id, scheduled_date_time,scheduled_by,arrived_date,arrived,validate_by,\\\n        validate_date_time,attended_by,attended_date_time,exam_start_date_time,exam_end_date_time,exam_status,report_type,\\\n        PAT.patient_code,PAT.full_name,PAT.date_of_birth,PAT.gender\\\n        from ((hims_f_rad_order SA inner join hims_f_patient PAT ON SA.patient_id=PAT.hims_d_patient_id) inner join \\\n        hims_d_services SR on SR.hims_d_services_id=SA.service_id) WHERE \" +\n          whereOrder +\n          (where.condition == \"\" ? \"\" : \" AND \" + where.condition),\n        where.values,\n\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet insertRadOrderedServices = (req, res, next) => {\n  const insurtColumns = [\n    \"ordered_services_id\",\n    \"patient_id\",\n    \"visit_id\",\n    \"provider_id\",\n    \"service_id\",\n    \"billed\",\n    \"ordered_date\",\n    \"ordered_by\",\n    \"test_type\"\n  ];\n  debugLog(\"ResultOfFetchOrderIds: \", req.records.ResultOfFetchOrderIds);\n\n  let Services = req.records.ResultOfFetchOrderIds || req.body.billdetails;\n  const radServices = new LINQ(Services)\n    .Where(\n      w =>\n        w.service_type_id ==\n        appsettings.hims_d_service_type.service_type_id.Radiology\n    )\n    .Select(s => {\n      return {\n        ordered_services_id: s.hims_f_ordered_services_id || null,\n        patient_id: req.body.patient_id,\n        provider_id: req.body.provider_id,\n        visit_id: req.body.visit_id,\n        service_id: s.services_id,\n        billed: req.body.billed,\n        ordered_date: s.created_date,\n        ordered_by: req.userIdentity.algaeh_d_app_user_id,\n        test_type: s.test_type\n      };\n    })\n    .ToArray();\n  debugLog(\"radServices: \", radServices);\n  let connection = req.connection;\n  if (radServices.length > 0) {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    debugLog(\"insurtColumns\", insurtColumns.join(\",\"));\n    debugLog(\"radServices\", radServices);\n    connection.query(\n      \"INSERT INTO hims_f_rad_order(\" +\n        insurtColumns.join(\",\") +\n        \",created_by,updated_by)  VALUES ?\",\n      [\n        jsonArrayToObject({\n          sampleInputObject: insurtColumns,\n          arrayObj: radServices,\n          req: req,\n          newFieldToInsert: [\n            req.userIdentity.algaeh_d_app_user_id,\n            req.userIdentity.algaeh_d_app_user_id\n          ]\n        })\n      ],\n      (error, result) => {\n        if (error) {\n          releaseDBConnection(db, connection);\n          next(error);\n        }\n        req.records = result;\n        releaseDBConnection(db, connection);\n        next();\n      }\n    );\n  } else {\n    next();\n  }\n};\n\nlet updateRadOrderedServices = (req, res, next) => {\n  let RadList = {\n    hims_f_rad_order_id: null,\n    status: null,\n    cancelled: null,\n    scheduled_date_time: null,\n    scheduled_by: null,\n    arrived_date: null,\n    arrived: null,\n    validate_by: null,\n    validate_date_time: null,\n    attended_by: null,\n    attended_date_time: null,\n    technician_id: null,\n    exam_start_date_time: null,\n    exam_end_date_time: null,\n    exam_status: null,\n    report_type: null,\n    template_id: null\n  };\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n\n  //req.userIdentity.algaeh_d_app_user_id\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    let inputParam = extend(RadList, req.body);\n\n    if (inputParam.scheduled_by == null && inputParam.status == \"S\") {\n      inputParam.scheduled_by = req.userIdentity.algaeh_d_app_user_id;\n    }\n    if (inputParam.validate_by == null && inputParam.status == \"RA\") {\n      inputParam.validate_by = req.userIdentity.algaeh_d_app_user_id;\n    }\n    if (\n      inputParam.attended_by == null &&\n      inputParam.status == \"V\" &&\n      inputParam.report_type == \"AD\"\n    ) {\n      inputParam.attended_by = req.userIdentity.algaeh_d_app_user_id;\n    }\n    if (inputParam.status == \"UP\") {\n      inputParam.technician_id = req.userIdentity.algaeh_d_app_user_id;\n    }\n\n    debugLog(\"inputParam: \", inputParam);\n    connection.query(\n      \"UPDATE `hims_f_rad_order` \\\n     SET `status`=?,  `cancelled`=?,`scheduled_date_time`=?, `scheduled_by`=?, `arrived_date`=?,`arrived`=?,\\\n     `validate_by`=?, `validate_date_time` = ?, `attended_by`=?,`attended_date_time`=?,`exam_start_date_time`=?, \\\n     `exam_end_date_time`=?, `exam_status`=?, `report_type`=?,`technician_id`=?, `template_id`=?\\\n     WHERE `hims_f_rad_order_id`=?\",\n      [\n        inputParam.status,\n        inputParam.cancelled,\n        inputParam.scheduled_date_time,\n        inputParam.scheduled_by,\n        inputParam.arrived_date,\n        inputParam.arrived,\n        inputParam.validate_by,\n        inputParam.validate_date_time,\n        inputParam.attended_by,\n        inputParam.attended_date_time,\n        inputParam.exam_start_date_time,\n        inputParam.exam_end_date_time,\n        inputParam.exam_status,\n        inputParam.report_type,\n        inputParam.technician_id,\n        inputParam.template_id,\n        inputParam.hims_f_rad_order_id\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\n\nlet getRadTemplateList = (req, res, next) => {\n  let whereStatement = {\n    services_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let where = whereCondition(extend(whereStatement, req.query));\n\n      debugLog(\"inputparam: \", where);\n      connection.query(\n        \"SELECT distinct TD.template_name, TD.template_html, IT.hims_d_investigation_test_id,TD.hims_d_rad_template_detail_id \\\n         FROM hims_d_investigation_test IT, \\\n        hims_d_rad_template_detail TD  WHERE IT.hims_d_investigation_test_id = TD.test_id AND \" +\n          where.condition,\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          debugLog(\"result: \", result);\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet updateRadOrderedBilled = (req, res, next) => {\n  debugFunction(\"updateRadOrderedBilled\");\n\n  debugLog(\"Bill Data: \", req.body.billdetails);\n  let OrderServices = new LINQ(req.body.billdetails)\n    .Where(\n      w =>\n        w.hims_f_ordered_services_id != null &&\n        w.service_type_id ==\n          appsettings.hims_d_service_type.service_type_id.Radiology\n    )\n    .Select(s => {\n      return {\n        ordered_services_id: s.hims_f_ordered_services_id,\n        billed: \"Y\",\n        updated_date: new Date(),\n        updated_by: req.userIdentity.algaeh_d_app_user_id\n      };\n    })\n    .ToArray();\n\n  debugLog(\"Rad Order Services: \", OrderServices);\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let connection = req.connection;\n\n    let qry = \"\";\n\n    for (let i = 0; i < OrderServices.length; i++) {\n      qry +=\n        \" UPDATE `hims_f_rad_order` SET billed='\" +\n        OrderServices[i].billed +\n        \"',updated_date='\" +\n        new Date().toLocaleString() +\n        \"',updated_by='\" +\n        OrderServices[i].updated_by +\n        \"' WHERE ordered_services_id='\" +\n        OrderServices[i].ordered_services_id +\n        \"';\";\n    }\n    debugLog(\"Query\", qry);\n    if (qry != \"\") {\n      connection.query(qry, (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        debugLog(\"Query Result \", result);\n        req.records = { result, RAD: false };\n        next();\n      });\n    } else {\n      req.records = { RAD: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  getRadOrderedServices,\n  getRadTemplateList,\n  insertRadOrderedServices,\n  updateRadOrderedServices,\n  updateRadOrderedBilled\n};\n"]}