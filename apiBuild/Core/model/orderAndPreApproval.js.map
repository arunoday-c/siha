{"version":3,"sources":["../../../src/model/orderAndPreApproval.js"],"names":["getPreAprovalList","req","res","next","preAprovalWhere","service_id","doctor_id","patient_id","db","httpStatus","dataBaseNotInitilizedError","query","created_date","where","getConnection","error","connection","condition","values","result","records","e","updatePreApproval","inputParam","body","qry","i","length","_appDate","apprv_date","insurance_provider_id","insurance_network_office_id","icd_code","insurance_service_name","gross_amt","net_amount","requested_date","userIdentity","algaeh_d_app_user_id","requested_mode","requested_quantity","submission_type","refer_no","approved_amount","apprv_remarks","rejected_reason","apprv_status","Date","toLocaleString","hims_f_service_approval_id","insertOrderedServices","insurtColumns","beginTransaction","rollback","billdetails","join","sampleInputObject","arrayObj","newFieldToInsert","resultOrder","servicesForPreAproval","visit_id","services","LINQ","Select","s","services_id","ToArray","push","ResultOfFetchOrderIds","detailsPush","Where","g","pre_approval","hims_f_ordered_services_id","w","FirstOrDefault","insurtCols","replaceObject","originalKey","NewKey","resultPreAprvl","selectOrderServices","selectWhere","getOrderServices","insurance_yesno","service_type_id","updateOrderedServices","Promise","resolve","reject","then","input","quantity","unit_cost","gross_amount","discount_amout","discount_percentage","net_amout","copay_percentage","copay_amount","deductable_amount","deductable_percentage","tax_inclusive","patient_tax","company_tax","total_tax","patient_resp","patient_payable","comapany_resp","company_payble","sec_company","sec_deductable_percentage","sec_deductable_amount","sec_company_res","sec_company_tax","sec_company_paybale","sec_copay_percntage","sec_copay_amount","updateOrderedServicesBilled","OrderServices","billed","updated_date","updated_by","module","exports"],"mappings":"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","file":"orderAndPreApproval.js","sourcesContent":["\"use strict\";\nimport extend from \"extend\";\nimport {\n  whereCondition,\n  releaseDBConnection,\n  jsonArrayToObject\n} from \"../utils\";\n\nimport { getBillDetailsFunctionality } from \"../model/billing\";\n\nimport httpStatus from \"../utils/httpStatus\";\nimport { LINQ } from \"node-linq\";\n\nimport { debugFunction, debugLog } from \"../utils/logging\";\n\n//created by irfan: check pre-aproval status and get PreAproval List\nlet getPreAprovalList = (req, res, next) => {\n  let preAprovalWhere = {\n    service_id: \"ALL\",\n    doctor_id: \"ALL\",\n    patient_id: \"ALL\"\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    req.query[\"date(SA.created_date)\"] = req.query.created_date;\n    delete req.query.created_date;\n\n    debugLog(\"req query:\", req.query);\n\n    let where = whereCondition(extend(preAprovalWhere, req.query));\n\n    debugLog(\"where conditn:\", where);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      db.query(\n        \"SELECT hims_f_service_approval_id,ordered_services_id,insurance_provider_id,network_id,insurance_network_office_id, service_id,SR.service_code, icd_code, requested_date, requested_by, requested_mode,\\\n        requested_quantity, submission_type, insurance_service_name, doctor_id, patient_id, PAT.patient_code,PAT.full_name, refer_no, gross_amt,\\\n        net_amount, approved_amount, approved_no, apprv_remarks, apprv_date, rejected_reason, apprv_status,SA.created_date,SA.created_by\\\n        from ((hims_f_service_approval SA inner join hims_f_patient PAT ON SA.patient_id=PAT.hims_d_patient_id) inner join hims_d_services SR on SR.hims_d_services_id=SA.service_id) WHERE SA.record_status='A' AND \" +\n          where.condition,\n        where.values,\n\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:UPDATE PREAPPROVAL\nlet updatePreApproval = (req, res, next) => {\n  debugFunction(\"updatePreApproval\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      let inputParam = extend({}, req.body);\n\n      let qry = \"\";\n\n      for (let i = 0; i < req.body.length; i++) {\n        let _appDate =\n          inputParam[i].apprv_date != null\n            ? \"'\" + inputParam[i].apprv_date + \"'\"\n            : null;\n        qry +=\n          \" UPDATE `hims_f_service_approval` SET service_id='\" +\n          inputParam[i].service_id +\n          \"',insurance_provider_id='\" +\n          inputParam[i].insurance_provider_id +\n          \"',insurance_network_office_id=\\\n'\" +\n          inputParam[i].insurance_network_office_id +\n          \"', icd_code='\" +\n          inputParam[i].icd_code +\n          \"',insurance_service_name=\\\n'\" +\n          inputParam[i].insurance_service_name +\n          \"',doctor_id='\" +\n          inputParam[i].doctor_id +\n          \"',patient_id='\" +\n          inputParam[i].patient_id +\n          \"'\\\n,gross_amt='\" +\n          inputParam[i].gross_amt +\n          \"',net_amount='\" +\n          inputParam[i].net_amount +\n          \"',requested_date=\\\n          '\" +\n          inputParam[i].requested_date +\n          \"',requested_by=\\\n          '\" +\n          req.userIdentity.algaeh_d_app_user_id +\n          \"',requested_mode=\\\n          '\" +\n          inputParam[i].requested_mode +\n          \"',requested_quantity=\\\n          '\" +\n          inputParam[i].requested_quantity +\n          \"',submission_type=\\\n          '\" +\n          inputParam[i].submission_type +\n          \"',refer_no=\\\n          '\" +\n          inputParam[i].refer_no +\n          \"',approved_amount=\\\n          '\" +\n          inputParam[i].approved_amount +\n          \"',apprv_remarks=\\\n          '\" +\n          inputParam[i].apprv_remarks +\n          \"',apprv_date=\\\n           \" +\n          _appDate +\n          \",rejected_reason=\\\n          '\" +\n          inputParam[i].rejected_reason +\n          \"',apprv_status=\\\n          '\" +\n          inputParam[i].apprv_status +\n          \"',updated_date='\" +\n          new Date().toLocaleString() +\n          \"',updated_by='\" +\n          req.userIdentity.algaeh_d_app_user_id +\n          \"' WHERE hims_f_service_approval_id='\" +\n          inputParam[i].hims_f_service_approval_id +\n          \"';\";\n      }\n\n      debugLog(\"qry: \", qry);\n      connection.query(qry, (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: insert ordered services and pre-approval services for insurance\nlet insertOrderedServices = (req, res, next) => {\n  const insurtColumns = [\n    \"patient_id\",\n    \"visit_id\",\n    \"doctor_id\",\n    \"service_type_id\",\n    \"services_id\",\n    \"test_type\",\n    \"insurance_yesno\",\n    \"insurance_provider_id\",\n    \"insurance_sub_id\",\n    \"network_id\",\n    \"insurance_network_office_id\",\n    \"policy_number\",\n    \"pre_approval\",\n    \"quantity\",\n    \"unit_cost\",\n    \"gross_amount\",\n    \"discount_amout\",\n    \"discount_percentage\",\n    \"net_amout\",\n    \"copay_percentage\",\n    \"copay_amount\",\n    \"deductable_amount\",\n    \"deductable_percentage\",\n    \"tax_inclusive\",\n    \"patient_tax\",\n    \"company_tax\",\n    \"total_tax\",\n    \"patient_resp\",\n    \"patient_payable\",\n    \"comapany_resp\",\n    \"company_payble\",\n    \"sec_company\",\n    \"sec_deductable_percentage\",\n    \"sec_deductable_amount\",\n    \"sec_company_res\",\n    \"sec_company_tax\",\n    \"sec_company_paybale\",\n    \"sec_copay_percntage\",\n    \"sec_copay_amount\"\n  ];\n\n  debugFunction(\"add order\");\n  debugLog(\"request body:\", req.body);\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let connection = req.connection;\n\n    connection.beginTransaction(error => {\n      if (error) {\n        connection.rollback(() => {\n          releaseDBConnection(db, connection);\n          next(error);\n        });\n      }\n\n      debugLog(\"bodyy:\", req.body.billdetails);\n      debugLog(\"insurtColumns: \", insurtColumns);\n      connection.query(\n        \"INSERT INTO hims_f_ordered_services(\" +\n          insurtColumns.join(\",\") +\n          \",created_by,updated_by) VALUES ?\",\n        [\n          jsonArrayToObject({\n            sampleInputObject: insurtColumns,\n            arrayObj: req.body.billdetails,\n            req: req,\n            newFieldToInsert: [\n              req.userIdentity.algaeh_d_app_user_id,\n              req.userIdentity.algaeh_d_app_user_id\n            ]\n          })\n        ],\n        (error, resultOrder) => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n\n          let servicesForPreAproval = [];\n          let patient_id;\n          let doctor_id;\n          let visit_id;\n\n          let services = new LINQ(req.body.billdetails)\n            .Select(s => {\n              patient_id = s.patient_id;\n              doctor_id = s.doctor_id;\n              visit_id = s.visit_id;\n              return s.services_id;\n            })\n            .ToArray();\n          debugLog(\"services:\", services);\n          if (services.length > 0) {\n            servicesForPreAproval.push(patient_id);\n            servicesForPreAproval.push(doctor_id);\n            servicesForPreAproval.push(visit_id);\n            servicesForPreAproval.push(services);\n\n            debugLog(\" servicesForPreAproval\", servicesForPreAproval);\n\n            connection.query(\n              \"SELECT hims_f_ordered_services_id,services_id,created_date, service_type_id, test_type from hims_f_ordered_services\\\n                 where `patient_id`=? and `doctor_id`=? and `visit_id`=? and `services_id` in (?)\",\n              servicesForPreAproval,\n              (error, ResultOfFetchOrderIds) => {\n                if (error) {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                }\n                debugLog(\"Query \", connection);\n                debugLog(\"Results are recorded...\", ResultOfFetchOrderIds);\n\n                let detailsPush = new LINQ(req.body.billdetails)\n                  .Where(g => g.pre_approval == \"Y\")\n                  .Select(s => {\n                    return {\n                      ...s,\n                      ...{\n                        hims_f_ordered_services_id: new LINQ(\n                          ResultOfFetchOrderIds\n                        )\n                          .Where(w => w.services_id == s.services_id)\n                          .FirstOrDefault().hims_f_ordered_services_id\n                      }\n                    };\n                  })\n                  .ToArray();\n\n                //if request for pre-aproval needed\n                if (detailsPush.length > 0) {\n                  const insurtCols = [\n                    \"ordered_services_id\",\n                    \"service_id\",\n                    \"insurance_provider_id\",\n                    \"insurance_network_office_id\",\n                    \"icd_code\",\n                    \"requested_quantity\",\n                    \"insurance_service_name\",\n                    \"doctor_id\",\n                    \"patient_id\",\n                    \"gross_amt\",\n                    \"net_amount\"\n                  ];\n\n                  connection.query(\n                    \"INSERT INTO hims_f_service_approval(\" +\n                      insurtCols.join(\",\") +\n                      \",created_by,updated_by) VALUES ?\",\n                    [\n                      jsonArrayToObject({\n                        sampleInputObject: insurtCols,\n                        arrayObj: detailsPush,\n                        replaceObject: [\n                          {\n                            originalKey: \"service_id\",\n                            NewKey: \"services_id\"\n                          },\n                          {\n                            originalKey: \"gross_amt\",\n                            NewKey: \"ser_gross_amt\"\n                          },\n                          {\n                            originalKey: \"net_amount\",\n                            NewKey: \"ser_net_amount\"\n                          },\n                          {\n                            originalKey: \"ordered_services_id\",\n                            NewKey: \"hims_f_ordered_services_id\"\n                          }\n                        ],\n                        req: req,\n                        newFieldToInsert: [\n                          req.userIdentity.algaeh_d_app_user_id,\n                          req.userIdentity.algaeh_d_app_user_id\n                        ]\n                      })\n                    ],\n                    (error, resultPreAprvl) => {\n                      if (error) {\n                        debugLog(\"Error 1 Here result \", error);\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                      req.records = { resultPreAprvl, ResultOfFetchOrderIds };\n                      next();\n                    }\n                  );\n                } else {\n                  debugLog(\"Commit result \");\n                  req.records = { resultOrder, ResultOfFetchOrderIds };\n                  next();\n                }\n              }\n            );\n          } else {\n            debugFunction(\"Else: \");\n\n            req.records = { resultOrder, ResultOfFetchOrderIds };\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet selectOrderServices = (req, res, next) => {\n  let selectWhere = {\n    visit_id: \"ALL\"\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let where = whereCondition(extend(selectWhere, req.query));\n      connection.query(\n        \"SELECT  * FROM `hims_f_ordered_services` \\\n       WHERE `record_status`='A' AND `billed`='N' AND \" +\n          where.condition,\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet getOrderServices = (req, res, next) => {\n  let selectWhere = {\n    visit_id: \"ALL\",\n    insurance_yesno: \"ALL\",\n    service_type_id: \"ALL\",\n    services_id: \"ALL\"\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let where = whereCondition(extend(selectWhere, req.query));\n      connection.query(\n        \"SELECT  * FROM `hims_f_ordered_services` \\\n       WHERE `record_status`='A' AND \" +\n          where.condition,\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//ordered services update\nlet updateOrderedServices = (req, res, next) => {\n  debugFunction(\"updateOrderedServices\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      new Promise((resolve, reject) => {\n        try {\n          getBillDetailsFunctionality(req, res, next, resolve);\n        } catch (e) {\n          reject(e);\n        }\n      }).then(result => {\n        let inputParam = result.billdetails[0];\n        debugLog(\"call back result\", inputParam);\n\n        let input = extend({}, req.body[0]);\n        debugLog(\"id:\", input.hims_f_ordered_services_id);\n\n        connection.query(\n          \"UPDATE hims_f_ordered_services SET service_type_id=?,services_id=?,insurance_yesno=?,\\\n          pre_approval=?,apprv_status=?,quantity=?,unit_cost=?,gross_amount=?,discount_amout=?,discount_percentage=?,net_amout=?,\\\n          copay_percentage=?,copay_amount=?,deductable_amount=?,deductable_percentage=?,tax_inclusive=?,patient_tax=?,company_tax=?,total_tax=?,patient_resp=?,patient_payable=?,\\\n          comapany_resp=?,company_payble=?,sec_company=?,sec_deductable_percentage=?,sec_deductable_amount=?,sec_company_res=?,sec_company_tax=?,sec_company_paybale=?,\\\n          sec_copay_percntage=?,sec_copay_amount=?,updated_date=?, updated_by=? WHERE `record_status`='A' AND `hims_f_ordered_services_id`=? \",\n          [\n            inputParam.service_type_id,\n            inputParam.services_id,\n            inputParam.insurance_yesno,\n            inputParam.pre_approval,\n            input.apprv_status,\n            inputParam.quantity,\n            inputParam.unit_cost,\n            inputParam.gross_amount,\n            inputParam.discount_amout,\n            inputParam.discount_percentage,\n            inputParam.net_amout,\n            inputParam.copay_percentage,\n            inputParam.copay_amount,\n            inputParam.deductable_amount,\n            inputParam.deductable_percentage,\n            inputParam.tax_inclusive,\n            inputParam.patient_tax,\n            inputParam.company_tax,\n            inputParam.total_tax,\n            inputParam.patient_resp,\n            inputParam.patient_payable,\n            inputParam.comapany_resp,\n            inputParam.company_payble,\n            inputParam.sec_company,\n            inputParam.sec_deductable_percentage,\n            inputParam.sec_deductable_amount,\n            inputParam.sec_company_res,\n            inputParam.sec_company_tax,\n            inputParam.sec_company_paybale,\n            inputParam.sec_copay_percntage,\n            inputParam.sec_copay_amount,\n            new Date(),\n            req.userIdentity.algaeh_d_app_user_id,\n            input.hims_f_ordered_services_id\n          ],\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n            req.records = result;\n            next();\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//ordered services update as billed\nlet updateOrderedServicesBilled = (req, res, next) => {\n  debugFunction(\"updateOrderedServicesBilled\");\n\n  debugLog(\"Bill Data: \", req.body.billdetails);\n  let OrderServices = new LINQ(req.body.billdetails)\n    .Where(w => w.hims_f_ordered_services_id != null)\n    .Select(s => {\n      return {\n        hims_f_ordered_services_id: s.hims_f_ordered_services_id,\n        billed: \"Y\",\n        updated_date: new Date(),\n        updated_by: req.userIdentity.algaeh_d_app_user_id\n      };\n    })\n    .ToArray();\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let connection = req.connection;\n\n    let qry = \"\";\n\n    for (let i = 0; i < OrderServices.length; i++) {\n      qry +=\n        \" UPDATE `hims_f_ordered_services` SET billed='\" +\n        OrderServices[i].billed +\n        \"'\" +\n        \",updated_by='\" +\n        OrderServices[i].updated_by +\n        \"' WHERE hims_f_ordered_services_id='\" +\n        OrderServices[i].hims_f_ordered_services_id +\n        \"';\";\n    }\n    debugLog(\"Query\", qry);\n    if (qry != \"\") {\n      connection.query(qry, (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        debugLog(\"Query Result \", result);\n        req.records = result;\n        next();\n      });\n    } else {\n      req.records = {};\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  insertOrderedServices,\n  getPreAprovalList,\n  updatePreApproval,\n  selectOrderServices,\n  updateOrderedServices,\n  updateOrderedServicesBilled,\n  getOrderServices\n};\n"]}