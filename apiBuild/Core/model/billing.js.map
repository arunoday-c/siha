{"version":3,"sources":["../../../src/model/billing.js"],"names":["addBillData","req","res","next","db","options","inputParam","hims_f_billing_header_id","patient_id","billing_type_id","receipt_header_id","visit_id","bill_number","incharge_or_provider","bill_date","advance_amount","discount_amount","sub_total_amount","total_tax","net_total","billing_status","copay_amount","deductable_amount","gross_total","sheet_discount_amount","sheet_discount_percentage","net_amount","patient_res","company_res","sec_company_res","patient_payable","company_payable","sec_company_payable","patient_tax","company_tax","sec_company_tax","net_tax","credit_amount","receiveable_amount","created_by","userIdentity","algaeh_d_app_user_id","created_date","updated_by","updated_date","record_status","cancel_remarks","cancel_by","bill_comments","advance_adjust","body","billdetails","length","errorGen","httpStatus","generateError","badRequest","onFailure","hims_f_patient_visit_id","patient_visit_id","errorGene","query","Date","balance_credit","error","headerResult","rollback","insertId","result","existingAdvance","subtractAdvance","newDtls","LINQ","Select","service_type_id","s","services_id","quantity","unit_cost","insurance_yesno","gross_amount","discount_amout","discount_percentage","net_amout","copay_percentage","deductable_percentage","tax_inclusive","patient_resp","comapany_resp","company_payble","sec_company","sec_deductable_percentage","sec_deductable_amount","sec_company_paybale","sec_copay_percntage","sec_copay_amount","ToArray","detailsInsert","detailsRecords","records","onSuccess","e","addBill","dataBase","callBack","isCommited","billingHeaderModel","dataBaseNotInitilizedError","fromDate","toDate","visit_expiery_date","format","newNumber","debuglog","newReceipt","P_receiptHeaderModel","hims_f_receipt_header_id","receipt_number","receipt_date","billing_header_id","total_amount","counter_id","shift_id","receiptdetails","numgenId","headerRcptResult","receptSample","join","sampleInputObject","arrayObj","newFieldToInsert","RcptDetailsRecords","billingCalculations","hasCalculateall","intCalculateall","undefined","sendingObject","Sum","d","cash_amount","unbalanced_amount","card_amount","cheque_amount","math","round","isReceipt","getBillDetailsFunctionality","resolve","billingDetailsModel","hims_f_billing_details_id","servicesModel","hims_d_services_id","service_code","cpt_code","service_name","service_desc","sub_department_id","hospital_id","standard_fee","discount","effective_start_date","effectice_end_date","getConnection","connection","service_ids","questions","Array","isArray","len","g","i","items","outputArray","m","servicesDetails","zeroBill","FollowUp","sec_unit_cost","after_dect_amout","conversion_factor","insured","sec_insured","approval_amt","approval_limit_yesno","apprv_status","approved_amount","pre_approval","vat_applicable","preapp_limit_exceed","ser_net_amount","ser_gross_amt","icd_code","covered","preapp_limit_amount","out","push","Promise","reject","insurance_id","primary_insurance_provider_id","hims_d_insurance_network_office_id","primary_network_office_id","network_id","primary_network_id","insuranceServiceDetails","secondary_insurance_provider_id","secondary_network_office_id","secondary_network_id","then","policydtls","gross_amt","company_service_price_type","copay_status","copay_amt","appsettings","hims_d_service_type","Consultation","copay_consultation","deductible","Procedure","copay_percent_trt","deductible_trt","Provider","copay_percent","InventoryItem","Lab","deductible_lab","NursingCare","Miscellaneous","Anesthesia","Bed","OT","Radiology","copay_percent_rad","deductible_rad","Pharmacy","copay_medicine","deductible_medicine","NonService","Package","vat_percent","diff_val","preapp_limit","followup_free_fee","secpolicydtls","item_id","expiry_date","expirydt","batchno","qtyhand","grnno","uom_id","sales_uom","item_category","item_category_id","item_group_id","catch","patientAdvanceRefund","pay_type","advanceModel","hims_f_patient_id","transaction_type","beginTransaction","RCPT_or_PYMNT_NUM","inputParameters","AdvanceRecords","appendAdvance","commit","total_advance_amount","payment_no","NetOffModel","input","resultOffic","price_from","insuranceModel","inputparam","result_s","networkModel","result_p","addEpisodeEncounter","episodeModel","provider_id","source","status","episode_id","encounter_id","checked_in","nurse_examine","age","patient_type","queue_no","currentEncounterNo","nextEncounterNo","updateResult","results","addEpisodeEncounterData","payment_type","hims_f_patient_appointment_id","patAppointment","getBillDetails","newReceiptData","genErr","addCashHandover","group_type","hims_f_cash_handover_detail_id","checkShiftStatus","headerCashHandover","CashHandoverDetails","expected_cash","expected_card","expected_cheque","no_of_cheques","Where","w","amount","selectCurrentCash","mesage","module","exports"],"mappings":"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","file":"billing.js","sourcesContent":["import httpStatus from \"../utils/httpStatus\";\nimport extend from \"extend\";\nimport {\n  bulkInputArrayObject,\n  runningNumber,\n  releaseDBConnection,\n  jsonArrayToObject\n} from \"../utils\";\n\nimport moment from \"moment\";\nimport { debugLog, debugFunction } from \"../utils/logging\";\nimport appsettings from \"../utils/appsettings.json\";\nimport { LINQ } from \"node-linq\";\nimport math from \"mathjs\";\n//import { inflate } from \"zlib\";\n\nlet addBillData = (req, res, next) => {\n  let db = req.options == null ? req.db : req.options.db;\n\n  try {\n    let inputParam = extend(\n      {\n        hims_f_billing_header_id: null,\n        patient_id: null,\n        billing_type_id: null,\n        receipt_header_id: null,\n        visit_id: null,\n        bill_number: null,\n        incharge_or_provider: null,\n        bill_date: null,\n        advance_amount: 0,\n        discount_amount: 0,\n        sub_total_amount: 0,\n        total_tax: 0,\n        net_total: 0,\n        billing_status: null,\n        copay_amount: 0,\n        deductable_amount: 0,\n        gross_total: 0,\n        sheet_discount_amount: 0,\n        sheet_discount_percentage: 0,\n        net_amount: 0,\n        patient_res: 0,\n        company_res: 0,\n        sec_company_res: 0,\n        patient_payable: 0,\n        company_payable: 0,\n        sec_company_payable: 0,\n        patient_tax: 0,\n        company_tax: 0,\n        sec_company_tax: 0,\n        net_tax: 0,\n        credit_amount: 0,\n        receiveable_amount: 0,\n        created_by: req.userIdentity.algaeh_d_app_user_id,\n        created_date: null,\n        updated_by: req.userIdentity.algaeh_d_app_user_id,\n        updated_date: null,\n        record_status: null,\n        cancel_remarks: null,\n        cancel_by: null,\n        bill_comments: null,\n        advance_adjust: 0\n      },\n      req.body\n    );\n\n    if (inputParam.billdetails == null || inputParam.billdetails.length == 0) {\n      const errorGen = httpStatus.generateError(\n        httpStatus.badRequest,\n        \"Please select atleast one service.\"\n      );\n      if (req.options == null) {\n        next(errorGen);\n      } else {\n        req.options.onFailure(errorGen);\n      }\n    }\n\n    inputParam.hims_f_patient_visit_id = req.body.patient_visit_id;\n    inputParam.patient_id = req.body.patient_id;\n\n    if (\n      inputParam.sheet_discount_amount != 0 &&\n      inputParam.bill_comments == \"\"\n    ) {\n      const errorGene = httpStatus.generateError(\n        httpStatus.badRequest,\n        \"Please enter sheet level discount comments. \"\n      );\n      if (req.options == null) {\n        next(errorGene);\n      } else {\n        req.options.onFailure(errorGene);\n      }\n    }\n\n    inputParam.bill_number = req.bill_number;\n    inputParam.patient_id = req.patient_id || req.body.patient_id;\n    inputParam.visit_id = req.body.visit_id;\n    db.query(\n      \"INSERT INTO hims_f_billing_header ( patient_id, visit_id, bill_number,receipt_header_id,\\\n            incharge_or_provider, bill_date, advance_amount,advance_adjust, discount_amount, sub_total_amount \\\n            , total_tax,  billing_status, sheet_discount_amount, sheet_discount_percentage, net_amount, net_total \\\n            , company_res, sec_company_res, patient_res, patient_payable, company_payable, sec_company_payable \\\n            , patient_tax, company_tax, sec_company_tax, net_tax, credit_amount, receiveable_amount,balance_credit \\\n            , created_by, created_date, updated_by, updated_date, copay_amount, deductable_amount) VALUES (?,?,?,?\\\n              ,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n      [\n        inputParam.patient_id,\n        inputParam.visit_id,\n        inputParam.bill_number,\n        inputParam.receipt_header_id,\n        inputParam.incharge_or_provider,\n        inputParam.bill_date != null\n          ? new Date(inputParam.bill_date)\n          : inputParam.bill_date,\n        inputParam.advance_amount,\n        inputParam.advance_adjust,\n        inputParam.discount_amount,\n        inputParam.sub_total_amount,\n        inputParam.total_tax,\n        inputParam.billing_status,\n        inputParam.sheet_discount_amount,\n        inputParam.sheet_discount_percentage,\n        inputParam.net_amount,\n        inputParam.net_total,\n        inputParam.company_res,\n        inputParam.sec_company_res,\n        inputParam.patient_res,\n        inputParam.patient_payable,\n        inputParam.company_payable,\n        inputParam.sec_company_payable,\n        inputParam.patient_tax,\n        inputParam.company_tax,\n        inputParam.sec_company_tax,\n        inputParam.net_tax,\n        inputParam.credit_amount,\n        inputParam.receiveable_amount,\n        inputParam.balance_credit,\n        inputParam.created_by,\n        new Date(),\n        inputParam.updated_by,\n        new Date(),\n        inputParam.copay_amount,\n        inputParam.deductable_amount\n      ],\n      (error, headerResult) => {\n        debugLog(\"Header status\", error, headerResult);\n        if (error) {\n          if (req.options == null) {\n            db.rollback(() => {\n              releaseDBConnection(req.db, db);\n              next(error);\n            });\n          } else {\n            req.options.onFailure(error);\n          }\n        } else {\n          // if a patient utilizing his advance amount for his current payment\n          if (\n            headerResult.insertId != null &&\n            headerResult.insertId != \"\" &&\n            inputParam.advance_adjust > 0\n          ) {\n            db.query(\n              \"SELECT advance_amount FROM hims_f_patient WHERE hims_d_patient_id=?\",\n              [inputParam.patient_id],\n              (error, result) => {\n                if (error) {\n                  if (req.options == null) {\n                    releaseDBConnection(req.db, db);\n                    next(error);\n                  } else {\n                    req.options.onFailure(error);\n                  }\n                }\n                let existingAdvance = result[0].advance_amount;\n\n                if (result.length != 0) {\n                  inputParam.advance_amount =\n                    existingAdvance - inputParam.advance_adjust;\n                  db.query(\n                    \"UPDATE  `hims_f_patient` SET  `advance_amount`=?, \\\n                    `updated_by`=?, `updated_date`=? WHERE `hims_d_patient_id`=?\",\n                    [\n                      inputParam.advance_amount,\n                      inputParam.updated_by,\n                      new Date(),\n                      inputParam.patient_id\n                    ],\n                    (error, subtractAdvance) => {\n                      if (error) {\n                        if (req.options == null) {\n                          db.rollback(() => {\n                            releaseDBConnection(req.db, db);\n                            next(error);\n                          });\n                        } else {\n                          req.options.onFailure(error);\n                        }\n                      }\n                    }\n                  );\n                }\n              }\n            );\n          }\n\n          // req.billing_header_id = headerResult.insertId;\n          debugLog(\"Billing Header \", headerResult.insertId);\n          let newDtls = new LINQ(inputParam.billdetails)\n            .Select(s => {\n              return {\n                hims_f_billing_header_id: headerResult.insertId,\n                service_type_id: s.service_type_id,\n                services_id: s.services_id,\n                quantity: s.quantity,\n                unit_cost: s.unit_cost,\n                insurance_yesno: s.insurance_yesno,\n                gross_amount: s.gross_amount,\n                \" discount_amout\": s.discount_amout,\n                discount_percentage: s.discount_percentage,\n                net_amout: s.net_amout,\n                copay_percentage: s.copay_percentage,\n                copay_amount: s.copay_amount,\n                deductable_amount: s.deductable_amount,\n                deductable_percentage: s.deductable_percentage,\n                tax_inclusive: s.tax_inclusive == 0 ? \"N\" : s.tax_inclusive,\n                patient_tax: s.patient_tax,\n                company_tax: s.company_tax,\n                total_tax: s.total_tax,\n                patient_resp: s.patient_resp,\n                patient_payable: s.patient_payable,\n                comapany_resp: s.comapany_resp,\n                company_payble: s.company_payble,\n                sec_company: s.sec_company == 0 ? \"N\" : s.sec_company,\n                sec_deductable_percentage: s.sec_deductable_percentage,\n                sec_deductable_amount: s.sec_deductable_amount,\n                sec_company_res: s.sec_company_res,\n                sec_company_tax: s.sec_company_tax,\n                sec_company_paybale: s.sec_company_paybale,\n                sec_copay_percntage: s.sec_copay_percntage,\n                sec_copay_amount: s.sec_copay_amount,\n                created_by: req.userIdentity.algaeh_d_app_user_id,\n                created_date: new Date(),\n                updated_by: req.userIdentity.algaeh_d_app_user_id,\n                updated_date: new Date()\n              };\n            })\n            .ToArray();\n\n          let detailsInsert = [];\n          debugLog(\"befor Detail Insert Data\", newDtls);\n          bulkInputArrayObject(newDtls, detailsInsert);\n\n          debugLog(\"Detail Insert Data\", detailsInsert);\n\n          db.query(\n            \"INSERT  INTO hims_f_billing_details (hims_f_billing_header_id, service_type_id,\\\n                     services_id, quantity, unit_cost,insurance_yesno,gross_amount, discount_amout, \\\n                     discount_percentage, net_amout, copay_percentage, copay_amount, \\\n                     deductable_amount, deductable_percentage, tax_inclusive, patient_tax, \\\n                     company_tax, total_tax, patient_resp, patient_payable, comapany_resp,\\\n                     company_payble, sec_company, sec_deductable_percentage, sec_deductable_amount,\\\n                     sec_company_res, sec_company_tax, sec_company_paybale, sec_copay_percntage, \\\n                     sec_copay_amount, created_by, created_date, updated_by, updated_date) VALUES ? \",\n            [detailsInsert],\n            (error, detailsRecords) => {\n              if (error) {\n                if (req.options == null) {\n                  db.rollback(() => {\n                    releaseDBConnection(req.db, db);\n                    next(error);\n                  });\n                } else {\n                  req.options.onFailure(error);\n                }\n              }\n              if (req.options == null) {\n                req.records = headerResult;\n                releaseDBConnection(req.db, db);\n                next();\n              } else {\n                req.options.onSuccess(headerResult);\n              }\n            }\n          );\n        }\n      }\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: Adding bill headder and bill details\n//AddBill\nlet addBill = (dataBase, req, res, callBack, isCommited, next) => {\n  isCommited = isCommited || false;\n  let db = req.db;\n\n  let billingHeaderModel = {\n    hims_f_billing_header_id: null,\n    patient_id: null,\n    billing_type_id: null,\n    visit_id: null,\n    bill_number: null,\n    incharge_or_provider: null,\n    bill_date: null,\n    advance_amount: 0,\n    discount_amount: 0,\n    sub_total_amount: 0,\n    total_tax: 0,\n    net_total: 0,\n    billing_status: null,\n    copay_amount: 0,\n    deductable_amount: 0,\n    gross_total: 0,\n    sheet_discount_amount: 0,\n    sheet_discount_percentage: 0,\n    net_amount: 0,\n    patient_res: 0,\n    company_res: 0,\n    sec_company_res: 0,\n    patient_payable: 0,\n    company_payable: 0,\n    sec_company_payable: 0,\n    patient_tax: 0,\n    company_tax: 0,\n    sec_company_tax: 0,\n    net_tax: 0,\n    credit_amount: 0,\n    receiveable_amount: 0,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n    created_date: null,\n    updated_by: req.userIdentity.algaeh_d_app_user_id,\n    updated_date: null,\n    record_status: null,\n    cancel_remarks: null,\n    cancel_by: null,\n    bill_comments: null,\n    advance_adjust: 0\n  };\n\n  try {\n    debugFunction(\"addBill\");\n\n    if (dataBase == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n\n    let inputParam = extend(billingHeaderModel, req.body);\n\n    if (inputParam.billdetails == null || inputParam.billdetails.length == 0) {\n      next(\n        httpStatus.generateError(\n          httpStatus.badRequest,\n          \"Please select atleast one service.\"\n        )\n      );\n    }\n    inputParam.hims_f_patient_visit_id = req.body.visit_id;\n\n    dataBase.query(\n      \"select hims_f_patient_visit_id,visit_expiery_date from hims_f_patient_visit where hims_f_patient_visit_id=? \\\n           and record_status='A'\",\n      [inputParam.hims_f_patient_visit_id],\n\n      (error, records) => {\n        debugFunction(\"Test\", error, records);\n        if (error) {\n          dataBase.rollback(() => {\n            releaseDBConnection(db, dataBase);\n            next(error);\n          });\n        }\n\n        let fromDate;\n        let toDate;\n        if (records.length == 0) {\n          fromDate = 0;\n          toDate = 0;\n        } else {\n          fromDate = moment(records[0].visit_expiery_date).format(\"YYYYMMDD\");\n          toDate = moment(new Date()).format(\"YYYYMMDD\");\n        }\n\n        if (toDate > fromDate) {\n          dataBase.rollback(() => {\n            releaseDBConnection(db, dataBase);\n            next(\n              httpStatus.generateError(\n                httpStatus.badRequest,\n                \"Visit expired please create new visit to process\"\n              )\n            );\n          });\n        } else {\n          runningNumber(req.db, 3, \"PAT_BILL\", (error, records, newNumber) => {\n            if (error) {\n              dataBase.rollback(() => {\n                releaseDBConnection(db, dataBase);\n                next(error);\n              });\n            }\n            debugLog(\"new Bill number : \" + newNumber);\n            inputParam[\"bill_number\"] = newNumber;\n            req.body.bill_number = newNumber;\n            if (\n              inputParam.sheet_discount_amount != 0 &&\n              inputParam.bill_comments == \"\"\n            ) {\n              next(\n                httpStatus.generateError(\n                  httpStatus.badRequest,\n                  \"Please enter sheet level discount comments. \"\n                )\n              );\n            }\n            dataBase.query(\n              \"INSERT INTO hims_f_billing_header ( patient_id, billing_type_id, visit_id, bill_number,\\\n                  incharge_or_provider, bill_date, advance_amount,advance_adjust, discount_amount \\\n                  , total_tax,  billing_status, sheet_discount_amount, sheet_discount_percentage, net_amount \\\n                  , company_res, sec_company_res, patient_payable, company_payable, sec_company_payable \\\n                  , patient_tax, company_tax, sec_company_tax, net_tax, credit_amount, receiveable_amount \\\n                  , created_by, created_date, updated_by, updated_date, copay_amount, deductable_amount) VALUES (?,?,?,?\\\n                    ,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n              [\n                inputParam.patient_id,\n                inputParam.billing_type_id,\n                inputParam.visit_id,\n                inputParam.bill_number,\n                inputParam.incharge_or_provider,\n                inputParam.bill_date,\n                inputParam.advance_amount,\n                inputParam.advance_adjust,\n                inputParam.discount_amount,\n                inputParam.total_tax,\n                inputParam.billing_status,\n                inputParam.sheet_discount_amount,\n                inputParam.sheet_discount_percentage,\n                inputParam.net_amount,\n                inputParam.company_res,\n                inputParam.sec_company_res,\n                inputParam.patient_payable,\n                inputParam.company_payable,\n                inputParam.sec_company_payable,\n                inputParam.patient_tax,\n                inputParam.company_tax,\n                inputParam.sec_company_tax,\n                inputParam.net_tax,\n                inputParam.credit_amount,\n                inputParam.receiveable_amount,\n                inputParam.created_by,\n                inputParam.created_date,\n                inputParam.updated_by,\n                inputParam.updated_date,\n                inputParam.copay_amount,\n                inputParam.deductable_amount\n              ],\n              (error, headerResult) => {\n                if (error) {\n                  dataBase.rollback(() => {\n                    releaseDBConnection(db, dataBase);\n                    next(error);\n                  });\n                }\n                // if a patient utilizing his advance amount for his current payment\n                if (\n                  headerResult.insertId != null &&\n                  headerResult.insertId != \"\" &&\n                  inputParam.advance_adjust > 0\n                ) {\n                  dataBase.query(\n                    \"SELECT advance_amount FROM hims_f_patient WHERE hims_d_patient_id=?\",\n                    [inputParam.patient_id],\n                    (error, result) => {\n                      if (error) {\n                        releaseDBConnection(db, dataBase);\n                        next(error);\n                      }\n                      let existingAdvance = result[0].advance_amount;\n                      debugLog(\"existingAdvance:\", existingAdvance);\n                      debugLog(\"before \", inputParam.advance_adjust);\n                      if (result.length != 0) {\n                        inputParam.advance_amount =\n                          existingAdvance - inputParam.advance_adjust;\n\n                        debugLog(\"after \", inputParam.advance_amount);\n                        dataBase.query(\n                          \"UPDATE  `hims_f_patient` SET  `advance_amount`=?, \\\n                          `updated_by`=?, `updated_date`=? WHERE `hims_d_patient_id`=?\",\n                          [\n                            inputParam.advance_amount,\n                            inputParam.updated_by,\n                            new Date(),\n                            inputParam.patient_id\n                          ],\n                          (error, subtractAdvance) => {\n                            if (error) {\n                              dataBase.rollback(() => {\n                                releaseDBConnection(db, dataBase);\n                                next(error);\n                              });\n                            }\n                          }\n                        );\n                      }\n                    }\n                  );\n                }\n\n                if (\n                  headerResult.insertId != null &&\n                  headerResult.insertId != \"\"\n                ) {\n                  // req.billing_header_id = headerResult.insertId;\n                  let detailsInsert = [];\n                  bulkInputArrayObject(inputParam.billdetails, detailsInsert, {\n                    hims_f_billing_header_id: headerResult.insertId\n                  });\n\n                  dataBase.query(\n                    \"INSERT  INTO hims_f_billing_details (hims_f_billing_details_id,hims_f_billing_header_id, service_type_id,\\\n                           services_id, quantity, unit_cost,insurance_yesno,gross_amount, discount_amout, \\\n                           discount_percentage, net_amout, copay_percentage, copay_amount, \\\n                           deductable_amount, deductable_percentage, tax_inclusive, patient_tax, \\\n                           company_tax, total_tax, patient_resp, patient_payable, comapany_resp,\\\n                           company_payble, sec_company, sec_deductable_percentage, sec_deductable_amount,\\\n                           sec_company_res, sec_company_tax, sec_company_paybale, sec_copay_percntage, \\\n                           sec_copay_amount, created_by, created_date, updated_by, updated_date) VALUES ? \",\n                    [detailsInsert],\n                    (error, detailsRecords) => {\n                      if (error) {\n                        dataBase.rollback(() => {\n                          releaseDBConnection(db, dataBase);\n                          next(error);\n                        });\n                      }\n                      //headerResult\n                      if (typeof callBack == \"function\") {\n                        callBack(error, headerResult);\n                      }\n                    }\n                  );\n                } else {\n                  debuglog(\"Data is not inerted to billing header\");\n                  next(\n                    httpStatus.generateError(\n                      httpStatus.badRequest,\n                      \"Technical issue while billis notinserted\"\n                    )\n                  );\n                }\n              }\n            );\n          });\n        }\n      }\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by:irfan, add receipt headder and details\n//AddReceipt\nlet newReceipt = (dataBase, req, res, callBack, next) => {\n  let P_receiptHeaderModel = {\n    hims_f_receipt_header_id: null,\n    receipt_number: null,\n    receipt_date: null,\n    billing_header_id: null,\n    total_amount: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n    created_date: null,\n    updated_by: req.userIdentity.algaeh_d_app_user_id,\n    updated_date: null,\n    record_status: null,\n    counter_id: null,\n    shift_id: null\n  };\n  let db = req.db;\n  try {\n    debugFunction(\"newReceiptFUnc\");\n\n    if (dataBase == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n\n    let inputParam = extend(P_receiptHeaderModel, req.body);\n    if (\n      inputParam.receiptdetails == null ||\n      inputParam.receiptdetails.length == 0\n    ) {\n      next(\n        httpStatus.generateError(\n          httpStatus.badRequest,\n          \"Please select atleast one service.\"\n        )\n      );\n    }\n\n    runningNumber(req.db, 5, \"PAT_RCPT\", (error, numgenId, newNumber) => {\n      if (error) {\n        dataBase.rollback(() => {\n          releaseDBConnection(db, dataBase);\n          next(error);\n        });\n      }\n      debugLog(\"new receipt number : \" + newNumber);\n      inputParam[\"receipt_number\"] = newNumber;\n      req.body.receipt_number = newNumber;\n      debugLog(\"bil hdr id:\", inputParam.billing_header_id);\n\n      dataBase.query(\n        \"INSERT INTO hims_f_receipt_header (receipt_number, receipt_date, total_amount,\\\n             created_by, created_date, updated_by, updated_date,  counter_id, shift_id) VALUES (?,?,?\\\n          ,?,?,?,?,?,?)\",\n        [\n          inputParam.receipt_number,\n          new Date(),\n\n          inputParam.total_amount,\n          inputParam.created_by,\n          new Date(),\n          inputParam.updated_by,\n          new Date(),\n          inputParam.counter_id,\n          inputParam.shift_id\n        ],\n        (error, headerRcptResult) => {\n          if (error) {\n            dataBase.rollback(() => {\n              releaseDBConnection(db, dataBase);\n              next(error);\n            });\n          }\n          if (\n            headerRcptResult.insertId != null &&\n            headerRcptResult.insertId != \"\"\n          ) {\n            // let detailsInsert = [];\n\n            // bulkInputArrayObject(\n            //   inputParam.receiptdetails,\n            //   detailsInsert,\n            //   {\n            //     hims_f_receipt_header_id: headerRcptResult.insertId\n            //   },\n            //   req\n            // );\n            const receptSample = [\n              \"card_check_number\",\n              \"expiry_date\",\n              \"pay_type\",\n              \"amount\",\n              \"created_by\",\n              \"updated_by\",\n              \"card_type\"\n            ];\n\n            dataBase.query(\n              \"INSERT  INTO hims_f_receipt_details ( \" +\n                receptSample.join(\",\") +\n                \",hims_f_receipt_header_id) VALUES ? \",\n              [\n                jsonArrayToObject({\n                  sampleInputObject: receptSample,\n                  arrayObj: inputParam.receiptdetails,\n                  req: req,\n                  newFieldToInsert: [headerRcptResult.insertId]\n                })\n              ],\n              (error, RcptDetailsRecords) => {\n                if (error) {\n                  dataBase.rollback(() => {\n                    releaseDBConnection(db, dataBase);\n                    next(error);\n                  });\n                }\n                if (typeof callBack == \"function\") {\n                  callBack(error, headerRcptResult);\n                }\n              }\n            );\n          } else {\n            debuglog(\"Data is not inerted to billing header\");\n            next(\n              httpStatus.generateError(\n                httpStatus.badRequest,\n                \"Technical issue while billis notinserted\"\n              )\n            );\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: performing only calculation\nlet billingCalculations = (req, res, next) => {\n  try {\n    let hasCalculateall =\n      req.body.intCalculateall == undefined ? true : req.body.intCalculateall;\n    let inputParam =\n      req.body.intCalculateall == undefined ? req.body.billdetails : req.body;\n    if (inputParam.length == 0) {\n      next(\n        httpStatus.generateError(\n          httpStatus.badRequest,\n          \"Please select atleast one service\"\n        )\n      );\n    }\n    let sendingObject = {};\n\n    debugLog(\"bool Value: \", hasCalculateall);\n    debugLog(\"Input\", req.body);\n    if (hasCalculateall == true) {\n      sendingObject.sub_total_amount = new LINQ(inputParam).Sum(\n        d => d.gross_amount\n      );\n      sendingObject.net_total = new LINQ(inputParam).Sum(d => d.net_amout);\n      sendingObject.discount_amount = new LINQ(inputParam).Sum(\n        d => d.discount_amout\n      );\n      sendingObject.gross_total = new LINQ(inputParam).Sum(\n        d => d.patient_payable\n      );\n\n      // Primary Insurance\n      sendingObject.copay_amount = new LINQ(inputParam).Sum(\n        d => d.copay_amount\n      );\n      sendingObject.deductable_amount = new LINQ(inputParam).Sum(\n        d => d.deductable_amount\n      );\n\n      // Secondary Insurance\n      sendingObject.sec_copay_amount = new LINQ(inputParam).Sum(\n        d => d.sec_copay_amount\n      );\n      sendingObject.sec_deductable_amount = new LINQ(inputParam).Sum(\n        d => d.sec_deductable_amount\n      );\n\n      // Responsibilities\n      sendingObject.patient_res = new LINQ(inputParam).Sum(d => d.patient_resp);\n      sendingObject.company_res = new LINQ(inputParam).Sum(\n        d => d.comapany_resp\n      );\n      sendingObject.sec_company_res = new LINQ(inputParam).Sum(\n        d => d.sec_company_res\n      );\n\n      // Tax Calculation\n      sendingObject.total_tax = new LINQ(inputParam).Sum(d => d.total_tax);\n      sendingObject.patient_tax = new LINQ(inputParam).Sum(d => d.patient_tax);\n      sendingObject.company_tax = new LINQ(inputParam).Sum(d => d.company_tax);\n      sendingObject.sec_company_tax = new LINQ(inputParam).Sum(\n        d => d.sec_company_tax\n      );\n\n      // Payables\n      sendingObject.patient_payable = new LINQ(inputParam).Sum(\n        d => d.patient_payable\n      );\n\n      sendingObject.company_payble = new LINQ(inputParam).Sum(\n        d => d.company_payble\n      );\n      sendingObject.sec_company_paybale = new LINQ(inputParam).Sum(\n        d => d.sec_company_paybale\n      );\n      // Sheet Level Discount Nullify\n      sendingObject.sheet_discount_amount = 0;\n      sendingObject.sheet_discount_percentage = 0;\n      sendingObject.advance_adjust = 0;\n      sendingObject.net_amount = sendingObject.patient_payable;\n      if (inputParam.credit_amount > 0) {\n        sendingObject.receiveable_amount =\n          sendingObject.net_amount - inputParam.credit_amount;\n      } else {\n        sendingObject.receiveable_amount = sendingObject.net_amount;\n      }\n\n      //Reciept\n      sendingObject.cash_amount = sendingObject.receiveable_amount;\n      sendingObject.total_amount = sendingObject.receiveable_amount;\n\n      sendingObject.unbalanced_amount = 0;\n      sendingObject.card_amount = 0;\n      sendingObject.cheque_amount = 0;\n\n      sendingObject.patient_payable = math.round(\n        sendingObject.patient_payable,\n        2\n      );\n      sendingObject.total_tax = math.round(sendingObject.total_tax, 2);\n      sendingObject.patient_tax = math.round(sendingObject.patient_tax, 2);\n      sendingObject.company_tax = math.round(sendingObject.company_tax, 2);\n      sendingObject.sec_company_tax = math.round(\n        sendingObject.sec_company_tax,\n        2\n      );\n    } else {\n      //Reciept\n\n      if (inputParam.isReceipt == false) {\n        // Sheet Level Discount Nullify\n        sendingObject.sheet_discount_percentage = 0;\n        sendingObject.sheet_discount_amount = 0;\n\n        if (inputParam.sheet_discount_amount > 0) {\n          sendingObject.sheet_discount_percentage =\n            (inputParam.sheet_discount_amount / inputParam.gross_total) * 100;\n\n          sendingObject.sheet_discount_amount =\n            inputParam.sheet_discount_amount;\n        } else if (inputParam.sheet_discount_percentage > 0) {\n          sendingObject.sheet_discount_percentage =\n            inputParam.sheet_discount_percentage;\n          sendingObject.sheet_discount_amount =\n            (inputParam.gross_total * inputParam.sheet_discount_percentage) /\n            100;\n        }\n\n        sendingObject.sheet_discount_amount = math.round(\n          sendingObject.sheet_discount_amount,\n          2\n        );\n        sendingObject.sheet_discount_percentage = math.round(\n          sendingObject.sheet_discount_percentage,\n          2\n        );\n\n        sendingObject.net_amount =\n          inputParam.gross_total - sendingObject.sheet_discount_amount;\n\n        if (inputParam.credit_amount > 0) {\n          sendingObject.receiveable_amount =\n            sendingObject.net_amount -\n            inputParam.advance_adjust -\n            inputParam.credit_amount;\n        } else {\n          sendingObject.receiveable_amount =\n            sendingObject.net_amount - inputParam.advance_adjust;\n        }\n\n        sendingObject.cash_amount = sendingObject.receiveable_amount;\n        sendingObject.card_amount = 0;\n        sendingObject.cheque_amount = 0;\n      } else {\n        sendingObject.card_amount = inputParam.card_amount;\n        sendingObject.cheque_amount = inputParam.cheque_amount;\n        sendingObject.cash_amount = inputParam.cash_amount;\n        sendingObject.receiveable_amount = inputParam.receiveable_amount;\n      }\n\n      sendingObject.total_amount =\n        sendingObject.cash_amount +\n        sendingObject.card_amount +\n        sendingObject.cheque_amount;\n\n      sendingObject.unbalanced_amount =\n        sendingObject.receiveable_amount - sendingObject.total_amount;\n    }\n\n    // debugLog(\"patient_payable\", sendingObject.patient_payable);\n    req.records = sendingObject;\n    next();\n  } catch (e) {\n    next(e);\n  }\n};\n//logic part for getBill details API\nlet getBillDetailsFunctionality = (req, res, next, resolve) => {\n  let billingDetailsModel = {\n    hims_f_billing_details_id: null,\n    hims_f_billing_header_id: null,\n    service_type_id: null,\n    services_id: null,\n    quantity: 0,\n    unit_cost: 0,\n    insurance_yesno: null,\n    gross_amount: 0,\n    discount_amout: 0,\n    discount_percentage: 0,\n    net_amout: 0,\n    copay_percentage: 0,\n    copay_amount: 0,\n    deductable_amount: 0,\n    deductable_percentage: 0,\n    tax_inclusive: \"N\",\n    patient_tax: 0,\n    company_tax: 0,\n    total_tax: 0,\n    patient_resp: 0,\n    patient_payable: 0,\n    comapany_resp: 0,\n    company_payble: 0,\n    // sec_company: 0,\n    sec_deductable_percentage: 0,\n    sec_deductable_amount: 0,\n    sec_company_res: 0,\n    sec_company_tax: 0,\n    sec_company_paybale: 0,\n    sec_copay_percntage: 0,\n    sec_copay_amount: 0,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n    created_date: null,\n    updated_by: req.userIdentity.algaeh_d_app_user_id,\n    updated_date: null\n  };\n  let servicesModel = {\n    hims_d_services_id: null,\n    service_code: null,\n    cpt_code: null,\n    service_name: null,\n    service_desc: null,\n    sub_department_id: null,\n    hospital_id: null,\n    service_type_id: null,\n    standard_fee: null,\n    discount: null,\n    effective_start_date: null,\n    effectice_end_date: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n    created_date: null,\n    updated_by: req.userIdentity.algaeh_d_app_user_id,\n    updated_date: null,\n    record_status: null\n  };\n\n  debugFunction(\"getBillDetailsFunctionality\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    debugLog(\"req.body\");\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      debugLog(\"erroe\");\n      // debugLog(\"Service ID:\",  servicesDetails.hims_d_services_id);\n      let service_ids = null;\n      let questions = \"?\";\n      debugLog(\"req.body\", req.body);\n      if (Array.isArray(req.body)) {\n        let len = req.body.length;\n        service_ids = new LINQ(req.body).Select(g => g.hims_d_services_id);\n\n        for (let i = 1; i < len; i++) {\n          questions += \",?\";\n        }\n      }\n\n      connection.query(\n        \"SELECT * FROM `hims_d_services` WHERE `hims_d_services_id` IN (\" +\n          questions +\n          \") AND record_status='A'\",\n        service_ids.items,\n        (error, result) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n          let outputArray = [];\n          for (let m = 0; m < result.length; m++) {\n            let servicesDetails = extend(\n              {\n                hims_d_services_id: null,\n                service_code: null,\n                cpt_code: null,\n                service_name: null,\n                service_desc: null,\n                sub_department_id: null,\n                hospital_id: null,\n                service_type_id: null,\n                standard_fee: null,\n                discount: null,\n                effective_start_date: null,\n                effectice_end_date: null,\n                created_by: req.userIdentity.algaeh_d_app_user_id,\n                created_date: null,\n                updated_by: req.userIdentity.algaeh_d_app_user_id,\n                updated_date: null,\n                record_status: null\n              },\n              req.body[m]\n            );\n\n            let records = result[m];\n            req.body[m].service_type_id = result[m].service_type_id;\n            req.body[m].services_id = servicesDetails.hims_d_services_id;\n\n            //Calculation Declarations\n            let unit_cost =\n              servicesDetails.unit_cost == undefined\n                ? 0\n                : servicesDetails.unit_cost;\n\n            let zeroBill =\n              servicesDetails.zeroBill == undefined\n                ? false\n                : servicesDetails.zeroBill;\n\n            let FollowUp =\n              servicesDetails.FollowUp == undefined\n                ? false\n                : servicesDetails.FollowUp;\n            let gross_amount = 0,\n              net_amout = 0,\n              sec_unit_cost = 0;\n\n            let patient_resp = 0,\n              patient_payable = 0;\n\n            let copay_percentage = 0,\n              copay_amount = 0,\n              sec_copay_percntage = 0,\n              sec_copay_amount = 0;\n\n            let comapany_resp = 0,\n              company_payble = 0,\n              sec_company_res = 0,\n              sec_company_paybale = 0;\n\n            let patient_tax = 0,\n              company_tax = 0,\n              sec_company_tax = 0,\n              total_tax = 0;\n\n            let after_dect_amout = 0,\n              deductable_percentage = 0,\n              deductable_amount = 0;\n\n            let sec_deductable_percentage = 0,\n              sec_deductable_amount = 0;\n            let conversion_factor =\n              servicesDetails.conversion_factor == undefined\n                ? 0\n                : servicesDetails.conversion_factor;\n            let quantity =\n              servicesDetails.quantity == undefined\n                ? 1\n                : servicesDetails.quantity;\n\n            let discount_amout =\n              servicesDetails.discount_amout == undefined\n                ? 0\n                : servicesDetails.discount_amout;\n\n            let discount_percentage =\n              servicesDetails.discount_percentage == undefined\n                ? 0\n                : servicesDetails.discount_percentage;\n\n            let insured =\n              servicesDetails.insured == undefined\n                ? \"N\"\n                : servicesDetails.insured;\n\n            let sec_insured =\n              servicesDetails.sec_insured == undefined\n                ? \"N\"\n                : servicesDetails.sec_insured;\n\n            let approval_amt =\n              servicesDetails.approval_amt == undefined\n                ? 0\n                : servicesDetails.approval_amt;\n            let approval_limit_yesno =\n              servicesDetails.approval_limit_yesno == undefined\n                ? \"N\"\n                : servicesDetails.approval_limit_yesno;\n\n            let apprv_status =\n              servicesDetails.apprv_status == undefined\n                ? \"NR\"\n                : servicesDetails.apprv_status;\n\n            let approved_amount =\n              servicesDetails.approved_amount == undefined\n                ? 0\n                : servicesDetails.approved_amount;\n            debugLog(\"Pre app\", servicesDetails.pre_approval);\n            let pre_approval =\n              servicesDetails.pre_approval == undefined\n                ? \"N\"\n                : servicesDetails.pre_approval;\n\n            let vat_applicable = servicesDetails.vat_applicable;\n            let preapp_limit_exceed = \"N\";\n            let ser_net_amount = 0;\n            let ser_gross_amt = 0;\n            let icd_code = \"\";\n            let covered = \"Y\";\n            let preapp_limit_amount =\n              servicesDetails.preapp_limit_amount == undefined\n                ? 0\n                : servicesDetails.preapp_limit_amount;\n            debugLog(\"zeroBill: \", zeroBill);\n            if (zeroBill === true) {\n              let out = {\n                hims_f_billing_details_id: null,\n                hims_f_billing_header_id: null,\n                service_type_id: records.service_type_id,\n                service_name: records.service_name,\n                services_id: servicesDetails.hims_d_services_id,\n                quantity: 1,\n                unit_cost: 0,\n                insurance_yesno: null,\n                gross_amount: 0,\n                discount_amout: 0,\n                discount_percentage: 0,\n                net_amout: 0,\n                copay_percentage: 0,\n                copay_amount: 0,\n                deductable_amount: 0,\n                deductable_percentage: 0,\n                tax_inclusive: \"N\",\n                patient_tax: 0,\n                company_tax: 0,\n                total_tax: 0,\n                patient_resp: 0,\n                patient_payable: 0,\n                comapany_resp: 0,\n                company_payble: 0,\n\n                sec_deductable_percentage: 0,\n                sec_deductable_amount: 0,\n                sec_company_res: 0,\n                sec_company_tax: 0,\n                sec_company_paybale: 0,\n                sec_copay_percntage: 0,\n                sec_copay_amount: 0\n              };\n              outputArray.push(out);\n              req.records = { billdetails: outputArray };\n              next();\n              return;\n            }\n\n            debugLog(\"After zeroBill: \", zeroBill);\n            new Promise((resolve, reject) => {\n              try {\n                if (insured == \"Y\") {\n                  // let callInsurance =\n                  debugLog(\"Data: \", req.body[m]);\n                  req.body[m].insurance_id =\n                    req.body[m].primary_insurance_provider_id;\n                  req.body[m].hims_d_insurance_network_office_id =\n                    req.body[m].primary_network_office_id;\n                  req.body[m].network_id = req.body[m].primary_network_id;\n\n                  insuranceServiceDetails(\n                    req.body[m],\n                    req.db,\n                    next,\n                    connection,\n                    resolve\n                  );\n                  //if (callInsurance != null) resolve(callInsurance);\n                } else if (sec_insured == \"Y\") {\n                  req.body[m].insurance_id =\n                    req.body[m].secondary_insurance_provider_id;\n                  req.body[m].hims_d_insurance_network_office_id =\n                    req.body[m].secondary_network_office_id;\n                  req.body[m].network_id = req.body[m].secondary_network_id;\n\n                  insuranceServiceDetails(\n                    req.body[m],\n                    req.db,\n                    next,\n                    connection,\n                    resolve\n                  );\n                } else {\n                  resolve({});\n                }\n              } catch (e) {\n                reject(e);\n              }\n            })\n              .then(policydtls => {\n                if (\n                  covered == \"N\" ||\n                  (pre_approval == \"Y\" && apprv_status == \"RJ\")\n                ) {\n                  insured = \"N\";\n                }\n\n                if (approval_limit_yesno == \"Y\") {\n                  pre_approval = \"Y\";\n                }\n\n                if (pre_approval == \"N\") {\n                  pre_approval =\n                    policydtls !== null ? policydtls.pre_approval : \"N\";\n                }\n\n                covered = policydtls !== null ? policydtls.covered : \"Y\";\n\n                icd_code =\n                  policydtls.cpt_code !== null\n                    ? policydtls.cpt_code\n                    : records.cpt_code;\n\n                if (insured == \"Y\" && policydtls.covered == \"Y\") {\n                  ser_net_amount = policydtls.net_amount;\n                  ser_gross_amt = policydtls.gross_amt;\n\n                  if (policydtls.company_service_price_type == \"N\") {\n                    unit_cost =\n                      unit_cost != 0 ? unit_cost : policydtls.net_amount;\n                  } else {\n                    unit_cost =\n                      unit_cost != 0 ? unit_cost : policydtls.gross_amt;\n                  }\n\n                  if (conversion_factor != 0) {\n                    unit_cost = unit_cost * conversion_factor;\n                  }\n                  gross_amount = quantity * unit_cost;\n\n                  if (discount_amout > 0) {\n                    discount_percentage = (discount_amout / gross_amount) * 100;\n                  } else if (discount_percentage > 0) {\n                    discount_amout = (gross_amount * discount_percentage) / 100;\n                    discount_amout = math.round(discount_amout, 2);\n                  }\n                  net_amout = gross_amount - discount_amout;\n\n                  //Patient And Company\n                  if (policydtls.copay_status == \"Y\") {\n                    copay_amount = policydtls.copay_amt;\n                    copay_percentage = (copay_amount / net_amout) * 100;\n                  } else {\n                    debugLog(\"policydtls: \", policydtls);\n\n                    if (\n                      appsettings.hims_d_service_type.service_type_id\n                        .Consultation == records.service_type_id\n                    ) {\n                      copay_percentage = policydtls.copay_consultation;\n                      deductable_percentage = policydtls.deductible;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id\n                        .Procedure == records.service_type_id\n                    ) {\n                      copay_percentage = policydtls.copay_percent_trt;\n                      deductable_percentage = policydtls.deductible_trt;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id\n                        .Provider == records.service_type_id\n                    ) {\n                      copay_percentage = policydtls.copay_percent;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id\n                        .InventoryItem == records.service_type_id\n                    ) {\n                      //Not there\n                      copay_percentage = policydtls.copay_percent;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id.Lab ==\n                      records.service_type_id\n                    ) {\n                      copay_percentage = policydtls.copay_percent;\n                      deductable_percentage = policydtls.deductible_lab;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id\n                        .NursingCare == records.service_type_id\n                    ) {\n                      //Not There\n                      copay_percentage = policydtls.copay_percent;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id\n                        .Miscellaneous == records.service_type_id\n                    ) {\n                      //Not There\n                      copay_percentage = policydtls.copay_percent;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id\n                        .Anesthesia == records.service_type_id\n                    ) {\n                      //Not There\n                      copay_percentage = policydtls.copay_percent;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id.Bed ==\n                      records.service_type_id\n                    ) {\n                      //Not There\n                      copay_percentage = policydtls.copay_percent;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id.OT ==\n                      records.service_type_id\n                    ) {\n                      //Not There\n                      copay_percentage = policydtls.copay_percent;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id\n                        .Radiology == records.service_type_id\n                    ) {\n                      copay_percentage = policydtls.copay_percent_rad;\n                      deductable_percentage = policydtls.deductible_rad;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id\n                        .Pharmacy == records.service_type_id\n                    ) {\n                      copay_percentage = policydtls.copay_medicine;\n                      deductable_percentage = policydtls.deductible_medicine;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id\n                        .NonService == records.service_type_id\n                    ) {\n                      //Not There\n                      copay_percentage = policydtls.copay_percent;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id.Package ==\n                      records.service_type_id\n                    ) {\n                      //Not There\n                      copay_percentage = policydtls.copay_percent;\n                    }\n\n                    deductable_amount =\n                      (net_amout * deductable_percentage) / 100;\n                    after_dect_amout = net_amout - deductable_amount;\n                    copay_amount = (after_dect_amout * copay_percentage) / 100;\n                    copay_amount = math.round(copay_amount, 2);\n                  }\n\n                  debugLog(\"net_amout: \", net_amout);\n                  debugLog(\"copay_amount: \", copay_amount);\n                  patient_resp = copay_amount + deductable_amount;\n                  comapany_resp = math.round(net_amout - patient_resp, 2);\n\n                  debugLog(\"patient_resp: \", patient_resp);\n\n                  if (vat_applicable == \"Y\" && records.vat_applicable == \"Y\") {\n                    patient_tax = math.round(\n                      (patient_resp * records.vat_percent) / 100,\n                      2\n                    );\n                  }\n\n                  if (records.vat_applicable == \"Y\") {\n                    company_tax = math.round(\n                      (comapany_resp * records.vat_percent) / 100,\n                      2\n                    );\n                  }\n                  total_tax = math.round(patient_tax + company_tax, 2);\n\n                  patient_payable = math.round(patient_resp + patient_tax, 2);\n\n                  if (\n                    approved_amount !== 0 &&\n                    approved_amount < comapany_resp\n                  ) {\n                    let diff_val = comapany_resp - approved_amount;\n                    patient_payable = math.round(patient_payable + diff_val, 2);\n                    patient_resp = math.round(patient_resp + diff_val, 2);\n                    comapany_resp = approved_amount;\n                  }\n\n                  debugLog(\"comapany_resp 2: \", comapany_resp);\n\n                  company_payble = net_amout - patient_resp;\n\n                  company_payble = math.round(company_payble + company_tax, 2);\n\n                  preapp_limit_amount = policydtls.preapp_limit;\n                  if (policydtls.preapp_limit !== 0) {\n                    approval_amt = approval_amt + company_payble;\n                    if (approval_amt > policydtls.preapp_limit) {\n                      preapp_limit_exceed = \"Y\";\n                    }\n                  }\n\n                  //If primary and secondary exists\n                  if (sec_insured == \"Y\") {\n                    req.body[m].insurance_id =\n                      req.body[m].secondary_insurance_provider_id;\n                    req.body[m].hims_d_insurance_network_office_id =\n                      req.body[m].secondary_network_office_id;\n                    req.body[m].network_id = req.body[m].secondary_network_id;\n                    //Secondary Insurance\n                    return new Promise((resolve, reject) => {\n                      try {\n                        // let callInsurance =\n                        insuranceServiceDetails(\n                          req.body[m],\n                          req.db,\n                          next,\n                          connection,\n                          resolve\n                        );\n                        //if (callInsurance != null) resolve(callInsurance);\n                      } catch (e) {\n                        reject(e);\n                      }\n                    });\n                  }\n                } else {\n                  if (FollowUp === true) {\n                    unit_cost =\n                      unit_cost != 0 ? unit_cost : records.followup_free_fee;\n                  } else {\n                    unit_cost =\n                      unit_cost != 0 ? unit_cost : records.standard_fee;\n                  }\n\n                  if (conversion_factor != 0) {\n                    unit_cost = unit_cost * conversion_factor;\n                  }\n                  gross_amount = quantity * unit_cost;\n\n                  if (discount_amout > 0) {\n                    discount_percentage = (discount_amout / gross_amount) * 100;\n                  } else if (discount_percentage > 0) {\n                    discount_amout = (gross_amount * discount_percentage) / 100;\n                    discount_amout = math.round(discount_amout, 2);\n                  }\n                  net_amout = gross_amount - discount_amout;\n                  patient_resp = net_amout;\n\n                  if (vat_applicable == \"Y\" && records.vat_applicable == \"Y\") {\n                    patient_tax = math.round(\n                      (patient_resp * records.vat_percent) / 100,\n                      2\n                    );\n                    total_tax = patient_tax;\n                  }\n\n                  // patient_payable = net_amout + patient_tax;\n                  patient_payable = math.round(patient_resp + patient_tax, 2);\n                }\n              })\n\n              .then(secpolicydtls => {\n                if (secpolicydtls != null) {\n                  debugFunction(\"secpolicydtls\");\n                  //secondary Insurance\n                  sec_unit_cost = patient_resp;\n\n                  //Patient And Company\n                  if (secpolicydtls.copay_status == \"Y\") {\n                    debugFunction(\"secpolicydtls Y\");\n                    sec_copay_amount = secpolicydtls.copay_amt;\n                    sec_copay_percntage =\n                      (sec_copay_amount / sec_unit_cost) * 100;\n                  } else {\n                    debugFunction(\"secpolicydtls N\");\n                    if (\n                      appsettings.hims_d_service_type.service_type_id\n                        .Consultation == records.service_type_id\n                    ) {\n                      sec_copay_percntage = secpolicydtls.copay_consultation;\n                      sec_deductable_percentage = secpolicydtls.deductible;\n                      debugLog(\"sec_copay_percntage\", sec_copay_percntage);\n                      debugLog(\n                        \"sec_deductable_percentage\",\n                        sec_deductable_percentage\n                      );\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id\n                        .Procedure == records.service_type_id\n                    ) {\n                      sec_copay_percntage = secpolicydtls.copay_percent_trt;\n                      sec_deductable_percentage = secpolicydtls.deductible_trt;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id\n                        .Provider == records.service_type_id\n                    ) {\n                      sec_copay_percntage = secpolicydtls.copay_percent;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id\n                        .InventoryItem == records.service_type_id\n                    ) {\n                      //Not there\n                      sec_copay_percntage = secpolicydtls.copay_percent;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id.Lab ==\n                      records.service_type_id\n                    ) {\n                      sec_copay_percntage = secpolicydtls.copay_percent;\n                      sec_deductable_percentage = secpolicydtls.deductible_lab;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id\n                        .NursingCare == records.service_type_id\n                    ) {\n                      //Not There\n                      sec_copay_percntage = secpolicydtls.copay_percent;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id\n                        .Miscellaneous == records.service_type_id\n                    ) {\n                      //Not There\n                      sec_copay_percntage = secpolicydtls.copay_percent;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id\n                        .Anesthesia == records.service_type_id\n                    ) {\n                      //Not There\n                      sec_copay_percntage = secpolicydtls.copay_percent;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id.Bed ==\n                      records.service_type_id\n                    ) {\n                      //Not There\n                      sec_copay_percntage = secpolicydtls.copay_percent;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id.OT ==\n                      records.service_type_id\n                    ) {\n                      //Not There\n                      sec_copay_percntage = secpolicydtls.copay_percent;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id\n                        .Radiology == records.service_type_id\n                    ) {\n                      sec_copay_percntage = secpolicydtls.copay_percent_rad;\n                      sec_deductable_percentage = secpolicydtls.deductible_rad;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id\n                        .Pharmacy == records.service_type_id\n                    ) {\n                      sec_copay_percntage = secpolicydtls.copay_medicine;\n                      sec_deductable_percentage =\n                        secpolicydtls.deductible_medicine;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id\n                        .NonService == records.service_type_id\n                    ) {\n                      //Not There\n                      sec_copay_percntage = secpolicydtls.copay_percent;\n                    } else if (\n                      appsettings.hims_d_service_type.service_type_id.Package ==\n                      records.service_type_id\n                    ) {\n                      //Not There\n                      sec_copay_percntage = secpolicydtls.copay_percent;\n                    }\n\n                    sec_deductable_amount =\n                      (sec_unit_cost * sec_deductable_percentage) / 100;\n                    after_dect_amout = sec_unit_cost - deductable_amount;\n\n                    sec_copay_amount =\n                      (after_dect_amout * sec_copay_percntage) / 100;\n\n                    sec_copay_amount = math.round(sec_copay_amount, 2);\n                  }\n\n                  patient_resp = sec_copay_amount + sec_deductable_amount;\n                  sec_company_res = sec_unit_cost - patient_resp;\n\n                  if (vat_applicable == \"Y\" && records.vat_applicable == \"Y\") {\n                    patient_tax = math.round(\n                      (patient_resp * records.vat_percent) / 100,\n                      2\n                    );\n                  }\n\n                  if (records.vat_applicable == \"Y\") {\n                    sec_company_tax = math.round(\n                      (sec_company_res * records.vat_percent) / 100,\n                      2\n                    );\n                  }\n                  total_tax = patient_tax + company_tax + sec_company_res;\n\n                  patient_payable = math.round(patient_resp + patient_tax, 2);\n                  sec_company_paybale =\n                    sec_unit_cost - patient_resp + sec_company_tax;\n                }\n                let out = extend(\n                  {\n                    hims_f_billing_details_id: null,\n                    hims_f_billing_header_id: null,\n                    service_type_id: null,\n                    services_id: null,\n                    quantity: 0,\n                    unit_cost: 0,\n                    insurance_yesno: null,\n                    gross_amount: 0,\n                    discount_amout: 0,\n                    discount_percentage: 0,\n                    net_amout: 0,\n                    copay_percentage: 0,\n                    copay_amount: 0,\n                    deductable_amount: 0,\n                    deductable_percentage: 0,\n                    tax_inclusive: \"N\",\n                    patient_tax: 0,\n                    company_tax: 0,\n                    total_tax: 0,\n                    patient_resp: 0,\n                    patient_payable: 0,\n                    comapany_resp: 0,\n                    company_payble: 0,\n                    // sec_company: 0,\n                    sec_deductable_percentage: 0,\n                    sec_deductable_amount: 0,\n                    sec_company_res: 0,\n                    sec_company_tax: 0,\n                    sec_company_paybale: 0,\n                    sec_copay_percntage: 0,\n                    sec_copay_amount: 0\n                    // created_by: req.userIdentity.algaeh_d_app_user_id,\n\n                    // updated_by: req.userIdentity.algaeh_d_app_user_id\n                  },\n                  {\n                    service_type_id: records.service_type_id,\n                    service_name: records.service_name,\n                    services_id: servicesDetails.hims_d_services_id,\n                    quantity: quantity,\n                    unit_cost: unit_cost,\n                    gross_amount: gross_amount,\n                    discount_amout: discount_amout,\n                    discount_percentage: discount_percentage,\n                    net_amout: net_amout,\n                    patient_resp: patient_resp,\n                    patient_payable: patient_payable,\n                    copay_percentage: copay_percentage,\n                    copay_amount: copay_amount,\n\n                    comapany_resp: comapany_resp,\n                    company_payble: company_payble,\n                    patient_tax: patient_tax,\n                    company_tax: company_tax,\n                    sec_company_tax: sec_company_tax,\n                    total_tax: total_tax,\n\n                    sec_copay_percntage: sec_copay_percntage,\n                    sec_copay_amount: sec_copay_amount,\n                    sec_company_res: sec_company_res,\n                    sec_company_paybale: sec_company_paybale,\n                    pre_approval: pre_approval,\n                    insurance_yesno: insured,\n                    preapp_limit_exceed: preapp_limit_exceed,\n                    approval_amt: approval_amt,\n                    preapp_limit_amount: preapp_limit_amount,\n                    approval_limit_yesno: approval_limit_yesno,\n                    ser_net_amount: ser_net_amount,\n                    ser_gross_amt: ser_gross_amt,\n                    icd_code: icd_code,\n\n                    sec_deductable_percentage: sec_deductable_percentage,\n                    sec_deductable_amount: sec_deductable_amount,\n                    deductable_percentage: deductable_percentage,\n                    deductable_amount: deductable_amount,\n                    item_id: servicesDetails.item_id,\n                    expiry_date: servicesDetails.expirydt,\n                    batchno: servicesDetails.batchno,\n                    qtyhand: servicesDetails.qtyhand,\n                    grnno: servicesDetails.grnno,\n                    uom_id: servicesDetails.sales_uom,\n                    item_category: servicesDetails.item_category_id,\n                    item_group_id: servicesDetails.item_group_id\n                  }\n                );\n\n                outputArray.push(out);\n              })\n              .then(() => {\n                if (m == result.length - 1) {\n                  debugLog(\"outputArray\", outputArray);\n                  return resolve({ billdetails: outputArray });\n                }\n              })\n              .catch(e => {\n                next(httpStatus.generateError(httpStatus.badRequest, e));\n              });\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by:irfan, Patient-receipt if advance or  Refund to patient\nlet patientAdvanceRefund = (req, res, next) => {\n  let P_receiptHeaderModel = {\n    hims_f_receipt_header_id: null,\n    receipt_number: null,\n    receipt_date: null,\n    billing_header_id: null,\n    total_amount: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id,\n\n    record_status: null,\n    counter_id: null,\n    shift_id: null,\n    pay_type: null\n  };\n\n  let advanceModel = {\n    hims_f_patient_id: null,\n    hims_f_receipt_header_id: null,\n    transaction_type: null,\n    advance_amount: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n\n  debugFunction(\"patientAdvanceRefund\");\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n\n        let inputParam = extend(P_receiptHeaderModel, req.body);\n        if (\n          inputParam.receiptdetails == null ||\n          inputParam.receiptdetails.length == 0\n        ) {\n          next(\n            httpStatus.generateError(\n              httpStatus.badRequest,\n              \"Please select atleast one service.\"\n            )\n          );\n        }\n        let RCPT_or_PYMNT_NUM = null;\n        // fuction for advance recieved from patient\n        if (inputParam.pay_type == \"R\") {\n          runningNumber(req.db, 5, \"PAT_RCPT\", (error, numgenId, newNumber) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            req.query.receipt_number = newNumber;\n            req.body.receipt_number = newNumber;\n            inputParam.receipt_number = newNumber;\n            debugLog(\"new R for recpt number:\", newNumber);\n            // receipt header table insert\n            connection.query(\n              \"INSERT INTO hims_f_receipt_header (receipt_number, receipt_date, billing_header_id, total_amount,\\\n         created_by, created_date, updated_by, updated_date,  counter_id, shift_id, pay_type) VALUES (?,?,?\\\n      ,?,?,?,?,?,?,?,?)\",\n              [\n                inputParam.receipt_number,\n                new Date(),\n                inputParam.billing_header_id,\n                inputParam.total_amount,\n                inputParam.created_by,\n                new Date(),\n                inputParam.updated_by,\n                new Date(),\n                inputParam.counter_id,\n                inputParam.shift_id,\n                inputParam.pay_type\n              ],\n              (error, headerRcptResult) => {\n                if (error) {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                }\n\n                debugFunction(\"inside header result\");\n                if (\n                  headerRcptResult.insertId != null &&\n                  headerRcptResult.insertId != \"\"\n                ) {\n                  //   let detailsInsert = [];\n\n                  // bulkInputArrayObject(\n                  //   inputParam.receiptdetails,\n                  //   detailsInsert,\n                  //   {\n                  //     hims_f_receipt_header_id: headerRcptResult.insertId\n                  //   }\n                  // );\n                  // receipt details table insert\n                  const receptSample = [\n                    \"card_check_number\",\n                    \"expiry_date\",\n                    \"pay_type\",\n                    \"amount\",\n                    \"created_by\",\n                    \"updated_by\",\n                    \"card_type\"\n                  ];\n\n                  connection.query(\n                    \"INSERT  INTO hims_f_receipt_details ( \" +\n                      receptSample.join(\",\") +\n                      \",hims_f_receipt_header_id) VALUES ? \",\n                    [\n                      jsonArrayToObject({\n                        sampleInputObject: receptSample,\n                        arrayObj: inputParam.receiptdetails,\n                        req: req,\n                        newFieldToInsert: [headerRcptResult.insertId]\n                      })\n                    ],\n                    (error, RcptDetailsRecords) => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                      debugFunction(\"inside details result\");\n\n                      let inputParameters = extend(advanceModel, req.body);\n\n                      //  if (inputParameters.transaction_type)\n                      // patient advance table insert\n                      connection.query(\n                        \"INSERT  INTO hims_f_patient_advance ( hims_f_patient_id, hims_f_receipt_header_id,\\\n                        transaction_type, advance_amount, created_by, \\\n                   created_date, updated_by, update_date,  record_status) VALUES (?,?,?,?,?,?,?,?,?) \",\n                        [\n                          inputParameters.hims_f_patient_id,\n                          headerRcptResult.insertId,\n                          inputParameters.transaction_type,\n                          inputParameters.advance_amount,\n                          inputParameters.created_by,\n                          new Date(),\n                          inputParameters.updated_by,\n                          new Date(),\n                          inputParameters.record_status\n                        ],\n                        (error, AdvanceRecords) => {\n                          if (error) {\n                            connection.rollback(() => {\n                              releaseDBConnection(db, connection);\n                              next(error);\n                            });\n                          }\n                          debugFunction(\"inside patient advance result\");\n                          connection.query(\n                            \"SELECT advance_amount FROM hims_f_patient WHERE hims_d_patient_id=?\",\n                            [inputParameters.hims_f_patient_id],\n                            (error, result) => {\n                              if (error) {\n                                releaseDBConnection(db, connection);\n                                next(error);\n                              }\n                              let existingAdvance = result[0].advance_amount;\n                              if (result.length != 0) {\n                                //advance adding\n                                if (inputParameters.transaction_type == \"AD\") {\n                                  inputParameters.advance_amount += existingAdvance;\n                                  debugLog(\"existingAdvance:\", existingAdvance);\n\n                                  connection.query(\n                                    \"UPDATE  `hims_f_patient` SET  `advance_amount`=?, \\\n                           `updated_by`=?, `updated_date`=? WHERE `hims_d_patient_id`=?\",\n                                    [\n                                      inputParameters.advance_amount,\n                                      inputParameters.updated_by,\n                                      new Date(),\n                                      inputParameters.hims_f_patient_id\n                                    ],\n                                    (error, appendAdvance) => {\n                                      if (error) {\n                                        connection.rollback(() => {\n                                          releaseDBConnection(db, connection);\n                                          next(error);\n                                        });\n                                      }\n\n                                      //commit comes here\n\n                                      connection.commit(error => {\n                                        releaseDBConnection(db, connection);\n                                        if (error) {\n                                          connection.rollback(() => {\n                                            next(error);\n                                          });\n                                        }\n                                        req.records = {\n                                          receipt_number: newNumber,\n                                          total_advance_amount:\n                                            inputParameters.advance_amount\n                                        };\n                                        releaseDBConnection(db, connection);\n                                        next();\n                                      });\n                                    }\n                                  );\n                                }\n\n                                //refund  perform substraction\n                                //       if (inputParameters.transaction_type == \"RF\") {\n                                //         inputParameters.advance_amount =\n                                //           existingAdvance -\n                                //           inputParameters.advance_amount;\n                                //         connection.query(\n                                //           \"UPDATE  `hims_f_patient` SET  `advance_amount`=?, \\\n                                //  `updated_by`=?, `updated_date`=? WHERE `hims_d_patient_id`=?\",\n                                //           [\n                                //             inputParameters.advance_amount,\n                                //             inputParameters.updated_by,\n                                //             new Date(),\n                                //             inputParameters.hims_f_patient_id\n                                //           ],\n                                //           (error, subtractAdvance) => {\n                                //             if (error) {\n                                //               connection.rollback(() => {\n                                //                 releaseDBConnection(db, connection);\n                                //                 next(error);\n                                //               });\n                                //             }\n\n                                //             //commit comes here\n                                //             connection.commit(error => {\n                                //               releaseDBConnection(db, connection);\n                                //               if (error) {\n                                //                 connection.rollback(() => {\n                                //                   next(error);\n                                //                 });\n                                //               }\n                                //               req.records = {\n                                //                 recieptNo: newNumber\n                                //               };\n                                //               next();\n                                //             });\n                                //           }\n                                //         );\n                                //       }\n                                if (inputParameters.transaction_type == \"CA\") {\n                                  // cancel\n                                }\n                              }\n                            }\n                          );\n                        }\n                      );\n                    }\n                  );\n                } else {\n                  debugLog(\"Data is not inerted to billing header\");\n                  next(\n                    httpStatus.generateError(\n                      httpStatus.badRequest,\n                      \"Technical issue while billis notinserted\"\n                    )\n                  );\n                }\n              }\n            );\n          });\n        }\n\n        //function for payment to the patient\n        if (inputParam.pay_type == \"P\") {\n          runningNumber(req.db, 7, \"PYMNT_NO\", (error, numgenId, newNumber) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            debugLog(\"new PAYMENT no : \", newNumber);\n            inputParam.receipt_number = newNumber;\n            req.body.receipt_number = newNumber;\n\n            //R-->recieved amount   P-->payback amount\n\n            // receipt header table insert\n            connection.query(\n              \"INSERT INTO hims_f_receipt_header (receipt_number, receipt_date, billing_header_id, total_amount,\\\ncreated_by, created_date, updated_by, updated_date,  counter_id, shift_id, pay_type) VALUES (?,?,?\\\n,?,?,?,?,?,?,?,?)\",\n              [\n                inputParam.receipt_number,\n                new Date(),\n                inputParam.billing_header_id,\n                inputParam.total_amount,\n                inputParam.created_by,\n                new Date(),\n                inputParam.updated_by,\n                new Date(),\n                inputParam.counter_id,\n                inputParam.shift_id,\n                inputParam.pay_type\n              ],\n              (error, headerRcptResult) => {\n                if (error) {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                }\n\n                debugFunction(\"inside header result\");\n                if (\n                  headerRcptResult.insertId != null &&\n                  headerRcptResult.insertId != \"\"\n                ) {\n                  // let detailsInsert = [];\n\n                  // bulkInputArrayObject(\n                  //   inputParam.receiptdetails,\n                  //   detailsInsert,\n                  //   {\n                  //     hims_f_receipt_header_id: headerRcptResult.insertId\n                  //   }\n                  // );\n                  // receipt details table insert\n                  const receptSample = [\n                    \"card_check_number\",\n                    \"expiry_date\",\n                    \"pay_type\",\n                    \"amount\",\n                    \"created_by\",\n                    \"updated_by\",\n                    \"card_type\"\n                  ];\n                  connection.query(\n                    \"INSERT  INTO hims_f_receipt_details ( \" +\n                      receptSample.join(\",\") +\n                      \",hims_f_receipt_header_id) VALUES ? \",\n                    [\n                      jsonArrayToObject({\n                        sampleInputObject: receptSample,\n                        arrayObj: inputParam.receiptdetails,\n                        req: req,\n                        newFieldToInsert: [headerRcptResult.insertId]\n                      })\n                    ],\n                    (error, RcptDetailsRecords) => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                      debugFunction(\"inside details result\");\n\n                      let inputParameters = extend(advanceModel, req.body);\n\n                      // patient advance table insert\n                      connection.query(\n                        \"INSERT  INTO hims_f_patient_advance ( hims_f_patient_id, hims_f_receipt_header_id,\\\n          transaction_type, advance_amount, created_by, \\\n     created_date, updated_by, update_date,  record_status) VALUES (?,?,?,?,?,?,?,?,?) \",\n                        [\n                          inputParameters.hims_f_patient_id,\n                          headerRcptResult.insertId,\n                          inputParameters.transaction_type,\n                          inputParameters.advance_amount,\n                          req.userIdentity.algaeh_d_app_user_id,\n                          new Date(),\n                          req.userIdentity.algaeh_d_app_user_id,\n                          new Date(),\n                          inputParameters.record_status\n                        ],\n                        (error, AdvanceRecords) => {\n                          if (error) {\n                            connection.rollback(() => {\n                              releaseDBConnection(db, connection);\n                              next(error);\n                            });\n                          }\n                          debugFunction(\"inside patient advance result\");\n                          connection.query(\n                            \"SELECT advance_amount FROM hims_f_patient WHERE hims_d_patient_id=?\",\n                            [inputParameters.hims_f_patient_id],\n                            (error, result) => {\n                              if (error) {\n                                releaseDBConnection(db, connection);\n                                next(error);\n                              }\n                              let existingAdvance = result[0].advance_amount;\n                              if (result.length != 0) {\n                                //advance adding\n                                //                     if (inputParameters.transaction_type == \"AD\") {\n                                //                       inputParameters.advance_amount += existingAdvance;\n                                //                       debugLog(\"existingAdvance:\", existingAdvance);\n\n                                //                       connection.query(\n                                //                         \"UPDATE  `hims_f_patient` SET  `advance_amount`=?, \\\n                                //  `updated_by`=?, `updated_date`=? WHERE `hims_d_patient_id`=?\",\n                                //                         [\n                                //                           inputParameters.advance_amount,\n                                //                           inputParameters.updated_by,\n                                //                           new Date(),\n                                //                           inputParameters.hims_f_patient_id\n                                //                         ],\n                                //                         (error, appendAdvance) => {\n                                //                           if (error) {\n                                //                             connection.rollback(() => {\n                                //                               releaseDBConnection(db, connection);\n                                //                               next(error);\n                                //                             });\n                                //                           }\n\n                                //                           //commit comes here\n\n                                //                           connection.commit(error => {\n                                //                             releaseDBConnection(db, connection);\n                                //                             if (error) {\n                                //                               connection.rollback(() => {\n                                //                                 next(error);\n                                //                               });\n                                //                             }\n                                //                             req.records = {\n                                //                               RCPT_or_PYMNT_NUM: RCPT_or_PYMNT_NUM\n                                //                             };\n                                //                             next();\n                                //                           });\n                                //                         }\n                                //                       );\n                                //                     }\n\n                                //refund  perform substraction\n                                if (inputParameters.transaction_type == \"RF\") {\n                                  inputParameters.advance_amount =\n                                    existingAdvance -\n                                    inputParameters.advance_amount;\n                                  connection.query(\n                                    \"UPDATE  `hims_f_patient` SET  `advance_amount`=?, \\\n             `updated_by`=?, `updated_date`=? WHERE `hims_d_patient_id`=?\",\n                                    [\n                                      inputParameters.advance_amount,\n                                      req.userIdentity.algaeh_d_app_user_id,\n                                      new Date(),\n                                      inputParameters.hims_f_patient_id\n                                    ],\n                                    (error, subtractAdvance) => {\n                                      if (error) {\n                                        connection.rollback(() => {\n                                          releaseDBConnection(db, connection);\n                                          next(error);\n                                        });\n                                      }\n\n                                      //commit comes here\n                                      connection.commit(error => {\n                                        if (error) {\n                                          connection.rollback(() => {\n                                            releaseDBConnection(db, connection);\n                                            next(error);\n                                          });\n                                        }\n                                        releaseDBConnection(db, connection);\n                                        req.records = {\n                                          payment_no: newNumber,\n                                          total_advance_amount:\n                                            inputParameters.advance_amount\n                                        };\n                                        next();\n                                      });\n                                    }\n                                  );\n                                }\n                                if (inputParameters.transaction_type == \"CA\") {\n                                  // cancel\n                                }\n                              }\n                            }\n                          );\n                        }\n                      );\n                    }\n                  );\n                } else {\n                  debugLog(\"Data is not inerted to billing header\");\n                  next(\n                    httpStatus.generateError(\n                      httpStatus.badRequest,\n                      \"Technical issue while billis notinserted\"\n                    )\n                  );\n                }\n              }\n            );\n          }); //end of runing number PYMNT\n        }\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nfunction insuranceServiceDetails(body, db, next, connection, resolve) {\n  // req = req;\n  // let db = req.db;\n  debugLog(\"reqbodyin insurance func:\", body);\n  let NetOffModel = {\n    hims_d_insurance_network_office_id: null\n  };\n  let input = extend(NetOffModel, body);\n  debugLog(\n    \"hims_d_insurance_network_office_id:\",\n    input.hims_d_insurance_network_office_id\n  );\n\n  debugLog(\"connection string:\", connection);\n  connection.query(\n    \"select price_from ,copay_consultation,copay_percent,copay_percent_rad,copay_percent_trt,copay_percent_dental,\\\n    copay_medicine, preapp_limit, deductible, deductible_lab,deductible_rad, deductible_trt, deductible_medicine from hims_d_insurance_network_office where hims_d_insurance_network_office_id=?\",\n    [input.hims_d_insurance_network_office_id],\n    (error, resultOffic) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n\n      debugLog(\"result of network offic\", resultOffic);\n      debugFunction(\"inside result of network office  \");\n\n      // if s\n      if (resultOffic != null && resultOffic[0].price_from == \"S\") {\n        let insuranceModel = {\n          insurance_id: null,\n          service_type_id: null,\n          services_id: null\n        };\n        let inputparam = extend(insuranceModel, body);\n        debugLog(\"val second:\", inputparam.insurance_id);\n\n        connection.query(\n          \"select Inp.company_service_price_type,copay_status,copay_amt,deductable_status,deductable_amt,pre_approval,covered,\\\n           net_amount,gross_amt, cpt_code from hims_d_services_insurance sI inner join hims_d_insurance_provider Inp on\\\n           Inp.hims_d_insurance_provider_id=sI.insurance_id where sI.insurance_id =? and sI.service_type_id =? and \\\n           sI.services_id =?  and sI.record_status='A' and Inp.record_status='A'\",\n          [\n            insuranceModel.insurance_id,\n            insuranceModel.service_type_id,\n            insuranceModel.services_id\n          ],\n          (error, result_s) => {\n            if (error) {\n              releaseDBConnection(db, connection);\n              next(error);\n            }\n            debugFunction(\"inside result of second query if s is there  \");\n            debugLog(\"S is :\", result_s);\n            // req.records = extend({\n            //   insurence_result: result_s[0]\n            // });\n\n            let result = extend(result_s[0], resultOffic[0]);\n            return resolve(result);\n          }\n        );\n      }\n\n      // if p\n      if (resultOffic != null && resultOffic[0].price_from == \"P\") {\n        let networkModel = {\n          network_id: null,\n          service_type_id: null,\n          services_id: null\n        };\n\n        let input = extend(networkModel, body);\n        connection.query(\n          \"select Inp.insurance_provider_name, Inp.company_service_price_type, net.network_type, \\\n          copay_status,copay_amt,deductable_status,deductable_amt,pre_approval,\\\n          net_amount,gross_amt from (( hims_d_services_insurance_network Sin\\\n          inner join hims_d_insurance_network net on net.hims_d_insurance_network_id=Sin.network_id) \\\n           inner join hims_d_insurance_provider Inp on Sin.insurance_id=Inp.hims_d_insurance_provider_id  )\\\n           where  Sin.network_id=? AND Sin.services_id=? and service_type_id=? and  Sin.record_status='A' and net.record_status='A'\",\n          [input.network_id, input.services_id, input.service_type_id],\n          (error, result_p) => {\n            if (error) {\n              releaseDBConnection(db, connection);\n              next(error);\n            }\n            debugLog(\"p is :\", result_p);\n            debugFunction(\"inside result of second query if  p is there  \");\n            // req.records = extend({\n            //   policy_result: result_p[0]\n            // });\n            extend(result_p, resultOffic);\n            return resolve(result_p);\n          }\n        );\n      }\n    }\n  );\n}\n//created by irfan to add episode and encounter\nlet addEpisodeEncounter = (connection, req, res, callBack, next) => {\n  let episodeModel = {\n    patient_id: null,\n    provider_id: null,\n    visit_id: null,\n    source: null,\n    status: null,\n    episode_id: null,\n    encounter_id: null,\n    checked_in: null,\n    nurse_examine: null,\n    age: null,\n    patient_type: null,\n    queue_no: null\n  };\n\n  debugFunction(\"addEpisode\");\n  try {\n    if (connection == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n\n    let db = req.db;\n    let input = extend(episodeModel, req.body);\n\n    let currentEncounterNo = null;\n\n    connection.query(\n      \"select encounter_id from hims_d_options where hims_d_options_id=1\",\n      (error, result) => {\n        if (error) {\n          releaseDBConnection(db, connection);\n          next(error);\n        }\n\n        currentEncounterNo = result[0].encounter_id;\n        debugLog(\"currentEncounterNo:\", currentEncounterNo);\n\n        if (currentEncounterNo > 0) {\n          let nextEncounterNo = currentEncounterNo + 1;\n          debugLog(\"nextEncounterNo:\", nextEncounterNo);\n\n          connection.query(\n            \"update hims_d_options set encounter_id=? where hims_d_options_id=1\",\n            [nextEncounterNo],\n            (error, updateResult) => {\n              if (error) {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n\n              if (updateResult != null) {\n                connection.query(\n                  \"insert into hims_f_patient_encounter(patient_id,provider_id,visit_id,source,status,\\\n                       episode_id,encounter_id,checked_in,nurse_examine,age,patient_type,queue_no)values(\\\n                        ?,?,?,?,?,?,?,?,?,?,?,?)\",\n                  [\n                    input.patient_id,\n                    input.provider_id,\n                    input.visit_id,\n                    input.source,\n                    input.status,\n                    input.episode_id,\n                    currentEncounterNo,\n                    input.checked_in,\n                    input.nurse_examine,\n                    input.age,\n                    input.patient_type,\n                    input.queue_no\n                  ],\n                  (error, results) => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n                    if (typeof callBack == \"function\") {\n                      callBack(error, results);\n                    }\n                  }\n                );\n              }\n            }\n          );\n        }\n      }\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\n//Created by noor for synchronus\nlet addEpisodeEncounterData = (req, res, next) => {\n  debugFunction(\"addEpisode\");\n\n  let db = req.options == null ? req.db : req.options.db;\n  let input = extend(\n    {\n      patient_id: null,\n      provider_id: null,\n      visit_id: null,\n      source: null,\n      status: null,\n      episode_id: null,\n      encounter_id: null,\n      checked_in: null,\n      nurse_examine: null,\n      age: null,\n      payment_type: null,\n      queue_no: null\n    },\n    req.body\n  );\n\n  debugLog(\"Input:\", req.body);\n\n  //created_date, created_by, updated_date, updated_by,\n  db.query(\n    \"insert into hims_f_patient_encounter(patient_id,provider_id,visit_id,source,\\\n           episode_id,age,payment_type,created_date,created_by,updated_date,updated_by)values(\\\n            ?,?,?,?,?,?,?,?,?,?,?) \",\n    [\n      input.patient_id,\n      input.provider_id,\n      input.visit_id,\n      input.source,\n      input.episode_id,\n      input.age,\n      input.payment_type,\n      new Date(),\n      input.created_by,\n      new Date(),\n      input.updated_by\n    ],\n    (error, results) => {\n      if (error) {\n        debugLog(\"error\", error);\n        if (req.options == null) {\n          connection.rollback(() => {\n            releaseDBConnection(req.db, db);\n            next(error);\n          });\n        }\n      }\n      db.query(\n        \"update hims_f_patient_appointment set visit_created='Y',updated_date=?, \\\n       updated_by=? where record_status='A' and hims_f_patient_appointment_id=?\",\n        [new Date(), input.updated_by, input.hims_f_patient_appointment_id],\n        (error, patAppointment) => {\n          if (error) {\n            debugLog(\"error\", error);\n            if (req.options == null) {\n              connection.rollback(() => {\n                releaseDBConnection(req.db, db);\n                next(error);\n              });\n            }\n          }\n          if (req.options == null) {\n            req.records = results;\n          } else {\n            debugLog(\"Success\");\n            req.options.onSuccess(results);\n          }\n        }\n      );\n    }\n  );\n\n  // let currentEncounterNo = null;\n\n  // db.query(\n  //   \"select encounter_id from hims_d_options where hims_d_options_id=1\",\n  //   (error, result) => {\n  //     if (error) {\n  //       if (req.options == null) {\n  //         releaseDBConnection(req.db, db);\n  //         next(error);\n  //       } else {\n  //         req.options.onFailure(error);\n  //       }\n  //     }\n\n  //     debugLog(\"Episode\", input);\n\n  //     currentEncounterNo = result[0].encounter_id;\n  //     if (currentEncounterNo > 0) {\n  //       let nextEncounterNo = currentEncounterNo + 1;\n\n  //       db.query(\n  //         \"update hims_d_options set encounter_id=? where hims_d_options_id=1\",\n  //         [nextEncounterNo],\n  //         (error, updateResult) => {\n  //           if (error) {\n  //             if (req.options == null) {\n  //               db.rollback(() => {\n  //                 releaseDBConnection(req.db, db);\n  //                 next(error);\n  //               });\n  //             } else {\n  //               req.options.onFailure(error);\n  //             }\n  //           }\n\n  //           if (updateResult != null) {\n  //             db.query(\n  //               \"insert into hims_f_patient_encounter(patient_id,provider_id,visit_id,source,status,\\\n  //                      episode_id,encounter_id,checked_in,nurse_examine,age,patient_type,queue_no)values(\\\n  //                       ?,?,?,?,?,?,?,?,?,?,?,?)\",\n  //               [\n  //                 input.patient_id,\n  //                 input.provider_id,\n  //                 input.visit_id,\n  //                 input.source,\n  //                 input.status,\n  //                 input.episode_id,\n  //                 currentEncounterNo,\n  //                 input.checked_in,\n  //                 input.nurse_examine,\n  //                 input.age,\n  //                 input.patient_type,\n  //                 input.queue_no\n  //               ],\n  //               (error, results) => {\n  //                 if (error) {\n  //                   if (req.options == null) {\n  //                     connection.rollback(() => {\n  //                       releaseDBConnection(req.db, db);\n  //                       next(error);\n  //                     });\n  //                   }\n  //                 }\n  //                 if (req.options == null) {\n  //                   req.records = results;\n  //                 } else {\n  //                   req.options.onSuccess(results);\n  //                 }\n  //               }\n  //             );\n  //           }\n  //         }\n  //       );\n  //     }\n  //   }\n  // );\n};\n\n//get bill details\nlet getBillDetails = (req, res, next) => {\n  debugFunction(\"getBillDetails\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      new Promise((resolve, reject) => {\n        try {\n          getBillDetailsFunctionality(req, res, next, resolve);\n        } catch (e) {\n          reject(e);\n        }\n      }).then(result => {\n        debugLog(\"result\", result);\n        req.records = result;\n        releaseDBConnection(db, connection);\n        next();\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//Created by noor for synchronus\nlet newReceiptData = (req, res, next) => {\n  try {\n    debugFunction(\"newReceiptFUnc\");\n\n    let db = req.options == null ? req.db : req.options.db;\n\n    let inputParam = extend(\n      {\n        hims_f_receipt_header_id: null,\n        receipt_number: null,\n        receipt_date: null,\n        billing_header_id: null,\n        total_amount: null,\n        created_by: req.userIdentity.algaeh_d_app_user_id,\n        updated_by: req.userIdentity.algaeh_d_app_user_id,\n        counter_id: null,\n        shift_id: null\n      },\n      req.body\n    );\n\n    if (\n      inputParam.receiptdetails == null ||\n      inputParam.receiptdetails.length == 0\n    ) {\n      const genErr = httpStatus.generateError(\n        httpStatus.badRequest,\n        \"Please select atleast one payment mode.\"\n      );\n      if (req.options == null) {\n        next(genErr);\n      } else {\n        req.options.onFailure(genErr);\n      }\n    }\n    inputParam.receipt_number = req.body.receipt_number;\n    db.query(\n      \"INSERT INTO hims_f_receipt_header (receipt_number, receipt_date, billing_header_id, total_amount,\\\n       created_by, created_date, updated_by, updated_date,  counter_id, shift_id) VALUES (?,?,?\\\n    ,?,?,?,?,?,?,?)\",\n      [\n        inputParam.receipt_number,\n        new Date(),\n        inputParam.billing_header_id,\n        inputParam.total_amount,\n        inputParam.created_by,\n        new Date(),\n        inputParam.updated_by,\n        new Date(),\n        inputParam.counter_id,\n        inputParam.shift_id\n      ],\n      (error, headerRcptResult) => {\n        if (error) {\n          if (req.options == null) {\n            db.rollback(() => {\n              releaseDBConnection(req.db, db);\n              next(error);\n            });\n          } else {\n            req.options.onSuccess(headerRcptResult);\n          }\n        }\n\n        if (\n          headerRcptResult.insertId != null &&\n          headerRcptResult.insertId != \"\"\n        ) {\n          //let detailsInsert = [];\n\n          // bulkInputArrayObject(inputParam.receiptdetails, detailsInsert, {\n          //   hims_f_receipt_header_id: headerRcptResult.insertId\n          // });\n          const receptSample = [\n            \"card_check_number\",\n            \"expiry_date\",\n            \"pay_type\",\n            \"amount\",\n            \"created_by\",\n            \"updated_by\",\n            \"card_type\"\n          ];\n          //   debugLog(\"Detail Body: \", detailsInsert);\n\n          db.query(\n            \"INSERT  INTO hims_f_receipt_details ( \" +\n              receptSample.join(\",\") +\n              \",hims_f_receipt_header_id) VALUES ? \",\n            [\n              jsonArrayToObject({\n                sampleInputObject: receptSample,\n                arrayObj: inputParam.receiptdetails,\n                req: req,\n                newFieldToInsert: [headerRcptResult.insertId]\n              })\n            ],\n            (error, RcptDetailsRecords) => {\n              if (error) {\n                if (req.options == null) {\n                  db.rollback(() => {\n                    releaseDBConnection(req.db, db);\n                    next(error);\n                  });\n                } else {\n                  req.options.onFailure(error);\n                }\n              }\n              debugLog(\"Final\", req.options);\n              if (req.options == null) {\n                req.records = headerRcptResult;\n              } else {\n                req.options.onSuccess(headerRcptResult);\n                debugLog(\"Final\", headerRcptResult);\n              }\n            }\n          );\n        }\n      }\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n//End synchronus\n\n//-------------------------------------\n\n//Created by irfan :for synchronus\nlet addCashHandover = (req, res, next) => {\n  try {\n    debugFunction(\"cash api\");\n    let db = req.options == null ? req.db : req.options.db;\n\n    let inputParam = extend(\n      {\n        shift_id: null\n      },\n      req.body\n    );\n    debugLog(\"group_type:\", req.userIdentity.group_type);\n    if (\n      inputParam.receiptdetails == null ||\n      inputParam.receiptdetails.length == 0\n    ) {\n      const genErr = httpStatus.generateError(\n        httpStatus.badRequest,\n        \"Please select atleast one payment mode.\"\n      );\n      if (req.options == null) {\n        next(genErr);\n      } else {\n        req.options.onFailure(genErr);\n      }\n    }\n\n    if (\n      req.userIdentity.group_type == \"C\" ||\n      req.userIdentity.group_type == \"FD\"\n    ) {\n      let hims_f_cash_handover_detail_id = \"\";\n      db.query(\n        \"select hims_f_cash_handover_detail_id, cash_handover_header_id, casher_id, shift_status,open_date\\\n      from  hims_f_cash_handover_detail where record_status='A' and casher_id=? and shift_status='O'\",\n        [inputParam.created_by],\n        (error, checkShiftStatus) => {\n          if (error) {\n            if (req.options == null) {\n              db.rollback(() => {\n                releaseDBConnection(req.db, db);\n                next(error);\n              });\n            } else {\n              req.options.onFailure(checkShiftStatus);\n            }\n          }\n\n          debugLog(\"number of shift open\", checkShiftStatus);\n          if (checkShiftStatus.length > 0) {\n            hims_f_cash_handover_detail_id =\n              checkShiftStatus[0].hims_f_cash_handover_detail_id;\n          }\n\n          new Promise((resolve, reject) => {\n            try {\n              if (\n                checkShiftStatus.length == null ||\n                checkShiftStatus.length == \"\"\n              ) {\n                db.query(\n                  \"INSERT INTO `hims_f_cash_handover_header` ( shift_id, daily_handover_date,\\\n               created_date, created_by, updated_date, updated_by)\\\n              VALUE(?,?,?,?,?,?)\",\n                  [\n                    inputParam.shift_id,\n                    new Date(),\n                    new Date(),\n                    inputParam.created_by,\n                    new Date(),\n                    inputParam.updated_by\n                  ],\n                  (error, headerCashHandover) => {\n                    if (error) {\n                      if (req.options == null) {\n                        db.rollback(() => {\n                          releaseDBConnection(req.db, db);\n                          next(error);\n                        });\n                      } else {\n                        req.options.onFailure(headerCashHandover);\n                      }\n                    }\n\n                    debugLog(\"headerCashHandover\", headerCashHandover);\n\n                    if (\n                      headerCashHandover.insertId != null &&\n                      headerCashHandover.insertId != \"\"\n                    ) {\n                      db.query(\n                        \"INSERT INTO `hims_f_cash_handover_detail` ( cash_handover_header_id, casher_id,\\\n                        shift_status,open_date,  expected_cash, expected_card,  expected_cheque, \\\n                      no_of_cheques,created_date, created_by, updated_date, updated_by)\\\n                    VALUE(?,?,?,?,?,?,?,?,?,?,?,?)\",\n                        [\n                          headerCashHandover.insertId,\n                          inputParam.created_by,\n                          \"O\",\n                          new Date(),\n                          0,\n                          0,\n                          0,\n                          0,\n                          new Date(),\n                          inputParam.created_by,\n                          new Date(),\n                          inputParam.updated_by\n                        ],\n                        (error, CashHandoverDetails) => {\n                          if (error) {\n                            if (req.options == null) {\n                              db.rollback(() => {\n                                releaseDBConnection(req.db, db);\n                                next(error);\n                              });\n                            } else {\n                              req.options.onFailure(error);\n                            }\n                          }\n                          if (\n                            CashHandoverDetails.insertId != null &&\n                            CashHandoverDetails.insertId != \"\"\n                          ) {\n                            hims_f_cash_handover_detail_id =\n                              CashHandoverDetails.insertId;\n                          }\n                          debugLog(\"CashHandoverDetails\", CashHandoverDetails);\n                          resolve(CashHandoverDetails);\n                        }\n                      );\n                    }\n                  }\n                );\n              } else if (checkShiftStatus.length > 0) {\n                resolve({});\n              }\n            } catch (e) {\n              reject(e);\n            }\n          }).then(result => {\n            //hjjh\n\n            let expected_cash = 0;\n            let expected_card = 0;\n            let expected_cheque = 0;\n            let no_of_cheques = 0;\n\n            expected_cash = new LINQ(inputParam.receiptdetails)\n              .Where(w => w.pay_type == \"CA\")\n              .Sum(s => s.amount);\n            debugLog(\"expected_cash:\", expected_cash);\n\n            expected_card = new LINQ(inputParam.receiptdetails)\n              .Where(w => w.pay_type == \"CD\")\n              .Sum(s => s.amount);\n            debugLog(\"expected_card:\", expected_card);\n\n            expected_cheque = new LINQ(inputParam.receiptdetails)\n              .Where(w => w.pay_type == \"CH\")\n              .Sum(s => s.amount);\n            debugLog(\"expected_cheque:\", expected_cheque);\n\n            no_of_cheques = new LINQ(inputParam.receiptdetails)\n              .Where(w => w.pay_type == \"CH\")\n              .ToArray().length;\n\n            debugLog(\"no_of_cheques:\", no_of_cheques);\n\n            db.query(\n              \"select expected_cash,expected_card, expected_cheque, no_of_cheques from \\\n          hims_f_cash_handover_detail where record_status='A' and hims_f_cash_handover_detail_id=?\",\n              [hims_f_cash_handover_detail_id],\n              (error, selectCurrentCash) => {\n                if (error) {\n                  if (req.options == null) {\n                    db.rollback(() => {\n                      releaseDBConnection(req.db, db);\n                      next(error);\n                    });\n                  } else {\n                    req.options.onFailure(selectCurrentCash);\n                  }\n                }\n                debugLog(\"selectCurrentCash:\", selectCurrentCash);\n                expected_cash += selectCurrentCash[0].expected_cash;\n                expected_card += selectCurrentCash[0].expected_card;\n                expected_cheque += selectCurrentCash[0].expected_cheque;\n                no_of_cheques += selectCurrentCash[0].no_of_cheques;\n\n                db.query(\n                  \"update hims_f_cash_handover_detail set expected_cash=?,expected_card=?,\\\n              expected_cheque=?,no_of_cheques=?,updated_date=?,updated_by=? where record_status='A' \\\n              and hims_f_cash_handover_detail_id=?;\",\n                  [\n                    expected_cash,\n                    expected_card,\n                    expected_cheque,\n                    no_of_cheques,\n                    new Date(),\n                    inputParam.updated_by,\n                    hims_f_cash_handover_detail_id\n                  ],\n                  (error, updateResult) => {\n                    if (error) {\n                      if (req.options == null) {\n                        db.rollback(() => {\n                          releaseDBConnection(req.db, db);\n                          next(error);\n                        });\n                      } else {\n                        req.options.onFailure(updateResult);\n                      }\n                    }\n\n                    if (req.options == null) {\n                      req.records = updateResult;\n                      next();\n                      debugLog(\"indi pendent\", updateResult);\n                    } else {\n                      req.options.onSuccess(updateResult);\n                      debugLog(\"updateResult\", updateResult);\n                    }\n                  }\n                );\n              }\n            );\n          });\n        }\n      );\n    } else {\n      if (req.options == null) {\n        req.records = { mesage: \"not a cahsier\" };\n        next();\n        debugLog(\"ELSE KK\");\n      } else {\n        req.options.onSuccess({});\n      }\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addBill,\n  addBillData,\n  billingCalculations,\n  getBillDetails,\n  newReceipt,\n  patientAdvanceRefund,\n  addEpisodeEncounter,\n  getBillDetailsFunctionality,\n  addEpisodeEncounterData,\n  newReceiptData,\n  addCashHandover\n};\n"]}