{"version":3,"sources":["../../../src/model/employee.js"],"names":["addEmployee","req","res","next","db","httpStatus","dataBaseNotInitilizedError","input","body","getConnection","error","connection","beginTransaction","rollback","query","employee_code","title_id","first_name","middle_name","last_name","full_name","arabic_name","employee_designation_id","license_number","sex","date_of_birth","Date","date_of_joining","date_of_resignation","address","address2","pincode","city_id","state_id","country_id","primary_contact_no","secondary_contact_no","email","emergancy_contact_person","emergancy_contact_no","blood_group","isdoctor","employee_status","effective_start_date","effective_end_date","created_by","updated_by","result","insertId","deptDetails","length","insurtColumns","join","sampleInputObject","arrayObj","newFieldToInsert","departResult","Promise","resolve","reject","serviceComm","serviceCommResult","e","then","servTypeCommission","serviceTypeCommResult","commit","records","results","addEmployeeMaster","nationality","religion_id","marital_status","present_address","present_address2","present_pincode","present_city_id","present_state_id","present_country_id","permanent_address","permanent_address2","permanent_pincode","permanent_city_id","permanent_state_id","permanent_country_id","appointment_type","employee_type","reliving_date","notice_period","company_bank_id","employee_bank_name","employee_bank_ifsc_code","employee_account_number","mode_of_payment","accomodation_provided","hospital_id","addEmployeeInfoBAckup28_december","hims_d_employee_id","undefined","airfare_process","contract_type","emergency_contact_no","emergency_contact_person","employee_group_id","entitled_daily_ot","exclude_machine_data","exit_date","gratuity_applicable","late_coming_rule","leave_salary_process","overtime_group_id","reporting_to_id","sub_department_id","suspend_salary","weekoff_from","empResult","idDetails","Identity_Result","dependentDetails","addEmployeeInfo","departmntResult","addEmployeeGroups","group_description","monthly_accrual_days","airfare_eligibility","airfare_amount","getEmployeeGroups","updateEmployeeGroup","hims_d_employee_group_id","affectedRows","invalid_input","deleteEmployeeGroup","tableName","id","values","getEmployee","employeeWhereCondition","pagePaging","paging","Page","pageNo","page","pageSize","parameters","Wherecondition","condition","i","employee_id","updateEmployee","record_status","insertdeptDetails","insertDepartResult","updatedeptDetails","inputParam","qry","services_id","category_speciality_id","user_id","toLocaleString","hims_d_employee_department_id","updateDeptDetailResult","insertserviceComm","updateserviceComm","provider_id","service_type_id","op_cash_commission_percent","op_credit_commission_percent","ip_cash_commission_percent","ip_credit_commission_percent","hims_m_doctor_service_commission_id","updateServiceCommResult","insertservTypeCommission","insrtServiceTypeCommResult","updateservTypeCommission","op_cash_comission_percent","op_credit_comission_percent","hims_m_doctor_service_type_commission_id","finally","getEmployeeDetails","where","getEmployeeCategory","speciality_id","getDoctorServiceCommission","getDoctorServiceTypeCommission","addEarningDeduction","earning_deduction_code","earning_deduction_description","short_desc","component_category","calculation_method","formula","component_frequency","calculation_type","component_type","shortage_deduction_applicable","overtime_applicable","limit_applicable","limit_amount","process_limit_required","process_limit_days","general_ledger","allow_round_off","round_off_type","round_off_amount","getEarningDeduction","updateEarningDeduction","hims_d_earning_deduction_id","deleteEarningDeduction","addEmployeeIdentification","identity_documents_id","identity_number","valid_upto","issue_date","alert_required","alert_date","getEmployeeIdentification","updateEmployeeIdentification","hims_d_employee_identification_id","deleteEmployeeIdentification","addLoanMaster","loan_code","loan_description","loan_account","loan_limit_type","loan_maximum_amount","getLoanMaster","updateLoanMaster","hims_d_loan_id","deleteLoanMaster","getEmployeeWorkExperience","userIdentity","addEmployeeWorkExperience","previous_company_name","from_date","to_date","designation","experience_years","experience_months","deleteEmployeeWorkExperience","hims_d_employee_experience_id","updateEmployeeWorkExperience","getEmployeeEducation","addEmployeeEducation","qualification","qualitfication_type","year","university","deleteEmployeeEducation","hims_d_employee_education_id","updateEmployeeEducation","module","exports"],"mappings":"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","file":"employee.js","sourcesContent":["import extend from \"extend\";\nimport {\n  selectStatement,\n  paging,\n  whereCondition,\n  releaseDBConnection,\n  deleteRecord,\n  jsonArrayToObject\n} from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { debugLog } from \"../utils/logging\";\nimport Promise from \"bluebird\";\nimport department from \"../controller/department\";\n\n//api to add employee\nlet addEmployee = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n\n        connection.query(\n          \"INSERT hims_d_employee(employee_code,title_id,first_name,middle_name,last_name,\\\n          full_name,arabic_name,employee_designation_id,license_number,sex,date_of_birth,date_of_joining,date_of_resignation,address,\\\n          address2,pincode,city_id,state_id,country_id,primary_contact_no,secondary_contact_no,email,emergancy_contact_person,emergancy_contact_no,\\\n          blood_group,isdoctor,employee_status,effective_start_date,effective_end_date,created_date,created_by,updated_date,updated_by) values(\\\n            ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n          [\n            input.employee_code,\n            input.title_id,\n            input.first_name,\n            input.middle_name,\n            input.last_name,\n            input.full_name,\n            input.arabic_name,\n            input.employee_designation_id,\n            input.license_number,\n            input.sex,\n            input.date_of_birth != null\n              ? new Date(input.date_of_birth)\n              : input.date_of_birth,\n            input.date_of_joining,\n            input.date_of_resignation,\n            input.address,\n            input.address2,\n            input.pincode,\n            input.city_id,\n            input.state_id,\n            input.country_id,\n            input.primary_contact_no,\n            input.secondary_contact_no,\n            input.email,\n            input.emergancy_contact_person,\n            input.emergancy_contact_no,\n            input.blood_group,\n            input.isdoctor,\n            input.employee_status,\n            input.effective_start_date != null\n              ? new Date(input.effective_start_date)\n              : input.effective_start_date,\n            input.effective_end_date != null\n              ? new Date(input.effective_end_date)\n              : input.effective_end_date,\n            new Date(),\n            input.created_by,\n            new Date(),\n            input.updated_by\n          ],\n          (error, result) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            if (result.insertId != null && req.body.deptDetails.length > 0) {\n              const insurtColumns = [\n                \"services_id\",\n                \"sub_department_id\",\n                \"category_speciality_id\",\n                \"user_id\",\n                \"created_by\",\n                \"updated_by\"\n              ];\n\n              connection.query(\n                \"INSERT INTO hims_m_employee_department_mappings(\" +\n                  insurtColumns.join(\",\") +\n                  \",employee_id,created_date,updated_date) VALUES ?\",\n                [\n                  jsonArrayToObject({\n                    sampleInputObject: insurtColumns,\n                    arrayObj: req.body.deptDetails,\n                    newFieldToInsert: [result.insertId, new Date(), new Date()],\n                    req: req\n                  })\n                ],\n                (error, departResult) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n\n                  new Promise((resolve, reject) => {\n                    try {\n                      if (input.serviceComm.length > 0) {\n                        const insurtColumns = [\n                          \"services_id\",\n                          \"service_type_id\",\n                          \"op_cash_commission_percent\",\n                          \"op_credit_commission_percent\",\n                          \"ip_cash_commission_percent\",\n                          \"ip_credit_commission_percent\",\n                          \"created_by\",\n                          \"updated_by\"\n                        ];\n\n                        connection.query(\n                          \"INSERT INTO hims_m_doctor_service_commission(\" +\n                            insurtColumns.join(\",\") +\n                            \",provider_id,created_date,updated_date) VALUES ?\",\n                          [\n                            jsonArrayToObject({\n                              sampleInputObject: insurtColumns,\n                              arrayObj: req.body.serviceComm,\n                              newFieldToInsert: [\n                                result.insertId,\n                                new Date(),\n                                new Date()\n                              ],\n                              req: req\n                            })\n                          ],\n                          (error, serviceCommResult) => {\n                            if (error) {\n                              connection.rollback(() => {\n                                releaseDBConnection(db, connection);\n                                next(error);\n                              });\n                            }\n                            return resolve(serviceCommResult);\n                          }\n                        );\n                      } else {\n                        return resolve(departResult);\n                      }\n                    } catch (e) {\n                      reject(e);\n                    }\n                  }).then(results => {\n                    if (input.servTypeCommission.length > 0) {\n                      const insurtColumns = [\n                        \"service_type_id\",\n                        \"op_cash_comission_percent\",\n                        \"op_credit_comission_percent\",\n                        \"ip_cash_commission_percent\",\n                        \"ip_credit_commission_percent\",\n                        \"created_by\",\n                        \"updated_by\"\n                      ];\n\n                      connection.query(\n                        \"INSERT INTO hims_m_doctor_service_type_commission(\" +\n                          insurtColumns.join(\",\") +\n                          \",provider_id,created_date,updated_date) VALUES ?\",\n                        [\n                          jsonArrayToObject({\n                            sampleInputObject: insurtColumns,\n                            arrayObj: req.body.servTypeCommission,\n                            newFieldToInsert: [\n                              result.insertId,\n                              new Date(),\n                              new Date()\n                            ],\n                            req: req\n                          })\n                        ],\n                        (error, serviceTypeCommResult) => {\n                          if (error) {\n                            connection.rollback(() => {\n                              releaseDBConnection(db, connection);\n                              next(error);\n                            });\n                          }\n\n                          connection.commit(error => {\n                            if (error) {\n                              connection.rollback(() => {\n                                releaseDBConnection(db, connection);\n                                next(error);\n                              });\n                            }\n                            releaseDBConnection(db, connection);\n                            req.records = serviceTypeCommResult;\n                            next();\n                          });\n                        }\n                      );\n                    } else {\n                      connection.commit(error => {\n                        if (error) {\n                          connection.rollback(() => {\n                            releaseDBConnection(db, connection);\n                            next(error);\n                          });\n                        }\n                        releaseDBConnection(db, connection);\n                        req.records = results;\n                        next();\n                      });\n                    }\n                  });\n                }\n              );\n            } else {\n              req.records = result;\n              releaseDBConnection(db, connection);\n              next();\n            }\n\n            // connection.query(\n            //   \"SELECT * FROM hims_d_employee WHERE hims_d_employee_id=?\",\n            //   [result[\"insertId\"]],\n            //   (error, resultBack) => {\n            //     releaseDBConnection(db, connection);\n            //     if (error) {\n            //       next(error);\n            //     }\n            //     req.records = resultBack;\n            //     next();\n            //   }\n            // );\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:api to\nlet addEmployeeMaster = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    if (\n      req.body.license_number == \"null\" ||\n      req.body.license_number == \"\" ||\n      req.body.license_number == null\n    ) {\n      delete req.body.license_number;\n    }\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT  INTO hims_d_employee (employee_code,full_name,arabic_name,\\\n          date_of_birth,sex,primary_contact_no,email,blood_group,nationality,religion_id,\\\n          marital_status,present_address,present_address2,present_pincode,present_city_id,\\\n          present_state_id,present_country_id,permanent_address,permanent_address2,permanent_pincode,\\\n          permanent_city_id,permanent_state_id,permanent_country_id,isdoctor,license_number, \\\n          date_of_joining,appointment_type,employee_type,reliving_date,notice_period,date_of_resignation,\\\n          company_bank_id,employee_bank_name,employee_bank_ifsc_code,employee_account_number,mode_of_payment,\\\n          accomodation_provided,hospital_id,created_date,created_by,updated_date,updated_by) values(\\\n            ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n        [\n          input.employee_code,\n          input.full_name,\n          input.arabic_name,\n          input.date_of_birth,\n          input.sex,\n          input.primary_contact_no,\n          input.email,\n          input.blood_group,\n          input.nationality,\n          input.religion_id,\n          input.marital_status,\n          input.present_address,\n          input.present_address2,\n          input.present_pincode,\n          input.present_city_id,\n          input.present_state_id,\n          input.present_country_id,\n          input.permanent_address,\n          input.permanent_address2,\n          input.permanent_pincode,\n          input.permanent_city_id,\n          input.permanent_state_id,\n          input.permanent_country_id,\n          input.isdoctor,\n          input.license_number,\n          input.date_of_joining,\n          input.appointment_type,\n          input.employee_type,\n          input.reliving_date,\n          input.notice_period,\n          input.date_of_resignation,\n          input.company_bank_id,\n          input.employee_bank_name,\n          input.employee_bank_ifsc_code,\n          input.employee_account_number,\n          input.mode_of_payment,\n          input.accomodation_provided,\n          input.hospital_id,\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:api to\nlet addEmployeeInfoBAckup28_december = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        new Promise((resolve, reject) => {\n          try {\n            debugLog(\"first\");\n            if (input.deptDetails.length > 0) {\n              const insurtColumns = [\n                \"services_id\",\n                \"sub_department_id\",\n                \"category_speciality_id\",\n                \"employee_designation_id\",\n                \"reporting_to_id\",\n                \"created_by\",\n                \"updated_by\"\n              ];\n\n              connection.query(\n                \"INSERT INTO hims_m_employee_department_mappings(\" +\n                  insurtColumns.join(\",\") +\n                  \",`employee_id`,created_date,updated_date) VALUES ?\",\n                [\n                  jsonArrayToObject({\n                    sampleInputObject: insurtColumns,\n                    arrayObj: input.deptDetails,\n                    newFieldToInsert: [\n                      input.hims_d_employee_id,\n                      new Date(),\n                      new Date()\n                    ],\n                    req: req\n                  })\n                ],\n                (error, result) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n                  if (result.length > 0) {\n                    resolve(result);\n                  } else {\n                    resolve({});\n                  }\n                }\n              );\n            } else {\n              resolve({});\n            }\n          } catch (e) {\n            reject(e);\n          }\n        })\n          .then(departmntResult => {\n            debugLog(\"second\");\n            if (input != \"null\" && input != undefined) {\n              connection.query(\n                \" UPDATE hims_d_employee SET airfare_process=?,contract_type=?,emergency_contact_no=?,\\\n              emergency_contact_person=?,employee_designation_id=?,employee_group_id=?,\\\n              entitled_daily_ot=?,exclude_machine_data=?,exit_date=?,gratuity_applicable=?,\\\n              hospital_id=?,late_coming_rule=?,leave_salary_process=?,overtime_group_id=?,reporting_to_id=?,\\\n              secondary_contact_no=?,sub_department_id=?,suspend_salary=?,title_id=?,weekoff_from=?,\\\n              updated_date=?, updated_by=?  WHERE record_status='A' and  hims_d_employee_id=?\",\n\n                [\n                  input.airfare_process,\n                  input.contract_type,\n                  input.emergency_contact_no,\n                  input.emergency_contact_person,\n                  input.employee_designation_id,\n                  input.employee_group_id,\n\n                  input.entitled_daily_ot,\n                  input.exclude_machine_data,\n                  input.exit_date,\n                  input.gratuity_applicable,\n                  input.hospital_id,\n                  input.late_coming_rule,\n                  input.leave_salary_process,\n                  input.overtime_group_id,\n                  input.reporting_to_id,\n                  input.secondary_contact_no,\n                  input.sub_department_id,\n                  input.suspend_salary,\n                  input.title_id,\n                  input.weekoff_from,\n                  new Date(),\n                  input.updated_by,\n                  input.hims_d_employee_id\n                ],\n                (error, empResult) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n\n                  return;\n                }\n              );\n            } else {\n              return;\n            }\n          })\n          .then(employResult => {\n            debugLog(\"third\");\n            if (input.idDetails.length > 0) {\n              const insurtColumns = [\n                \"identity_documents_id\",\n                \"identity_number\",\n                \"valid_upto\",\n                \"issue_date\",\n                \"alert_required\",\n                \"alert_date\",\n\n                \"created_by\",\n                \"updated_by\"\n              ];\n\n              connection.query(\n                \"INSERT INTO hims_d_employee_identification (\" +\n                  insurtColumns.join(\",\") +\n                  \",`employee_id`,created_date,updated_date) VALUES ?\",\n                [\n                  jsonArrayToObject({\n                    sampleInputObject: insurtColumns,\n                    arrayObj: input.idDetails,\n                    newFieldToInsert: [\n                      input.hims_d_employee_id,\n                      new Date(),\n                      new Date()\n                    ],\n                    req: req\n                  })\n                ],\n                (error, Identity_Result) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n\n                  return;\n                }\n              );\n            } else {\n              return;\n            }\n          })\n          .then(Identity_Result => {\n            debugLog(\"fourth\");\n\n            if (input.dependentDetails.length > 0) {\n              const insurtColumns = [\n                \"dependent_type\",\n                \"dependent_name\",\n                \"dependent_identity_type\",\n                \"dependent_identity_no\",\n                \"created_by\",\n                \"updated_by\"\n              ];\n\n              connection.query(\n                \"INSERT INTO hims_d_employee_dependents (\" +\n                  insurtColumns.join(\",\") +\n                  \",`employee_id`,created_date,updated_date) VALUES ?\",\n                [\n                  jsonArrayToObject({\n                    sampleInputObject: insurtColumns,\n                    arrayObj: input.idDetails,\n                    newFieldToInsert: [\n                      input.hims_d_employee_id,\n                      new Date(),\n                      new Date()\n                    ],\n                    req: req\n                  })\n                ],\n                (error, Identity_Result) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n\n                  connection.commit(error => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n                    releaseDBConnection(db, connection);\n                    req.records = result;\n                    next();\n                  });\n                }\n              );\n            } else {\n              connection.commit(error => {\n                if (error) {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                }\n                releaseDBConnection(db, connection);\n                req.records = result;\n                next();\n              });\n            }\n          });\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:api to\nlet addEmployeeInfo = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        new Promise((resolve, reject) => {\n          try {\n            debugLog(\"first\");\n            if (input.deptDetails.length > 0) {\n              const insurtColumns = [\n                \"services_id\",\n                \"sub_department_id\",\n                \"category_speciality_id\",\n                \"employee_designation_id\",\n                \"reporting_to_id\",\n                \"created_by\",\n                \"updated_by\"\n              ];\n\n              connection.query(\n                \"INSERT INTO hims_m_employee_department_mappings(\" +\n                  insurtColumns.join(\",\") +\n                  \",`employee_id`,created_date,updated_date) VALUES ?\",\n                [\n                  jsonArrayToObject({\n                    sampleInputObject: insurtColumns,\n                    arrayObj: input.deptDetails,\n                    newFieldToInsert: [\n                      input.hims_d_employee_id,\n                      new Date(),\n                      new Date()\n                    ],\n                    req: req\n                  })\n                ],\n                (error, result) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n                  if (result.length > 0) {\n                    resolve(result);\n                  } else {\n                    resolve({});\n                  }\n                }\n              );\n            } else {\n              resolve({});\n            }\n          } catch (e) {\n            reject(e);\n          }\n        }).then(departmntResult => {\n          debugLog(\"second\");\n          if (input != \"null\" && input != undefined) {\n            connection.query(\n              \" UPDATE hims_d_employee SET employee_group_id=?,employee_designation_id=?,\\\n                reporting_to_id=?,sub_department_id=?,\\\n              updated_date=?, updated_by=?  WHERE record_status='A' and  hims_d_employee_id=?\",\n\n              [\n                input.employee_group_id,\n                input.employee_designation_id,\n                input.reporting_to_id,\n                input.sub_department_id,\n                new Date(),\n                input.updated_by,\n                input.hims_d_employee_id\n              ],\n              (error, empResult) => {\n                if (error) {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                }\n                connection.commit(error => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n                  releaseDBConnection(db, connection);\n                  req.records = departmntResult;\n                  next();\n                });\n              }\n            );\n          } else {\n            connection.commit(error => {\n              if (error) {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n              releaseDBConnection(db, connection);\n              req.records = departmntResult;\n              next();\n            });\n          }\n        });\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by adnan:api to add employee groups\nlet addEmployeeGroups = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT  INTO hims_d_employee_group(group_description,monthly_accrual_days,airfare_eligibility,airfare_amount,\\\n            created_date,created_by,updated_date,updated_by) values(\\\n              ?,?,?,?,?,?,?,?)\",\n        [\n          input.group_description,\n          input.monthly_accrual_days,\n          input.airfare_eligibility,\n          input.airfare_amount,\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:\nlet getEmployeeGroups = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_d_employee_group_id, group_description,\\\n         monthly_accrual_days, airfare_eligibility, airfare_amount from hims_d_employee_group\\\n        where record_status='A'  order by hims_d_employee_group_id desc\",\n\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:\nlet updateEmployeeGroup = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.body);\n\n    if (\n      input.hims_d_employee_group_id != \"null\" &&\n      input.hims_d_employee_group_id != undefined\n    ) {\n      db.getConnection((error, connection) => {\n        connection.query(\n          \"UPDATE hims_d_employee_group SET group_description = ?,\\\n           monthly_accrual_days = ?, airfare_eligibility = ?, airfare_amount = ?,\\\n            updated_date=?, updated_by=?  WHERE record_status='A' and  hims_d_employee_group_id = ?\",\n\n          [\n            input.group_description,\n            input.monthly_accrual_days,\n            input.airfare_eligibility,\n            input.airfare_amount,\n            new Date(),\n            input.updated_by,\n            input.hims_d_employee_group_id\n          ],\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n\n            if (result.affectedRows > 0) {\n              req.records = result;\n              next();\n            } else {\n              req.records = { invalid_input: true };\n              next();\n            }\n          }\n        );\n      });\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by:irfan to delete\nlet deleteEmployeeGroup = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let input = extend({}, req.body);\n    if (\n      input.hims_d_employee_group_id != \"null\" &&\n      input.hims_d_employee_group_id != undefined\n    ) {\n      deleteRecord(\n        {\n          db: req.db,\n          tableName: \"hims_d_employee_group\",\n          id: req.body.hims_d_employee_group_id,\n          query:\n            \"UPDATE hims_d_employee_group SET  record_status='I' WHERE hims_d_employee_group_id=?\",\n          values: [req.body.hims_d_employee_group_id]\n        },\n        result => {\n          req.records = result;\n          next();\n        },\n        error => {\n          next(error);\n        },\n        true\n      );\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n// api to fetch employee\nlet getEmployee = (req, res, next) => {\n  let employeeWhereCondition = {\n    employee_code: \"ALL\",\n\n    sex: \"ALL\",\n    blood_group: \"ALL\",\n    employee_status: \"ALL\",\n    date_of_joining: \"ALL\",\n    date_of_resignation: \"ALL\",\n    primary_contact_no: \"ALL\",\n    email: \"ALL\"\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let pagePaging = \"\";\n    if (req.paging != null) {\n      let Page = paging(req.paging);\n      pagePaging += \" LIMIT \" + Page.pageNo + \",\" + page.pageSize;\n    }\n    let parameters = extend(\n      employeeWhereCondition,\n      req.Wherecondition == null ? {} : req.Wherecondition\n    );\n    let condition = whereCondition(extend(parameters, req.query));\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"SELECT * FROM hims_d_employee WHERE record_status ='A' AND \" +\n          condition.condition +\n          \" \" +\n          pagePaging,\n        values: condition.values\n      },\n      result => {\n        for (let i = 0; i < result.length; i++) {\n          result[i].employee_id = result[i].hims_d_employee_id;\n        }\n\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to update Employee\nlet updateEmployee = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n\n        connection.query(\n          \"UPDATE hims_d_employee SET employee_code=?,title_id=?,first_name=?,middle_name=?,last_name=?,\\\n        full_name=?,arabic_name=?,employee_designation_id=?,license_number=?,sex=?,date_of_birth=?,date_of_joining=?\\\n        ,date_of_resignation=?,address=?,address2=?,pincode=?,city_id=?,state_id=?,country_id=?,primary_contact_no=?,\\\n        secondary_contact_no=?,email=?,emergancy_contact_person=?,emergancy_contact_no=?,blood_group=?,isdoctor=?,\\\n        employee_status=?,effective_start_date=?,effective_end_date=?,updated_date=?,updated_by=?,record_status=? WHERE record_status='A' and  hims_d_employee_id=?\",\n          [\n            input.employee_code,\n            input.title_id,\n            input.first_name,\n            input.middle_name,\n            input.last_name,\n            input.full_name,\n            input.arabic_name,\n            input.employee_designation_id,\n            input.license_number,\n            input.sex,\n            input.date_of_birth,\n            input.date_of_joining,\n            input.date_of_resignation,\n            input.address,\n            input.address2,\n            input.pincode,\n            input.city_id,\n            input.state_id,\n            input.country_id,\n            input.primary_contact_no,\n            input.secondary_contact_no,\n            input.email,\n            input.emergancy_contact_person,\n            input.emergancy_contact_no,\n            input.blood_group,\n            input.isdoctor,\n            input.employee_status,\n            input.effective_start_date,\n            input.effective_end_date,\n            new Date(),\n            input.updated_by,\n            input.record_status,\n            input.hims_d_employee_id\n          ],\n          (error, result) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            if (result.length != 0) {\n              return new Promise((resolve, reject) => {\n                if (input.insertdeptDetails.length > 0) {\n                  const insurtColumns = [\n                    \"employee_id\",\n                    \"services_id\",\n                    \"sub_department_id\",\n                    \"category_speciality_id\",\n                    \"user_id\",\n                    \"created_by\",\n                    \"updated_by\"\n                  ];\n\n                  connection.query(\n                    \"INSERT INTO hims_m_employee_department_mappings(\" +\n                      insurtColumns.join(\",\") +\n                      \",created_date,updated_date) VALUES ?\",\n                    [\n                      jsonArrayToObject({\n                        sampleInputObject: insurtColumns,\n                        arrayObj: req.body.insertdeptDetails,\n                        newFieldToInsert: [new Date(), new Date()],\n                        req: req\n                      })\n                    ],\n                    (error, insertDepartResult) => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                      return resolve(insertDepartResult);\n                    }\n                  );\n                } else {\n                  resolve(result);\n                }\n              })\n                .then(resultFrmInsertDept => {\n                  debugLog(\"inside 1 then\");\n\n                  if (input.updatedeptDetails.length > 0) {\n                    debugLog(\"inside updatedeptDetails\");\n                    let inputParam = extend([], req.body.updatedeptDetails);\n                    let qry = \"\";\n\n                    for (\n                      let i = 0;\n                      i < req.body.updatedeptDetails.length;\n                      i++\n                    ) {\n                      qry +=\n                        \"UPDATE `hims_m_employee_department_mappings` SET employee_id='\" +\n                        inputParam[i].employee_id +\n                        \"', services_id='\" +\n                        inputParam[i].services_id +\n                        \"', sub_department_id='\" +\n                        inputParam[i].sub_department_id +\n                        \"', category_speciality_id='\" +\n                        inputParam[i].category_speciality_id +\n                        \"', user_id='\" +\n                        inputParam[i].user_id +\n                        \"', record_status='\" +\n                        inputParam[i].record_status +\n                        \"', updated_date='\" +\n                        new Date().toLocaleString() +\n                        \"',updated_by=\\\n'\" +\n                        req.body.updated_by +\n                        \"' WHERE record_status='A' and hims_d_employee_department_id='\" +\n                        inputParam[i].hims_d_employee_department_id +\n                        \"';\";\n                    }\n\n                    connection.query(qry, (error, updateDeptDetailResult) => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                    });\n                  }\n                })\n                .then(updateDeptResult => {\n                  debugLog(\"inside 2 then\");\n\n                  if (input.insertserviceComm.length > 0) {\n                    debugLog(\"inside insertserviceComm\");\n                    const insurtColumns = [\n                      \"provider_id\",\n                      \"services_id\",\n                      \"service_type_id\",\n                      \"op_cash_commission_percent\",\n                      \"op_credit_commission_percent\",\n                      \"ip_cash_commission_percent\",\n                      \"ip_credit_commission_percent\",\n                      \"created_by\",\n                      \"updated_by\"\n                    ];\n\n                    connection.query(\n                      \"INSERT INTO hims_m_doctor_service_commission(\" +\n                        insurtColumns.join(\",\") +\n                        \",created_date,updated_date) VALUES ?\",\n                      [\n                        jsonArrayToObject({\n                          sampleInputObject: insurtColumns,\n                          arrayObj: req.body.insertserviceComm,\n                          newFieldToInsert: [new Date(), new Date()],\n                          req: req\n                        })\n                      ],\n                      (error, serviceCommResult) => {\n                        if (error) {\n                          connection.rollback(() => {\n                            releaseDBConnection(db, connection);\n                            next(error);\n                          });\n                        }\n                        //--\n                      }\n                    );\n                  }\n                })\n                .then(serviceCommResult => {\n                  debugLog(\"inside 3 then\");\n\n                  if (input.updateserviceComm.length > 0) {\n                    debugLog(\"inside updateserviceComm\");\n                    let inputParam = extend([], req.body.updateserviceComm);\n                    let qry = \"\";\n\n                    for (\n                      let i = 0;\n                      i < req.body.updateserviceComm.length;\n                      i++\n                    ) {\n                      qry +=\n                        \"UPDATE `hims_m_doctor_service_commission` SET provider_id='\" +\n                        inputParam[i].provider_id +\n                        \"', services_id='\" +\n                        inputParam[i].services_id +\n                        \"', service_type_id='\" +\n                        inputParam[i].service_type_id +\n                        \"', op_cash_commission_percent='\" +\n                        inputParam[i].op_cash_commission_percent +\n                        \"', op_credit_commission_percent='\" +\n                        inputParam[i].op_credit_commission_percent +\n                        \"', ip_cash_commission_percent='\" +\n                        inputParam[i].ip_cash_commission_percent +\n                        \"', ip_credit_commission_percent='\" +\n                        inputParam[i].ip_credit_commission_percent +\n                        \"', record_status='\" +\n                        inputParam[i].record_status +\n                        \"', updated_date='\" +\n                        new Date().toLocaleString() +\n                        \"',updated_by=\\\n'\" +\n                        req.body.updated_by +\n                        \"' WHERE record_status='A' and hims_m_doctor_service_commission_id='\" +\n                        inputParam[i].hims_m_doctor_service_commission_id +\n                        \"';\";\n                    }\n\n                    connection.query(qry, (error, updateServiceCommResult) => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                    });\n                  }\n                })\n                .then(updateServiceCommResult => {\n                  debugLog(\"inside 4 then\");\n                  if (input.insertservTypeCommission.length > 0) {\n                    debugLog(\"inside insertservTypeCommission\");\n                    const insurtColumns = [\n                      \"provider_id\",\n                      \"service_type_id\",\n                      \"op_cash_comission_percent\",\n                      \"op_credit_comission_percent\",\n                      \"ip_cash_commission_percent\",\n                      \"ip_credit_commission_percent\",\n                      \"created_by\",\n                      \"updated_by\"\n                    ];\n\n                    connection.query(\n                      \"INSERT INTO hims_m_doctor_service_type_commission(\" +\n                        insurtColumns.join(\",\") +\n                        \",created_date,updated_date) VALUES ?\",\n                      [\n                        jsonArrayToObject({\n                          sampleInputObject: insurtColumns,\n                          arrayObj: req.body.insertservTypeCommission,\n                          newFieldToInsert: [new Date(), new Date()],\n                          req: req\n                        })\n                      ],\n                      (error, insrtServiceTypeCommResult) => {\n                        if (error) {\n                          connection.rollback(() => {\n                            releaseDBConnection(db, connection);\n                            next(error);\n                          });\n                        }\n                        //-\n                      }\n                    );\n                  }\n                })\n                .then(insrtServiceTypeCommResult => {\n                  debugLog(\"inside 5 then\");\n                  if (input.updateservTypeCommission.length > 0) {\n                    debugLog(\"inside updateservTypeCommission\");\n                    let inputParam = extend(\n                      [],\n                      req.body.updateservTypeCommission\n                    );\n                    let qry = \"\";\n\n                    for (\n                      let i = 0;\n                      i < req.body.updateservTypeCommission.length;\n                      i++\n                    ) {\n                      qry +=\n                        \"UPDATE `hims_m_doctor_service_type_commission` SET provider_id='\" +\n                        inputParam[i].provider_id +\n                        \"', service_type_id='\" +\n                        inputParam[i].service_type_id +\n                        \"', op_cash_comission_percent='\" +\n                        inputParam[i].op_cash_comission_percent +\n                        \"', op_credit_comission_percent='\" +\n                        inputParam[i].op_credit_comission_percent +\n                        \"', ip_cash_commission_percent='\" +\n                        inputParam[i].ip_cash_commission_percent +\n                        \"', ip_credit_commission_percent='\" +\n                        inputParam[i].ip_credit_commission_percent +\n                        \"', record_status='\" +\n                        inputParam[i].record_status +\n                        \"', updated_date='\" +\n                        new Date().toLocaleString() +\n                        \"',updated_by=\\\n'\" +\n                        req.body.updated_by +\n                        \"' WHERE record_status='A' and hims_m_doctor_service_type_commission_id='\" +\n                        inputParam[i].hims_m_doctor_service_type_commission_id +\n                        \"';\";\n                    }\n\n                    connection.query(qry, (error, updateServiceCommResult) => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                    });\n                  }\n                })\n\n                .finally(allResult => {\n                  debugLog(\"inside finally\");\n                  connection.commit(error => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n                    releaseDBConnection(db, connection);\n                    req.records = result;\n                    next();\n                  });\n                });\n            } else {\n              req.records = result;\n              releaseDBConnection(db, connection);\n              next();\n            }\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get eployee details\nlet getEmployeeDetails = (req, res, next) => {\n  let employeeWhereCondition = {\n    employee_code: \"ALL\",\n    sex: \"ALL\",\n    blood_group: \"ALL\",\n    employee_status: \"ALL\",\n    date_of_joining: \"ALL\",\n    date_of_resignation: \"ALL\",\n    primary_contact_no: \"ALL\",\n    email: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(employeeWhereCondition, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"SELECT E.hims_d_employee_id,E.employee_code,E.title_id,E.full_name,E.arabic_name,E.employee_designation_id,\\\n        E.license_number,E.sex,E.date_of_birth,E.date_of_joining,E.date_of_resignation,E.present_address,E.present_address2,\\\n        E.present_pincode,E.present_pincode,E.present_state_id,E.present_country_id,\\\n        E.permanent_address , E.permanent_address2, E.permanent_pincode, E.permanent_city_id, E.permanent_state_id,\\\n        E.permanent_country_id, E.primary_contact_no, E.secondary_contact_no,E.email,\\\n        E.emergency_contact_person,E.emergency_contact_no,E.blood_group,\\\n        E.isdoctor,E.employee_status,E.exclude_machine_data ,E.company_bank_id ,E.employee_bank_name , E.effective_start_date,E.effective_end_date,\\\n        E.employee_bank_ifsc_code , E.employee_account_number, E.mode_of_payment, E.accomodation_provided,\\\n         E.late_coming_rule, E.leave_salary_process, E.entitled_daily_ot, E.suspend_salary, E.gratuity_applicable, E.contract_type, E.employee_group_id,\\\n         E.weekoff_from,E.overtime_group_id, E.reporting_to_id, E.hospital_id,\\\n        ED.hims_d_employee_department_id,ED.employee_id,ED.sub_department_id,ED.category_speciality_id,ED.user_id,\\\n         ED.services_id,CS.hims_m_category_speciality_mappings_id,CS.category_id,CS.speciality_id,\\\n        CS.category_speciality_status,CS.effective_start_date,CS.effective_end_date\\\n        from hims_d_employee E,hims_m_employee_department_mappings ED,hims_m_category_speciality_mappings CS\\\n         Where E.record_status='A' and ED.record_status='A' and CS.record_status='A' and E.hims_d_employee_id=ED.employee_id\\\n          and ED.category_speciality_id=CS.hims_m_category_speciality_mappings_id AND \" +\n          where.condition +\n          \"order by E.hims_d_employee_id desc \",\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get eployee details\nlet getEmployeeCategory = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_m_category_speciality_mappings_id, category_id, speciality_id ,C.hims_employee_category_id,C.employee_category_code,C.employee_category_name,\\\n        C.employee_category_desc from hims_m_category_speciality_mappings CS,hims_d_employee_category C\\\n         where CS.record_status='A' and C.record_status='A' and  CS.category_id=C.hims_employee_category_id and speciality_id=?\",\n        [req.query.speciality_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get Doctor Service Commission\nlet getDoctorServiceCommission = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.query);\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_m_doctor_service_commission_id,provider_id,services_id,service_type_id,op_cash_commission_percent,\\\n        op_credit_commission_percent,ip_cash_commission_percent,ip_credit_commission_percent\\\n         from hims_m_doctor_service_commission where record_status='A'and provider_id=?\",\n        [input.provider_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get Doctor Service  type Commission\nlet getDoctorServiceTypeCommission = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.query);\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_m_doctor_service_type_commission_id,provider_id,service_type_id,\\\n        op_cash_comission_percent,op_credit_comission_percent,ip_cash_commission_percent,ip_credit_commission_percent\\\n         from hims_m_doctor_service_type_commission where record_status='A' and provider_id=?\",\n        [input.provider_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:api to\nlet addEarningDeduction = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT  INTO hims_d_earning_deduction (earning_deduction_code,earning_deduction_description,short_desc,\\\n          component_category,calculation_method, formula,component_frequency,calculation_type,component_type,\\\n          shortage_deduction_applicable,overtime_applicable,limit_applicable,limit_amount,\\\n          process_limit_required,process_limit_days,general_ledger,allow_round_off,round_off_type,\\\n          round_off_amount, created_date,created_by,updated_date,updated_by) values(\\\n            ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n        [\n          input.earning_deduction_code,\n          input.earning_deduction_description,\n          input.short_desc,\n          input.component_category,\n          input.calculation_method,\n          input.formula,\n          input.component_frequency,\n          input.calculation_type,\n          input.component_type,\n          input.shortage_deduction_applicable,\n          input.overtime_applicable,\n          input.limit_applicable,\n          input.limit_amount,\n          input.process_limit_required,\n          input.process_limit_days,\n          input.general_ledger,\n          input.allow_round_off,\n          input.round_off_type,\n          input.round_off_amount,\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:\nlet getEarningDeduction = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_d_earning_deduction_id,earning_deduction_code,earning_deduction_description,\\\n        short_desc,component_category,calculation_method,component_frequency,calculation_type,\\\n        component_type,shortage_deduction_applicable,overtime_applicable,limit_applicable,limit_amount,\\\n        process_limit_required,process_limit_days,general_ledger,allow_round_off,round_off_type,\\\n        round_off_amount from hims_d_earning_deduction\\\n        where record_status='A'  order by hims_d_earning_deduction_id desc\",\n\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:\nlet updateEarningDeduction = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.body);\n\n    if (\n      input.hims_d_earning_deduction_id != \"null\" &&\n      input.hims_d_earning_deduction_id != undefined\n    ) {\n      db.getConnection((error, connection) => {\n        connection.query(\n          \"update hims_d_earning_deduction set  earning_deduction_code=?,earning_deduction_description=?,short_desc=?,\\\n          component_category=?,calculation_method=?,component_frequency=?,calculation_type=?,\\\n          component_type=?,shortage_deduction_applicable=?,overtime_applicable=?,limit_applicable=?,\\\n          limit_amount=?,process_limit_required=?,process_limit_days=?,general_ledger=?,\\\n          allow_round_off=?,round_off_type=?,round_off_amount=?,\\\n            updated_date=?, updated_by=?  WHERE record_status='A' and  hims_d_earning_deduction_id = ?\",\n\n          [\n            input.earning_deduction_code,\n            input.earning_deduction_description,\n            input.short_desc,\n            input.component_category,\n            input.calculation_method,\n            input.component_frequency,\n            input.calculation_type,\n            input.component_type,\n            input.shortage_deduction_applicable,\n            input.overtime_applicable,\n            input.limit_applicable,\n            input.limit_amount,\n            input.process_limit_required,\n            input.process_limit_days,\n            input.general_ledger,\n            input.allow_round_off,\n            input.round_off_type,\n            input.round_off_amount,\n\n            new Date(),\n            input.updated_by,\n            input.hims_d_earning_deduction_id\n          ],\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n\n            if (result.affectedRows > 0) {\n              req.records = result;\n              next();\n            } else {\n              req.records = { invalid_input: true };\n              next();\n            }\n          }\n        );\n      });\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by:irfan to delete\nlet deleteEarningDeduction = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let input = extend({}, req.body);\n    if (\n      input.hims_d_earning_deduction_id != \"null\" &&\n      input.hims_d_earning_deduction_id != undefined\n    ) {\n      deleteRecord(\n        {\n          db: req.db,\n          tableName: \"hims_d_earning_deduction\",\n          id: req.body.hims_d_earning_deduction_id,\n          query:\n            \"UPDATE hims_d_earning_deduction SET  record_status='I' WHERE hims_d_earning_deduction_id=?\",\n          values: [req.body.hims_d_earning_deduction_id]\n        },\n        result => {\n          req.records = result;\n          next();\n        },\n        error => {\n          next(error);\n        },\n        true\n      );\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:api to\nlet addEmployeeIdentification = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT  INTO hims_d_employee_identification (employee_id,identity_documents_id,\\\n          identity_number,valid_upto,issue_date,alert_required,alert_date,\\\n          created_date,created_by,updated_date,updated_by) values(\\\n            ?,?,?,?,?,?,?,?,?,?,?)\",\n        [\n          input.employee_id,\n          input.identity_documents_id,\n          input.identity_number,\n          input.valid_upto,\n          input.issue_date,\n          input.alert_required,\n          input.alert_date,\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:\nlet getEmployeeIdentification = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    if (req.query.employee_id != \"null\" && req.query.employee_id != undefined) {\n      db.getConnection((error, connection) => {\n        connection.query(\n          \"select hims_d_employee_identification_id,employee_id,\\\n        identity_documents_id,identity_number,valid_upto,issue_date,alert_required,\\\n        alert_date from hims_d_employee_identification\\\n        where record_status='A' and  employee_id=? order by hims_d_employee_identification_id desc\",\n          [req.query.employee_id],\n\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n            req.records = result;\n            next();\n          }\n        );\n      });\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:\nlet updateEmployeeIdentification = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.body);\n\n    if (\n      input.hims_d_employee_identification_id != \"null\" &&\n      input.hims_d_employee_identification_id != undefined\n    ) {\n      db.getConnection((error, connection) => {\n        connection.query(\n          \"update hims_d_employee_identification set  identity_documents_id=?,\\\n          identity_number=?,valid_upto=?,issue_date=?,alert_required=?,alert_date=?,\\\n            updated_date=?, updated_by=?  WHERE record_status='A' and  hims_d_employee_identification_id = ?\",\n\n          [\n            input.identity_documents_id,\n            input.identity_number,\n            input.valid_upto,\n            input.issue_date,\n            input.alert_required,\n            input.alert_date,\n            new Date(),\n            input.updated_by,\n            input.hims_d_employee_identification_id\n          ],\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n\n            if (result.affectedRows > 0) {\n              req.records = result;\n              next();\n            } else {\n              req.records = { invalid_input: true };\n              next();\n            }\n          }\n        );\n      });\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by:irfan to delete\nlet deleteEmployeeIdentification = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let input = extend({}, req.body);\n    if (\n      input.hims_d_employee_identification_id != \"null\" &&\n      input.hims_d_employee_identification_id != undefined\n    ) {\n      deleteRecord(\n        {\n          db: req.db,\n          tableName: \"hims_d_employee_identification\",\n          id: req.body.hims_d_employee_identification_id,\n          query:\n            \"UPDATE hims_d_employee_identification SET  record_status='I' WHERE hims_d_employee_identification_id=?\",\n          values: [req.body.hims_d_employee_identification_id]\n        },\n        result => {\n          if (result.records.affectedRows > 0) {\n            req.records = result;\n            next();\n          } else {\n            req.records = { invalid_input: true };\n            next();\n          }\n        },\n        error => {\n          next(error);\n        },\n        true\n      );\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Adnan\nlet addLoanMaster = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT  INTO hims_d_loan (loan_code,loan_description,\\\n          loan_account,loan_limit_type,loan_maximum_amount,\\\n          created_date,created_by,updated_date,updated_by) values(\\\n            ?,?,?,?,?,?,?,?,?)\",\n        [\n          input.loan_code,\n          input.loan_description,\n          input.loan_account,\n          input.loan_limit_type,\n          input.loan_maximum_amount,\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Adnan\nlet getLoanMaster = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_d_loan_id,loan_code,\\\n          loan_description,loan_account,loan_limit_type,loan_maximum_amount,loan_status from hims_d_loan\\\n        where record_status='A' order by hims_d_loan_id desc\",\n\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Adnan\nlet updateLoanMaster = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.body);\n\n    if (input.hims_d_loan_id != \"null\" && input.hims_d_loan_id != undefined) {\n      db.getConnection((error, connection) => {\n        connection.query(\n          \"update hims_d_loan set  hims_d_loan_id=?,\\\n          loan_code=?,loan_description=?,loan_account=?,loan_limit_type=?,loan_maximum_amount=?,\\\n            updated_date=?, updated_by=?  WHERE record_status='A' and  hims_d_loan_id = ?\",\n\n          [\n            input.hims_d_loan_id,\n            input.loan_code,\n            input.loan_description,\n            input.loan_account,\n            input.loan_limit_type,\n            input.loan_maximum_amount,\n            new Date(),\n            input.updated_by,\n            input.hims_d_loan_id\n          ],\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n\n            if (result.affectedRows > 0) {\n              req.records = result;\n              next();\n            } else {\n              req.records = { invalid_input: true };\n              next();\n            }\n          }\n        );\n      });\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Adnan\nlet deleteLoanMaster = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let input = extend({}, req.body);\n    if (input.hims_d_loan_id != \"null\" && input.hims_d_loan_id != undefined) {\n      deleteRecord(\n        {\n          db: req.db,\n          tableName: \"hims_d_loan\",\n          id: req.body.hims_d_loan_id,\n          query:\n            \"UPDATE hims_d_loan SET  record_status='I' WHERE hims_d_loan_id=?\",\n          values: [req.body.hims_d_loan_id]\n        },\n        result => {\n          if (result.records.affectedRows > 0) {\n            req.records = result;\n            next();\n          } else {\n            req.records = { invalid_input: true };\n            next();\n          }\n        },\n        error => {\n          next(error);\n        },\n        true\n      );\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Adnan\nlet getEmployeeWorkExperience = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.query);\n\n    let employee_id = \"\";\n\n    if (input.employee_id != \"null\" && input.employee_id != undefined) {\n      employee_id = input.employee_id;\n    } else {\n      employee_id = req.userIdentity.employee_id;\n    }\n\n    if (employee_id != \"\" && employee_id != undefined) {\n      db.getConnection((error, connection) => {\n        connection.query(\n          \"select hims_d_employee_experience_id,employee_id,\\\n          from_date,to_date,previous_company_name,designation,experience_years, experience_months from hims_d_employee_experience\\\n          where record_status='A' and employee_id=?\",\n          employee_id,\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n            req.records = result;\n            next();\n          }\n        );\n      });\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Adnan\nlet addEmployeeWorkExperience = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT  INTO hims_d_employee_experience (employee_id, previous_company_name,from_date,\\\n          to_date,designation,experience_years, experience_months,\\\n          created_date,created_by,updated_date,updated_by) values(\\\n            ?,?,?,?,?,?,?,?,?,?,?)\",\n        [\n          input.employee_id,\n          input.previous_company_name,\n          input.from_date,\n          input.to_date,\n          input.designation,\n          input.experience_years,\n          input.experience_months,\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Adnan\nlet deleteEmployeeWorkExperience = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let input = extend({}, req.body);\n    if (\n      input.hims_d_employee_experience_id != \"null\" &&\n      input.hims_d_employee_experience_id != undefined\n    ) {\n      deleteRecord(\n        {\n          db: req.db,\n          tableName: \"hims_d_employee_experience\",\n          id: req.body.hims_d_employee_experience_id,\n          query:\n            \"UPDATE hims_d_employee_experience SET  record_status='I' WHERE hims_d_employee_experience_id=?\",\n          values: [req.body.hims_d_employee_experience_id]\n        },\n        result => {\n          if (result.records.affectedRows > 0) {\n            req.records = result;\n            next();\n          } else {\n            req.records = { invalid_input: true };\n            next();\n          }\n        },\n        error => {\n          next(error);\n        },\n        true\n      );\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Adnan\nlet updateEmployeeWorkExperience = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.body);\n\n    if (\n      input.hims_d_employee_experience_id != \"null\" &&\n      input.hims_d_employee_experience_id != undefined\n    ) {\n      db.getConnection((error, connection) => {\n        connection.query(\n          \"update hims_d_employee_experience set  hims_d_employee_experience_id=?,\\\n          employee_id=?,from_date=?,to_date=?,previous_company_name=?,designation=?,\\\n          experience_years=?, experience_months=?, updated_date=?, updated_by=?  WHERE record_status='A' and  hims_d_employee_experience_id = ?\",\n\n          [\n            input.hims_d_employee_experience_id,\n            input.employee_id,\n            input.from_date,\n            input.to_date,\n            input.previous_company_name,\n            input.designation,\n            input.experience_years,\n            input.experience_months,\n            new Date(),\n            input.updated_by,\n            input.hims_d_employee_experience_id\n          ],\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n\n            if (result.affectedRows > 0) {\n              req.records = result;\n              next();\n            } else {\n              req.records = { invalid_input: true };\n              next();\n            }\n          }\n        );\n      });\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Adnan\n\n//, created_date, created_by, updated_date, updated_by, record_status\n\nlet getEmployeeEducation = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.query);\n\n    let employee_id = \"\";\n\n    if (input.employee_id != \"null\" && input.employee_id != undefined) {\n      employee_id = input.employee_id;\n    } else {\n      employee_id = req.userIdentity.employee_id;\n    }\n\n    if (employee_id != \"\" && employee_id != undefined) {\n      db.getConnection((error, connection) => {\n        connection.query(\n          \"select hims_d_employee_education_id,employee_id,\\\n          qualification,qualitfication_type,year,university from hims_d_employee_education\\\n          where record_status='A' and employee_id=?\",\n          employee_id,\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n            req.records = result;\n            next();\n          }\n        );\n      });\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Adnan\nlet addEmployeeEducation = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT  INTO hims_d_employee_education (employee_id, qualification,qualitfication_type,\\\n          year,university,\\\n          created_date,created_by,updated_date,updated_by) values(\\\n            ?,?,?,?,?,?,?,?,?)\",\n        [\n          input.employee_id,\n          input.qualification,\n          input.qualitfication_type,\n          input.year,\n          input.university,\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Adnan\nlet deleteEmployeeEducation = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let input = extend({}, req.body);\n    if (\n      input.hims_d_employee_education_id != \"null\" &&\n      input.hims_d_employee_education_id != undefined\n    ) {\n      deleteRecord(\n        {\n          db: req.db,\n          tableName: \"hims_d_employee_education\",\n          id: req.body.hims_d_employee_education_id,\n          query:\n            \"UPDATE hims_d_employee_education SET  record_status='I' WHERE hims_d_employee_education_id=?\",\n          values: [req.body.hims_d_employee_education_id]\n        },\n        result => {\n          if (result.records.affectedRows > 0) {\n            req.records = result;\n            next();\n          } else {\n            req.records = { invalid_input: true };\n            next();\n          }\n        },\n        error => {\n          next(error);\n        },\n        true\n      );\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Adnan\nlet updateEmployeeEducation = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.body);\n\n    if (\n      input.hims_d_employee_education_id != \"null\" &&\n      input.hims_d_employee_education_id != undefined\n    ) {\n      db.getConnection((error, connection) => {\n        connection.query(\n          \"update hims_d_employee_education set  hims_d_employee_education_id=?,\\\n          employee_id=?,qualification=?,qualitfication_type=?,year=?,university=?,\\\n          updated_date=?, updated_by=?  WHERE record_status='A' and  hims_d_employee_education_id = ?\",\n\n          [\n            input.hims_d_employee_education_id,\n            input.employee_id,\n            input.qualification,\n            input.qualitfication_type,\n            input.year,\n            input.university,\n            new Date(),\n            input.updated_by,\n            input.hims_d_employee_education_id\n          ],\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n\n            if (result.affectedRows > 0) {\n              req.records = result;\n              next();\n            } else {\n              req.records = { invalid_input: true };\n              next();\n            }\n          }\n        );\n      });\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addEmployee,\n  addEmployeeMaster,\n  getEmployee,\n  updateEmployee,\n  getEmployeeDetails,\n  getEmployeeCategory,\n  getDoctorServiceCommission,\n  getDoctorServiceTypeCommission,\n  addEmployeeGroups,\n  getEmployeeGroups,\n  updateEmployeeGroup,\n  deleteEmployeeGroup,\n  addEarningDeduction,\n  getEarningDeduction,\n  updateEarningDeduction,\n  deleteEarningDeduction,\n  addEmployeeIdentification,\n  getEmployeeIdentification,\n  updateEmployeeIdentification,\n  deleteEmployeeIdentification,\n  addEmployeeInfo,\n  addLoanMaster,\n  getLoanMaster,\n  updateLoanMaster,\n  deleteLoanMaster,\n  getEmployeeWorkExperience,\n  addEmployeeWorkExperience,\n  deleteEmployeeWorkExperience,\n  updateEmployeeWorkExperience,\n  updateEmployeeEducation,\n  deleteEmployeeEducation,\n  addEmployeeEducation,\n  getEmployeeEducation\n};\n"]}