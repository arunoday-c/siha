{"version":3,"sources":["../../../src/model/receiptentry.js"],"names":["getReceiptEntry","req","res","next","selectWhere","pos_number","db","httpStatus","dataBaseNotInitilizedError","records","connection","hims_f_receipt_header_id","receipt_header_id","query","error","headerResult","length","receiptdetails","receptEntry","e","ReceiptPaymentInsert","P_receiptHeaderModel","receipt_number","receipt_date","billing_header_id","total_amount","created_by","userIdentity","algaeh_d_app_user_id","updated_by","record_status","counter_id","shift_id","pay_type","beginTransaction","rollback","inputParam","body","numgenId","newNumber","Date","headerRcptResult","insertId","receptSample","join","sampleInputObject","arrayObj","newFieldToInsert","RcptDetailsRecords","generateError","badRequest","module","exports"],"mappings":"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","file":"receiptentry.js","sourcesContent":["\"use strict\";\nimport {\n  whereCondition,\n  releaseDBConnection,\n  runningNumber,\n  jsonArrayToObject\n} from \"../utils\";\nimport extend from \"extend\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { debugFunction, debugLog } from \"../utils/logging\";\n\n//created by Nowshad: to get Pharmacy POS Entry\nlet getReceiptEntry = (req, res, next) => {\n  let selectWhere = {\n    pos_number: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    debugLog(\"Records: \", req.records);\n\n    let connection = req.connection;\n    let hims_f_receipt_header_id =\n      req.records.hims_f_receipt_header_id || req.records[0].receipt_header_id;\n\n    debugLog(\"hims_f_receipt_header_id: \", hims_f_receipt_header_id);\n    // PH.recieve_amount\n    connection.query(\n      \"select * from hims_f_receipt_header where hims_f_receipt_header_id=? and record_status='A'\",\n      hims_f_receipt_header_id,\n      (error, headerResult) => {\n        if (error) {\n          releaseDBConnection(db, connection);\n          next(error);\n        }\n\n        debugLog(\"result: \", headerResult);\n        if (headerResult.length != 0) {\n          debugLog(\n            \"hims_f_receipt_header_id: \",\n            headerResult[0].hims_f_receipt_header_id\n          );\n          connection.query(\n            \"select * from hims_f_receipt_details where hims_f_receipt_header_id=? and record_status='A'\",\n            headerResult[0].hims_f_receipt_header_id,\n            (error, receiptdetails) => {\n              if (error) {\n                releaseDBConnection(db, connection);\n                next(error);\n              }\n              req.receptEntry = {\n                ...headerResult[0],\n                ...{ receiptdetails }\n              };\n              releaseDBConnection(db, connection);\n              next();\n              debugLog(\"Receipt Result: \", req.receptEntry);\n            }\n          );\n        } else {\n          req.records = headerResult;\n          releaseDBConnection(db, connection);\n          next();\n        }\n      }\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by:irfan, Patient-receipt if advance or  Refund to patient\nlet ReceiptPaymentInsert = (req, res, next) => {\n  let P_receiptHeaderModel = {\n    hims_f_receipt_header_id: null,\n    receipt_number: null,\n    receipt_date: null,\n    billing_header_id: null,\n    total_amount: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id,\n\n    record_status: null,\n    counter_id: null,\n    shift_id: null,\n    pay_type: null\n  };\n\n  debugFunction(\"Receipt POS and Sales\");\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let connection = req.connection;\n    connection.beginTransaction(error => {\n      if (error) {\n        connection.rollback(() => {\n          releaseDBConnection(db, connection);\n          next(error);\n        });\n      }\n\n      let inputParam = extend(P_receiptHeaderModel, req.body);\n\n      // fuction for advance recieved from patient\n      if (inputParam.pay_type == \"R\") {\n        runningNumber(req.db, 5, \"PAT_RCPT\", (error, numgenId, newNumber) => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n          req.query.receipt_number = newNumber;\n          req.body.receipt_number = newNumber;\n          inputParam.receipt_number = newNumber;\n          debugLog(\"new R for recpt number:\", newNumber);\n          // receipt header table insert\n          connection.query(\n            \"INSERT INTO hims_f_receipt_header (receipt_number, receipt_date, billing_header_id, total_amount,\\\n              created_by, created_date, updated_by, updated_date,  counter_id, shift_id, pay_type) VALUES (?,?,?\\\n              ,?,?,?,?,?,?,?,?)\",\n            [\n              inputParam.receipt_number,\n              new Date(),\n              inputParam.billing_header_id,\n              inputParam.total_amount,\n              inputParam.created_by,\n              new Date(),\n              inputParam.updated_by,\n              new Date(),\n              inputParam.counter_id,\n              inputParam.shift_id,\n              inputParam.pay_type\n            ],\n            (error, headerRcptResult) => {\n              if (error) {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n\n              debugFunction(\"inside header result\");\n              if (\n                headerRcptResult.insertId != null &&\n                headerRcptResult.insertId != \"\"\n              ) {\n                const receptSample = [\n                  \"card_check_number\",\n                  \"expiry_date\",\n                  \"pay_type\",\n                  \"amount\",\n                  \"created_by\",\n                  \"updated_by\",\n                  \"card_type\"\n                ];\n\n                connection.query(\n                  \"INSERT  INTO hims_f_receipt_details ( \" +\n                    receptSample.join(\",\") +\n                    \",hims_f_receipt_header_id) VALUES ? \",\n                  [\n                    jsonArrayToObject({\n                      sampleInputObject: receptSample,\n                      arrayObj: inputParam.receiptdetails,\n                      req: req,\n                      newFieldToInsert: [headerRcptResult.insertId]\n                    })\n                  ],\n                  (error, RcptDetailsRecords) => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n                    debugFunction(\"inside details result\");\n                    req.records = {\n                      receipt_header_id: headerRcptResult.insertId,\n                      receipt_number: inputParam.receipt_number\n                    };\n                    releaseDBConnection(db, connection);\n                    next();\n\n                    debugLog(\"Records: \", req.records);\n                  }\n                );\n              } else {\n                debugLog(\"Data is not inerted to billing header\");\n                releaseDBConnection(db, connection);\n                connection.rollback(() => {\n                  next(\n                    httpStatus.generateError(\n                      httpStatus.badRequest,\n                      \"Technical issue while Sale Retun\"\n                    )\n                  );\n                });\n              }\n            }\n          );\n        });\n      }\n\n      //function for payment to the patient\n      if (inputParam.pay_type == \"P\") {\n        runningNumber(req.db, 7, \"PYMNT_NO\", (error, numgenId, newNumber) => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n          debugLog(\"new PAYMENT no : \", newNumber);\n          inputParam.receipt_number = newNumber;\n          req.body.receipt_number = newNumber;\n\n          //R-->recieved amount   P-->payback amount\n\n          // receipt header table insert\n          connection.query(\n            \"INSERT INTO hims_f_receipt_header (receipt_number, receipt_date, billing_header_id, total_amount,\\\n                created_by, created_date, updated_by, updated_date,  counter_id, shift_id, pay_type) VALUES (?,?,?\\\n                ,?,?,?,?,?,?,?,?)\",\n            [\n              inputParam.receipt_number,\n              new Date(),\n              inputParam.billing_header_id,\n              inputParam.total_amount,\n              inputParam.created_by,\n              new Date(),\n              inputParam.updated_by,\n              new Date(),\n              inputParam.counter_id,\n              inputParam.shift_id,\n              inputParam.pay_type\n            ],\n            (error, headerRcptResult) => {\n              if (error) {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n\n              debugFunction(\"inside header result\");\n              debugLog(\"Insert : \", inputParam.receiptdetails);\n              if (\n                headerRcptResult.insertId != null &&\n                headerRcptResult.insertId != \"\"\n              ) {\n                // receipt details table insert\n                const receptSample = [\n                  \"card_check_number\",\n                  \"expiry_date\",\n                  \"pay_type\",\n                  \"amount\",\n                  \"created_by\",\n                  \"updated_by\",\n                  \"card_type\"\n                ];\n                connection.query(\n                  \"INSERT  INTO hims_f_receipt_details ( \" +\n                    receptSample.join(\",\") +\n                    \",hims_f_receipt_header_id) VALUES ? \",\n                  [\n                    jsonArrayToObject({\n                      sampleInputObject: receptSample,\n                      arrayObj: inputParam.receiptdetails,\n                      req: req,\n                      newFieldToInsert: [headerRcptResult.insertId]\n                    })\n                  ],\n                  (error, RcptDetailsRecords) => {\n                    debugLog(\"Error : \", error);\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n                    debugFunction(\"inside details result\");\n                    req.records = {\n                      receipt_header_id: headerRcptResult.insertId,\n                      receipt_number: inputParam.receipt_number\n                    };\n                    releaseDBConnection(db, connection);\n                    next();\n\n                    debugLog(\"Records: \", req.records);\n                  }\n                );\n              } else {\n                debugLog(\"Data is not inerted to billing header\");\n                releaseDBConnection(db, connection);\n                connection.rollback(() => {\n                  next(\n                    httpStatus.generateError(\n                      httpStatus.badRequest,\n                      \"Technical issue while Sale Retun\"\n                    )\n                  );\n                });\n              }\n            }\n          );\n        }); //end of runing number PYMNT\n      }\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  getReceiptEntry,\n  ReceiptPaymentInsert\n};\n"]}