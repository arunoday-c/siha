{"version":3,"sources":["../../../src/model/generateReport.js"],"names":["getReport","req","res","next","inputParam","query","reportName","httpStatus","generateError","badRequest","queryConfig","unAuthorized","db","dataBaseNotInitilizedError","_groupby","groupBy","whereCondition","inputs","reportQuery","orderBy","getConnection","error","connection","result","records","e","module","exports"],"mappings":";;AAAA;;AACA;;;;AACA;;AACA;;;;AAEA,IAAIA,YAAY,SAAZA,SAAY,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClC,8BAAc,WAAd;AACA,MAAI;AACF,QAAIC,aAAaH,IAAII,KAArB;AACA,2BAAS,wBAAT,EAAmCD,UAAnC;AACA,QAAIA,WAAWE,UAAX,IAAyB,IAAzB,IAAiCF,WAAWE,UAAX,IAAyB,EAA9D,EACEH,KACEI,qBAAWC,aAAX,CACED,qBAAWE,UADb,EAEE,0CAFF,CADF;;AAOF,QAAIC,cAAc,qCAAmBN,WAAWE,UAA9B,CAAlB;AACA,QAAII,eAAe,IAAnB,EAAyB;AACvBP,WACEI,qBAAWC,aAAX,CACED,qBAAWI,YADb,EAEE,4BAFF,CADF;AAMD;AACD,QAAIC,KAAKX,IAAIW,EAAb;AACA,QAAIA,MAAM,IAAV,EAAgB;AACdT,WAAKI,qBAAWM,0BAAX,EAAL;AACD;AACD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,QAAMC,WACJJ,YAAYK,OAAZ,IAAuB,IAAvB,GAA8B,MAAML,YAAYK,OAAlB,GAA4B,GAA1D,GAAgE,EADlE;;AAGA,QAAIC,iBACFf,IAAII,KAAJ,CAAUY,MAAV,IAAoB,IAApB,GAA2B,EAA3B,GAAgC,UAAUhB,IAAII,KAAJ,CAAUY,MADtD;;AAGA,QAAIZ,QACFK,YAAYQ,WAAZ,GACAF,cADA,GAEAF,QAFA,GAGA,YAHA,GAIAJ,YAAYS,OAJZ,GAKA,IANF;AAOA,2BAAS,cAAT,EAAyBd,KAAzB;AACAO,OAAGQ,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTlB,aAAKkB,KAAL;AACD;AACDC,iBAAWjB,KAAX,CAAiBA,KAAjB,EAAwB,UAACgB,KAAD,EAAQE,MAAR,EAAmB;AACzC,wCAAoBX,EAApB,EAAwBU,UAAxB;AACA,YAAID,KAAJ,EAAW;AACTlB,eAAKkB,KAAL;AACD;AACDpB,YAAIuB,OAAJ,GAAcD,MAAd;AACApB;AACD,OAPD;AAQD,KAZD;AAaD,GA/DD,CA+DE,OAAOsB,CAAP,EAAU;AACVtB,SAAKsB,CAAL;AACD;AACF,CApED;;AAsEAC,OAAOC,OAAP,GAAiB;AACf3B;AADe,CAAjB","file":"generateReport.js","sourcesContent":["import { algaehReportConfig } from \"../utils/reportMaker\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { releaseDBConnection } from \"../utils\";\nimport { debugFunction, debugLog } from \"../utils/logging\";\n\nlet getReport = (req, res, next) => {\n  debugFunction(\"getReport\");\n  try {\n    let inputParam = req.query;\n    debugLog(\"Query based Parameters\", inputParam);\n    if (inputParam.reportName == null || inputParam.reportName == \"\")\n      next(\n        httpStatus.generateError(\n          httpStatus.badRequest,\n          \"Please provide correct report parameters\"\n        )\n      );\n\n    let queryConfig = algaehReportConfig(inputParam.reportName);\n    if (queryConfig == null) {\n      next(\n        httpStatus.generateError(\n          httpStatus.unAuthorized,\n          \"No access for this content\"\n        )\n      );\n    }\n    let db = req.db;\n    if (db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    // let limit =\n    //   req.query.pageSize == null || req.query.pageSize === 0\n    //     ? 5\n    //     : req.query.pageSize;\n\n    // let offSet = req.query.pageNo;\n\n    // let whereCondition =\n    //   req.query.fieldName == null        ? \" \"        : \" and upper(\" +          req.query.fieldName +         \") like  upper('%\" +\n    //       req.query.fieldContains +\n    //       \"%')\";\n\n    const _groupby =\n      queryConfig.groupBy != null ? \" \" + queryConfig.groupBy + \" \" : \"\";\n\n    let whereCondition =\n      req.query.inputs == null ? \"\" : \" and \" + req.query.inputs;\n\n    let query =\n      queryConfig.reportQuery +\n      whereCondition +\n      _groupby +\n      \" order by \" +\n      queryConfig.orderBy +\n      \" ;\";\n    debugLog(\"SQL Query : \", query);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.query(query, (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  getReport\n};\n"]}