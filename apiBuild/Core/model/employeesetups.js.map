{"version":3,"sources":["../../../src/model/employeesetups.js"],"names":["getDesignations","req","res","next","desgn","hims_d_designation_id","db","httpStatus","dataBaseNotInitilizedError","pagePaging","paging","Page","pageNo","page","pageSize","condition","query","values","records","result","error","e","addDesignation","input","body","getConnection","connection","designation_code","designation","Date","created_by","updated_by","deleteDesignation","undefined","tableName","id","affectedRows","invalid_input","getEmpSpeciality","select","hims_d_employee_speciality_id","sub_department_id","getEmpCategory","hims_employee_category_id","getOvertimeGroups","hims_d_overtime_group_id","addOvertimeGroups","overtime_group_code","overtime_group_description","working_day_hour","weekoff_day_hour","holiday_hour","working_day_rate","weekoff_day_rate","holiday_rate","payment_type","deleteOvertimeGroups","updateOvertimeGroups","module","exports"],"mappings":"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","file":"employeesetups.js","sourcesContent":["import extend from \"extend\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { debugLog } from \"../utils/logging\";\nimport {\n  selectStatement,\n  whereCondition,\n  deleteRecord,\n  releaseDBConnection\n} from \"../utils\";\n\nlet getDesignations = (req, res, next) => {\n  let desgn = {\n    hims_d_designation_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let pagePaging = \"\";\n    if (req.paging != null) {\n      let Page = paging(req.paging);\n      pagePaging += \" LIMIT \" + Page.pageNo + \",\" + page.pageSize;\n    }\n\n    let condition = whereCondition(extend(desgn, req.query));\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"SELECT hims_d_designation_id, designation_code, designation FROM `hims_d_designation` WHERE `record_status`='A' AND \" +\n          condition.condition +\n          \" \" +\n          pagePaging,\n        values: condition.values\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n//created by irfan:api to\nlet addDesignation = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT  INTO hims_d_designation (designation_code, designation, \\\n          created_date,created_by,updated_date,updated_by) values(\\\n          ?,?,?,?,?,?)\",\n        [\n          input.designation_code,\n          input.designation,\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n//created by:irfan to delete\nlet deleteDesignation = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let input = extend({}, req.body);\n    if (\n      input.hims_d_designation_id != \"null\" &&\n      input.hims_d_designation_id != undefined\n    ) {\n      deleteRecord(\n        {\n          db: req.db,\n          tableName: \"hims_d_designation\",\n          id: req.body.hims_d_designation_id,\n          query:\n            \"UPDATE hims_d_designation SET  record_status='I' WHERE hims_d_designation_id=?\",\n          values: [req.body.hims_d_designation_id]\n        },\n        result => {\n          if (result.records.affectedRows > 0) {\n            debugLog(\"result\", result);\n            req.records = result;\n            next();\n          } else {\n            req.records = { invalid_input: true };\n\n            debugLog(\"els\");\n            next();\n          }\n        },\n        error => {\n          next(error);\n        },\n        true\n      );\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\nlet getEmpSpeciality = (req, res, next) => {\n  let select = {\n    hims_d_employee_speciality_id: \"ALL\",\n    sub_department_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n\n    let condition = whereCondition(extend(select, req.query));\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"SELECT hims_d_employee_speciality_id, sub_department_id, speciality_code, speciality_name, \\\n          arabic_name, speciality_desc, speciality_status FROM `hims_d_employee_speciality` WHERE `record_status`='A' AND \" +\n          condition.condition +\n          \" order by hims_d_employee_speciality_id desc \",\n        values: condition.values\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet getEmpCategory = (req, res, next) => {\n  let select = {\n    hims_employee_category_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n\n    let condition = whereCondition(extend(select, req.query));\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"SELECT hims_employee_category_id, employee_category_code, employee_category_name, arabic_name,\\\n           employee_category_desc, employee_category_status\\\n          FROM `hims_d_employee_category` WHERE `record_status`='A' AND \" +\n          condition.condition +\n          \" order by hims_employee_category_id desc \",\n        values: condition.values\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by adnan to get overtime groups\nlet getOvertimeGroups = (req, res, next) => {\n  let select = {\n    hims_d_overtime_group_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n\n    let condition = whereCondition(extend(select, req.query));\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"SELECT hims_d_overtime_group_id, overtime_group_code, overtime_group_description, overtime_group_status,\\\n          working_day_hour, weekoff_day_hour, holiday_hour, working_day_rate , weekoff_day_rate, holiday_rate,\\\n          payment_type\\\n          FROM `hims_d_overtime_group` WHERE `record_status`='A' AND \" +\n          condition.condition +\n          \" order by hims_d_overtime_group_id desc \",\n        values: condition.values\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by adnan to add overtime groups\nlet addOvertimeGroups = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT  INTO hims_d_overtime_group (overtime_group_code, overtime_group_description,\\\n          working_day_hour, weekoff_day_hour, holiday_hour, working_day_rate , weekoff_day_rate, holiday_rate, payment_type,\\\n          created_date,created_by,updated_date,updated_by) values(\\\n          ?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n        [\n          input.overtime_group_code,\n          input.overtime_group_description,\n          input.working_day_hour,\n          input.weekoff_day_hour,\n          input.holiday_hour,\n          input.working_day_rate,\n          input.weekoff_day_rate,\n          input.holiday_rate,\n          input.payment_type,\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by adnan to delete overtime groups\nlet deleteOvertimeGroups = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let input = extend({}, req.body);\n    if (\n      input.hims_d_overtime_group_id != \"null\" &&\n      input.hims_d_overtime_group_id != undefined\n    ) {\n      deleteRecord(\n        {\n          db: req.db,\n          tableName: \"hims_d_overtime_group\",\n          id: req.body.hims_d_overtime_group_id,\n          query:\n            \"UPDATE hims_d_overtime_group SET  record_status='I' WHERE hims_d_overtime_group_id=?\",\n          values: [req.body.hims_d_overtime_group_id]\n        },\n        result => {\n          if (result.records.affectedRows > 0) {\n            debugLog(\"result\", result);\n            req.records = result;\n            next();\n          } else {\n            req.records = { invalid_input: true };\n\n            debugLog(\"els\");\n            next();\n          }\n        },\n        error => {\n          next(error);\n        },\n        true\n      );\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet updateOvertimeGroups = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.body);\n\n    if (\n      input.hims_d_overtime_group_id != \"null\" &&\n      input.hims_d_overtime_group_id != undefined\n    ) {\n      db.getConnection((error, connection) => {\n        connection.query(\n          \"UPDATE hims_d_overtime_group SET overtime_group_code = ?,\\\n          overtime_group_description = ?, working_day_hour = ?, weekoff_day_hour = ?, holiday_hour = ? , working_day_rate = ?,\\\n          weekoff_day_rate = ?, holiday_rate = ?, payment_type = ?,\\\n            updated_date=?, updated_by=?  WHERE record_status='A' and  hims_d_overtime_group_id = ?\",\n\n          [\n            input.overtime_group_code,\n            input.overtime_group_description,\n            input.working_day_hour,\n            input.weekoff_day_hour,\n            input.holiday_hour,\n            input.working_day_rate,\n            input.weekoff_day_rate,\n            input.holiday_rate,\n            input.payment_type,\n            new Date(),\n            input.updated_by,\n            input.hims_d_overtime_group_id\n          ],\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n\n            if (result.affectedRows > 0) {\n              req.records = result;\n              next();\n            } else {\n              req.records = { invalid_input: true };\n              next();\n            }\n          }\n        );\n      });\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  getDesignations,\n  getEmpSpeciality,\n  getEmpCategory,\n  addDesignation,\n  deleteDesignation,\n  getOvertimeGroups,\n  addOvertimeGroups,\n  deleteOvertimeGroups,\n  updateOvertimeGroups\n};\n"]}