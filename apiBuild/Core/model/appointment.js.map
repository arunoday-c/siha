{"version":3,"sources":["../../../src/model/appointment.js"],"names":["addAppointmentStatus","req","res","next","db","httpStatus","dataBaseNotInitilizedError","input","body","getConnection","error","connection","beginTransaction","rollback","query","color_code","description","default_status","steps","Date","created_by","updated_by","result","insertId","defStatusRsult","commit","records","crtRsult","e","addAppointmentRoom","addAppointmentClinic","sub_department_id","provider_id","room_id","getAppointmentStatus","getAppointmentRoom","selectWhere","hims_d_appointment_room_id","where","condition","values","getAppointmentClinic","hims_d_appointment_clinic_id","updateAppointmentStatus","record_status","hims_d_appointment_status_id","deleteRsult","appointmentStatusAuthorized","updateAppointmentRoom","room_active","deleteAppointmentRoom","tableName","id","updateAppointmentClinic","BACKUPaddDoctorsSchedule","from_date","sub_dept_id","schedule_description","month","year","to_date","from_work_hr","to_work_hr","work_break1","from_break_hr1","to_break_hr1","work_break2","from_break_hr2","to_break_hr2","monday","tuesday","wednesday","thursday","friday","saturday","sunday","working_days","inputDays","d","push","daylist","getDaysArray","map","v","toLocaleString","length","schedule_detail","doc","doctorSchedule","i","schedule_date","insurtColumns","join","sampleInputObject","arrayObj","newFieldToInsert","schedule_detailResult","message","addDoctorsSchedule","nightShift","newDateList","occupiedDoctorDates","OccupiedDoctorDatesList","LINQ","Select","s","ToArray","clashingDate","index","indexOf","format","appointment_schedule_header_idS","Where","w","appointment_schedule_header_id","j","timeChecking","schedule_exist","start","end","days","arr","dt","setDate","getDate","dat","day","getDay","BackupgetDaysArray","addLeaveOrModifySchedule","clinic_id","from_time","to_time","modified","getDoctorsScheduledList","outputArray","selectDoctor","schedule_header_id_all","hims_d_appointment_schedule_header_id","results","getDoctorScheduleDateWise","Promise","resolve","reject","modifyResult","then","appResult","obj","patientList","getDoctorScheduleDateWiseBACKup3_nov","getDoctorScheduleToModify","activeSchedule","ids","hims_d_appointment_schedule_detail_id","modResult","mergeResult","finResult","OrderBy","updateDoctorScheduleDateWise","hims_d_appointment_schedule_modify_id","slot","updateModResult","deleteDoctorFromSchedule","deleteDoctorFromScheduleBACkUP03_nov","updateSchedule","schedule_status","addDoctorToExistingSchedule","BAckupaddDoctorToExistingSchedule","newDates","providrDates","existingDates","addPatientAppointmentBACKUP_20_nov","title_id","patient_id","patient_code","number_of_slot","appointment_date","appointment_from_time","appointment_to_time","appointment_status_id","patient_name","arabic_name","date_of_birth","age","contact_number","email","send_to_provider","gender","appointment_remarks","is_stand_by","addPatientAppointment","slotResult","slotExist","bookedtwice","updatePatientAppointmentBACKUP_20_nov","confirmed","confirmed_by","comfirmed_date","cancelled","cancelled_by","cancelled_date","cancel_reason","hims_f_patient_appointment_id","updatePatientAppointment","getPatientAppointment","getEmployeeServiceID","employee_id","cancelPatientAppointment","module","exports"],"mappings":"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","file":"appointment.js","sourcesContent":["\"use strict\";\nimport extend from \"extend\";\nimport {\n  whereCondition,\n  deleteRecord,\n  releaseDBConnection,\n  jsonArrayToObject\n} from \"../utils\";\nimport moment from \"moment\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { LINQ } from \"node-linq\";\nimport { debugLog } from \"../utils/logging\";\n\n//created by irfan: to add appointment_status\nlet addAppointmentStatus = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        connection.query(\n          \"INSERT INTO `hims_d_appointment_status` (color_code, description, default_status,steps, created_date, created_by, updated_date, updated_by)\\\n          VALUE(?,?,?,?,?,?,?,?)\",\n          [\n            input.color_code,\n            input.description,\n            input.default_status,\n            input.steps,\n\n            new Date(),\n            input.created_by,\n            new Date(),\n            input.updated_by\n          ],\n          (error, result) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n\n            //update hims_d_appointment_status  set steps=1 where hims_d_appointment_status_id=? and record_status='A';\n            if (input.default_status == \"Y\") {\n              connection.query(\n                \"UPDATE `hims_d_appointment_status` SET  default_status='N'   WHERE default_status='Y' and record_status='A' and  hims_d_appointment_status_id <> ?;\\\n                \",\n                [result.insertId, result.insertId],\n                (error, defStatusRsult) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n\n                  connection.commit(error => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n                    releaseDBConnection(db, connection);\n                    req.records = result;\n                    next();\n                  });\n                }\n              );\n            } else if (input.default_status == \"C\") {\n              connection.query(\n                \"update hims_d_appointment_status set default_status='N' where default_status='C' and record_status='A' and hims_d_appointment_status_id <>? \",\n                [result.insertId],\n                (error, crtRsult) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n\n                  connection.commit(error => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n                    releaseDBConnection(db, connection);\n                    req.records = crtRsult;\n                    next();\n                  });\n                }\n              );\n            } else {\n              connection.commit(error => {\n                if (error) {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                }\n                releaseDBConnection(db, connection);\n                req.records = result;\n                next();\n              });\n            }\n          }\n        );\n        // req.records = result;\n        // next();\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add appointment_room\nlet addAppointmentRoom = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT INTO `hims_d_appointment_room` (description, created_date, created_by, updated_date, updated_by)\\\n          VALUE(?,?,?,?,?)\",\n        [\n          input.description,\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add appointment_clinic\nlet addAppointmentClinic = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT INTO `hims_d_appointment_clinic` (description, sub_department_id, provider_id, room_id, created_date, created_by, updated_date, updated_by)\\\n          VALUE(?,?,?,?,?,?,?,?)\",\n        [\n          input.description,\n          input.sub_department_id,\n          input.provider_id,\n          input.room_id,\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get Appointment Status\nlet getAppointmentStatus = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_d_appointment_status_id, color_code, description, default_status,steps,authorized FROM hims_d_appointment_status where record_status='A'  order by steps \",\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get Appointment Room\nlet getAppointmentRoom = (req, res, next) => {\n  let selectWhere = {\n    hims_d_appointment_room_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_d_appointment_room_id, description, room_active FROM hims_d_appointment_room where record_status='A' AND\" +\n          where.condition +\n          \" order by hims_d_appointment_room_id desc\",\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get Appointment Clinic\nlet getAppointmentClinic = (req, res, next) => {\n  let selectWhere = {\n    hims_d_appointment_clinic_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_d_appointment_clinic_id,description, sub_department_id, provider_id, room_id FROM hims_d_appointment_clinic where record_status='A' AND\" +\n          where.condition +\n          \" order by hims_d_appointment_clinic_id desc\",\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to update Appointment Status\nlet updateAppointmentStatus = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        connection.query(\n          \"UPDATE `hims_d_appointment_status` SET color_code=?, description=?, default_status=?,steps=?,\\\n           updated_date=?, updated_by=? ,`record_status`=? WHERE  `record_status`='A' and `hims_d_appointment_status_id`=?;\",\n          [\n            input.color_code,\n            input.description,\n            input.default_status,\n            input.steps,\n            new Date(),\n            input.updated_by,\n            input.record_status,\n            input.hims_d_appointment_status_id\n          ],\n          (error, result) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n\n            if (input.default_status == \"Y\" && input.record_status == \"A\") {\n              connection.query(\n                \"UPDATE `hims_d_appointment_status` SET  default_status='N'\\\n            WHERE  record_status='A' and default_status!='C' and  hims_d_appointment_status_id <> ?; \\\n            update hims_d_appointment_status  set steps=null where hims_d_appointment_status_id>0;\\\n            update hims_d_appointment_status  set steps=1 where hims_d_appointment_status_id=? and record_status='A';\",\n                [\n                  input.hims_d_appointment_status_id,\n                  input.hims_d_appointment_status_id\n                ],\n                (error, defStatusRsult) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n\n                  connection.commit(error => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n\n                    req.records = result;\n                    next();\n                  });\n                }\n              );\n            } else if (\n              input.default_status == \"C\" &&\n              input.record_status == \"A\"\n            ) {\n              connection.query(\n                \"update hims_d_appointment_status set default_status='N' where default_status='C' and record_status='A' and hims_d_appointment_status_id <>? \",\n                [input.hims_d_appointment_status_id],\n                (error, crtRsult) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n\n                  connection.commit(error => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n\n                    req.records = crtRsult;\n                    next();\n                  });\n                }\n              );\n            } else if (input.record_status == \"I\") {\n              connection.query(\n                \"update hims_d_appointment_status  set steps=null where hims_d_appointment_status_id=?; \",\n                [input.hims_d_appointment_status_id],\n                (error, deleteRsult) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n\n                  connection.commit(error => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n\n                    req.records = deleteRsult;\n                    next();\n                  });\n                }\n              );\n            } else {\n              connection.commit(error => {\n                if (error) {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                }\n                releaseDBConnection(db, connection);\n                req.records = result;\n                next();\n              });\n            }\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n//created by irfan: to apointment status Authorized\nlet appointmentStatusAuthorized = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"update hims_d_appointment_status  set authorized='Y',updated_date=?, updated_by=? where record_status='A' and hims_d_appointment_status_id>0 ;\",\n        [new Date(), input.updated_by],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to update Appointment Room\nlet updateAppointmentRoom = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"UPDATE `hims_d_appointment_room` SET  description=?,room_active=?,\\\n           updated_date=?, updated_by=?  WHERE  `record_status`='A' and `hims_d_appointment_room_id`=?;\",\n        [\n          input.description,\n          input.room_active,\n          new Date(),\n          input.updated_by,\n          input.hims_d_appointment_room_id\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to delete Appointment Room\nlet deleteAppointmentRoom = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n\n    debugLog(\"delete rom\");\n    deleteRecord(\n      {\n        db: req.db,\n        tableName: \"hims_d_appointment_room\",\n        id: req.body.hims_d_appointment_room_id,\n        query:\n          \"UPDATE hims_d_appointment_room SET  record_status='I' WHERE hims_d_appointment_room_id=?\",\n        values: [req.body.hims_d_appointment_room_id]\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to  update Appointment Clinic\nlet updateAppointmentClinic = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.query(\n        \"UPDATE `hims_d_appointment_clinic` SET  description=?,sub_department_id=?, provider_id=?, room_id=?,\\\n           updated_date=?, updated_by=? ,`record_status`=? WHERE  `record_status`='A' and `hims_d_appointment_clinic_id`=?;\",\n        [\n          input.description,\n          input.sub_department_id,\n          input.provider_id,\n          input.room_id,\n          new Date(),\n          input.updated_by,\n          input.record_status,\n          input.hims_d_appointment_clinic_id\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to create new schedule and add doctors in this schedule\nlet BACKUPaddDoctorsSchedule = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    debugLog(\"input:\", input);\n    debugLog(\"from_Date:\", new Date(input.from_date));\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        //creating schedule\n        connection.query(\n          \"INSERT INTO `hims_d_appointment_schedule_header` (sub_dept_id,schedule_description,`month`,`year`,from_date,to_date,\\\n          from_work_hr,to_work_hr,work_break1,from_break_hr1,to_break_hr1,work_break2,from_break_hr2,to_break_hr2,monday,tuesday,wednesday,\\\n          thursday,friday,saturday,sunday,created_by,created_date,updated_by,updated_date)\\\n          VALUE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n          [\n            input.sub_dept_id,\n            input.schedule_description,\n            input.month,\n            input.year,\n            input.from_date,\n            input.to_date,\n            input.from_work_hr,\n            input.to_work_hr,\n            input.work_break1,\n            input.from_break_hr1,\n            input.to_break_hr1,\n            input.work_break2,\n            input.from_break_hr2,\n            input.to_break_hr2,\n            input.monday,\n            input.tuesday,\n            input.wednesday,\n            input.thursday,\n            input.friday,\n            input.saturday,\n            input.sunday,\n            req.body.created_by,\n            new Date(),\n            req.body.updated_by,\n            new Date()\n          ],\n          (error, result) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n\n            let working_days = [];\n\n            let inputDays = [\n              req.body.sunday,\n              req.body.monday,\n              req.body.tuesday,\n              req.body.wednesday,\n              req.body.thursday,\n              req.body.friday,\n              req.body.saturday\n            ];\n\n            for (let d = 0; d < 7; d++) {\n              if (inputDays[d] == \"Y\") {\n                working_days.push(d);\n              }\n            }\n\n            let daylist = getDaysArray(\n              new Date(input.from_date),\n              new Date(input.to_date),\n              working_days\n            );\n            daylist.map(v => v.toLocaleString());\n            //.slice(0, 10)).join(\"\");\n\n            debugLog(\"daylist:\", daylist.length);\n            if (input.schedule_detail.length != 0) {\n              if (result.insertId != null) {\n                for (let doc = 0; doc < input.schedule_detail.length; doc++) {\n                  let doctorSchedule = [];\n\n                  for (let i = 0; i < daylist.length; i++) {\n                    doctorSchedule.push({\n                      ...input.schedule_detail[doc],\n                      ...{ schedule_date: daylist[i] }\n                    });\n                  }\n                  // adding doctors to created schedule\n                  const insurtColumns = [\n                    \"provider_id\",\n                    \"clinic_id\",\n                    \"slot\",\n                    \"schedule_date\",\n                    \"created_by\",\n                    \"updated_by\"\n                  ];\n\n                  connection.query(\n                    \"INSERT INTO hims_d_appointment_schedule_detail(\" +\n                      insurtColumns.join(\",\") +\n                      \",`appointment_schedule_header_id`,created_date,updated_date) VALUES ?\",\n                    [\n                      jsonArrayToObject({\n                        sampleInputObject: insurtColumns,\n                        arrayObj: doctorSchedule,\n                        newFieldToInsert: [\n                          result.insertId,\n                          new Date(),\n                          new Date()\n                        ],\n                        req: req\n                      })\n                    ],\n                    (error, schedule_detailResult) => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n\n                      connection.commit(error => {\n                        if (error) {\n                          connection.rollback(() => {\n                            releaseDBConnection(db, connection);\n                            next(error);\n                          });\n                        }\n                        releaseDBConnection(db, connection);\n                        req.records = schedule_detailResult;\n                        next();\n                      });\n                    }\n                  );\n                }\n              }\n            } else {\n              releaseDBConnection(db, connection);\n              req.records = { message: \"please select doctors\" };\n              next();\n            }\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n//created by irfan: to create new schedule and add doctors in this schedule\nlet addDoctorsSchedule = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    debugLog(\"input:\", input);\n    debugLog(\"from_Date:\", new Date(input.from_date));\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        //creating schedule\n        connection.query(\n          \"INSERT INTO `hims_d_appointment_schedule_header` (sub_dept_id,schedule_description,`month`,`year`,from_date,to_date,\\\n          from_work_hr,to_work_hr,work_break1,from_break_hr1,to_break_hr1,work_break2,from_break_hr2,to_break_hr2,monday,tuesday,wednesday,\\\n          thursday,friday,saturday,sunday,created_by,created_date,updated_by,updated_date)\\\n          VALUE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n          [\n            input.sub_dept_id,\n            input.schedule_description,\n            input.month,\n            input.year,\n            input.from_date,\n            input.to_date,\n            input.from_work_hr,\n            input.to_work_hr,\n            input.work_break1,\n            input.from_break_hr1,\n            input.to_break_hr1,\n            input.work_break2,\n            input.from_break_hr2,\n            input.to_break_hr2,\n            input.monday,\n            input.tuesday,\n            input.wednesday,\n            input.thursday,\n            input.friday,\n            input.saturday,\n            input.sunday,\n            req.body.created_by,\n            new Date(),\n            req.body.updated_by,\n            new Date()\n          ],\n          (error, result) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n\n            let working_days = [];\n\n            let inputDays = [\n              req.body.sunday,\n              req.body.monday,\n              req.body.tuesday,\n              req.body.wednesday,\n              req.body.thursday,\n              req.body.friday,\n              req.body.saturday\n            ];\n\n            for (let d = 0; d < 7; d++) {\n              if (inputDays[d] == \"Y\") {\n                working_days.push(d);\n              }\n            }\n            let nightShift = \"\";\n\n            if (input.from_work_hr > input.to_work_hr) {\n              nightShift = 1;\n\n              debugLog(\"nightShift:\", nightShift);\n            }\n\n            let newDateList = getDaysArray(\n              new Date(input.from_date),\n              new Date(input.to_date),\n              working_days,\n              nightShift\n            );\n            newDateList.map(v => v.toLocaleString());\n            //.slice(0, 10)).join(\"\");\n\n            debugLog(\"newDateList:\", newDateList.length);\n\n            // adding doctors to created schedule\n            if (input.schedule_detail.length != 0) {\n              if (result.insertId != null) {\n                //foreach doctor perfom below functionality\n                for (let doc = 0; doc < input.schedule_detail.length; doc++) {\n                  let doctorSchedule = [];\n\n                  for (let i = 0; i < newDateList.length; i++) {\n                    doctorSchedule.push({\n                      ...input.schedule_detail[doc],\n                      ...{ schedule_date: newDateList[i] }\n                    });\n                  }\n\n                  //get list of dates which are already scheduled for this doctor\n                  connection.query(\n                    \"select hims_d_appointment_schedule_detail_id,appointment_schedule_header_id,schedule_date from hims_d_appointment_schedule_detail  where provider_id=? and schedule_date>?;\",\n                    [input.schedule_detail[doc].provider_id, new Date()],\n                    (error, occupiedDoctorDates) => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n\n                      let OccupiedDoctorDatesList = new LINQ(\n                        occupiedDoctorDates\n                      )\n                        .Select(s => s.schedule_date)\n                        .ToArray();\n\n                      let clashingDate = [];\n                      new LINQ(newDateList).Select(s => {\n                        const index = OccupiedDoctorDatesList.indexOf(\n                          moment(s).format(\"YYYY-MM-DD\")\n                        );\n                        if (index > -1) {\n                          clashingDate.push(OccupiedDoctorDatesList[index]);\n                        }\n                      });\n\n                      debugLog(\"clashingDate: \", clashingDate);\n\n                      //if date clashes check for time else add\n                      if (clashingDate.length > 0) {\n                        debugLog(\"functionality after clash\");\n                        let appointment_schedule_header_idS = new LINQ(\n                          occupiedDoctorDates\n                        )\n                          .Where(w => w.schedule_date == clashingDate[0])\n                          .Select(s => s.appointment_schedule_header_id)\n                          .ToArray();\n                        //obtain existing schedule time\n\n                        debugLog(\n                          \"appointment_schedule_header_idS: \",\n                          appointment_schedule_header_idS\n                        );\n\n                        // SELECT  hims_d_appointment_schedule_header_id,from_work_hr,to_work_hr from hims_d_appointment_schedule_header where ((? BETWEEN time(from_work_hr) AND time(to_work_hr))\\\n                        //    or  (? BETWEEN time(from_work_hr) AND time(to_work_hr)))\\\n                        //   and hims_d_appointment_schedule_header_id=?\n                        // SELECT  hims_d_appointment_schedule_header_id,from_work_hr,to_work_hr from hims_d_appointment_schedule_header where  ((time(from_work_hr) BETWEEN time(?) AND time(?))\\\n                        //   or  (to_work_hr BETWEEN time(?) AND time(?))) and hims_d_appointment_schedule_header_id=?\n                        for (\n                          let j = 0;\n                          j < appointment_schedule_header_idS.length;\n                          j++\n                        ) {\n                          connection.query(\n                            \"SELECT  hims_d_appointment_schedule_header_id,from_work_hr,to_work_hr from hims_d_appointment_schedule_header where\\\n                            ((time(from_work_hr)<=?   AND time(to_work_hr)>?) or (time(from_work_hr)<=?   AND time(to_work_hr)>?))  and hims_d_appointment_schedule_header_id=?;\\\n                            SELECT  hims_d_appointment_schedule_header_id,from_work_hr,to_work_hr from hims_d_appointment_schedule_header\\\n                            where ((time(from_work_hr) >=? AND   time(from_work_hr) <?) or \\\n                            (time(to_work_hr) >=? AND   time(to_work_hr) <?))\\\n                             and hims_d_appointment_schedule_header_id=?;\",\n                            [\n                              input.from_work_hr,\n                              input.from_work_hr,\n                              input.to_work_hr,\n                              input.to_work_hr,\n                              appointment_schedule_header_idS[j],\n                              input.from_work_hr,\n                              input.to_work_hr,\n                              input.from_work_hr,\n                              input.to_work_hr,\n                              appointment_schedule_header_idS[j]\n                            ],\n                            (error, timeChecking) => {\n                              if (error) {\n                                connection.rollback(() => {\n                                  releaseDBConnection(db, connection);\n                                  next(error);\n                                });\n                              }\n\n                              if (\n                                timeChecking[0].length > 0 ||\n                                timeChecking[1].length > 0\n                              ) {\n                                //reject adding to schedule\n                                if (timeChecking[0].length > 0) {\n                                  debugLog(\n                                    \"timeChecking inside:\",\n                                    timeChecking[0]\n                                  );\n\n                                  connection.rollback(() => {\n                                    releaseDBConnection(db, connection);\n                                  });\n                                  req.records = {\n                                    message: `schedule already exist on ${\n                                      clashingDate[0]\n                                    } for doctor_id:${\n                                      input.schedule_detail[doc].provider_id\n                                    } from ${\n                                      timeChecking[0][0].from_work_hr\n                                    } to \n                                 ${timeChecking[0][0].to_work_hr}`,\n                                    schedule_exist: true\n                                  };\n                                  next();\n                                } else {\n                                  if (timeChecking[1].length > 0) {\n                                    debugLog(\n                                      \"timeChecking outside \",\n                                      timeChecking[1]\n                                    );\n\n                                    connection.rollback(() => {\n                                      releaseDBConnection(db, connection);\n                                    });\n                                    req.records = {\n                                      message: `schedule already exist on ${\n                                        clashingDate[0]\n                                      } for doctor_id:${\n                                        input.schedule_detail[doc].provider_id\n                                      } from ${\n                                        timeChecking[1][0].from_work_hr\n                                      } to \n                                   ${timeChecking[1][0].to_work_hr}`,\n                                      schedule_exist: true\n                                    };\n                                    next();\n                                  }\n                                }\n                              } else {\n                                //adding records for single doctor at one time\n                                const insurtColumns = [\n                                  \"provider_id\",\n                                  \"clinic_id\",\n                                  \"slot\",\n                                  \"schedule_date\",\n                                  \"created_by\",\n                                  \"updated_by\"\n                                ];\n\n                                connection.query(\n                                  \"INSERT INTO hims_d_appointment_schedule_detail(\" +\n                                    insurtColumns.join(\",\") +\n                                    \",`appointment_schedule_header_id`,created_date,updated_date) VALUES ?\",\n                                  [\n                                    jsonArrayToObject({\n                                      sampleInputObject: insurtColumns,\n                                      arrayObj: doctorSchedule,\n                                      newFieldToInsert: [\n                                        result.insertId,\n                                        new Date(),\n                                        new Date()\n                                      ],\n                                      req: req\n                                    })\n                                  ],\n                                  (error, schedule_detailResult) => {\n                                    if (error) {\n                                      connection.rollback(() => {\n                                        releaseDBConnection(db, connection);\n                                        next(error);\n                                      });\n                                    }\n                                    if (\n                                      doc ==\n                                      input.schedule_detail.length - 1\n                                    ) {\n                                      connection.commit(error => {\n                                        if (error) {\n                                          connection.rollback(() => {\n                                            releaseDBConnection(db, connection);\n                                            next(error);\n                                          });\n                                        }\n                                        releaseDBConnection(db, connection);\n                                        req.records = schedule_detailResult;\n                                        next();\n                                      });\n                                    }\n                                  }\n                                );\n                              }\n                            }\n                          );\n                        }\n                      }\n\n                      //if no clashing dates\n                      else {\n                        //adding records for single doctor at one time\n                        const insurtColumns = [\n                          \"provider_id\",\n                          \"clinic_id\",\n                          \"slot\",\n                          \"schedule_date\",\n                          \"created_by\",\n                          \"updated_by\"\n                        ];\n\n                        connection.query(\n                          \"INSERT INTO hims_d_appointment_schedule_detail(\" +\n                            insurtColumns.join(\",\") +\n                            \",`appointment_schedule_header_id`,created_date,updated_date) VALUES ?\",\n                          [\n                            jsonArrayToObject({\n                              sampleInputObject: insurtColumns,\n                              arrayObj: doctorSchedule,\n                              newFieldToInsert: [\n                                result.insertId,\n                                new Date(),\n                                new Date()\n                              ],\n                              req: req\n                            })\n                          ],\n                          (error, schedule_detailResult) => {\n                            if (error) {\n                              connection.rollback(() => {\n                                releaseDBConnection(db, connection);\n                                next(error);\n                              });\n                            }\n                            if (doc == input.schedule_detail.length - 1) {\n                              connection.commit(error => {\n                                if (error) {\n                                  connection.rollback(() => {\n                                    releaseDBConnection(db, connection);\n                                    next(error);\n                                  });\n                                }\n                                releaseDBConnection(db, connection);\n                                req.records = schedule_detailResult;\n                                next();\n                              });\n                            }\n                          }\n                        );\n                      }\n                    }\n                  );\n                }\n              }\n            } else {\n              req.records = { message: \"please select doctors\" };\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n              });\n              next();\n            }\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//[0,1,2,3,4,5,6]\nfunction getDaysArray(start, end, days, nightShift) {\n  for (var arr = [], dt = start; dt <= end; dt.setDate(dt.getDate() + 1)) {\n    const dat = new Date(dt);\n    const day = new Date(dat).getDay();\n    if (nightShift == 1) {\n      if (days.indexOf(day) > -1) {\n        arr.push(dat);\n        debugLog(\"dat:\", dat);\n\n        dat.setDate(dat.getDate() + 1);\n        arr.push(dat);\n        debugLog(\"dat:\", dat);\n      }\n    } else {\n      if (days.indexOf(day) > -1) {\n        arr.push(dat);\n      }\n    }\n  }\n  debugLog(\"newDatesList:\", arr);\n  return arr;\n}\n\n//[0,1,2,3,4,5,6]\nfunction BackupgetDaysArray(start, end, days) {\n  for (var arr = [], dt = start; dt <= end; dt.setDate(dt.getDate() + 1)) {\n    const dat = new Date(dt);\n    const day = new Date(dat).getDay();\n\n    if (days.indexOf(day) > -1) {\n      arr.push(dat);\n    }\n  }\n  debugLog(\"dates:\", arr);\n  return arr;\n}\n\n//created by irfan: to add appointment leave\nlet addLeaveOrModifySchedule = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT INTO `hims_d_appointment_schedule_leave` ( provider_id, sub_dept_id, clinic_id, to_date,\\\n           from_time, to_time, modified, created_date, created_by, updated_date, updated_by)\\\n          VALUE(?,?,?,?,?,?,?,?,?,?,?)\",\n        [\n          input.provider_id,\n          input.sub_dept_id,\n          input.clinic_id,\n          input.to_date,\n          input.from_time,\n          input.to_time,\n          input.modified,\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get doctors Schedule list\nlet getDoctorsScheduledList = (req, res, next) => {\n  let selectWhere = {\n    sub_dept_id: \"ALL\",\n    month: \"ALL\",\n    year: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let outputArray = [];\n    let selectDoctor = \"\";\n    if (req.query.provider_id != \"null\" && req.query.provider_id != null) {\n      selectDoctor = `and ASD.provider_id=${req.query.provider_id}`;\n    }\n    delete req.query.provider_id;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_d_appointment_schedule_header_id, sub_dept_id, schedule_status, schedule_description, month, year,from_date,to_date, from_work_hr, to_work_hr, work_break1, from_break_hr1, to_break_hr1, work_break2, from_break_hr2,\\\n         to_break_hr2, monday, tuesday, wednesday, thursday, friday, saturday, sunday from hims_d_appointment_schedule_header where record_status='A' AND \" +\n          where.condition,\n        where.values,\n        (error, result) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n          let schedule_header_id_all = new LINQ(result)\n            .Where(w => w.hims_d_appointment_schedule_header_id != null)\n            .Select(s => s.hims_d_appointment_schedule_header_id)\n            .ToArray();\n\n          if (result.length != 0) {\n            for (let i = 0; i < result.length; i++) {\n              connection.query(\n                \"SELECT hims_d_appointment_schedule_detail_id,appointment_schedule_header_id,SH.schedule_description ,\\\n                SH.schedule_status deprt_schedule_status,ASD.provider_id,E.full_name,\\\n                clinic_id,AC.description as clinic_description,slot,schedule_date,from_work_hr,\\\n                 to_work_hr,work_break1,work_break2,\\\n                 from_break_hr1,to_break_hr1,from_break_hr2,to_break_hr2  ,ASD.schedule_status doctor_schedule_status\\\n                 from hims_d_appointment_schedule_detail ASD ,hims_d_employee E, hims_d_appointment_clinic AC,hims_d_appointment_schedule_header SH\\\n                  where ASD.record_status='A' and E.record_status='A' and AC.record_status='A'and SH.record_status='A' and ASD.provider_id=E.hims_d_employee_id\\\n                  and ASD.clinic_id=AC.hims_d_appointment_clinic_id and ASD.appointment_schedule_header_id=SH.hims_d_appointment_schedule_header_id and\\\n                  appointment_schedule_header_id in (\" +\n                  schedule_header_id_all +\n                  \")\" +\n                  selectDoctor +\n                  \" group by  provider_id;\",\n                (error, results) => {\n                  if (error) {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  }\n\n                  result[i][\"doctorsList\"] = results;\n                  outputArray.push(result[i]);\n                  if (i == result.length - 1) {\n                    req.records = outputArray;\n                    releaseDBConnection(db, connection);\n                    next();\n                  }\n                }\n              );\n            }\n          } else {\n            releaseDBConnection(db, connection);\n            req.records = result;\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get Doctor Schedule Date Wise\nlet getDoctorScheduleDateWise = (req, res, next) => {\n  let selectWhere = {\n    sub_dept_id: \"ALL\",\n    schedule_date: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let selectDoctor = \"\";\n    // let provider_id = \"\";\n    if (req.query.provider_id != \"null\" && req.query.provider_id != null) {\n      selectDoctor = `ASD.provider_id=${req.query.provider_id} and `;\n      //provider_id = req.query.provider_id;\n    }\n    delete req.query.provider_id;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    debugLog(\"where:\", where);\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_d_appointment_schedule_header_id, sub_dept_id,SD.sub_department_name, SH.schedule_status as schedule_status, schedule_description, month, year,\\\n        from_date,to_date,from_work_hr, to_work_hr, work_break1, from_break_hr1, to_break_hr1, work_break2, from_break_hr2,\\\n        to_break_hr2, monday, tuesday, wednesday, thursday, friday, saturday, sunday,\\\n         hims_d_appointment_schedule_detail_id, ASD.provider_id,E.full_name as doctor_name,clinic_id,C.description as clinic_name,R.description as  room_name,\\\n         ASD.schedule_status as todays_schedule_status, slot,schedule_date, modified \\\n         from hims_d_appointment_schedule_header SH, hims_d_appointment_schedule_detail ASD,hims_d_employee E ,\\\n         hims_d_appointment_clinic C,hims_d_appointment_room R,hims_d_sub_department SD where \\\n         SH.record_status='A' and E.record_status='A' and C.record_status='A' and  SD.record_status='A'\\\n     and ASD.record_status='A' and R.record_status='A' and ASD.provider_id=E.hims_d_employee_id and \\\n         SH.hims_d_appointment_schedule_header_id=ASD.appointment_schedule_header_id \\\n         and ASD.clinic_id=C.hims_d_appointment_clinic_id and C.room_id=R.hims_d_appointment_room_id \\\n          and sub_dept_id= SD.hims_d_sub_department_id  and \" +\n          selectDoctor +\n          \"\" +\n          where.condition,\n        where.values,\n        (error, result) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          if (result.length > 0) {\n            new Promise((resolve, reject) => {\n              try {\n                for (let j = 0; j < result.length; j++) {\n                  if (result[j][\"modified\"] == \"M\") {\n                    connection.query(\n                      \"select hims_d_appointment_schedule_modify_id, appointment_schedule_detail_id, ASM.to_date as schedule_date, ASM.slot, ASM.from_work_hr,\\\n                ASM.to_work_hr, ASM.work_break1, ASM.from_break_hr1,ASM.to_break_hr1, ASM.work_break2, ASM.from_break_hr2, ASM.to_break_hr2  \\\n                hims_d_appointment_schedule_header_id, sub_dept_id,SD.sub_department_name, SH.schedule_status, schedule_description, month, year,  \\\n               monday, tuesday, wednesday, thursday, friday, saturday, sunday, ASD.provider_id,E.full_name as doctor_name,clinic_id,C.description as clinic_name,R.description as  room_name,\\\n                ASD.schedule_status as todays_schedule_status, modified\\\n               from hims_d_appointment_schedule_header SH,hims_d_appointment_schedule_modify ASM , hims_d_appointment_schedule_detail ASD,hims_d_employee E, hims_d_appointment_clinic C,hims_d_appointment_room R,\\\n               hims_d_sub_department SD  where SH.record_status='A' and E.record_status='A' \\\n               and ASD.record_status='A' and C.record_status='A' and SD.record_status='A' and R.record_status='A'and ASD.provider_id=E.hims_d_employee_id and  SH.hims_d_appointment_schedule_header_id=ASD.appointment_schedule_header_id  \\\n               and ASM.appointment_schedule_detail_id=ASD.hims_d_appointment_schedule_detail_id and ASM.record_status='A'\\\n               and ASD.clinic_id=C.hims_d_appointment_clinic_id and C.room_id=R.hims_d_appointment_room_id and C.sub_department_id=SD.hims_d_sub_department_id and appointment_schedule_detail_id=?\",\n                      [result[j][\"hims_d_appointment_schedule_detail_id\"]],\n                      (error, modifyResult) => {\n                        if (error) {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        }\n\n                        result[j] = modifyResult[0];\n                      }\n                    );\n                  }\n                  if (j == result.length - 1) {\n                    resolve({});\n                  }\n                }\n              } catch (e) {\n                reject(e);\n              }\n            }).then(modifyRes => {\n              let outputArray = [];\n              if (result.length > 0) {\n                for (let i = 0; i < result.length; i++) {\n                  connection.query(\n                    \"select hims_f_patient_appointment_id, patient_id, title_id, patient_code, provider_id, sub_department_id,number_of_slot, appointment_date, appointment_from_time,\\\n    appointment_to_time, appointment_status_id, patient_name, arabic_name, date_of_birth, age, contact_number, email, send_to_provider,\\\n    gender, confirmed, confirmed_by,comfirmed_date, cancelled, cancelled_by, cancelled_date, cancel_reason,\\\n    appointment_remarks, visit_created,is_stand_by  from hims_f_patient_appointment where record_status='A' and   cancelled<>'Y' and sub_department_id=?\\\n    and appointment_date=? and provider_id=? \",\n                    [\n                      result[i].sub_dept_id,\n                      result[i].schedule_date,\n                      result[i].provider_id\n                    ],\n                    (error, appResult) => {\n                      if (error) {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      }\n                      const obj = {\n                        ...result[i],\n                        ...{ patientList: appResult }\n                      };\n\n                      outputArray.push(obj);\n                      if (i == result.length - 1) {\n                        req.records = outputArray;\n                        releaseDBConnection(db, connection);\n                        next();\n                      }\n                    }\n                  );\n                }\n              } else {\n                releaseDBConnection(db, connection);\n                req.records = result;\n                next();\n              }\n            });\n          } else {\n            releaseDBConnection(db, connection);\n            req.records = result;\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get Doctor Schedule Date Wise\nlet getDoctorScheduleDateWiseBACKup3_nov = (req, res, next) => {\n  let selectWhere = {\n    sub_dept_id: \"ALL\",\n    schedule_date: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let selectDoctor = \"\";\n    // let provider_id = \"\";\n    if (req.query.provider_id != \"null\" && req.query.provider_id != null) {\n      selectDoctor = `ASD.provider_id=${req.query.provider_id} and `;\n      //provider_id = req.query.provider_id;\n    }\n    delete req.query.provider_id;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    // select hims_d_appointment_schedule_header_id, sub_dept_id, SH.schedule_status as schedule_status, schedule_description, month, year,\\\n    // from_date,to_date,from_work_hr, to_work_hr, work_break1, from_break_hr1, to_break_hr1, work_break2, from_break_hr2,\\\n    // to_break_hr2, monday, tuesday, wednesday, thursday, friday, saturday, sunday,\\\n    //  hims_d_appointment_schedule_detail_id, provider_id,E.first_name,E.last_name,clinic_id, ASD.schedule_status as todays_schedule_status, slot,schedule_date, modified \\\n    //  from hims_d_appointment_schedule_header SH, hims_d_appointment_schedule_detail ASD,hims_d_employee E  where SH.record_status='A' and E.record_status='A'\\\n    //  and ASD.record_status='A' and ASD.provider_id=E.hims_d_employee_id and  SH.hims_d_appointment_schedule_header_id=ASD.appointment_schedule_header_id\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_d_appointment_schedule_header_id, sub_dept_id, SH.schedule_status as schedule_status, schedule_description, month, year,\\\n        from_date,to_date,from_work_hr, to_work_hr, work_break1, from_break_hr1, to_break_hr1, work_break2, from_break_hr2,\\\n        to_break_hr2, monday, tuesday, wednesday, thursday, friday, saturday, sunday,\\\n         hims_d_appointment_schedule_detail_id, ASD.provider_id,E.first_name,E.last_name,clinic_id,C.description as clinic_name,R.description as  room_name,\\\n         ASD.schedule_status as todays_schedule_status, slot,schedule_date, modified \\\n         from hims_d_appointment_schedule_header SH, hims_d_appointment_schedule_detail ASD,hims_d_employee E ,\\\n         hims_d_appointment_clinic C,hims_d_appointment_room R where \\\n         SH.record_status='A' and E.record_status='A' and C.record_status='A'\\\n         and ASD.record_status='A' and R.record_status='A' and ASD.provider_id=E.hims_d_employee_id and \\\n         SH.hims_d_appointment_schedule_header_id=ASD.appointment_schedule_header_id \\\n         and ASD.clinic_id=C.hims_d_appointment_clinic_id and C.room_id=R.hims_d_appointment_room_id and \" +\n          selectDoctor +\n          \"\" +\n          where.condition,\n        where.values,\n        (error, result) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          debugLog(\"result:\", result);\n\n          if (result.length > 0) {\n            new Promise((resolve, reject) => {\n              try {\n                for (let j = 0; j < result.length; j++) {\n                  if (result[j][\"modified\"] == \"M\") {\n                    //     select hims_d_appointment_schedule_modify_id, appointment_schedule_detail_id, ASM.to_date as schedule_date, ASM.slot, ASM.from_work_hr,\\\n                    //   ASM.to_work_hr, ASM.work_break1, ASM.from_break_hr1,ASM.to_break_hr1, ASM.work_break2, ASM.from_break_hr2, ASM.to_break_hr2  \\\n                    //   hims_d_appointment_schedule_header_id, sub_dept_id, SH.schedule_status, schedule_description, month, year,  \\\n                    //  monday, tuesday, wednesday, thursday, friday, saturday, sunday, provider_id,E.first_name,E.last_name,clinic_id,\\\n                    //   ASD.schedule_status as todays_schedule_status, modified  \\\n                    //  from hims_d_appointment_schedule_header SH,hims_d_appointment_schedule_modify ASM , hims_d_appointment_schedule_detail ASD,hims_d_employee E\\\n                    //    where SH.record_status='A' and E.record_status='A'\\\n                    //  and ASD.record_status='A' and ASD.provider_id=E.hims_d_employee_id and  SH.hims_d_appointment_schedule_header_id=ASD.appointment_schedule_header_id  \\\n                    //  and ASM.appointment_schedule_detail_id=ASD.hims_d_appointment_schedule_detail_id and ASM.record_status='A'\\\n                    //   and appointment_schedule_detail_id=?\n\n                    connection.query(\n                      \"select hims_d_appointment_schedule_modify_id, appointment_schedule_detail_id, ASM.to_date as schedule_date, ASM.slot, ASM.from_work_hr,\\\n                ASM.to_work_hr, ASM.work_break1, ASM.from_break_hr1,ASM.to_break_hr1, ASM.work_break2, ASM.from_break_hr2, ASM.to_break_hr2  \\\n                hims_d_appointment_schedule_header_id, sub_dept_id, SH.schedule_status, schedule_description, month, year,  \\\n               monday, tuesday, wednesday, thursday, friday, saturday, sunday, ASD.provider_id,E.first_name,E.last_name,clinic_id,C.description as clinic_name,R.description as  room_name,\\\n                ASD.schedule_status as todays_schedule_status, modified\\\n               from hims_d_appointment_schedule_header SH,hims_d_appointment_schedule_modify ASM , hims_d_appointment_schedule_detail ASD,hims_d_employee E, hims_d_appointment_clinic C,hims_d_appointment_room R\\\n                 where SH.record_status='A' and E.record_status='A' \\\n               and ASD.record_status='A' and C.record_status='A' and R.record_status='A'and ASD.provider_id=E.hims_d_employee_id and  SH.hims_d_appointment_schedule_header_id=ASD.appointment_schedule_header_id  \\\n               and ASM.appointment_schedule_detail_id=ASD.hims_d_appointment_schedule_detail_id and ASM.record_status='A'\\\n               and ASD.clinic_id=C.hims_d_appointment_clinic_id and C.room_id=R.hims_d_appointment_room_id and appointment_schedule_detail_id=?\",\n                      [result[j][\"hims_d_appointment_schedule_detail_id\"]],\n                      (error, modifyResult) => {\n                        if (error) {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        }\n                        debugLog(\"modifyResult:\", modifyResult);\n\n                        result[j] = modifyResult[0];\n                        resolve(modifyResult);\n                      }\n                    );\n                  } else {\n                    resolve({});\n                  }\n                }\n              } catch (e) {\n                reject(e);\n              }\n            }).then(modifyRes => {\n              let outputArray = [];\n              if (result.length > 0) {\n                for (let i = 0; i < result.length; i++) {\n                  connection.query(\n                    \"select hims_f_patient_appointment_id, patient_id,title_id,patient_code, provider_id, sub_department_id,number_of_slot, appointment_date, appointment_from_time,\\\n    appointment_to_time, appointment_status_id, patient_name, arabic_name, date_of_birth, age, contact_number, email, send_to_provider,\\\n    gender, confirmed, confirmed_by,comfirmed_date, cancelled, cancelled_by, cancelled_date, cancel_reason,\\\n    appointment_remarks, is_stand_by  from hims_f_patient_appointment where record_status='A' and sub_department_id=?\\\n    and appointment_date=? and provider_id=? \",\n                    [\n                      result[i].sub_dept_id,\n                      result[i].schedule_date,\n                      result[i].provider_id\n                    ],\n                    (error, appResult) => {\n                      if (error) {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      }\n                      const obj = {\n                        ...result[i],\n                        ...{ patientList: appResult }\n                      };\n                      debugLog(\"appResult:\", appResult);\n                      outputArray.push(obj);\n                      if (i == result.length - 1) {\n                        req.records = outputArray;\n                        releaseDBConnection(db, connection);\n                        next();\n                      }\n                    }\n                  );\n                }\n              } else {\n                releaseDBConnection(db, connection);\n                req.records = result;\n                next();\n              }\n            });\n          } else {\n            releaseDBConnection(db, connection);\n            req.records = result;\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get Doctor Schedule to Modify\nlet getDoctorScheduleToModify = (req, res, next) => {\n  let selectWhere = {\n    appointment_schedule_header_id: \"ALL\",\n    provider_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_d_appointment_schedule_header_id, sub_dept_id, SH.schedule_status as deprt_schedule_status, schedule_description, month, year,\\\n        from_date,to_date,from_work_hr, to_work_hr, work_break1, from_break_hr1, to_break_hr1, work_break2, from_break_hr2, \\\n        to_break_hr2, monday, tuesday, wednesday, thursday, friday, saturday, sunday,\\\n        hims_d_appointment_schedule_detail_id, provider_id,clinic_id, ASD.schedule_status as doctor_schedule_status, slot,schedule_date, modified  \\\n       from hims_d_appointment_schedule_header SH, hims_d_appointment_schedule_detail ASD \\\n       where SH.record_status='A' and ASD.record_status='A' and  SH.hims_d_appointment_schedule_header_id=ASD.appointment_schedule_header_id\\\n       and \" +\n          where.condition,\n        where.values,\n        (error, result) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          let activeSchedule = new LINQ(result)\n            .Where(w => w.modified != \"M\")\n            .Select(s => s)\n            .ToArray();\n\n          let ids = new LINQ(result)\n            .Where(w => w.modified == \"M\")\n            .Select(s => s.hims_d_appointment_schedule_detail_id)\n            .ToArray();\n\n          if (ids.length > 0) {\n            connection.query(\n              \"SELECT hims_d_appointment_schedule_modify_id, SD.provider_id, SD.clinic_id, SD.schedule_status,appointment_schedule_detail_id, to_date as schedule_date, SM.slot,\\\n              from_work_hr, to_work_hr,work_break1, from_break_hr1, to_break_hr1, work_break2, from_break_hr2, to_break_hr2 \\\n              from hims_d_appointment_schedule_modify SM, hims_d_appointment_schedule_detail SD where SM.record_status='A' and SM.record_status='A' and SM.appointment_schedule_detail_id=SD.hims_d_appointment_schedule_detail_id and\\\n              appointment_schedule_detail_id in (\" +\n                ids +\n                \")\",\n              (error, modResult) => {\n                if (error) {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                }\n                if (modResult.length > 0) {\n                  let mergeResult = [...activeSchedule, ...modResult];\n\n                  let finResult = new LINQ(mergeResult)\n                    .OrderBy(w => w.schedule_date)\n                    .ToArray();\n\n                  req.records = finResult;\n                  releaseDBConnection(db, connection);\n                  next();\n                } else {\n                  releaseDBConnection(db, connection);\n                  req.records = result;\n                  next();\n                }\n              }\n            );\n          } else {\n            releaseDBConnection(db, connection);\n            req.records = result;\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to update Doctor Schedule DateWise\nlet updateDoctorScheduleDateWise = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.body);\n    debugLog(\"Input Data\", input);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n\n        connection.query(\n          \"UPDATE `hims_d_appointment_schedule_detail` SET `modified`=?,\\\n              `updated_by`=?, `updated_date`=? WHERE `record_status`='A' and \\\n         `hims_d_appointment_schedule_detail_id`=?;\",\n          [\n            input.modified,\n            input.updated_by,\n            new Date(),\n            input.hims_d_appointment_schedule_detail_id\n          ],\n          (error, result) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n\n            if (\n              input.hims_d_appointment_schedule_modify_id != null &&\n              input.modified == \"M\"\n            ) {\n              connection.query(\n                \"UPDATE `hims_d_appointment_schedule_modify` SET appointment_schedule_detail_id=?,to_date=?,slot=?,\\\n    from_work_hr=?,to_work_hr=?,work_break1=?,from_break_hr1=?,to_break_hr1=?,work_break2=?,from_break_hr2=?,to_break_hr2=?,\\\n        `updated_by`=?, `updated_date`=? WHERE `record_status`='A' and \\\n   `hims_d_appointment_schedule_modify_id`=?;\",\n                [\n                  input.hims_d_appointment_schedule_detail_id,\n                  input.to_date,\n                  input.slot,\n                  input.from_work_hr,\n                  input.to_work_hr,\n                  input.work_break1,\n                  input.from_break_hr1,\n                  input.to_break_hr1,\n                  input.work_break2,\n                  input.from_break_hr2,\n                  input.to_break_hr2,\n                  input.updated_by,\n                  new Date(),\n                  input.hims_d_appointment_schedule_modify_id\n                ],\n                (error, updateModResult) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n                  connection.commit(error => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n                    releaseDBConnection(db, connection);\n                    req.records = updateModResult;\n                    next();\n                  });\n                }\n              );\n            } else {\n              if (result.length != 0 && input.modified == \"M\") {\n                connection.query(\n                  \"INSERT INTO `hims_d_appointment_schedule_modify` ( appointment_schedule_detail_id, to_date, slot, from_work_hr, to_work_hr, work_break1, from_break_hr1,\\\n       to_break_hr1, work_break2, from_break_hr2, to_break_hr2,created_date, created_by, updated_date, updated_by)\\\n      VALUE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n                  [\n                    input.hims_d_appointment_schedule_detail_id,\n                    input.to_date,\n                    input.slot,\n                    input.from_work_hr,\n                    input.to_work_hr,\n                    input.work_break1,\n                    input.from_break_hr1,\n                    input.to_break_hr1,\n                    input.work_break2,\n                    input.from_break_hr2,\n                    input.to_break_hr2,\n                    new Date(),\n                    input.created_by,\n                    new Date(),\n                    input.updated_by\n                  ],\n                  (error, results) => {\n                    if (error) {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    }\n\n                    connection.commit(error => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                      releaseDBConnection(db, connection);\n                      req.records = results;\n                      next();\n                    });\n                  }\n                );\n              } else {\n                connection.commit(error => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n                  releaseDBConnection(db, connection);\n                  req.records = result;\n                  next();\n                });\n              }\n            }\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to delete Doctor From Schedule\nlet deleteDoctorFromSchedule = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.body);\n    debugLog(\"Input Data\", input);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \" update hims_d_appointment_schedule_detail set record_status='I',updated_by=?,updated_date=?\\\n         where record_status='A' and appointment_schedule_header_id=? and provider_id=?;\",\n        [\n          input.updated_by,\n          new Date(),\n          input.appointment_schedule_header_id,\n          input.provider_id\n        ],\n        (error, result) => {\n          if (error) {\n            connection.rollback(() => {\n              next(error);\n            });\n          }\n          releaseDBConnection(db, connection);\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n//created by irfan: to delete Doctor From Schedule\nlet deleteDoctorFromScheduleBACkUP03_nov = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.body);\n    debugLog(\"Input Data\", input);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \" update hims_d_appointment_schedule_detail set record_status='I',updated_by=?,updated_date=?\\\n         where record_status='A' and appointment_schedule_header_id=? and provider_id=?;\",\n        [\n          input.updated_by,\n          new Date(),\n          input.appointment_schedule_header_id,\n          input.provider_id\n        ],\n        (error, result) => {\n          if (error) {\n            connection.rollback(() => {\n              next(error);\n            });\n          }\n          releaseDBConnection(db, connection);\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to update Schedule\nlet updateSchedule = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.body);\n    debugLog(\"Input Data\", input);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"UPDATE `hims_d_appointment_schedule_header` SET `sub_dept_id`=?, `schedule_status`=?,\\\n        `schedule_description`=?, `month`=?, `year`=?, `from_date`=?, `to_date`=?, \\\n        `from_work_hr`=?, `to_work_hr`=?, `work_break1`=?, `from_break_hr1`=?, \\\n        `to_break_hr1`=?, `work_break2`=?, `from_break_hr2`=?, `to_break_hr2`=?,\\\n               `monday`=?, `tuesday`=?, `wednesday`=?, `thursday`=?, `friday`=?, `saturday`=?,\\\n         `sunday`=?, `updated_by`=?, `updated_date`=?, `record_status`=? \\\n         WHERE record_status='A' and `hims_d_appointment_schedule_header_id`=? ;\",\n        [\n          input.sub_dept_id,\n          input.schedule_status,\n          input.schedule_description,\n          input.month,\n          input.year,\n          input.from_date,\n          input.to_date,\n          input.from_work_hr,\n          input.to_work_hr,\n          input.work_break1,\n          input.from_break_hr1,\n          input.to_break_hr1,\n          input.work_break2,\n          input.from_break_hr2,\n          input.to_break_hr2,\n          input.monday,\n          input.tuesday,\n          input.wednesday,\n          input.thursday,\n          input.friday,\n          input.saturday,\n          input.sunday,\n          input.updated_by,\n          new Date(),\n          input.record_status,\n          input.hims_d_appointment_schedule_header_id\n        ],\n        (error, result) => {\n          if (error) {\n            connection.rollback(() => {\n              next(error);\n            });\n          }\n          releaseDBConnection(db, connection);\n          debugLog(\"result:\", result);\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add Doctor To Existing Schedule\nlet addDoctorToExistingSchedule = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    debugLog(\"input:\", input);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n\n        //generating list of dates by date range ie.(from_time and  to_time)\n        connection.query(\n          \"SELECT from_work_hr,to_work_hr,from_date, to_date, monday, tuesday, wednesday, thursday, friday, saturday, sunday\\\n          from hims_d_appointment_schedule_header where  record_status='A' and hims_d_appointment_schedule_header_id=?\",\n          [input.hims_d_appointment_schedule_header_id],\n          (error, result) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n\n            let working_days = [];\n\n            let inputDays = [\n              result[0].sunday,\n              result[0].monday,\n              result[0].tuesday,\n              result[0].wednesday,\n              result[0].thursday,\n              result[0].friday,\n              result[0].saturday\n            ];\n\n            for (let d = 0; d < 7; d++) {\n              if (inputDays[d] == \"Y\") {\n                working_days.push(d);\n              }\n            }\n\n            let newDateList = getDaysArray(\n              new Date(result[0].from_date),\n              new Date(result[0].to_date),\n              working_days\n            );\n            newDateList.map(v => v.toLocaleString());\n            //.slice(0, 10)).join(\"\");\n\n            debugLog(\"newDateList:\", newDateList.length);\n            //get list of dates which are already scheduled for this doctor\n            connection.query(\n              \"select hims_d_appointment_schedule_detail_id,appointment_schedule_header_id,schedule_date from hims_d_appointment_schedule_detail  where provider_id=? and schedule_date>?;\",\n              [input.provider_id, new Date()],\n              (error, occupiedDoctorDates) => {\n                if (error) {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                }\n\n                let OccupiedDoctorDatesList = new LINQ(occupiedDoctorDates)\n                  .Select(s => s.schedule_date)\n                  .ToArray();\n\n                let clashingDate = [];\n                new LINQ(newDateList).Select(s => {\n                  const index = OccupiedDoctorDatesList.indexOf(\n                    moment(s).format(\"YYYY-MM-DD\")\n                  );\n                  if (index > -1) {\n                    clashingDate.push(OccupiedDoctorDatesList[index]);\n                  }\n                });\n\n                debugLog(\"clashingDate: \", clashingDate);\n\n                //if date clashes check for time else add\n                if (clashingDate.length > 0) {\n                  let appointment_schedule_header_id = new LINQ(\n                    occupiedDoctorDates\n                  )\n                    .Where(w => w.schedule_date == clashingDate[0])\n                    .Select(s => s.appointment_schedule_header_id)\n                    .ToArray();\n                  //obtain existing schedule time\n                  connection.query(\n                    \"select * from hims_d_appointment_schedule_header where time(from_work_hr)<=?  and time(to_work_hr)> ?\\\n                    and hims_d_appointment_schedule_header_id=?\",\n                    [\n                      result[0].from_work_hr,\n                      result[0].from_work_hr,\n                      appointment_schedule_header_id[0]\n                    ],\n                    (error, timeChecking) => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n\n                      if (timeChecking.length > 0) {\n                        //reject adding to schedule\n                        debugLog(\"timeChecking\", timeChecking);\n                        req.records = {\n                          message: \"schedule already exist\",\n                          schedule_exist: true\n                        };\n                        releaseDBConnection(db, connection);\n                        next();\n                      } else {\n                        //add to schedule\n\n                        if (input.schedule_detail.length != 0) {\n                          if (\n                            input.hims_d_appointment_schedule_header_id != null\n                          ) {\n                            for (\n                              let doc = 0;\n                              doc < input.schedule_detail.length;\n                              doc++\n                            ) {\n                              let doctorSchedule = [];\n\n                              for (let i = 0; i < newDateList.length; i++) {\n                                doctorSchedule.push({\n                                  ...input.schedule_detail[doc],\n                                  ...{ schedule_date: newDateList[i] }\n                                });\n                              }\n\n                              const insurtColumns = [\n                                \"provider_id\",\n                                \"clinic_id\",\n                                \"slot\",\n                                \"schedule_date\",\n                                \"created_by\",\n                                \"updated_by\"\n                              ];\n\n                              connection.query(\n                                \"INSERT INTO hims_d_appointment_schedule_detail(\" +\n                                  insurtColumns.join(\",\") +\n                                  \",`appointment_schedule_header_id`,created_date,updated_date) VALUES ?\",\n                                [\n                                  jsonArrayToObject({\n                                    sampleInputObject: insurtColumns,\n                                    arrayObj: doctorSchedule,\n                                    newFieldToInsert: [\n                                      input.hims_d_appointment_schedule_header_id,\n                                      new Date(),\n                                      new Date()\n                                    ],\n                                    req: req\n                                  })\n                                ],\n                                (error, schedule_detailResult) => {\n                                  if (error) {\n                                    connection.rollback(() => {\n                                      releaseDBConnection(db, connection);\n                                      next(error);\n                                    });\n                                  }\n\n                                  connection.commit(error => {\n                                    if (error) {\n                                      connection.rollback(() => {\n                                        releaseDBConnection(db, connection);\n                                        next(error);\n                                      });\n                                    }\n                                    releaseDBConnection(db, connection);\n                                    req.records = schedule_detailResult;\n                                    next();\n                                  });\n                                }\n                              );\n                            }\n                          }\n                        } else {\n                          releaseDBConnection(db, connection);\n                          req.records = { message: \"please select doctors\" };\n                          next();\n                        }\n                      }\n                    }\n                  );\n                } else {\n                  //else add doctor to schedule\n                  if (input.schedule_detail.length != 0) {\n                    if (input.hims_d_appointment_schedule_header_id != null) {\n                      for (\n                        let doc = 0;\n                        doc < input.schedule_detail.length;\n                        doc++\n                      ) {\n                        let doctorSchedule = [];\n\n                        for (let i = 0; i < newDateList.length; i++) {\n                          doctorSchedule.push({\n                            ...input.schedule_detail[doc],\n                            ...{ schedule_date: newDateList[i] }\n                          });\n                        }\n\n                        const insurtColumns = [\n                          \"provider_id\",\n                          \"clinic_id\",\n                          \"slot\",\n                          \"schedule_date\",\n                          \"created_by\",\n                          \"updated_by\"\n                        ];\n\n                        connection.query(\n                          \"INSERT INTO hims_d_appointment_schedule_detail(\" +\n                            insurtColumns.join(\",\") +\n                            \",`appointment_schedule_header_id`,created_date,updated_date) VALUES ?\",\n                          [\n                            jsonArrayToObject({\n                              sampleInputObject: insurtColumns,\n                              arrayObj: doctorSchedule,\n                              newFieldToInsert: [\n                                input.hims_d_appointment_schedule_header_id,\n                                new Date(),\n                                new Date()\n                              ],\n                              req: req\n                            })\n                          ],\n                          (error, schedule_detailResult) => {\n                            if (error) {\n                              connection.rollback(() => {\n                                releaseDBConnection(db, connection);\n                                next(error);\n                              });\n                            }\n\n                            connection.commit(error => {\n                              if (error) {\n                                connection.rollback(() => {\n                                  releaseDBConnection(db, connection);\n                                  next(error);\n                                });\n                              }\n                              releaseDBConnection(db, connection);\n                              req.records = schedule_detailResult;\n                              next();\n                            });\n                          }\n                        );\n                      }\n                    }\n                  }\n                }\n              }\n            );\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add Doctor To Existing Schedule\nlet BAckupaddDoctorToExistingSchedule = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    debugLog(\"input:\", input);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n\n        let newDates = [\n          \"2018-10-01T00:00:00.000Z\",\n          \"2018-10-02T00:00:00.000Z\",\n          \"2018-10-03T00:00:00.000Z\",\n          \"2018-10-04T00:00:00.000Z\",\n          \"2018-10-05T00:00:00.000Z\",\n          \"2018-10-06T00:00:00.000Z\",\n          \"2018-10-07T00:00:00.000Z\",\n          \"2018-10-08T00:00:00.000Z\",\n          \"2018-10-09T00:00:00.000Z\",\n          \"2018-10-10T00:00:00.000Z\"\n        ];\n\n        let providrDates = [\n          \"2018-10-01\",\n          \"2018-10-02\",\n          \"2018-10-27\",\n          \"2018-10-28\",\n          \"2018-10-29\"\n        ];\n\n        let existingDates = [];\n        new LINQ(newDates).Select(s => {\n          const index = providrDates.indexOf(moment(s).format(\"YYYY-MM-DD\"));\n\n          if (index > -1) {\n            existingDates.push(providrDates[index]);\n          }\n        });\n        debugLog(\"existingDates: \", existingDates);\n        if (existingDates.length > 0) {\n        }\n        //-----------------\n        connection.query(\n          \"SELECT from_date, to_date, monday, tuesday, wednesday, thursday, friday, saturday, sunday\\\n          from hims_d_appointment_schedule_header where  record_status='A' and hims_d_appointment_schedule_header_id=?\",\n          [input.hims_d_appointment_schedule_header_id],\n          (error, result) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n\n            let working_days = [];\n\n            let inputDays = [\n              result[0].sunday,\n              result[0].monday,\n              result[0].tuesday,\n              result[0].wednesday,\n              result[0].thursday,\n              result[0].friday,\n              result[0].saturday\n            ];\n\n            for (let d = 0; d < 7; d++) {\n              if (inputDays[d] == \"Y\") {\n                working_days.push(d);\n              }\n            }\n\n            let daylist = getDaysArray(\n              new Date(result[0].from_date),\n              new Date(result[0].to_date),\n              working_days\n            );\n            daylist.map(v => v.toLocaleString());\n            //.slice(0, 10)).join(\"\");\n\n            debugLog(\"daylist:\", daylist.length);\n            if (input.schedule_detail.length != 0) {\n              if (input.hims_d_appointment_schedule_header_id != null) {\n                for (let doc = 0; doc < input.schedule_detail.length; doc++) {\n                  let doctorSchedule = [];\n\n                  for (let i = 0; i < daylist.length; i++) {\n                    doctorSchedule.push({\n                      ...input.schedule_detail[doc],\n                      ...{ schedule_date: daylist[i] }\n                    });\n                  }\n\n                  const insurtColumns = [\n                    \"provider_id\",\n                    \"clinic_id\",\n                    \"slot\",\n                    \"schedule_date\",\n                    \"created_by\",\n                    \"updated_by\"\n                  ];\n\n                  connection.query(\n                    \"INSERT INTO hims_d_appointment_schedule_detail(\" +\n                      insurtColumns.join(\",\") +\n                      \",`appointment_schedule_header_id`,created_date,updated_date) VALUES ?\",\n                    [\n                      jsonArrayToObject({\n                        sampleInputObject: insurtColumns,\n                        arrayObj: doctorSchedule,\n                        newFieldToInsert: [\n                          input.hims_d_appointment_schedule_header_id,\n                          new Date(),\n                          new Date()\n                        ],\n                        req: req\n                      })\n                    ],\n                    (error, schedule_detailResult) => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                      releaseDBConnection(db, connection);\n                      req.records = schedule_detailResult;\n                      next();\n                      // connection.commit(error => {\n                      //   if (error) {\n                      //     connection.rollback(() => {\n                      //       releaseDBConnection(db, connection);\n                      //       next(error);\n                      //     });\n                      //   }\n                      //   req.records = schedule_detailResult;\n                      //   next();\n                      // });\n                    }\n                  );\n                }\n              }\n            } else {\n              releaseDBConnection(db, connection);\n              req.records = { message: \"please select doctors\" };\n              next();\n            }\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add patient appointment\nlet addPatientAppointmentBACKUP_20_nov = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT INTO `hims_f_patient_appointment` (title_id,patient_id,patient_code,provider_id,sub_department_id,number_of_slot,appointment_date,appointment_from_time,appointment_to_time,\\\n          appointment_status_id,patient_name,arabic_name,date_of_birth,age,contact_number,email,send_to_provider,gender,appointment_remarks,is_stand_by,\\\n          created_date, created_by, updated_date, updated_by)\\\n          VALUE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n        [\n          input.title_id,\n          input.patient_id,\n          input.patient_code,\n          input.provider_id,\n          input.sub_department_id,\n          input.number_of_slot,\n          input.appointment_date,\n          input.appointment_from_time,\n          input.appointment_to_time,\n          input.appointment_status_id,\n          input.patient_name,\n          input.arabic_name,\n          input.date_of_birth,\n          input.age,\n          input.contact_number,\n          input.email,\n          input.send_to_provider,\n          input.gender,\n          input.appointment_remarks,\n          input.is_stand_by,\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add patient appointment\nlet addPatientAppointment = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      //       select hims_f_patient_appointment_id,provider_id,patient_name,appointment_date,appointment_from_time,\n      // appointment_to_time from hims_f_patient_appointment where record_status='A'\n      // and date(appointment_date)=date('2018-11-21') and provider_id=2 and cancelled='N' and\n      // (('08:20:00'>=appointment_from_time and '08:20:00'<appointment_to_time)\n      // or('08:30:00'>appointment_from_time and '08:30:00'<=appointment_to_time))\n\n      // SELECT hims_f_patient_appointment_id,patient_id,sub_department_id FROM hims_f_patient_appointment\n      // where record_status='A' and cancelled='N' and is_stand_by='N' and contact_number='9901968745'\n      // and sub_department_id=39 and provider_id=2 and appointment_date\n\n      connection.query(\n        \"select hims_f_patient_appointment_id,provider_id,title_id,patient_name,appointment_date,appointment_from_time,\\\n        appointment_to_time from hims_f_patient_appointment where record_status='A'\\\n        and date(appointment_date)=date(?) and provider_id=? and cancelled='N' and is_stand_by='N' and sub_department_id=? and\\\n        ((?>=appointment_from_time and ?<appointment_to_time)\\\n        or(?>appointment_from_time and ?<=appointment_to_time));\\\n        SELECT hims_f_patient_appointment_id,patient_id,sub_department_id,patient_name FROM hims_f_patient_appointment\\\n        where record_status='A' and cancelled='N' and is_stand_by='N' and contact_number=?\\\n        and sub_department_id=? and provider_id=? and appointment_date=?\",\n        [\n          input.appointment_date,\n          input.provider_id,\n          input.sub_department_id,\n          input.appointment_from_time,\n          input.appointment_from_time,\n          input.appointment_to_time,\n          input.appointment_to_time,\n          input.contact_number,\n          input.sub_department_id,\n          input.provider_id,\n          input.appointment_date\n        ],\n        (error, slotResult) => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n\n          debugLog(\"slotResult:\", slotResult);\n          debugLog(\"slotResult len:\", slotResult[1].length);\n          if (slotResult[0].length > 0 && input.is_stand_by != \"Y\") {\n            releaseDBConnection(db, connection);\n            req.records = { slotExist: true };\n            next();\n          } else if (slotResult[1].length >= 2 && input.is_stand_by != \"Y\") {\n            releaseDBConnection(db, connection);\n            req.records = { bookedtwice: true };\n            next();\n          } else {\n            connection.query(\n              \"INSERT INTO `hims_f_patient_appointment` (patient_id,title_id,patient_code,provider_id,sub_department_id,number_of_slot,appointment_date,appointment_from_time,appointment_to_time,\\\n          appointment_status_id,patient_name,arabic_name,date_of_birth,age,contact_number,email,send_to_provider,gender,appointment_remarks,is_stand_by,\\\n          created_date, created_by, updated_date, updated_by)\\\n          VALUE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n              [\n                input.patient_id,\n                input.title_id,\n                input.patient_code,\n                input.provider_id,\n                input.sub_department_id,\n                input.number_of_slot,\n                input.appointment_date,\n                input.appointment_from_time,\n                input.appointment_to_time,\n                input.appointment_status_id,\n                input.patient_name,\n                input.arabic_name,\n                input.date_of_birth,\n                input.age,\n                input.contact_number,\n                input.email,\n                input.send_to_provider,\n                input.gender,\n                input.appointment_remarks,\n                input.is_stand_by,\n                new Date(),\n                input.created_by,\n                new Date(),\n                input.updated_by\n              ],\n              (error, result) => {\n                releaseDBConnection(db, connection);\n                if (error) {\n                  next(error);\n                }\n                req.records = result;\n                next();\n              }\n            );\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to update Patient Appointment\nlet updatePatientAppointmentBACKUP_20_nov = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    debugLog(\"input: \", input);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.query(\n        \"UPDATE `hims_f_patient_appointment` SET patient_id=?, title_id=?,provider_id=?,sub_department_id=?,number_of_slot=?,appointment_date=?,appointment_from_time=?,appointment_to_time=?,\\\n        appointment_status_id=?,patient_name=?,arabic_name=?,date_of_birth=?,age=?,contact_number=?,email=?,\\\n        send_to_provider=?,gender=?,confirmed=?,confirmed_by=?,comfirmed_date=?,cancelled=?,cancelled_by=?,\\\n        cancelled_date=?,cancel_reason=?,appointment_remarks=?,is_stand_by=?,\\\n           updated_date=?, updated_by=? ,`record_status`=? WHERE  `record_status`='A' and `hims_f_patient_appointment_id`=?;\",\n        [\n          input.patient_id,\n          input.title_id,\n          input.provider_id,\n          input.sub_department_id,\n          input.number_of_slot,\n          input.appointment_date,\n          input.appointment_from_time,\n          input.appointment_to_time,\n          input.appointment_status_id,\n          input.patient_name,\n          input.arabic_name,\n          input.date_of_birth,\n          input.age,\n          input.contact_number,\n          input.email,\n          input.send_to_provider,\n          input.gender,\n          input.confirmed,\n          input.confirmed_by,\n          input.comfirmed_date,\n          input.cancelled,\n          input.cancelled_by,\n          input.cancelled_date,\n          input.cancel_reason,\n          input.appointment_remarks,\n          input.is_stand_by,\n          new Date(),\n          input.updated_by,\n          input.record_status,\n          input.hims_f_patient_appointment_id\n        ],\n        (error, results) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = results;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n//created by irfan: to update Patient Appointment\nlet updatePatientAppointment = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"select hims_f_patient_appointment_id,provider_id,title_id,patient_name,appointment_date,appointment_from_time,\\\n        appointment_to_time from hims_f_patient_appointment where record_status='A'\\\n        and date(appointment_date)=date(?) and provider_id=? and cancelled='N' and is_stand_by='N' and sub_department_id=? and\\\n        ((?>=appointment_from_time and ?<appointment_to_time)\\\n        or(?>appointment_from_time and ?<=appointment_to_time)) and hims_f_patient_appointment_id!=?;\",\n        [\n          input.appointment_date,\n          input.provider_id,\n          input.sub_department_id,\n          input.appointment_from_time,\n          input.appointment_from_time,\n          input.appointment_to_time,\n          input.appointment_to_time,\n          input.hims_f_patient_appointment_id\n        ],\n        (error, slotResult) => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n\n          if (slotResult.length > 0 && input.is_stand_by != \"Y\") {\n            releaseDBConnection(db, connection);\n            req.records = { slotExist: true };\n            next();\n          } else {\n            connection.query(\n              \"UPDATE `hims_f_patient_appointment` SET patient_id=?, title_id=? ,provider_id=?,sub_department_id=?,number_of_slot=?,appointment_date=?,appointment_from_time=?,appointment_to_time=?,\\\n        appointment_status_id=?,patient_name=?,arabic_name=?,date_of_birth=?,age=?,contact_number=?,email=?,\\\n        send_to_provider=?,gender=?,confirmed=?,confirmed_by=?,comfirmed_date=?,cancelled=?,cancelled_by=?,\\\n        cancelled_date=?,cancel_reason=?,appointment_remarks=?,is_stand_by=?,\\\n           updated_date=?, updated_by=? ,`record_status`=? WHERE  `record_status`='A' and  cancelled<>'Y' and `hims_f_patient_appointment_id`=?;\",\n              [\n                input.patient_id,\n                input.title_id,\n                input.provider_id,\n                input.sub_department_id,\n                input.number_of_slot,\n                input.appointment_date,\n                input.appointment_from_time,\n                input.appointment_to_time,\n                input.appointment_status_id,\n                input.patient_name,\n                input.arabic_name,\n                input.date_of_birth,\n                input.age,\n                input.contact_number,\n                input.email,\n                input.send_to_provider,\n                input.gender,\n                input.confirmed,\n                input.confirmed_by,\n                input.comfirmed_date,\n                input.cancelled,\n                input.cancelled_by,\n                input.cancelled_date,\n                input.cancel_reason,\n                input.appointment_remarks,\n                input.is_stand_by,\n                new Date(),\n                input.updated_by,\n                input.record_status,\n                input.hims_f_patient_appointment_id\n              ],\n              (error, results) => {\n                releaseDBConnection(db, connection);\n                if (error) {\n                  next(error);\n                }\n                req.records = results;\n                next();\n              }\n            );\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get Patient Appointment\nlet getPatientAppointment = (req, res, next) => {\n  let selectWhere = {\n    sub_department_id: \"ALL\",\n    appointment_to_time: \"ALL\",\n    provider_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let selectDoctor = \"\";\n    if (req.query.provider_id != \"null\" && req.query.provider_id != null) {\n      selectDoctor = `provider_id=${req.query.provider_id} and `;\n    }\n    delete req.query.provider_id;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_f_patient_appointment_id,patient_id,title_id,patient_code,provider_id,sub_department_id,number_of_slot,appointment_date,\\\n            appointment_from_time,appointment_to_time,appointment_status_id,patient_name,arabic_name,date_of_birth,age,\\\n        contact_number,email,send_to_provider,gender,confirmed,visit_created,\\\n        confirmed_by,comfirmed_date,cancelled,cancelled_by,cancelled_date,appointment_remarks,cancel_reason,is_stand_by\\\n        from hims_f_patient_appointment where record_status='A'  and \" +\n          selectDoctor +\n          \"\" +\n          where.condition,\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get\nlet getEmployeeServiceID = (req, res, next) => {\n  let selectWhere = {\n    employee_id: \"ALL\",\n    sub_department_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    //delete req.query.provider_id;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select  hims_d_employee_department_id, employee_id, services_id,\\\n         sub_department_id, category_speciality_id, user_id from hims_m_employee_department_mappings\\\n          where record_status='A' and \" +\n          where.condition,\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to cancel patient appointment\nlet cancelPatientAppointment = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"update hims_f_patient_appointment set cancelled='Y',cancelled_by=?,cancelled_date=?,cancel_reason=?,\\\n        updated_by=?,updated_date=? where record_status='A' and hims_f_patient_appointment_id=?;\",\n        [\n          input.updated_by,\n          new Date(),\n          input.cancel_reason,\n          input.updated_by,\n          new Date(),\n          input.hims_f_patient_appointment_id\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addAppointmentStatus,\n  addAppointmentRoom,\n  addAppointmentClinic,\n  getAppointmentStatus,\n  getAppointmentRoom,\n  getAppointmentClinic,\n  updateAppointmentStatus,\n  updateAppointmentRoom,\n  updateAppointmentClinic,\n  addDoctorsSchedule,\n  getDoctorsScheduledList,\n  addLeaveOrModifySchedule,\n  getDoctorScheduleDateWise,\n  getDoctorScheduleToModify,\n  updateDoctorScheduleDateWise,\n  deleteDoctorFromSchedule,\n  updateSchedule,\n  addDoctorToExistingSchedule,\n  addPatientAppointment,\n  getPatientAppointment,\n  updatePatientAppointment,\n  getEmployeeServiceID,\n  appointmentStatusAuthorized,\n  deleteAppointmentRoom,\n  cancelPatientAppointment\n};\n"]}