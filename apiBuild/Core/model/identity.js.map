{"version":3,"sources":["../../../src/model/identity.js"],"names":["addIdentity","req","res","next","identityDoc","hims_d_identity_document_id","identity_document_code","identity_document_name","created_by","userIdentity","algaeh_d_app_user_id","updated_by","db","httpStatus","dataBaseNotInitilizedError","insertDoc","body","getConnection","error","connection","records","newNumber","rollback","length","query","arabic_identity_document_name","Date","identity_status","result","insertId","resultData","e","updateIdentity","updateIdentityDoc","selectIdentity","selectWhereCondition","condition","values","deleteIdentity","tableName","id","module","exports"],"mappings":"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","file":"identity.js","sourcesContent":["import extend from \"extend\";\nimport {\n  selectStatement,\n  whereCondition,\n  runningNumber,\n  releaseDBConnection,\n  deleteRecord\n} from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { debugLog } from \"../utils/logging\";\n\nlet addIdentity = (req, res, next) => {\n  let identityDoc = {\n    hims_d_identity_document_id: null,\n    identity_document_code: null,\n    identity_document_name: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n\n    let db = req.db;\n    let insertDoc = extend(identityDoc, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      runningNumber(req.db, 6, \"IDEN_DOC\", (error, records, newNumber) => {\n        debugLog(\"newNumber:\" + newNumber);\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        if (records.length != 0) {\n          req.query.identity_document_code = newNumber;\n          req.body.identity_document_code = newNumber;\n          insertDoc.identity_document_code = newNumber;\n        }\n\n        connection.query(\n          \"INSERT INTO `hims_d_identity_document` \\\n            (`identity_document_code`, `identity_document_name`, `arabic_identity_document_name`, `created_by`\\\n            , `created_date`,`identity_status`)\\\n            VALUE (?, ?, ?, ?,?,?)\",\n          [\n            insertDoc.identity_document_code,\n            insertDoc.identity_document_name,\n            insertDoc.arabic_identity_document_name,\n            insertDoc.created_by,\n            new Date(),\n            insertDoc.identity_status\n          ],\n          (error, result) => {\n            if (error) {\n              releaseDBConnection(db, connection);\n              next(error);\n            }\n            insertDoc.hims_d_identity_document_id = result.insertId;\n            connection.query(\n              \"SELECT `hims_d_identity_document_id`, `identity_document_code`,\\\n         `identity_document_name`, `arabic_identity_document_name`,`identity_status` \\\n         FROM `hims_d_identity_document` WHERE `record_status`='A' AND \\\n         `hims_d_identity_document_id`=? \",\n              [insertDoc.hims_d_identity_document_id],\n              (error, resultData) => {\n                releaseDBConnection(db, connection);\n                if (error) {\n                  next(error);\n                }\n                req.records = resultData;\n                next();\n              }\n            );\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\nlet updateIdentity = (req, res, next) => {\n  let identityDoc = {\n    hims_d_identity_document_id: null,\n    identity_document_code: null,\n    identity_document_name: null,\n    arabic_identity_document_name: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let updateIdentityDoc = extend(identityDoc, req.body);\n    debugLog(\"updateIdentityDoc\", updateIdentityDoc);\n    db.getConnection((error, connection) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n      connection.query(\n        \"UPDATE `hims_d_identity_document`\\\n    SET  `identity_document_name`=?, `arabic_identity_document_name` = ?,`updated_by`=?, `updated_date`=? \\\n    ,`identity_status` = ? \\\n    WHERE `record_status`='A' AND `hims_d_identity_document_id`=?;\",\n        [\n          updateIdentityDoc.identity_document_name,\n          updateIdentityDoc.arabic_identity_document_name,\n          updateIdentityDoc.updated_by,\n          new Date(),\n          updateIdentityDoc.identity_status,\n          updateIdentityDoc.hims_d_identity_document_id\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet selectIdentity = (req, res, next) => {\n  let selectWhereCondition = {\n    hims_d_identity_document_id: \"ALL\",\n    identity_document_code: \"ALL\",\n    identity_document_name: \"ALL\"\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let condition = whereCondition(extend(selectWhereCondition, req.query));\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"SELECT `hims_d_identity_document_id`, `identity_document_code`, `identity_document_name`, `arabic_identity_document_name`, `identity_status`\\\n          ,`created_by`, `created_date`, `updated_by`, `updated_date`,`identity_status` FROM `hims_d_identity_document` WHERE record_status ='A' AND \" +\n          condition.condition+\" order by hims_d_identity_document_id desc\",\n        values: condition.values\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet deleteIdentity = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    deleteRecord(\n      {\n        db: req.db,\n        tableName: \"hims_d_identity_document\",\n        id: req.body.hims_d_identity_document_id,\n        query:\n          \"UPDATE hims_d_identity_document SET  record_status='I', \\\n          updated_by=?,updated_date=? WHERE hims_d_identity_document_id=?\",\n        values: [\n          req.body.updated_by,\n          new Date(),\n          req.body.hims_d_identity_document_id\n        ]\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addIdentity,\n  updateIdentity,\n  selectIdentity,\n  deleteIdentity\n};\n"]}