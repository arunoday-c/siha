{"version":3,"sources":["../../../src/model/department.js"],"names":["addDepartment","req","res","next","db","httpStatus","dataBaseNotInitilizedError","input","body","getConnection","error","connection","query","department_code","department_name","arabic_department_name","department_desc","department_type","effective_start_date","effective_end_date","Date","created_by","updated_by","result","records","e","updateDepartment","departmentDetails","beginTransaction","rollback","queryBuilder","inputs","hims_d_department_id","commit","deleteDepartment","tableName","id","values","selectDepartment","selectWhere","where","condition","selectSubDepartment","department_id","addSubDepartment","sub_department_code","sub_department_name","arabic_sub_department_name","sub_department_desc","updateSubDepartment","subDepartmentDetails","hims_d_sub_department_id","release","selectdoctors","inputClicnicalNonClinicalDept","connectionString","results","departments","LINQ","GroupBy","g","sub_department_id","doctors","employee_id","selectDoctorsAndClinic","sub_dept_id","provider_id","deleteSubDepartment","makeSubDepartmentInActive","makeDepartmentInActive","module","exports"],"mappings":"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","file":"department.js","sourcesContent":["\"use strict\";\nimport extend from \"extend\";\nimport { whereCondition, deleteRecord, releaseDBConnection } from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { LINQ } from \"node-linq\";\n// import $ from \"jquery\";\nimport { debugFunction, debugLog } from \"../utils/logging\";\n\n//created by irfan: to add departments\nlet addDepartment = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT INTO `hims_d_department` (department_code,department_name,arabic_department_name,\\\n          department_desc,department_type,effective_start_date,effective_end_date,created_date, created_by, updated_date, updated_by)\\\n          VALUE(?,?,?,?,?,?,?,?,?,?,?)\",\n        [\n          input.department_code,\n          input.department_name,\n          input.arabic_department_name,\n          input.department_desc,\n          input.department_type,\n          input.effective_start_date,\n          input.effective_end_date,\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet updateDepartment = (req, res, next) => {\n  try {\n    debugFunction(\"updateDepartment\");\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    debugLog(\"Input Data\", req.body);\n    let departmentDetails = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        let queryBuilder =\n          \"UPDATE `hims_d_department`\\\n        SET   `department_name`=?, `department_desc`=?, `department_type`=?\\\n        , `effective_start_date`=?, `effective_end_date`=? \\\n        ,`arabic_department_name`=?, `updated_date`=?, `updated_by`=?\\\n        WHERE record_status='A' AND `hims_d_department_id`=?;\";\n        let inputs = [\n          departmentDetails.department_name,\n          departmentDetails.department_desc,\n          departmentDetails.department_type,\n          departmentDetails.effective_start_date,\n          departmentDetails.effective_end_date,\n          departmentDetails.arabic_department_name,\n          new Date(),\n          departmentDetails.updated_by,\n          departmentDetails.hims_d_department_id\n        ];\n\n        connection.query(queryBuilder, inputs, (error, result) => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n          connection.commit(error => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n\n            req.records = result;\n            next();\n          });\n        });\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\nlet deleteDepartment = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    deleteRecord(\n      {\n        db: req.db,\n        tableName: \"hims_d_department\",\n        id: req.body.hims_d_department_id,\n        query:\n          \"UPDATE hims_d_department SET  record_status='I' WHERE hims_d_department_id=?\",\n        values: [req.body.hims_d_department_id]\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get Departments\nlet selectDepartment = (req, res, next) => {\n  let selectWhere = {\n    hims_d_department_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_d_department_id, department_code, department_name, arabic_department_name,\\\n        department_desc, department_type, effective_start_date, effective_end_date, department_status\\\n        from hims_d_department where record_status='A' AND \" +\n          where.condition +\n          \" order by hims_d_department_id desc\",\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get SUB-Departments\nlet selectSubDepartment = (req, res, next) => {\n  let selectWhere = {\n    department_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_d_sub_department_id, sub_department_code, sub_department_name, arabic_sub_department_name,\\\n        sub_department_desc, department_id, effective_start_date, effective_end_date, sub_department_status\\\n        from  hims_d_sub_department where record_status='A' and \" +\n          where.condition +\n          \" order by hims_d_sub_department_id desc\",\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add  SUB_departments\nlet addSubDepartment = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT INTO `hims_d_sub_department` (sub_department_code,sub_department_name,\\\n          arabic_sub_department_name,sub_department_desc,department_id,effective_start_date,\\\n          effective_end_date,created_date, created_by, updated_date, updated_by)\\\n          VALUE(?,?,?,?,?,?,?,?,?,?,?)\",\n        [\n          input.sub_department_code,\n          input.sub_department_name,\n          input.arabic_sub_department_name,\n          input.sub_department_desc,\n          input.department_id,\n          input.effective_start_date,\n          input.effective_end_date,\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet updateSubDepartment = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let subDepartmentDetails = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.query(\n        \"UPDATE `hims_d_sub_department`\\\n   SET `sub_department_name`=?, `sub_department_desc`=?,arabic_sub_department_name=?\\\n   , `effective_start_date`=?, `effective_end_date`=? \\\n   ,`updated_date`=?, `updated_by`=?\\\n   WHERE `record_status`='A' AND `hims_d_sub_department_id`=? ;\",\n        [\n          subDepartmentDetails.sub_department_name,\n          subDepartmentDetails.sub_department_desc,\n          subDepartmentDetails.arabic_sub_department_name,\n          subDepartmentDetails.effective_start_date,\n          subDepartmentDetails.effective_end_date,\n          new Date(),\n          subDepartmentDetails.updated_by,\n          subDepartmentDetails.hims_d_sub_department_id\n        ],\n        (error, result) => {\n          connection.release();\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by:Noor to get sub departments\nlet selectdoctors = (req, res, next) => {\n  let inputClicnicalNonClinicalDept = {\n    department_type: \"ALL\"\n  };\n  debugFunction(\"selectdoctors\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = extend(inputClicnicalNonClinicalDept, req.query);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let connectionString = \"\";\n      if (where.department_type == \"CLINICAL\") {\n        connectionString = \" and hims_d_department.department_type='CLINICAL' \";\n      } else if (where.department_type == \"NON-CLINICAL\") {\n        connectionString =\n          \" and hims_d_department.department_type='NON-CLINICAL' \";\n      }\n\n      // connection.query(\n      //   \"select hims_d_sub_department.hims_d_sub_department_id ,sub_department_code,sub_department_name\\\n      //    ,sub_department_desc, arabic_sub_department_name, hims_d_sub_department.department_id,hims_d_department.department_type \\\n      //    from hims_d_sub_department,hims_d_department where \\\n      //    hims_d_sub_department.department_id=hims_d_department.hims_d_department_id \\\n      //    and hims_d_department.record_status='A' and sub_department_status='A' \\\n      //    \" +\n      //     connectionString,\n      //   (error, result) => {\n      //     if (error) {\n      //       connection.release();\n      //       next(error);\n      //     }\n      //     // req.records = result;\n      //     //sbdepartment = extend(sbdepartment, result.body);\n      //     // console.log(sbdepartment);\n      //     //next();\n      //   }\n      // );\n\n      connection.query(\n        \"select hims_m_employee_department_mappings.employee_id,\\\n         hims_m_employee_department_mappings.sub_department_id,\\\n      hims_d_employee.full_name,\\\n      hims_d_employee.arabic_name,\\\n      hims_m_employee_department_mappings.services_id,\\\n      hims_d_sub_department.department_id,\\\n      hims_d_sub_department.sub_department_name,\\\n      hims_d_sub_department.arabic_sub_department_name,\\\n      hims_d_sub_department.department_type\\\n      from hims_m_employee_department_mappings,\\\n      hims_d_employee,hims_d_sub_department,hims_d_department,\\\n      hims_d_employee_category,hims_m_category_speciality_mappings\\\n      where\\\n      hims_d_department.hims_d_department_id = hims_d_sub_department.department_id\\\n      and hims_m_employee_department_mappings.employee_id = hims_d_employee.hims_d_employee_id \\\n      and hims_d_sub_department.hims_d_sub_department_id= hims_m_employee_department_mappings.sub_department_id\\\n      and hims_m_employee_department_mappings.record_status='A'\\\n      and hims_d_department.hims_d_department_id = hims_d_sub_department.department_id\\\n      and hims_d_sub_department.record_status='A'\\\n      and hims_d_employee.record_status ='A'\\\n      and hims_d_sub_department.sub_department_status='A'\\\n      and hims_d_employee.employee_status='A'\\\n      and hims_d_department.department_type='CLINICAL'\\\n      and hims_d_employee.isdoctor='Y'\\\n      group by hims_m_employee_department_mappings.employee_id,hims_m_employee_department_mappings.sub_department_id;\",\n        (error, results) => {\n          connection.release();\n          if (error) {\n            next(error);\n          }\n\n          let departments = new LINQ(results).GroupBy(g => g.sub_department_id);\n          let doctors = new LINQ(results).GroupBy(g => g.employee_id);\n          // .SelectMany(s => {\n          //   return s;\n          // })\n          // .ToArray();\n          // .Select(s => {\n          //   debugLog(\"log of \", s);\n          //   return {\n          //     sub_department_id: s.sub_department_id,\n          //     sub_department_name: s.sub_department_name,\n          //     employee_id: s.employee_id\n          //   };\n          // });\n          //.ToArray();\n\n          req.records = { departments: departments, doctors: doctors };\n          //extend(sbdepartment, doctorsInfo);\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by:irfan to get sub departments doctors and clinic\nlet selectDoctorsAndClinic = (req, res, next) => {\n  let inputClicnicalNonClinicalDept = {\n    department_type: \"ALL\"\n  };\n  debugFunction(\"selectdoctors\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = extend(inputClicnicalNonClinicalDept, req.query);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let connectionString = \"\";\n      if (where.department_type == \"CLINICAL\") {\n        connectionString = \" and hims_d_department.department_type='CLINICAL' \";\n      } else if (where.department_type == \"NON-CLINICAL\") {\n        connectionString =\n          \" and hims_d_department.department_type='NON-CLINICAL' \";\n      }\n\n      connection.query(\n        \"select hims_m_employee_department_mappings.employee_id as provider_id,\\\n         hims_m_employee_department_mappings.sub_department_id as sub_dept_id,\\\n       hims_d_employee.full_name,\\\n  hims_d_employee.arabic_name,\\\n      hims_m_employee_department_mappings.services_id,\\\n      hims_d_sub_department.department_id,\\\n      hims_d_sub_department.sub_department_name,\\\n      hims_d_sub_department.arabic_sub_department_name,hims_d_appointment_clinic_id as clinic_id,AP.description as clinic_description\\\n      from hims_m_employee_department_mappings,\\\n      hims_d_employee,hims_d_sub_department,hims_d_department,\\\n      hims_d_employee_category,hims_m_category_speciality_mappings,hims_d_appointment_clinic AP\\\n      where\\\n      hims_d_department.hims_d_department_id = hims_d_sub_department.department_id\\\n      and hims_m_employee_department_mappings.employee_id = hims_d_employee.hims_d_employee_id \\\n      and hims_d_sub_department.hims_d_sub_department_id= hims_m_employee_department_mappings.sub_department_id\\\n      and hims_m_employee_department_mappings.record_status='A'\\\n      and hims_d_department.hims_d_department_id = hims_d_sub_department.department_id\\\n      and hims_d_sub_department.record_status='A'\\\n      and hims_d_employee.record_status ='A'\\\n      and hims_d_sub_department.sub_department_status='A'\\\n      and hims_d_employee.employee_status='A'\\\n      and hims_d_department.department_type='CLINICAL'\\\n      and hims_d_employee.isdoctor='Y'\\\n      and AP.record_status='A' and hims_d_employee.hims_d_employee_id=AP.provider_id \\\n      group by hims_m_employee_department_mappings.employee_id,hims_m_employee_department_mappings.sub_department_id;\",\n        (error, results) => {\n          connection.release();\n          if (error) {\n            next(error);\n          }\n\n          let departments = new LINQ(results).GroupBy(g => g.sub_dept_id);\n          let doctors = new LINQ(results).GroupBy(g => g.provider_id);\n          // .SelectMany(s => {\n          //   return s;\n          // })\n          // .ToArray();\n          // .Select(s => {\n          //   debugLog(\"log of \", s);\n          //   return {\n          //     sub_department_id: s.sub_department_id,\n          //     sub_department_name: s.sub_department_name,\n          //     employee_id: s.employee_id\n          //   };\n          // });\n          //.ToArray();\n\n          req.records = { departments: departments, doctors: doctors };\n          //extend(sbdepartment, doctorsInfo);\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by:irfan to delete sub department\nlet deleteSubDepartment = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    deleteRecord(\n      {\n        db: req.db,\n        tableName: \"hims_d_sub_department\",\n        id: req.body.hims_d_sub_department_id,\n        query:\n          \"UPDATE hims_d_sub_department SET  record_status='I' WHERE hims_d_sub_department_id=?\",\n        values: [req.body.hims_d_sub_department_id]\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by:irfan to makeSubDepartmentInActive\nlet makeSubDepartmentInActive = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    deleteRecord(\n      {\n        db: req.db,\n        tableName: \"hims_d_sub_department\",\n        id: req.body.hims_d_sub_department_id,\n        query:\n          \"UPDATE hims_d_sub_department SET  sub_department_status='I' WHERE hims_d_sub_department_id=?\",\n        values: [req.body.hims_d_sub_department_id]\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by:irfan to makeDepartmentInActive\nlet makeDepartmentInActive = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    deleteRecord(\n      {\n        db: req.db,\n        tableName: \"hims_d_department\",\n        id: req.body.hims_d_department_id,\n        query:\n          \"UPDATE hims_d_department SET  department_status='I' WHERE hims_d_department_id=?\",\n        values: [req.body.hims_d_department_id]\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addDepartment,\n  updateDepartment,\n  selectDepartment,\n  selectSubDepartment,\n  addSubDepartment,\n  updateSubDepartment,\n  deleteDepartment,\n  selectdoctors,\n  selectDoctorsAndClinic,\n  deleteSubDepartment,\n  makeSubDepartmentInActive,\n  makeDepartmentInActive\n};\n"]}