{"version":3,"sources":["../../../src/model/mrd.js"],"names":["getPatientMrdList","req","res","next","selectWhere","patient_code","arabic_name","date_of_birth","contact_number","hims_d_patient_id","db","httpStatus","dataBaseNotInitilizedError","patientName","query","full_name","registration_date","where","getConnection","error","connection","condition","values","result","records","e","getPatientEncounterDetails","patient_id","getPatientChiefComplaint","episode_id","getPatientDiagnosis","getPatientMedication","encounter_id","getPatientInvestigation","conString","visit_id","getPatientPaymentDetails","allVisits","LINQ","Where","w","Select","s","ToArray","outputArray","length","i","billHeadResult","k","Promise","resolve","reject","hims_f_billing_header_id","recptResult","then","insResult","push","prov_date","bill_date","format","provider_name","receipt","resultRCPT","getPatientTreatments","hims_d_service_type_id","procResult","module","exports"],"mappings":"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","file":"mrd.js","sourcesContent":["\"use strict\";\nimport extend from \"extend\";\nimport { whereCondition, releaseDBConnection } from \"../utils\";\nimport moment from \"moment\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { LINQ } from \"node-linq\";\nimport { debugLog } from \"../utils/logging\";\n\n//created by irfan: to get Patient Mrd List\nlet getPatientMrdList = (req, res, next) => {\n  let selectWhere = {\n    patient_code: \"ALL\",\n\n    arabic_name: \"ALL\",\n    date_of_birth: \"ALL\",\n    contact_number: \"ALL\",\n    hims_d_patient_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let patientName = \"\";\n    if (req.query.full_name != \"null\" && req.query.full_name != null) {\n      patientName = `and full_name like '%${req.query.full_name}%'`;\n    }\n    delete req.query.full_name;\n\n    let registration_date = \"\";\n\n    if (\n      req.query.registration_date != \"null\" &&\n      req.query.registration_date != null\n    ) {\n      registration_date = `and date(registration_date)= date('${\n        req.query.registration_date\n      }')`;\n    }\n\n    delete req.query.registration_date;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_d_patient_id,patient_code,registration_date,first_name,middle_name,\\\n        last_name,full_name,arabic_name,gender,date_of_birth,age,marital_status,\\\n        contact_number,nationality_id ,N.nationality,secondary_contact_number,email,emergency_contact_name,emergency_contact_number,\\\n        relationship_with_patient,postal_code,\\\n        primary_identity_id,DOC.identity_document_name as primary_document_name,\\\n        primary_id_no,secondary_id_no,photo_file,primary_id_file,\\\n        secondary_id_file,advance_amount,patient_type,vat_applicable\\\n        from hims_f_patient P, hims_d_nationality N,hims_d_identity_document DOC\\\n        where P.record_status='A' and N.record_status='A' and DOC.record_status='A' and\\\n        P.nationality_id=N.hims_d_nationality_id and P.primary_identity_id=DOC.hims_d_identity_document_id  \" +\n          patientName +\n          \"\" +\n          registration_date +\n          \" AND \" +\n          where.condition,\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get Patient Encounter Details\nlet getPatientEncounterDetails = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    // select hims_f_patient_encounter_id, PE.patient_id,P.full_name,PE.provider_id,E.full_name as provider_name, visit_id,V.insured,\\\n    //     V.sub_department_id,\\\n    //     SD.sub_department_name,PE.episode_id,PE.encounter_id,PE.updated_date as encountered_date\\\n    //     from hims_f_patient_encounter PE,hims_f_patient P,hims_d_employee E,hims_f_patient_visit V,hims_d_sub_department SD\\\n    //     where PE.record_status='A' and P.record_status='A' and E.record_status='A' and V.record_status='A' and SD.record_status='A'\\\n    //      and PE.patient_id=P.hims_d_patient_id and E.hims_d_employee_id=PE.provider_id\\\n    //      and V.hims_f_patient_visit_id=PE.visit_id and V.sub_department_id=SD.hims_d_sub_department_id and\\\n    //      encounter_id <>'null' and PE.patient_id=?\\\n    //      order by encountered_date desc\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_f_patient_encounter_id, PE.patient_id,P.full_name,PE.provider_id,E.full_name as provider_name, visit_id,\\\n        V.insured,V.sec_insured,V.sub_department_id,SD.sub_department_name,PE.episode_id,PE.encounter_id,PE.updated_date as encountered_date,\\\n                primary_insurance_provider_id,IP.insurance_provider_name as pri_insurance_provider_name,\\\n            secondary_insurance_provider_id,IPR.insurance_provider_name as sec_insurance_provider_name  from hims_f_patient_encounter PE  inner join  hims_f_patient P on\\\n             PE.patient_id=P.hims_d_patient_id   inner join hims_d_employee E on E.hims_d_employee_id=PE.provider_id  inner join hims_f_patient_visit V on V.hims_f_patient_visit_id=PE.visit_id\\\n                inner join hims_d_sub_department SD on V.sub_department_id=SD.hims_d_sub_department_id   left join hims_m_patient_insurance_mapping IM on\\\n                 V.hims_f_patient_visit_id=IM.patient_visit_id  left join hims_d_insurance_provider IP  on IM.primary_insurance_provider_id=IP.hims_d_insurance_provider_id   left join hims_d_insurance_provider IPR  on \\\n         IM.secondary_insurance_provider_id=IPR.hims_d_insurance_provider_id   where PE.record_status='A' and P.record_status='A' and E.record_status='A' \\\n                 and V.record_status='A' and SD.record_status='A'   and encounter_id <>'null' and PE.patient_id=?\\\n                 order by encountered_date desc;\",\n        [req.query.patient_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get Patient Chief Complaint\nlet getPatientChiefComplaint = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_f_episode_chief_complaint_id ,episode_id,chief_complaint_id,HH.hpi_description as chief_complaint\\\n        from hims_f_episode_chief_complaint ECC,hims_d_hpi_header HH\\\n        Where ECC.record_status='A' and HH.record_status='A' \\\n        and ECC.chief_complaint_id=HH.hims_d_hpi_header_id and episode_id=?\",\n        [req.query.episode_id],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to  get Patient Diagnosis\nlet getPatientDiagnosis = (req, res, next) => {\n  let selectWhere = {\n    episode_id: \"ALL\",\n    patient_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_f_patient_diagnosis_id, patient_id, episode_id, daignosis_id,ICD.icd_code as daignosis_code,\\\n        ICD.icd_description as daignosis_description  ,diagnosis_type, final_daignosis,\\\n        PD.created_date as diagnosis_date  from hims_f_patient_diagnosis PD,hims_d_icd ICD\\\n         where PD.record_status='A' and   ICD.record_status='A'\\\n         and PD.daignosis_id=ICD.hims_d_icd_id and \" +\n          where.condition +\n          \" order by diagnosis_date desc\",\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to  get Patient medication\nlet getPatientMedication = (req, res, next) => {\n  let selectWhere = {\n    patient_id: \"ALL\",\n    encounter_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select  hims_f_prescription_id, patient_id, encounter_id, provider_id, episode_id,\\\n        prescription_date, prescription_status , \\\n        hims_f_prescription_detail_id, prescription_id, item_id,IM.item_description, PD.generic_id, IG.generic_name, \\\n        dosage, frequency, no_of_days,\\\n        dispense, frequency_type, frequency_time, start_date, PD.service_id, uom_id, item_category_id, PD.item_status\\\n         from hims_f_prescription P,hims_f_prescription_detail PD,hims_d_item_master IM,hims_d_item_generic IG\\\n        where P.record_status='A' and IM.record_status='A' and IG.record_status='A' and \\\n        P.hims_f_prescription_id=PD.prescription_id and PD.item_id=IM.hims_d_item_master_id \\\n        and PD.generic_id =IG.hims_d_item_generic_id and \" +\n          where.condition +\n          \" order by prescription_date desc\",\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to  get Patient Investigation\nlet getPatientInvestigation = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    // select hims_f_ordered_services_id, OS.patient_id, OS.visit_id,  doctor_id ,services_id,S.service_name,\\\n    //     L.billed as lab_billed, L.status as lab_ord_status,R.billed as rad_billed, R.status as rad_ord_status \\\n    //        from hims_f_ordered_services OS inner join hims_d_services S on  OS.services_id=S.hims_d_services_id \\\n    //        left join hims_f_lab_order L on OS.visit_id=L.visit_id  left join hims_f_rad_order R on OS.visit_id=R.visit_id \\\n    //                     where OS.record_status='A' and S.record_status='A' and OS.visit_id=?\n\n    let conString = \"\";\n\n    if (req.query.patient_id != null && req.query.patient_id != \"null\") {\n      conString = \"patient_id=\" + req.query.patient_id;\n    } else if (req.query.visit_id != null && req.query.visit_id != \"null\") {\n      conString = \"visit_id=\" + req.query.visit_id;\n    }\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_f_ordered_services_id, OS.patient_id, OS.visit_id,visit_date, OS.doctor_id,\\\n        E.full_name as provider_name, OS.service_type_id,\\\n                services_id,S.service_name,hims_f_lab_order_id, L.billed as lab_billed, \\\n        L.status as lab_ord_status,R.hims_f_rad_order_id,R.billed as rad_billed, R.status as rad_ord_status\\\n        from  hims_f_ordered_services OS \\\n         inner join hims_d_services S on  OS.services_id=S.hims_d_services_id \\\n         inner join hims_d_employee  E on OS.doctor_id=E.hims_d_employee_id\\\n          inner join hims_f_patient_visit V on OS.visit_id=V.hims_f_patient_visit_id\\\n         left join  hims_f_lab_order L on OS.visit_id=L.visit_id and OS.services_id= L.service_id\\\n         left join hims_f_rad_order R on OS.visit_id=R.visit_id  and OS.services_id=R.service_id\\\n         where OS.\" +\n          conString +\n          \" group by hims_f_ordered_services_id order by OS.visit_id desc\",\n\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to  getPatientPaymentDetails\nlet getPatientPaymentDetails = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select distinct  visit_id from hims_f_billing_header where record_status='A' and patient_id=? order by visit_id desc;\",\n        [req.query.patient_id],\n        (error, result) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          let allVisits = new LINQ(result)\n            .Where(w => w.visit_id != null)\n            .Select(s => s.visit_id)\n            .ToArray();\n\n          debugLog(\"allVisits:\", allVisits);\n\n          let outputArray = [];\n          if (result.length > 0) {\n            //bill for each visit\n            for (let i = 0; i < allVisits.length; i++) {\n              connection.query(\n                \"select hims_f_billing_header_id ,bill_number,patient_id,visit_id,E.full_name provider_name,incharge_or_provider,bill_date,\\\n              net_amount,patient_payable,receiveable_amount,credit_amount from hims_f_billing_header BH,hims_d_employee E where BH.record_status='A' and\\\n               E.record_status='A' and BH.incharge_or_provider=E.hims_d_employee_id and visit_id=? order by bill_date desc;\",\n                [allVisits[i]],\n                (error, billHeadResult) => {\n                  if (error) {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  }\n                  debugLog(\"inside billHeadResult:\", billHeadResult);\n                  debugLog(\"zzzzz:\", outputArray);\n                  if (billHeadResult.length > 0) {\n                    for (let k = 0; k < billHeadResult.length; k++) {\n                      new Promise((resolve, reject) => {\n                        try {\n                          if (billHeadResult.length == 0) {\n                            debugLog(\"blank :\");\n                            return resolve(billHeadResult);\n                          } else {\n                            connection.query(\n                              \"select hims_f_receipt_header_id, receipt_number, receipt_date, billing_header_id, total_amount\\\n                          from hims_f_receipt_header where record_status='A' and billing_header_id=?;\",\n                              [billHeadResult[k].hims_f_billing_header_id],\n                              (error, recptResult) => {\n                                if (error) {\n                                  releaseDBConnection(db, connection);\n                                  next(error);\n                                }\n\n                                return resolve(recptResult);\n                              }\n                            );\n                          }\n                        } catch (e) {\n                          reject(e);\n                        }\n                      }).then(resultRCPT => {\n                        connection.query(\n                          \"select BH.hims_f_billing_header_id,company_payable as pri_company_payble, sec_company_payable,\\\n                          hims_f_patient_insurance_mapping_id,IM.patient_id,primary_insurance_provider_id,IP.insurance_provider_name as pri_insurance_provider_name,\\\n                          secondary_insurance_provider_id,IPR.insurance_provider_name as sec_insurance_provider_name \\\n                          from  hims_f_billing_header BH \\\n                           left join hims_m_patient_insurance_mapping IM on  BH.visit_id=IM.patient_visit_id and   IM.record_status='A'\\\n                           left join hims_d_insurance_provider IP  on IM.primary_insurance_provider_id=IP.hims_d_insurance_provider_id and   IP.record_status='A'  \\\n                           left join hims_d_insurance_provider IPR  on  IM.secondary_insurance_provider_id=IPR.hims_d_insurance_provider_id   \\\n                          where BH.record_status='A'  and   BH.hims_f_billing_header_id=?\",\n                          [billHeadResult[k].hims_f_billing_header_id],\n                          (error, insResult) => {\n                            if (error) {\n                              releaseDBConnection(db, connection);\n                              next(error);\n                            }\n                            debugLog(\"inside insurance:\", insResult);\n                            outputArray.push({\n                              ...billHeadResult[k],\n                              prov_date:\n                                moment(billHeadResult[k].bill_date).format(\n                                  \"DD-MM-YYYY\"\n                                ) +\n                                \" \" +\n                                billHeadResult[k].provider_name,\n                              ...insResult[0],\n                              receipt: resultRCPT\n                            });\n\n                            debugLog(\"outputArray:\", outputArray);\n                            if (i == allVisits.length - 1) {\n                              releaseDBConnection(db, connection);\n                              req.records = outputArray;\n                              next();\n                            }\n                          }\n                        );\n                      });\n                    }\n                  } else {\n                    if (i == allVisits.length - 1) {\n                      debugLog(\"inside else no bill head:\");\n                      releaseDBConnection(db, connection);\n                      req.records = outputArray;\n\n                      debugLog(\"eee:\", outputArray);\n                      next();\n                    }\n                  }\n                }\n              );\n            }\n          } else {\n            releaseDBConnection(db, connection);\n            req.records = result;\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to  get Patient procedures or treatments\nlet getPatientTreatments = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_d_service_type_id from hims_d_service_type  where \\\n        record_status='A' and service_type='Procedure'\",\n        (error, result) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          if (result.length > 0) {\n            connection.query(\n              \"select hims_f_ordered_services_id,OS.patient_id,OS.doctor_id,E.full_name as doctor_name,OS.service_type_id,V.visit_date,services_id,\\\n        S.service_name,S.service_desc from hims_f_ordered_services OS ,hims_f_patient_visit V,hims_d_services S,hims_d_employee E\\\n        where OS.record_status='A' and V.record_status='A' and S.record_status='A' and E.record_status='A' and \\\n        OS.visit_id=V.hims_f_patient_visit_id and OS.services_id=S.hims_d_services_id and OS.doctor_id=E.hims_d_employee_id \\\n        and OS.service_type_id=? and OS.patient_id=? order by visit_date desc\",\n              [result[0].hims_d_service_type_id, req.query.patient_id],\n\n              (error, procResult) => {\n                releaseDBConnection(db, connection);\n                if (error) {\n                  next(error);\n                }\n                req.records = procResult;\n                next();\n              }\n            );\n          } else {\n            req.records = result;\n            releaseDBConnection(db, connection);\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  getPatientMrdList,\n  getPatientEncounterDetails,\n  getPatientChiefComplaint,\n  getPatientDiagnosis,\n  getPatientMedication,\n  getPatientInvestigation,\n  getPatientPaymentDetails,\n  getPatientTreatments\n};\n"]}