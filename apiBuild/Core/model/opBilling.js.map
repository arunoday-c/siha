{"version":3,"sources":["../../../src/model/opBilling.js"],"names":["billingCounter","addOpBIlling","req","res","next","db","httpStatus","dataBaseNotInitilizedError","query","JSON","parse","body","connection","beginTransaction","error","rollback","Promise","resolve","reject","counter","module_desc","onFailure","onSuccess","result","then","receipt","LINQ","output","Where","w","FirstOrDefault","receipt_number","completeNumber","options","receipt_header_id","billOutput","insertId","bill","bill_number","records","receiptData","catch","e","selectBill","headerResult","length","hims_f_billing_header_id","billdetails","hims_f_receipt_header_id","getPednigBills","selectWhere","visit_id","patient_id","created_date","getConnection","where","condition","values","module","exports"],"mappings":"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","file":"opBilling.js","sourcesContent":["\"use strict\";\nimport extend from \"extend\";\nimport {\n  whereCondition,\n  runningNumberGen,\n  releaseDBConnection\n} from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { debugFunction, debugLog } from \"../utils/logging\";\nimport { addBillData, newReceiptData } from \"../model/billing\";\nimport { LINQ } from \"node-linq\";\n//import { insertLadOrderedServices } from \"../model/laboratory\";\n\nlet billingCounter = 0;\n//created by irfan :to save opbilling data\nlet addOpBIlling = (req, res, next) => {\n  debugFunction(\"addOpBIlling\");\n  billingCounter = billingCounter + 1;\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    debugLog(\"db:\", req.db);\n    if (req.query[\"data\"] != null) {\n      req.query = JSON.parse(req.query[\"data\"]);\n      req.body = req.query;\n    }\n\n    let connection = req.connection;\n    connection.beginTransaction(error => {\n      if (error) {\n        connection.rollback(() => {\n          releaseDBConnection(db, connection);\n          next(error);\n        });\n      }\n      debugFunction(\"updateFrontDesk Promise\");\n      return new Promise((resolve, reject) => {\n        runningNumberGen({\n          db: connection,\n          counter: billingCounter,\n          module_desc: [\"PAT_BILL\", \"RECEIPT\"],\n          onFailure: error => {\n            reject(error);\n          },\n          onSuccess: result => {\n            resolve(result);\n          }\n        });\n      })\n        .then(output => {\n          let receipt = new LINQ(output)\n            .Where(w => w.module_desc == \"RECEIPT\")\n            .FirstOrDefault();\n          req.body.receipt_number = receipt.completeNumber;\n\n          return new Promise((resolve, reject) => {\n            debugLog(\"Inside Receipts\");\n\n            req.options = {\n              db: connection,\n              onFailure: error => {\n                reject(error);\n              },\n              onSuccess: result => {\n                resolve(result);\n              }\n            };\n\n            newReceiptData(req, res, next);\n          }).then(billOutput => {\n            debugLog(\"Orver all records number gen\", output);\n            debugLog(\"Data: \", output);\n\n            req.query.receipt_header_id = billOutput.insertId;\n            req.body.receipt_header_id = billOutput.insertId;\n\n            let bill = new LINQ(output)\n              .Where(w => w.module_desc == \"PAT_BILL\")\n              .FirstOrDefault();\n\n            debugLog(\"Data: \", bill);\n            req.bill_number = bill.completeNumber;\n            req.body.bill_number = bill.completeNumber;\n            return new Promise((resolve, reject) => {\n              debugLog(\"Inside Billing\");\n              delete req[\"options\"][\"onFailure\"];\n              delete req[\"options\"][\"onSuccess\"];\n              req.options = {\n                db: connection,\n                onFailure: error => {\n                  reject(error);\n                },\n                onSuccess: result => {\n                  resolve(result);\n                }\n              };\n              //Bill generation\n              addBillData(req, res, next);\n            }).then(receiptData => {\n              req.records = receiptData;\n              if (billingCounter != 0) billingCounter = billingCounter - 1;\n              releaseDBConnection(db, connection);\n              next();\n            });\n          });\n        })\n\n        .catch(error => {\n          if (billingCounter != 0) billingCounter = billingCounter - 1;\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet selectBill = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let connection = req.connection;\n    // db.getConnection((error, connection) => {\n    //   if (error) {\n    //     next(error);\n    //   }\n    // let where = whereCondition(extend(selectWhere, req.query));\n    connection.query(\n      //   \"SELECT  `hims_f_billing_header_id`, `patient_id`, `billing_type_id`, `visit_id`, `bill_number`,\\\n      //   'incharge_or_provider`,`bill_date`,`advance_amount`,`advance_adjust`,`discount_amount`,`sub_total_amount`,\\\n      //   `total_tax`,`net_total`,`billing_status`,`copay_amount`,`deductable_amount`,`sec_copay_amount`,\\\n      //   `sec_deductable_amount`,`gross_total`,`sheet_discount_amount`,`sheet_discount_percentage`,`net_amount`,\\\n      //   `patient_res`,`company_res`,`sec_company_res`,`patient_payable`,`company_payable`,`sec_company_payable`,\\\n      //   `patient_tax`,`company_tax`,`sec_company_tax`,`net_tax`,`credit_amount`,`receiveable_amount' \\\n      //   FROM `hims_f_billing_header` \\\n      //  WHERE `record_status`='A' AND \" +\n\n      //===========\n      // SELECT * FROM hims_f_billing_header INNER JOIN hims_f_billing_details ON \\\n      //         hims_f_billing_header.hims_f_billing_header_id=hims_f_billing_details.hims_f_billing_header_id \\\n      //         inner join hims_f_patient as PAT on hims_f_billing_header.patient_id = PAT.hims_d_patient_id \\\n      //         where hims_f_billing_header.record_status='A' AND hims_f_billing_header.bill_number\n\n      // INNER JOIN hims_f_billing_details bd  ON\\\n      // bh.hims_f_billing_header_id=bd.hims_f_billing_header_id\\\n      \"SELECT * FROM hims_f_billing_header bh \\\n      inner join hims_f_patient as PAT on bh.patient_id = PAT.hims_d_patient_id\\\n      inner join hims_f_patient_visit as vst on bh.visit_id = vst.hims_f_patient_visit_id\\\n      where bh.record_status='A' AND bh.bill_number='\" +\n        req.query.bill_number +\n        \"'\",\n\n      (error, headerResult) => {\n        if (error) {\n          releaseDBConnection(db, connection);\n          next(error);\n        }\n        debugLog(\"result: \", headerResult);\n        if (headerResult.length != 0) {\n          debugLog(\n            \"hims_f_billing_header_id: \",\n            headerResult[0].hims_f_billing_header_id\n          );\n          connection.query(\n            \"select * from hims_f_billing_details where hims_f_billing_header_id=? and record_status='A'\",\n            headerResult[0].hims_f_billing_header_id,\n            (error, billdetails) => {\n              if (error) {\n                releaseDBConnection(db, connection);\n                next(error);\n              }\n              req.records = {\n                ...headerResult[0],\n                ...{ billdetails },\n                ...{\n                  hims_f_receipt_header_id: headerResult[0].receipt_header_id\n                }\n              };\n              releaseDBConnection(db, connection);\n              next();\n              debugLog(\"Billing Result: \", req.records);\n            }\n          );\n        } else {\n          req.records = headerResult;\n          releaseDBConnection(db, connection);\n          next();\n        }\n      }\n    );\n    // });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet getPednigBills = (req, res, next) => {\n  let selectWhere = {\n    visit_id: \"ALL\",\n    patient_id: \"ALL\",\n    visit_id: \"ALL\"\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    req.query[\"date(S.created_date)\"] = req.query.created_date;\n    delete req.query.created_date;\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let where = whereCondition(extend(selectWhere, req.query));\n      connection.query(\n        \"SELECT  S.patient_id, S.visit_id, S.insurance_yesno, P.patient_code,P.full_name FROM hims_f_ordered_services S,hims_f_patient P  \\\n       WHERE S.record_status='A' AND S.billed='N' AND P.hims_d_patient_id=S.patient_id AND\" +\n          where.condition,\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = { addOpBIlling, selectBill, getPednigBills };\n"]}