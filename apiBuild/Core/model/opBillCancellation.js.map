{"version":3,"sources":["../../../src/model/opBillCancellation.js"],"names":["billingCounter","addOpBillCancellation","req","res","next","db","httpStatus","dataBaseNotInitilizedError","inputParam","body","receipt_header_id","records","hospital_id","connection","Promise","resolve","reject","counter","module_desc","onFailure","error","onSuccess","result","then","documentCode","completeNumber","query","patient_id","visit_id","from_bill_id","incharge_or_provider","bill_cancel_date","Date","advance_amount","advance_adjust","discount_amount","sub_total_amount","total_tax","billing_status","sheet_discount_amount","sheet_discount_percentage","net_amount","net_total","company_res","sec_company_res","patient_res","patient_payable","company_payable","sec_company_payable","patient_tax","company_tax","sec_company_tax","net_tax","credit_amount","payable_amount","created_by","updated_by","copay_amount","sec_copay_amount","deductable_amount","sec_deductable_amount","headerResult","insertId","insurtColumns","billdetails","join","sampleInputObject","arrayObj","newFieldToInsert","userIdentity","algaeh_d_app_user_id","detailsRecords","bill_cancel_number","hims_f_bill_cancel_header_id","receipt_number","e","getBillCancellation","length","hims_f_receipt_header_id","cal_receipt_header_id","updateOPBilling","cancel_remarks","data","delivery_note_number","module","exports"],"mappings":"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","file":"opBillCancellation.js","sourcesContent":["\"use strict\";\nimport extend from \"extend\";\nimport {\n  whereCondition,\n  runningNumberGen,\n  releaseDBConnection,\n  jsonArrayToObject\n} from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { debugFunction, debugLog } from \"../utils/logging\";\n\nlet billingCounter = 0;\n//created by Nowshad :to save Op Bill Cancellation data\nlet addOpBillCancellation = (req, res, next) => {\n  debugFunction(\"addOpBillCancellation\");\n  billingCounter = billingCounter + 1;\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let inputParam = extend({}, req.body);\n\n    inputParam.receipt_header_id = req.records.receipt_header_id;\n    inputParam.hospital_id = 1;\n\n    let connection = req.connection;\n\n    return new Promise((resolve, reject) => {\n      runningNumberGen({\n        db: connection,\n        counter: billingCounter,\n        module_desc: [\"OP_CBIL\"],\n        onFailure: error => {\n          reject(error);\n        },\n        onSuccess: result => {\n          resolve(result);\n        }\n      });\n    }).then(result => {\n      let documentCode = result[0].completeNumber;\n      debugLog(\"documentCode:\", documentCode);\n\n      connection.query(\n        \"INSERT INTO hims_f_bill_cancel_header ( bill_cancel_number, patient_id, visit_id, from_bill_id,receipt_header_id,\\\n          hospital_id,incharge_or_provider, bill_cancel_date, advance_amount,advance_adjust, discount_amount, sub_total_amount \\\n          , total_tax,  billing_status, sheet_discount_amount, sheet_discount_percentage, net_amount, net_total \\\n          , company_res, sec_company_res, patient_res, patient_payable, company_payable, sec_company_payable \\\n          , patient_tax, company_tax, sec_company_tax, net_tax, credit_amount, payable_amount \\\n          , created_by, created_date, updated_by, updated_date, copay_amount, sec_copay_amount ,deductable_amount, sec_deductable_amount) \\\n          VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n        [\n          documentCode,\n          inputParam.patient_id,\n          inputParam.visit_id,\n          inputParam.from_bill_id,\n          inputParam.receipt_header_id,\n          inputParam.hospital_id,\n          inputParam.incharge_or_provider,\n          inputParam.bill_cancel_date != null\n            ? new Date(inputParam.bill_cancel_date)\n            : inputParam.bill_cancel_date,\n          inputParam.advance_amount,\n          inputParam.advance_adjust,\n          inputParam.discount_amount,\n          inputParam.sub_total_amount,\n          inputParam.total_tax,\n          inputParam.billing_status,\n          inputParam.sheet_discount_amount,\n          inputParam.sheet_discount_percentage,\n          inputParam.net_amount,\n          inputParam.net_total,\n          inputParam.company_res,\n          inputParam.sec_company_res,\n          inputParam.patient_res,\n          inputParam.patient_payable,\n          inputParam.company_payable,\n          inputParam.sec_company_payable,\n          inputParam.patient_tax,\n          inputParam.company_tax,\n          inputParam.sec_company_tax,\n          inputParam.net_tax,\n          inputParam.credit_amount,\n          inputParam.payable_amount,\n          inputParam.created_by,\n          new Date(),\n          inputParam.updated_by,\n          new Date(),\n          inputParam.copay_amount,\n          inputParam.sec_copay_amount,\n          inputParam.deductable_amount,\n          inputParam.sec_deductable_amount\n        ],\n        (error, headerResult) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          debugLog(\" pos header id :\", headerResult);\n\n          if (headerResult.insertId != null) {\n            debugLog(\"Billing Header \", headerResult.insertId);\n\n            const insurtColumns = [\n              \"service_type_id\",\n              \"services_id\",\n              \"quantity\",\n              \"unit_cost\",\n              \"insurance_yesno\",\n              \"gross_amount\",\n              \"discount_amout\",\n              \"discount_percentage\",\n              \"net_amout\",\n              \"copay_percentage\",\n              \"copay_amount\",\n              \"deductable_amount\",\n              \"deductable_percentage\",\n              \"tax_inclusive\",\n              \"patient_tax\",\n              \"company_tax\",\n              \"total_tax\",\n              \"patient_resp\",\n              \"patient_payable\",\n              \"comapany_resp\",\n              \"company_payble\",\n              \"sec_company\",\n              \"sec_deductable_percentage\",\n              \"sec_deductable_amount\",\n              \"sec_company_res\",\n              \"sec_company_tax\",\n              \"sec_company_paybale\",\n              \"sec_copay_percntage\",\n              \"sec_copay_amount\"\n            ];\n            debugLog(\"Billing Header \", headerResult.insertId);\n            debugLog(\"billdetails: \", inputParam.billdetails);\n            connection.query(\n              \"INSERT INTO hims_f_bill_cancel_details(\" +\n                insurtColumns.join(\",\") +\n                \",created_by, created_date, updated_by, updated_date, hims_f_bill_cancel_header_id) VALUES ?\",\n              [\n                jsonArrayToObject({\n                  sampleInputObject: insurtColumns,\n                  arrayObj: inputParam.billdetails,\n                  newFieldToInsert: [\n                    req.userIdentity.algaeh_d_app_user_id,\n                    new Date(),\n                    req.userIdentity.algaeh_d_app_user_id,\n                    new Date(),\n                    headerResult.insertId\n                  ],\n                  req: req\n                })\n              ],\n              (error, detailsRecords) => {\n                if (error) {\n                  debugLog(\"error: \", error);\n                  releaseDBConnection(db, connection);\n                  next(error);\n                }\n\n                req.records = {\n                  bill_cancel_number: documentCode,\n                  hims_f_bill_cancel_header_id: headerResult.insertId,\n                  receipt_number: req.records.receipt_number\n                };\n                releaseDBConnection(db, connection);\n                next();\n              }\n            );\n          } else {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet getBillCancellation = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let connection = req.connection;\n\n    // INNER JOIN hims_f_bill_cancel_details bd  ON\\\n    //   bh.hims_f_bill_cancel_header_id=bd.hims_f_bill_cancel_header_id\\\n    connection.query(\n      \"SELECT *, bh.receipt_header_id as cal_receipt_header_id FROM hims_f_bill_cancel_header bh \\\n      inner join hims_f_patient as PAT on bh.patient_id = PAT.hims_d_patient_id\\\n      inner join hims_f_patient_visit as vst on bh.visit_id = vst.hims_f_patient_visit_id\\\n      inner join hims_f_billing_header as bill on BH.from_bill_id = bill.hims_f_billing_header_id \\\n      where bh.record_status='A' AND bh.bill_cancel_number='\" +\n        req.query.bill_cancel_number +\n        \"'\",\n\n      (error, headerResult) => {\n        if (error) {\n          releaseDBConnection(db, connection);\n          next(error);\n        }\n\n        debugLog(\"result: \", headerResult);\n        if (headerResult.length != 0) {\n          debugLog(\n            \"hims_f_bill_cancel_header_id: \",\n            headerResult[0].hims_f_bill_cancel_header_id\n          );\n          connection.query(\n            \"select * from hims_f_bill_cancel_details where hims_f_bill_cancel_header_id=? and record_status='A'\",\n            headerResult[0].hims_f_bill_cancel_header_id,\n            (error, billdetails) => {\n              if (error) {\n                releaseDBConnection(db, connection);\n                next(error);\n              }\n              req.records = {\n                ...headerResult[0],\n                ...{ billdetails },\n                ...{\n                  hims_f_receipt_header_id:\n                    headerResult[0].cal_receipt_header_id\n                }\n              };\n              releaseDBConnection(db, connection);\n              next();\n              debugLog(\"Billing Result: \", req.records);\n            }\n          );\n        } else {\n          req.records = headerResult;\n          releaseDBConnection(db, connection);\n          next();\n        }\n\n        // debugLog(\"cal_receipt_header_id: \", result[0].cal_receipt_header_id);\n        // req.records = {\n        //   result,\n        //   hims_f_receipt_header_id: result[0].cal_receipt_header_id\n        // };\n        // releaseDBConnection(db, connection);\n        // next();\n      }\n    );\n    // });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to Update PO Entry\nlet updateOPBilling = (req, res, next) => {\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  let connection = req.connection;\n  let inputParam = extend({}, req.body);\n\n  debugLog(\"inputParam.from_bill_id: \", inputParam.from_bill_id);\n  connection.query(\n    \"UPDATE `hims_f_billing_header` SET `cancelled`=?, `cancel_remarks`=?,`cancel_by` = ?,`updated_date` = ? \\\n      WHERE `hims_f_billing_header_id`=?\",\n    [\n      \"Y\",\n      inputParam.cancel_remarks,\n      req.userIdentity.algaeh_d_app_user_id,\n      new Date(),\n      inputParam.from_bill_id\n    ],\n    (error, result) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n      req.data = req.records.delivery_note_number;\n      next();\n    }\n  );\n};\n\nmodule.exports = {\n  addOpBillCancellation,\n  getBillCancellation,\n  updateOPBilling\n};\n"]}