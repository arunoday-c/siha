{"version":3,"sources":["../../../src/model/patientType.js"],"names":["selectPattypeStatement","req","res","next","db","httpStatus","dataBaseNotInitilizedError","pagePaging","paging","Page","pageNo","page","pageSize","query","records","result","error","e","addPatientType","visitType","hims_d_patient_type_id","patient_type_code","patitent_type_desc","arabic_patitent_type_desc","created_by","userIdentity","algaeh_d_app_user_id","updated_by","visit_status","getConnection","connection","inputParam","body","Date","updatePatientType","deletePatientType","tableName","id","values","getPatientType","whereStatement","where","condition","module","exports"],"mappings":"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","file":"patientType.js","sourcesContent":["import extend from \"extend\";\nimport {\n  whereCondition,\n  releaseDBConnection,\n  deleteRecord,\n  selectStatement,\n  paging\n} from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { debugLog } from \"../utils/logging\";\n\nlet selectPattypeStatement = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let pagePaging = \"\";\n    if (req.paging != null) {\n      let Page = paging(req.paging);\n      pagePaging += \" LIMIT \" + Page.pageNo + \",\" + page.pageSize;\n    }\n\n    // let condition = whereCondition(extend({}, req.query));\n    let query =\n      \"SELECT SQL_CALC_FOUND_ROWS `hims_d_patient_type_id`, `patient_type_code`, `patitent_type_desc`,`arabic_patitent_type_desc`\\\n    , `created_by`, `created_date`, `updated_by`, `updated_date` FROM `hims_d_patient_type`  WHERE record_status='A';\" +\n      pagePaging +\n      \" \" +\n      \"SELECT FOUND_ROWS() total_pages\";\n\n    debugLog(\"Love\", query);\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"SELECT SQL_CALC_FOUND_ROWS `hims_d_patient_type_id`, `patient_type_code`, `patitent_type_desc`,`arabic_patitent_type_desc`\\\n        , `created_by`, `created_date`, `updated_by`, `updated_date` FROM `hims_d_patient_type`  WHERE record_status='A';\" +\n          pagePaging +\n          \" \" +\n          \"SELECT FOUND_ROWS() total_pages\"\n      },\n\n      result => {\n        req.records = result;\n\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n\n  // try {\n  //   if (req.db == null) {\n  //     next(httpStatus.dataBaseNotInitilizedError());\n  //   }\n  //   let db = req.db;\n  //   db.getConnection((error, connection) => {\n  //     if (error) {\n  //       next(error);\n  //     }\n  //     let where = whereCondition(extend(whereStatement, req.query));\n  //     connection.query(\n  //       \"SELECT `hims_d_patient_type_id`, `patient_type_code`, `patitent_type_desc`,`arabic_patitent_type_desc`\\\n  //      , `created_by`, `created_date`, `updated_by`, `updated_date` FROM `hims_d_patient_type`  WHERE record_status='A' AND \" +\n  //         where.condition,\n  //       where.values,\n  //       (error, result) => {\n  //         releaseDBConnection(db, connection);\n  //         if (error) {\n  //           next(error);\n  //         }\n  //         req.records = result;\n  //         next();\n  //       }\n  //     );\n  //   });\n  // } catch (e) {\n  //   next(e);\n  // }\n};\n\nlet addPatientType = (req, res, next) => {\n  let visitType = {\n    hims_d_patient_type_id: null,\n    patient_type_code: null,\n    patitent_type_desc: null,\n    arabic_patitent_type_desc: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id,\n\n    visit_status: \"A\"\n  };\n\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    let inputParam = extend(visitType, req.body);\n    connection.query(\n      \"INSERT INTO `hims_d_patient_type` (`patient_type_code`, `patitent_type_desc`, `arabic_patitent_type_desc`, `created_by` \\\n     , `created_date`) \\\n   VALUES ( ?, ?, ?, ?, ?)\",\n      [\n        inputParam.patient_type_code,\n        inputParam.patitent_type_desc,\n        inputParam.arabic_patitent_type_desc,\n        inputParam.created_by,\n        new Date()\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\n\nlet updatePatientType = (req, res, next) => {\n  let visitType = {\n    hims_d_patient_type_id: null,\n    patient_type_code: null,\n    patitent_type_desc: null,\n    arabic_patitent_type_desc: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id,\n\n    visit_status: \"A\"\n  };\n\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    let inputParam = extend(visitType, req.body);\n    connection.query(\n      \"UPDATE `hims_d_patient_type` \\\n     SET `patitent_type_desc`=?, `arabic_patitent_type_desc`=?,  `updated_by`=?, `updated_date`=?\\\n     WHERE `record_status`='A' and `hims_d_patient_type_id`=?\",\n      [\n        inputParam.patitent_type_desc,\n        inputParam.arabic_patitent_type_desc,\n        inputParam.updated_by,\n        new Date(),\n        inputParam.hims_d_patient_type_id\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\nlet deletePatientType = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    debugLog(\n      \"req.body.hims_d_patient_type_id\",\n      req.body.hims_d_patient_type_id\n    );\n    deleteRecord(\n      {\n        db: req.db,\n        tableName: \"hims_d_patient_type\",\n        id: req.body.hims_d_patient_type_id,\n        query:\n          \"UPDATE hims_d_patient_type SET  record_status='I', \\\n         updated_by=?,updated_date=? WHERE hims_d_patient_type_id=?\",\n        values: [\n          req.body.updated_by,\n          new Date(),\n          req.body.hims_d_patient_type_id\n        ]\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet getPatientType = (req, res, next) => {\n  let whereStatement = {\n    hims_d_patient_type_id: \"ALL\",\n    patient_type_code: \"ALL\",\n    patitent_type_desc: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let where = whereCondition(extend(whereStatement, req.query));\n      connection.query(\n        \"SELECT * FROM `hims_d_patient_type`  \\\n       WHERE record_status='A' AND \" +\n          where.condition+\" order by hims_d_patient_type_id desc\",\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  selectPattypeStatement,\n  addPatientType,\n  updatePatientType,\n  deletePatientType,\n  getPatientType\n};\n"]}