{"version":3,"sources":["../../../src/model/visit.js"],"names":["insertPatientVisitData","req","res","next","inputParam","hims_f_patient_visit_id","patient_id","visit_type","visit_date","Date","visit_code","age_in_years","age_in_months","age_in_days","insured","sec_insured","department_id","sub_department_id","doctor_id","maternity_patient","is_mlc","mlc_accident_reg_no","mlc_police_station","mlc_wound_certified_date","appointment_patient","created_by","userIdentity","algaeh_d_app_user_id","updated_by","record_status","patient_message","is_critical_message","message_active_till","visit_expiery_date","episode_id","consultation","appointment_id","query","body","db","options","existingExparyDate","currentPatientEpisodeNo","today","format","internalInsertPatientVisitData","fromDate","date_of_birth","toDate","years","diff","add","months","days","undefined","existing_plan","treatment_plan_id","error","visitresult","rollback","onFailure","visit_id","insertId","patient_visit_id","resultData","eror","onSuccess","expResult","currentEpisodeNo","record","length","httpStatus","generateError","notModified","parseInt","nextEpisodeNo","updateResult","dataBase","noContent","e","addVisit","dataBaseNotInitilizedError","getConnection","connection","beginTransaction","insertVisitData","result","commit","records","numUpdate","completeNumber","callBack","visitDetails","release","logger","log","updateVisit","updateData","checkVisitExists","closeVisit","qry","i","visit_status","details","detailResult","module","exports"],"mappings":"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","file":"visit.js","sourcesContent":["import extend from \"extend\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { debugLog, debugFunction, logger } from \"../utils/logging\";\nimport { runningNumber, releaseDBConnection } from \"../utils\";\nimport moment from \"moment\";\n\n//Added by noor for code optimization aug-20-1018\nlet insertPatientVisitData = (req, res, next) => {\n  try {\n    debugFunction(\"insertPatientVisitData\");\n\n    let inputParam = extend(\n      {\n        hims_f_patient_visit_id: null,\n        patient_id: null,\n        visit_type: null,\n        visit_date: new Date(),\n        visit_code: null,\n        age_in_years: null,\n        age_in_months: null,\n        age_in_days: null,\n        insured: null,\n        sec_insured: null,\n        department_id: null,\n        sub_department_id: null,\n        doctor_id: null,\n        maternity_patient: null,\n        is_mlc: null,\n        mlc_accident_reg_no: null,\n        mlc_police_station: null,\n        mlc_wound_certified_date: null,\n        appointment_patient: null,\n        created_by: req.userIdentity.algaeh_d_app_user_id,\n\n        updated_by: req.userIdentity.algaeh_d_app_user_id,\n\n        record_status: null,\n        patient_message: null,\n        is_critical_message: null,\n        message_active_till: null,\n        visit_expiery_date: null,\n        episode_id: null,\n        consultation: null,\n        appointment_id: null\n      },\n      req.query[\"data\"] == null ? req.body : req.query\n    );\n\n    let db = req.options != null ? req.options.db : req.db;\n    let existingExparyDate = null;\n    let currentPatientEpisodeNo = null;\n    let today = moment().format(\"YYYY-MM-DD\");\n\n    inputParam.patient_id = req.patient_id || req.body.patient_id;\n    debugLog(\"Body:\", req.body);\n    const internalInsertPatientVisitData = () => {\n      debugFunction(\"1\");\n      if (inputParam.age_in_years == null) {\n        let fromDate = moment(inputParam.date_of_birth);\n        let toDate = new Date();\n        let years = moment(toDate).diff(fromDate, \"year\");\n        fromDate.add(years, \"years\");\n        let months = moment(toDate).diff(fromDate, \"months\");\n        fromDate.add(months, \"months\");\n        let days = moment(toDate).diff(fromDate, \"days\");\n        inputParam.age_in_years = years;\n        inputParam.age_in_months = months;\n        inputParam.age_in_days = days;\n      }\n      debugFunction(\"2\");\n\n      debugLog(\"internal Inside: \", existingExparyDate);\n      debugLog(\"internal Inside: \", currentPatientEpisodeNo);\n      debugLog(\"today: \", today);\n      if (\n        (existingExparyDate != null || existingExparyDate != undefined) &&\n        moment(existingExparyDate).format(\"YYYY-MM-DD\") >= today\n      ) {\n        debugFunction(\"Inside\");\n        inputParam.visit_expiery_date = existingExparyDate;\n        inputParam.episode_id = currentPatientEpisodeNo;\n      }\n      debugFunction(\"3\");\n      debugLog(\"inside internalInsertPatientVisitData\");\n      db.query(\n        \"INSERT INTO `hims_f_patient_visit` (`patient_id`, `visit_type`, \\\n`age_in_years`, `age_in_months`, `age_in_days`, `insured`,`sec_insured`,\\\n`visit_date`, `department_id`, `sub_department_id`, `doctor_id`, `maternity_patient`,\\\n`is_mlc`, `mlc_accident_reg_no`, `mlc_police_station`, `mlc_wound_certified_date`, `existing_plan`,`treatment_plan_id`,\\\n`created_by`, `created_date`,`visit_code`,`visit_expiery_date`,`episode_id`,`appointment_id`, `appointment_patient`)\\\nVALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?, ?, ?);\",\n        [\n          inputParam.patient_id,\n          inputParam.visit_type,\n          inputParam.age_in_years,\n          inputParam.age_in_months,\n          inputParam.age_in_days,\n          inputParam.insured,\n          inputParam.sec_insured,\n          new Date(),\n          inputParam.department_id,\n          inputParam.sub_department_id,\n          inputParam.doctor_id,\n          inputParam.maternity_patient,\n          inputParam.is_mlc,\n          inputParam.mlc_accident_reg_no,\n          inputParam.mlc_police_station,\n          inputParam.mlc_wound_certified_date != null\n            ? new Date(inputParam.mlc_wound_certified_date)\n            : inputParam.mlc_wound_certified_date,\n          inputParam.existing_plan,\n          inputParam.treatment_plan_id,\n          inputParam.created_by,\n          new Date(),\n          inputParam.visit_code,\n          inputParam.visit_expiery_date != null\n            ? new Date(inputParam.visit_expiery_date)\n            : inputParam.visit_expiery_date,\n          inputParam.episode_id,\n          inputParam.appointment_id,\n          inputParam.appointment_patient\n        ],\n        (error, visitresult) => {\n          if (error) {\n            debugLog(\"error: \", error);\n            if (req.options == null) {\n              db.rollback(() => {\n                releaseDBConnection(req.db, db);\n              });\n            } else {\n              req.options.onFailure(error);\n            }\n          }\n          req.visit_id = visitresult.insertId;\n          let patient_visit_id = visitresult.insertId;\n\n          if (patient_visit_id != null) {\n            db.query(\n              \"INSERT INTO `hims_f_patient_visit_message` (`patient_visit_id`\\\n, `patient_message`, `is_critical_message`, `message_active_till`, `created_by`, `created_date`\\\n) VALUES ( ?, ?, ?, ?, ?, ?);\",\n              [\n                patient_visit_id,\n                inputParam.patient_message,\n                inputParam.is_critical_message,\n                inputParam.message_active_till,\n                inputParam.created_by,\n                new Date()\n              ],\n              (error, resultData) => {\n                if (error) {\n                  if (req.options == null) {\n                    db.rollback(() => {\n                      releaseDBConnection(req.db, db);\n                      next(error);\n                    });\n                  } else {\n                    req.options.onFailure(eror);\n                  }\n                } else {\n                  req.options.onSuccess(visitresult);\n                }\n              }\n            );\n          }\n        }\n      );\n    };\n    //for consultaion\n    if (inputParam.consultation == \"Y\") {\n      debugLog(\"In consultation == Y \");\n      db.query(\n        \" select max(visit_expiery_date) as visit_expiery_date,max(episode_id) as episode_id from hims_f_patient_visit where\\\n         patient_id=? and doctor_id=? and record_status='A';\",\n        [inputParam.patient_id, inputParam.doctor_id],\n        (error, expResult) => {\n          debugLog(\"In consultation Query\", expResult);\n          if (error) {\n            if (req.options == null) {\n              db.rollback(() => {\n                releaseDBConnection(req.db, db);\n              });\n            } else {\n              req.options.onFailure(error);\n            }\n          } else {\n            debugLog(\"Else \", expResult);\n            if (inputParam.existing_plan === \"Y\") {\n              inputParam.visit_expiery_date = moment(\n                expResult[0][\"visit_expiery_date\"]\n              ).format(\"YYYY-MM-DD\");\n              inputParam.episode_id = expResult[0][\"episode_id\"];\n              internalInsertPatientVisitData();\n              //Data\n            } else {\n              //fetching expiry date and episode id for existing patient\n              if (\n                expResult[0].visit_expiery_date != null &&\n                expResult[0].episode_id != null\n              ) {\n                existingExparyDate = moment(\n                  expResult[0][\"visit_expiery_date\"]\n                ).format(\"YYYY-MM-DD\");\n                currentPatientEpisodeNo = expResult[0][\"episode_id\"];\n                debugLog(\"expResult Inside \", existingExparyDate);\n                debugLog(\"expResult Inside \", currentPatientEpisodeNo);\n              }\n              // req.body.episode_id = expResult[0][\"episode_id\"];\n              let currentEpisodeNo = null;\n              //checking expiry if expired or not_there create new expiry date\n              debugLog(\"existingExparyDate \", existingExparyDate);\n              if (\n                existingExparyDate == null ||\n                existingExparyDate == undefined ||\n                existingExparyDate < today\n              ) {\n                debugLog(\"existingExparyDate \", existingExparyDate);\n                //create new expiry date\n                db.query(\n                  \"SELECT param_value,episode_id from algaeh_d_app_config WHERE algaeh_d_app_config_id=11 \\\n                and record_status='A'\",\n                  (error, record) => {\n                    debugLog(\"In Expiry date records \", record);\n                    if (error) {\n                      if (req.options == null) {\n                        db.rollback(() => {\n                          releaseDBConnection(req.db, db);\n                          next(error);\n                        });\n                      } else {\n                        req.options.onFailure(error);\n                      }\n                    } else {\n                      if (record.length == 0) {\n                        if (req.options == null) {\n                          db.rollback(() => {\n                            releaseDBConnection(req.db, db);\n                            next(\n                              httpStatus.generateError(\n                                httpStatus.notModified,\n                                \"Episode value not found.Please contact administrator.\"\n                              )\n                            );\n                          });\n                        } else {\n                          req.options.onFailure(\n                            httpStatus.generateError(\n                              httpStatus.notModified,\n                              \"Episode value not found.Please contact administrator.\"\n                            )\n                          );\n                        }\n                      }\n                      inputParam.visit_expiery_date = moment()\n                        .add(parseInt(record[0][\"param_value\"], 10), \"days\")\n                        .format(\"YYYY-MM-DD\");\n                      currentEpisodeNo = record[0].episode_id;\n\n                      if (currentEpisodeNo > 0) {\n                        let nextEpisodeNo = currentEpisodeNo + 1;\n                        inputParam.episode_id = currentEpisodeNo;\n                        req.body.episode_id = inputParam.episode_id;\n                        db.query(\n                          \"update algaeh_d_app_config set episode_id=? where algaeh_d_app_config_id=11 and record_status='A' \",\n                          [nextEpisodeNo],\n                          (error, updateResult) => {\n                            if (error) {\n                              if (req.options == null) {\n                                db.rollback(() => {\n                                  releaseDBConnection(req.db, dataBase);\n                                  next(error);\n                                });\n                              } else {\n                                req.options.onFailure(error);\n                              }\n                            } else {\n                              internalInsertPatientVisitData();\n                            }\n                          }\n                        );\n                      }\n                    }\n                  }\n                );\n              } else {\n                inputParam.episode_id = expResult[0][\"episode_id\"];\n                req.body.episode_id = inputParam.episode_id;\n                internalInsertPatientVisitData();\n              }\n            }\n          }\n        }\n      );\n    }\n    //for non consultaion\n    else if (inputParam.consultation == \"N\") {\n      inputParam.visit_expiery_date = new Date();\n      inputParam.episode_id = null;\n      internalInsertPatientVisitData();\n    } else {\n      if (req.options == null) {\n        db.rollback(() => {\n          releaseDBConnection(req.db, db);\n          next(\n            httpStatus.generateError(\n              httpStatus.noContent,\n              \"Please select consultation type\"\n            )\n          );\n        });\n      } else {\n        req.options.onFailure(\n          httpStatus.generateError(\n            httpStatus.noContent,\n            \"Please select consultation type\"\n          )\n        );\n      }\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n//----end\n\nlet addVisit = (req, res, next) => {\n  try {\n    debugFunction(\"addVisit\");\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            next(error);\n          });\n        }\n\n        let patient_id =\n          req.body.patient_id != null\n            ? req.body.patient_id\n            : req.query.patient_id;\n        let visit_code =\n          req.body.visit_code != null\n            ? req.body.visit_code\n            : req.query.visit_code;\n        if (visit_code != \"\" && patient_id != null) {\n          insertVisitData(connection, req, res, (error, result) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(req.db, connection);\n                next(error);\n              });\n            }\n            connection.commit(error => {\n              if (error) {\n                connection.rollback(() => {\n                  releaseDBConnection(req.db, connection);\n                  next(error);\n                });\n              }\n              req.records = result;\n              releaseDBConnection(req.db, connection);\n              next();\n            });\n          });\n        } else {\n          if (patient_id == null) {\n            next(\n              httpStatus.generateError(400, \"Patient Code is not generated\")\n            );\n          } else {\n            runningNumber(\n              connection,\n              2,\n              \"VISIT_NUMGEN\",\n              (error, numUpdate, completeNumber) => {\n                if (error) {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                }\n                req.query.visit_code = completeNumber;\n                req.body.visit_code = completeNumber;\n                debugLog(\"req.body.visit_code : \" + completeNumber);\n                insertVisitData(connection, req, res, (error, result) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(req.db, connection);\n                      next(error);\n                    });\n                  }\n                  connection.commit(error => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(req.db, connection);\n                        next(error);\n                      });\n                    }\n                    releaseDBConnection(req.db, connection);\n                    req.records = result;\n                    next();\n                  });\n                });\n              }\n            );\n          }\n        }\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//old method to be deleted\nlet insertVisitData = (dataBase, req, res, callBack) => {\n  let visitDetails = {\n    hims_f_patient_visit_id: null,\n    patient_id: null,\n    visit_type: null,\n    visit_date: new Date(),\n    visit_code: null,\n    age_in_years: null,\n    age_in_months: null,\n    age_in_days: null,\n    insured: null,\n    sec_insured: null,\n    department_id: null,\n    sub_department_id: null,\n    doctor_id: null,\n    maternity_patient: null,\n    is_mlc: null,\n    mlc_accident_reg_no: null,\n    mlc_police_station: null,\n    mlc_wound_certified_date: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id,\n\n    patient_message: null,\n    is_critical_message: null,\n    message_active_till: null,\n    visit_expiery_date: null,\n    episode_id: null,\n    consultation: null\n  };\n  try {\n    debugFunction(\"insertVisitData\");\n    let inputParam = extend(\n      visitDetails,\n      req.query[\"data\"] == null ? req.body : req.query\n    );\n\n    let today = moment().format(\"YYYY-MM-DD\");\n\n    //for consultaion\n    if (inputParam.consultation == \"Y\") {\n      dataBase.query(\n        \" select max(visit_expiery_date) as visit_expiery_date,episode_id from hims_f_patient_visit where\\\n         patient_id=? and doctor_id=? and record_status='A' group by patient_id, doctor_id;\",\n        [inputParam.patient_id, inputParam.doctor_id],\n        (error, expResult) => {\n          if (error) {\n            dataBase.rollback(() => {\n              dataBase.release();\n              debugLog(\"error \", error);\n            });\n          }\n\n          let existingExparyDate = null;\n          let currentPatientEpisodeNo = null;\n\n          //fetching expiry date and episode id for existing patient\n          if (expResult[0] != null || expResult.length != 0) {\n            existingExparyDate = moment(\n              expResult[0][\"visit_expiery_date\"]\n            ).format(\"YYYY-MM-DD\");\n\n            debugLog(\"existingExparyDate:\", existingExparyDate);\n\n            currentPatientEpisodeNo = expResult[0][\"episode_id\"];\n            debugLog(\"currentPatientEpisodeNo:\", currentPatientEpisodeNo);\n          }\n\n          let currentEpisodeNo = null;\n\n          //checking expiry if expired or not_there create new expiry date\n          if (\n            existingExparyDate == null ||\n            existingExparyDate == undefined ||\n            existingExparyDate < today\n          ) {\n            //create new expiry date\n            dataBase.query(\n              \"SELECT param_value from algaeh_d_app_config WHERE param_name=?\",\n              [\"VISITEXPERIDAY\"],\n              (error, record) => {\n                if (error) {\n                  dataBase.rollback(() => {\n                    dataBase.release();\n                    logger.log(\"error\", \"Add new visit %j\", error);\n                  });\n                }\n\n                inputParam.visit_expiery_date = moment()\n                  .add(\n                    record != null && record.length != 0\n                      ? parseInt(record[0][\"param_value\"], 10)\n                      : 0,\n                    \"days\"\n                  )\n                  .format(\"YYYY-MM-DD\");\n                debugLog(\n                  \"new expiry date created:\",\n                  inputParam.visit_expiery_date\n                );\n\n                // create new episode\n                dataBase.query(\n                  \"select episode_id from algaeh_d_app_config where algaeh_d_app_config_id=11 and record_status='A'\",\n                  (error, result) => {\n                    if (error) {\n                      releaseDBConnection(req.db, dataBase);\n                      next(error);\n                    }\n\n                    currentEpisodeNo = result[0].episode_id;\n                    debugLog(\"currentEpisodeNo:\", currentEpisodeNo);\n\n                    //increament episode id\n                    if (currentEpisodeNo > 0) {\n                      let nextEpisodeNo = currentEpisodeNo + 1;\n                      debugLog(\"nextEpisodeNo :\", nextEpisodeNo);\n                      inputParam.episode_id = currentEpisodeNo;\n\n                      dataBase.query(\n                        \"update algaeh_d_app_config set episode_id=? where algaeh_d_app_config_id=11 and record_status='A' \",\n                        [nextEpisodeNo],\n                        (error, updateResult) => {\n                          if (error) {\n                            dataBase.rollback(() => {\n                              releaseDBConnection(req.db, dataBase);\n                              next(error);\n                            });\n                          }\n\n                          // inserting patient visit\n                          dataBase.query(\n                            \"INSERT INTO `hims_f_patient_visit` (`patient_id`, `visit_type`, \\\n    `age_in_years`, `age_in_months`, `age_in_days`, `insured`,`sec_insured`,\\\n  `visit_date`, `department_id`, `sub_department_id`, `doctor_id`, `maternity_patient`,\\\n   `is_mlc`, `mlc_accident_reg_no`, `mlc_police_station`, `mlc_wound_certified_date`, \\\n   `created_by`, `created_date`,`visit_code`,`visit_expiery_date`,`episode_id`)\\\n  VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?);\",\n                            [\n                              inputParam.patient_id,\n                              inputParam.visit_type,\n                              inputParam.age_in_years,\n                              inputParam.age_in_months,\n                              inputParam.age_in_days,\n                              inputParam.insured,\n                              inputParam.sec_insured,\n                              inputParam.visit_date,\n                              inputParam.department_id,\n                              inputParam.sub_department_id,\n                              inputParam.doctor_id,\n                              inputParam.maternity_patient,\n                              inputParam.is_mlc,\n                              inputParam.mlc_accident_reg_no,\n                              inputParam.mlc_police_station,\n                              inputParam.mlc_wound_certified_date,\n                              inputParam.created_by,\n                              new Date(),\n                              inputParam.visit_code,\n                              inputParam.visit_expiery_date,\n                              inputParam.episode_id\n                            ],\n                            (error, visitresult) => {\n                              if (error) {\n                                dataBase.rollback(() => {\n                                  dataBase.release();\n                                  logger.log(\n                                    \"error\",\n                                    \"Add new visit %j\",\n                                    error\n                                  );\n                                });\n                              }\n                              req.visit_id = visitresult.insertId;\n                              let patient_visit_id = visitresult.insertId;\n\n                              debugLog(\n                                \"patient_visit_id : \" + patient_visit_id\n                              );\n\n                              if (patient_visit_id != null) {\n                                dataBase.query(\n                                  \"INSERT INTO `hims_f_patient_visit_message` (`patient_visit_id`\\\n, `patient_message`, `is_critical_message`, `message_active_till`, `created_by`, `created_date`\\\n) VALUES ( ?, ?, ?, ?, ?, ?);\",\n                                  [\n                                    patient_visit_id,\n                                    inputParam.patient_message,\n                                    inputParam.is_critical_message,\n                                    inputParam.message_active_till,\n                                    inputParam.created_by,\n                                    new Date()\n                                  ],\n                                  (error, resultData) => {\n                                    if (typeof callBack == \"function\") {\n                                      callBack(error, visitresult);\n                                    }\n                                  }\n                                );\n                              }\n                            }\n                          );\n                        }\n                      );\n                    }\n                  }\n                );\n              }\n            );\n          } else if (existingExparyDate > today) {\n            inputParam.visit_expiery_date = existingExparyDate;\n            inputParam.episode_id = currentPatientEpisodeNo;\n\n            // inserting patient visit\n            dataBase.query(\n              \"INSERT INTO `hims_f_patient_visit` (`patient_id`, `visit_type`, \\\n            `age_in_years`, `age_in_months`, `age_in_days`, `insured`,`sec_insured`,\\\n          `visit_date`, `department_id`, `sub_department_id`, `doctor_id`, `maternity_patient`,\\\n           `is_mlc`, `mlc_accident_reg_no`, `mlc_police_station`, `mlc_wound_certified_date`, \\\n           `created_by`, `created_date`,`visit_code`,`visit_expiery_date`,`episode_id`)\\\n          VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?);\",\n              [\n                inputParam.patient_id,\n                inputParam.visit_type,\n                inputParam.age_in_years,\n                inputParam.age_in_months,\n                inputParam.age_in_days,\n                inputParam.insured,\n                inputParam.sec_insured,\n                inputParam.visit_date,\n                inputParam.department_id,\n                inputParam.sub_department_id,\n                inputParam.doctor_id,\n                inputParam.maternity_patient,\n                inputParam.is_mlc,\n                inputParam.mlc_accident_reg_no,\n                inputParam.mlc_police_station,\n                inputParam.mlc_wound_certified_date,\n                inputParam.created_by,\n                new Date(),\n                inputParam.visit_code,\n                inputParam.visit_expiery_date,\n                inputParam.episode_id\n              ],\n              (error, visitresult) => {\n                if (error) {\n                  dataBase.rollback(() => {\n                    dataBase.release();\n                    logger.log(\"error\", \"Add new visit %j\", error);\n                  });\n                }\n                req.visit_id = visitresult.insertId;\n                let patient_visit_id = visitresult.insertId;\n\n                debugLog(\"patient_visit_id : \" + patient_visit_id);\n\n                if (patient_visit_id != null) {\n                  dataBase.query(\n                    \"INSERT INTO `hims_f_patient_visit_message` (`patient_visit_id`\\\n        , `patient_message`, `is_critical_message`, `message_active_till`, `created_by`, `created_date`\\\n        ) VALUES ( ?, ?, ?, ?, ?, ?);\",\n                    [\n                      patient_visit_id,\n                      inputParam.patient_message,\n                      inputParam.is_critical_message,\n                      inputParam.message_active_till,\n                      inputParam.created_by,\n                      new Date()\n                    ],\n                    (error, resultData) => {\n                      if (typeof callBack == \"function\") {\n                        callBack(error, visitresult);\n                      }\n                    }\n                  );\n                }\n              }\n            );\n          }\n        }\n      );\n    } //not for consultaion\n    else if (inputParam.consultation == \"N\") {\n      debugFunction(\"not for consultaion\");\n      dataBase.query(\n        \"INSERT INTO `hims_f_patient_visit` (`patient_id`, `visit_type`, \\\n      `age_in_years`, `age_in_months`, `age_in_days`, `insured`,`sec_insured`,\\\n    `visit_date`, `department_id`, `sub_department_id`, `doctor_id`, `maternity_patient`,\\\n     `is_mlc`, `mlc_accident_reg_no`, `mlc_police_station`, `mlc_wound_certified_date`, \\\n     `created_by`, `created_date`,`visit_code`,`visit_expiery_date`)\\\n    VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?);\",\n        [\n          inputParam.patient_id,\n          inputParam.visit_type,\n          inputParam.age_in_years,\n          inputParam.age_in_months,\n          inputParam.age_in_days,\n          inputParam.insured,\n          inputParam.sec_insured,\n          inputParam.visit_date,\n          inputParam.department_id,\n          inputParam.sub_department_id,\n          inputParam.doctor_id,\n          inputParam.maternity_patient,\n          inputParam.is_mlc,\n          inputParam.mlc_accident_reg_no,\n          inputParam.mlc_police_station,\n          inputParam.mlc_wound_certified_date,\n          inputParam.created_by,\n          new Date(),\n          inputParam.visit_code,\n          today\n        ],\n        (error, result) => {\n          if (error) {\n            dataBase.rollback(() => {\n              dataBase.release();\n              logger.log(\"error\", \"Add new visit %j\", error);\n            });\n          }\n          req.visit_id = result.insertId;\n          let patient_visit_id = result.insertId;\n\n          debugLog(\"patient_visit_id : \" + patient_visit_id);\n\n          if (patient_visit_id != null) {\n            dataBase.query(\n              \"INSERT INTO `hims_f_patient_visit_message` (`patient_visit_id`\\\n  , `patient_message`, `is_critical_message`, `message_active_till`, `created_by`, `created_date`\\\n  ) VALUES ( ?, ?, ?, ?, ?, ?);\",\n              [\n                patient_visit_id,\n                inputParam.patient_message,\n                inputParam.is_critical_message,\n                inputParam.message_active_till,\n                inputParam.created_by,\n                new Date()\n              ],\n              (error, resultData) => {\n                if (typeof callBack == \"function\") {\n                  callBack(error, result);\n                }\n              }\n            );\n          }\n        }\n      );\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet updateVisit = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      updateData(connection, req, (error, result) => {\n        connection.release();\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet updateData = (dataBase, req, callBack) => {\n  let visitDetails = {\n    hims_f_patient_visit_id: null,\n    patient_id: null,\n    visit_type: null,\n    visit_date: null,\n    visit_code: null,\n    department_id: null,\n    sub_department_id: null,\n    doctor_id: null,\n    maternity_patient: null,\n    is_mlc: null,\n    mlc_accident_reg_no: null,\n    mlc_police_station: null,\n    mlc_wound_certified_date: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id,\n\n    patient_message: null,\n    is_critical_message: null,\n    message_active_till: null,\n    visit_expiery_date: null\n  };\n\n  try {\n    let inputParam = extend(visitDetails, req.body);\n    dataBase.query(\n      \"UPDATE `hims_f_patient_visit`\\\n    SET `visit_type`=?, `visit_date`=?, `department_id`=?, `sub_department_id`=?\\\n    ,`doctor_id`=?, `maternity_patient`=?, `is_mlc`=?, `mlc_accident_reg_no`=?,\\\n    `mlc_police_station`=?, `mlc_wound_certified_date`=?, `updated_by`=?, `updated_date`=?\\\n    WHERE `hims_f_patient_visit_id`=?;\",\n      [\n        inputParam.visit_type,\n        inputParam.visit_date,\n        inputParam.department_id,\n        inputParam.sub_department_id,\n        inputParam.doctor_id,\n        inputParam.maternity_patient,\n        inputParam.is_mlc,\n        inputParam.mlc_accident_reg_no,\n        inputParam.mlc_police_station,\n        inputParam.mlc_wound_certified_date,\n        inputParam.updated_by,\n        new Date(),\n        inputParam.hims_f_patient_visit_id\n      ],\n      (error, result) => {\n        if (typeof callBack == \"function\") {\n          callBack(error, result);\n        }\n      }\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet checkVisitExists = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let inputParam = extend(\n      {\n        sub_department_id: null,\n        doctor_id: null,\n        patient_id: null\n      },\n      req.body\n    );\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      db.query(\n        \"select visit_code from hims_d_sub_department,hims_f_patient_visit where \\\n      hims_f_patient_visit.sub_department_id=hims_d_sub_department.hims_d_sub_department_id \\\n      and hims_d_sub_department.record_status='A' and hims_f_patient_visit.record_status='A' \\\n      and hims_f_patient_visit.visit_date =DATE(now()) and hims_d_sub_department.hims_d_sub_department_id=?\\\n      and hims_f_patient_visit.doctor_id=? and patient_id =? \\\n      \",\n        [\n          inputParam.sub_department_id,\n          inputParam.doctor_id,\n          inputParam.patient_id\n        ],\n        (error, records) => {\n          connection.release();\n          if (error) {\n            next(error);\n          }\n          req.records = records;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet closeVisit = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      let inputParam = extend([], req.body);\n\n      let qry = \"\";\n      debugLog(\"inputParam: \", inputParam);\n      for (let i = 0; i < inputParam.length; i++) {\n        qry +=\n          \" UPDATE `hims_f_patient_visit` SET visit_status='\" +\n          inputParam[i].visit_status +\n          \"' WHERE hims_f_patient_visit_id='\" +\n          details[i].hims_f_patient_visit_id +\n          \"';\";\n      }\n      debugLog(\"qry: \", qry);\n\n      if (qry != \"\") {\n        connection.query(qry, (error, detailResult) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n          req.records = detailResult;\n          next();\n        });\n      } else {\n        releaseDBConnection(db, connection);\n        req.records = [];\n        next();\n      }\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addVisit,\n  updateVisit,\n  insertVisitData,\n  checkVisitExists,\n  insertPatientVisitData,\n  closeVisit\n};\n"]}