{"version":3,"sources":["../../../src/model/icdcptcodes.js"],"names":["selectIcdcptCodes","req","res","next","whereStatement","hims_d_icd_id","icd_code","icd_description","db","httpStatus","dataBaseNotInitilizedError","getConnection","error","connection","where","query","condition","values","result","records","e","insertIcdcptCodes","Icdcpts","long_icd_description","icd_level","icd_type","created_by","userIdentity","algaeh_d_app_user_id","updated_by","inputParam","body","Date","updateIcdcptCodes","deleteIcdcptCodes","tableName","id","selectCptCodes","hims_d_cpt_code_id","cpt_code","cpt_desc","insertCptCodes","long_cpt_desc","prefLabel","cpt_status","updateCptCodes","deleteCptCodes","module","exports"],"mappings":"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","file":"icdcptcodes.js","sourcesContent":["import extend from \"extend\";\nimport { whereCondition, releaseDBConnection, deleteRecord } from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\n\nlet selectIcdcptCodes = (req, res, next) => {\n  let whereStatement = {\n    hims_d_icd_id: \"ALL\",\n    icd_code: \"ALL\",\n    icd_description: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let where = whereCondition(extend(whereStatement, req.query));\n      connection.query(\n        \"SELECT * FROM `hims_d_icd`  \\\n       WHERE record_status='A' AND \" +\n          where.condition,\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet insertIcdcptCodes = (req, res, next) => {\n  let Icdcpts = {\n    hims_d_icd_id: null,\n    icd_code: null,\n    icd_description: null,\n    long_icd_description: null,\n    icd_level: null,\n    icd_type: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    let inputParam = extend(Icdcpts, req.body);\n    connection.query(\n      \"INSERT INTO `hims_d_icd` (`icd_code`, `icd_description`,`long_icd_description`, `icd_level`, `icd_type` \\\n      , `created_by` ,`created_date`) \\\n   VALUES ( ?, ?, ?, ?, ?, ?, ?)\",\n      [\n        inputParam.icd_code,\n        inputParam.icd_description,\n        inputParam.long_icd_description,\n        inputParam.icd_level,\n        inputParam.icd_type,\n        inputParam.created_by,\n        new Date()\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\n\nlet updateIcdcptCodes = (req, res, next) => {\n  let Icdcpts = {\n    hims_d_icd_id: null,\n    icd_code: null,\n    icd_description: null,\n    long_icd_description: null,\n    icd_level: null,\n    icd_type: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    let inputParam = extend(Icdcpts, req.body);\n    connection.query(\n      \"UPDATE `hims_d_icd` \\\n     SET `icd_code`=?,  `icd_description`=?,`long_icd_description`=?, `icd_level`=?,`icd_type`=?, \\\n     `updated_by`=?, `updated_date`=? WHERE `record_status`='A' and `hims_d_icd_id`=?\",\n      [\n        inputParam.icd_code,\n        inputParam.icd_description,\n        inputParam.long_icd_description,\n        inputParam.icd_level,\n        inputParam.icd_type,\n        inputParam.updated_by,\n        new Date(),\n        inputParam.hims_d_icd_id\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\nlet deleteIcdcptCodes = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    deleteRecord(\n      {\n        db: req.db,\n        tableName: \"hims_d_icd\",\n        id: req.body.hims_d_icd_id,\n        query:\n          \"UPDATE hims_d_icd SET  record_status='I', \\\n         updated_by=?,updated_date=? WHERE hims_d_icd_id=?\",\n        values: [req.body.updated_by, new Date(), req.body.hims_d_icd_id]\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\n//Cpt Code\n\nlet selectCptCodes = (req, res, next) => {\n  let whereStatement = {\n    hims_d_cpt_code_id: \"ALL\",\n    cpt_code: \"ALL\",\n    cpt_desc: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let where = whereCondition(extend(whereStatement, req.query));\n      connection.query(\n        \"SELECT * FROM `hims_d_cpt_code`  \\\n       WHERE record_status='A' AND \" +\n          where.condition,\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet insertCptCodes = (req, res, next) => {\n  let Icdcpts = {\n    hims_d_cpt_code_id: null,\n    cpt_code: null,\n    cpt_desc: null,\n    long_cpt_desc: null,\n    prefLabel: null,\n    cpt_status: \"A\",\n    created_by: req.userIdentity.algaeh_d_app_user_id\n  };\n\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    let inputParam = extend(Icdcpts, req.body);\n    connection.query(\n      \"INSERT INTO `hims_d_cpt_code` (`cpt_code`, `cpt_desc`,`long_cpt_desc`, `prefLabel`, `cpt_status` \\\n      , `created_by` ,`created_date`) \\\n   VALUES ( ?, ?, ?, ?, ?, ?, ?)\",\n      [\n        inputParam.cpt_code,\n        inputParam.cpt_desc,\n        inputParam.long_cpt_desc,\n        inputParam.prefLabel,\n        inputParam.cpt_status,\n        inputParam.created_by,\n        new Date()\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\n\nlet updateCptCodes = (req, res, next) => {\n  let Icdcpts = {\n    hims_d_cpt_code_id: null,\n    cpt_code: null,\n    cpt_desc: null,\n    long_cpt_desc: null,\n    prefLabel: null,\n    cpt_status: \"A\",\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    let inputParam = extend(Icdcpts, req.body);\n    connection.query(\n      \"UPDATE `hims_d_cpt_code` \\\n     SET `cpt_code`=?,  `cpt_desc`=?,`long_cpt_desc`=?, `prefLabel`=?,`cpt_status`=?, \\\n     `updated_by`=?, `updated_date`=? WHERE `record_status`='A' and `hims_d_cpt_code_id`=?\",\n      [\n        inputParam.cpt_code,\n        inputParam.cpt_desc,\n        inputParam.long_cpt_desc,\n        inputParam.prefLabel,\n        inputParam.cpt_status,\n        inputParam.updated_by,\n        new Date(),\n        inputParam.hims_d_cpt_code_id\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\nlet deleteCptCodes = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    deleteRecord(\n      {\n        db: req.db,\n        tableName: \"hims_d_cpt_code\",\n        id: req.body.hims_d_cpt_code_id,\n        query:\n          \"UPDATE hims_d_cpt_code SET  record_status='I', \\\n         updated_by=?,updated_date=? WHERE hims_d_cpt_code_id=?\",\n        values: [req.body.updated_by, new Date(), req.body.hims_d_cpt_code_id]\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  selectIcdcptCodes,\n  insertIcdcptCodes,\n  updateIcdcptCodes,\n  deleteIcdcptCodes,\n\n  selectCptCodes,\n  insertCptCodes,\n  updateCptCodes,\n  deleteCptCodes\n};\n"]}