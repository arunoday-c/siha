{"version":3,"sources":["../../../src/model/frontDesk.js"],"names":["requestCounter","addFrontDeskBACKUp","req","res","next","body","db","httpStatus","dataBaseNotInitilizedError","query","JSON","parse","getConnection","error","connection","beginTransaction","rollback","Promise","resolve","reject","counter","module_desc","onFailure","onSuccess","result","then","patients","LINQ","output","Where","w","FirstOrDefault","patient_code","completeNumber","options","visit","patientInsertedRecord","visit_code","visit_id","visitData","patient_visit_id","insured","data","receipt","receipt_number","records","receipt_header_id","billOutput","insertId","bill","bill_number","commit","encounterResult","catch","e","addFrontDesk","billing_header_id","cashier_result","selectFrontDesk","selectWhere","hims_d_patient_id","where","condition","values","showresult","length","resultFields","patientRegistration","visitDetails","updateCounter","updateFrontDeskBackup","updateFrontDesk","getCashHandoverDetails","shift_status","undefined","shift_id","daily_handover_date","updateCashHandoverDetails","input","close_date","close_by","actual_cash","difference_cash","cash_status","actual_card","difference_card","card_status","actual_cheque","difference_cheque","cheque_status","remarks","Date","updated_by","hims_f_cash_handover_detail_id","module","exports"],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CA7UD;AA8UA;AACA,IAAIiB,kBAAkB,SAAlBA,eAAkB,CAACrE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxC,8BAAc,iBAAd;;AAEAiE,kBAAgBA,gBAAgB,CAAhC;AACA,MAAI;AACF,QAAInE,IAAII,EAAJ,IAAU,IAAd,EAAoB;AAClBF,WAAKG,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKJ,IAAII,EAAb;AACA,QAAIJ,IAAIO,KAAJ,CAAU,MAAV,KAAqB,IAAzB,EAA+B;AAC7BP,UAAIO,KAAJ,GAAYC,KAAKC,KAAL,CAAWT,IAAIO,KAAJ,CAAU,MAAV,CAAX,CAAZ;AACAP,UAAIG,IAAJ,GAAWH,IAAIO,KAAf;AACD;;AAEDH,OAAGM,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTT,aAAKS,KAAL;AA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","file":"frontDesk.js","sourcesContent":["import { insertData, insertPatientData } from \"../model/patientRegistration\";\nimport { insertVisitData, insertPatientVisitData } from \"../model/visit\";\nimport {\n  whereCondition,\n  runningNumber,\n  runningNumberGen,\n  releaseDBConnection\n} from \"../utils\";\nimport extend from \"extend\";\nimport {\n  addBill,\n  newReceipt,\n  addEpisodeEncounter,\n  addBillData,\n  newReceiptData,\n  addEpisodeEncounterData,\n  addCashHandover\n} from \"../model/billing\";\nimport {\n  addPatientInsurance,\n  addPatientInsuranceData\n} from \"../model/insurance\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { debugLog, debugFunction } from \"../utils/logging\";\nimport Promise from \"bluebird\";\nimport { LINQ } from \"node-linq\";\nlet requestCounter = 0;\n//created by irfan :to save front desk data inputs backup on november_12  at 3:30PM\nlet addFrontDeskBACKUp = (req, res, next) => {\n  debugFunction(\"addFrontDesk\");\n  debugLog(\"body\", req.body);\n\n  requestCounter = requestCounter + 1;\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    if (req.query[\"data\"] != null) {\n      req.query = JSON.parse(req.query[\"data\"]);\n      req.body = req.query;\n    }\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        return new Promise((resolve, reject) => {\n          runningNumberGen({\n            db: connection,\n            counter: requestCounter,\n            module_desc: [\"PAT_REGS\", \"PAT_VISIT\", \"PAT_BILL\", \"RECEIPT\"],\n            onFailure: error => {\n              reject(error);\n            },\n            onSuccess: result => {\n              resolve(result);\n            }\n          });\n        })\n          .then(output => {\n            //Calling Patient Registration function\n            let patients = new LINQ(output)\n              .Where(w => w.module_desc == \"PAT_REGS\")\n              .FirstOrDefault();\n\n            req.query.patient_code = patients.completeNumber;\n            req.body.patient_code = patients.completeNumber;\n            return new Promise((resolve, reject) => {\n              req.options = {\n                db: connection,\n                onFailure: error => {\n                  reject(error);\n                },\n                onSuccess: result => {\n                  resolve(result);\n                }\n              };\n              insertPatientData(req, res, next);\n            })\n              .then(patientInsertedRecord => {\n                //Get  new visit running number.\n                let visit = new LINQ(output)\n                  .Where(w => w.module_desc == \"PAT_VISIT\")\n                  .FirstOrDefault();\n                debugLog(\"patientInsertedRecord \", patientInsertedRecord);\n\n                req.query.visit_code = visit.completeNumber;\n                req.body.visit_code = visit.completeNumber;\n                delete req[\"options\"][\"onFailure\"];\n                delete req[\"options\"][\"onSuccess\"];\n                //Visit Promise\n                return new Promise((resolve, reject) => {\n                  debugLog(\"Inside Visit\");\n                  req.options.onFailure = error => {\n                    reject(error);\n                  };\n                  req.options.onSuccess = result => {\n                    resolve(result);\n                  };\n                  // Calling Visit\n                  insertPatientVisitData(req, res, next);\n                }).then(visitData => {\n                  req.query.visit_id = visitData[\"insertId\"];\n                  req.visit_id = visitData[\"insertId\"];\n                  req.body.visit_id = visitData[\"insertId\"];\n                  req.body.patient_visit_id = visitData[\"insertId\"];\n                  debugLog(\"Gen Visit \", visitData);\n                  //Insurance Promise\n                  return new Promise((resolve, reject) => {\n                    debugLog(\"Inside Insurance\");\n                    if (req.body.insured == \"Y\") {\n                      delete req[\"options\"][\"onFailure\"];\n                      delete req[\"options\"][\"onSuccess\"];\n                      req.options.onFailure = error => {\n                        reject(error);\n                      };\n                      req.options.onSuccess = data => {\n                        resolve(data);\n                      };\n                      //Check for insurace\n                      addPatientInsuranceData(req, res, next);\n                    } else {\n                      resolve({});\n                    }\n                  }).then(insuredRecords => {\n                    let receipt = new LINQ(output)\n                      .Where(w => w.module_desc == \"RECEIPT\")\n                      .FirstOrDefault();\n                    req.body.receipt_number = receipt.completeNumber;\n                    return new Promise((resolve, reject) => {\n                      debugLog(\"Inside Receipts\");\n                      delete req[\"options\"][\"onFailure\"];\n                      delete req[\"options\"][\"onSuccess\"];\n                      req.options.onFailure = error => {\n                        reject(error);\n                      };\n                      req.options.onSuccess = records => {\n                        resolve(records);\n                      };\n                      newReceiptData(req, res, next);\n                    }).then(billOutput => {\n                      debugLog(\"Orver all records number gen\", output);\n\n                      req.query.receipt_header_id = billOutput.insertId;\n                      req.body.receipt_header_id = billOutput.insertId;\n\n                      let bill = new LINQ(output)\n                        .Where(w => w.module_desc == \"PAT_BILL\")\n                        .FirstOrDefault();\n                      req.bill_number = bill.completeNumber;\n                      req.body.bill_number = bill.completeNumber;\n                      //Bill generation\n                      return new Promise((resolve, reject) => {\n                        debugLog(\"Inside Billing\");\n                        delete req[\"options\"][\"onFailure\"];\n                        delete req[\"options\"][\"onSuccess\"];\n                        req.options.onFailure = error => {\n                          reject(error);\n                        };\n                        req.options.onSuccess = data => {\n                          resolve(data);\n                        };\n\n                        addBillData(req, res, next);\n                      }).then(records => {\n                        return new Promise((resolve, reject) => {\n                          debugLog(\"Inside Episode\");\n                          delete req[\"options\"][\"onFailure\"];\n                          delete req[\"options\"][\"onSuccess\"];\n                          req.options.onFailure = error => {\n                            reject(error);\n                          };\n                          req.options.onSuccess = records => {\n                            resolve(records);\n                          };\n                          debugLog(\"Visit\", records);\n                          addEpisodeEncounterData(req, res, next);\n                        }).then(encounterResult => {\n                          connection.commit(error => {\n                            debugLog(\"After Episode Error: \", error);\n                            if (error) {\n                              debugLog(\"Error: \", error);\n                              releaseDBConnection(db, connection);\n                              next(error);\n                            }\n                            req.records = encounterResult;\n                            debugLog(\"encounterResult: \", encounterResult);\n                            if (requestCounter != 0)\n                              requestCounter = requestCounter - 1;\n                            releaseDBConnection(db, connection);\n                            next();\n                          });\n                        });\n                      });\n                    });\n                  });\n                });\n              })\n              .catch(error => {\n                if (requestCounter != 0) requestCounter = requestCounter - 1;\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              });\n          })\n          .catch(error => {\n            if (requestCounter != 0) requestCounter = requestCounter - 1;\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          });\n      });\n      //bign tr\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan :to save front desk data inputs\nlet addFrontDesk = (req, res, next) => {\n  debugFunction(\"addFrontDesk\");\n  debugLog(\"body\", req.body);\n\n  requestCounter = requestCounter + 1;\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    if (req.query[\"data\"] != null) {\n      req.query = JSON.parse(req.query[\"data\"]);\n      req.body = req.query;\n    }\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        return new Promise((resolve, reject) => {\n          runningNumberGen({\n            db: connection,\n            counter: requestCounter,\n            module_desc: [\"PAT_REGS\", \"PAT_VISIT\", \"PAT_BILL\", \"RECEIPT\"],\n            onFailure: error => {\n              reject(error);\n            },\n            onSuccess: result => {\n              resolve(result);\n            }\n          });\n        })\n          .then(output => {\n            //Calling Patient Registration function\n            let patients = new LINQ(output)\n              .Where(w => w.module_desc == \"PAT_REGS\")\n              .FirstOrDefault();\n\n            req.query.patient_code = patients.completeNumber;\n            req.body.patient_code = patients.completeNumber;\n            return new Promise((resolve, reject) => {\n              req.options = {\n                db: connection,\n                onFailure: error => {\n                  reject(error);\n                },\n                onSuccess: result => {\n                  resolve(result);\n                }\n              };\n              insertPatientData(req, res, next);\n            })\n              .then(patientInsertedRecord => {\n                //Get  new visit running number.\n                let visit = new LINQ(output)\n                  .Where(w => w.module_desc == \"PAT_VISIT\")\n                  .FirstOrDefault();\n                debugLog(\"patientInsertedRecord \", patientInsertedRecord);\n\n                req.query.visit_code = visit.completeNumber;\n                req.body.visit_code = visit.completeNumber;\n                delete req[\"options\"][\"onFailure\"];\n                delete req[\"options\"][\"onSuccess\"];\n                //Visit Promise\n                return new Promise((resolve, reject) => {\n                  debugLog(\"Inside Visit\");\n                  req.options.onFailure = error => {\n                    reject(error);\n                  };\n                  req.options.onSuccess = result => {\n                    resolve(result);\n                  };\n                  // Calling Visit\n                  insertPatientVisitData(req, res, next);\n                }).then(visitData => {\n                  req.query.visit_id = visitData[\"insertId\"];\n                  req.visit_id = visitData[\"insertId\"];\n                  req.body.visit_id = visitData[\"insertId\"];\n                  req.body.patient_visit_id = visitData[\"insertId\"];\n                  debugLog(\"Gen Visit \", visitData);\n                  //Insurance Promise\n                  return new Promise((resolve, reject) => {\n                    debugLog(\"Inside Insurance\");\n                    if (req.body.insured == \"Y\") {\n                      delete req[\"options\"][\"onFailure\"];\n                      delete req[\"options\"][\"onSuccess\"];\n                      req.options.onFailure = error => {\n                        reject(error);\n                      };\n                      req.options.onSuccess = data => {\n                        resolve(data);\n                      };\n                      //Check for insurace\n                      addPatientInsuranceData(req, res, next);\n                    } else {\n                      resolve({});\n                    }\n                  }).then(insuredRecords => {\n                    debugLog(\"Orver all records number gen\", output);\n                    let bill = new LINQ(output)\n                      .Where(w => w.module_desc == \"PAT_BILL\")\n                      .FirstOrDefault();\n                    req.bill_number = bill.completeNumber;\n                    req.body.bill_number = bill.completeNumber;\n                    //Bill generation\n                    return new Promise((resolve, reject) => {\n                      debugLog(\"Inside Billing\");\n                      delete req[\"options\"][\"onFailure\"];\n                      delete req[\"options\"][\"onSuccess\"];\n                      req.options.onFailure = error => {\n                        reject(error);\n                      };\n                      req.options.onSuccess = data => {\n                        resolve(data);\n                      };\n\n                      addBillData(req, res, next);\n                    }).then(billOutput => {\n                      req.query.billing_header_id = billOutput.insertId;\n                      req.body.billing_header_id = billOutput.insertId;\n\n                      let receipt = new LINQ(output)\n                        .Where(w => w.module_desc == \"RECEIPT\")\n                        .FirstOrDefault();\n                      req.body.receipt_number = receipt.completeNumber;\n                      return new Promise((resolve, reject) => {\n                        debugLog(\"Inside Receipts\");\n                        delete req[\"options\"][\"onFailure\"];\n                        delete req[\"options\"][\"onSuccess\"];\n                        req.options.onFailure = error => {\n                          reject(error);\n                        };\n                        req.options.onSuccess = records => {\n                          resolve(records);\n                        };\n                        newReceiptData(req, res, next);\n                      }).then(records => {\n                        return new Promise((resolve, reject) => {\n                          debugLog(\"Inside Episode\");\n                          delete req[\"options\"][\"onFailure\"];\n                          delete req[\"options\"][\"onSuccess\"];\n                          req.options.onFailure = error => {\n                            reject(error);\n                          };\n                          req.options.onSuccess = records => {\n                            resolve(records);\n                          };\n                          debugLog(\"Visit\", records);\n                          addEpisodeEncounterData(req, res, next);\n                        })\n                          .then(encounterResult => {\n                            debugLog(\"inside front desk chier functionalityL:\");\n                            addCashHandover(req, res, next);\n                          })\n                          .then(cashier_result => {\n                            connection.commit(error => {\n                              debugLog(\"After Episode Error: \", error);\n                              if (error) {\n                                debugLog(\"Error: \", error);\n                                releaseDBConnection(db, connection);\n                                next(error);\n                              }\n                              req.records = cashier_result;\n                              debugLog(\"encounterResult: \", cashier_result);\n                              if (requestCounter != 0)\n                                requestCounter = requestCounter - 1;\n                              releaseDBConnection(db, connection);\n                              next();\n                            });\n                          });\n                      });\n                    });\n                  });\n                });\n              })\n              .catch(error => {\n                if (requestCounter != 0) requestCounter = requestCounter - 1;\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              });\n          })\n          .catch(error => {\n            if (requestCounter != 0) requestCounter = requestCounter - 1;\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          });\n      });\n      //bign tr\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet selectFrontDesk = (req, res, next) => {\n  let selectWhere = {\n    patient_code: \"ALL\",\n    hims_d_patient_id: \"ALL\"\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let where = whereCondition(extend(selectWhere, req.query));\n      connection.query(\n        \"SELECT  `hims_d_patient_id`, `patient_code`\\\n      , `registration_date`, `title_id`,`first_name`, `middle_name`, `last_name`,`full_name`, `arabic_name`\\\n      , `gender`, `religion_id`,`date_of_birth`, `age`, `marital_status`, `address1`\\\n      , `address2`,`contact_number`, `secondary_contact_number`, `email`\\\n      , `emergency_contact_name`,`emergency_contact_number`, `relationship_with_patient`\\\n      , `visa_type_id`,`nationality_id`, `postal_code`, `primary_identity_id`\\\n      , `primary_id_no`,`secondary_identity_id`, `secondary_id_no`, `photo_file`,`vat_applicable`\\\n      , `primary_id_file`,`secondary_id_file`,`city_id`,`state_id`,`country_id`, `advance_amount`,`patient_type` FROM `hims_f_patient` \\\n       WHERE `record_status`='A' AND \" +\n          where.condition,\n        where.values,\n        (error, result) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n          let showresult;\n          if (result.length != 0) {\n            let hims_d_patient_id = result[0][\"hims_d_patient_id\"];\n            connection.query(\n              \"SELECT 0 radioselect, `hims_f_patient_visit_id`, `patient_id`,`visit_code`\\\n            , `visit_type`, `visit_date`, `department_id`, `sub_department_id`\\\n            , `doctor_id`, `maternity_patient`, `is_mlc`, `mlc_accident_reg_no`\\\n            , `mlc_police_station`, `mlc_wound_certified_date`, `insured`, `sec_insured`, `no_free_visit`,`visit_expiery_date`\\\n             FROM `hims_f_patient_visit` WHERE `record_status`='A' AND \\\n             patient_id=? ORDER BY hims_f_patient_visit_id desc \",\n              [hims_d_patient_id],\n              (error, resultFields) => {\n                if (error) {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                }\n                showresult = {\n                  patientRegistration: result[0],\n                  visitDetails: resultFields\n                };\n                req.records = showresult;\n                releaseDBConnection(db, connection);\n                next();\n              }\n            );\n          } else {\n            releaseDBConnection(db, connection);\n            req.records = showresult;\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet updateCounter = 0;\n\n//created by irfan :to update front desk\nlet updateFrontDeskBackup = (req, res, next) => {\n  debugFunction(\"updateFrontDesk\");\n\n  updateCounter = updateCounter + 1;\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    if (req.query[\"data\"] != null) {\n      req.query = JSON.parse(req.query[\"data\"]);\n      req.body = req.query;\n    }\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        debugFunction(\"updateFrontDesk Promise\");\n        return new Promise((resolve, reject) => {\n          runningNumberGen({\n            db: connection,\n            counter: updateCounter,\n            module_desc: [\"PAT_VISIT\", \"PAT_BILL\", \"RECEIPT\"],\n            onFailure: error => {\n              reject(error);\n            },\n            onSuccess: result => {\n              resolve(result);\n            }\n          });\n        })\n          .then(output => {\n            //Get  new visit running number.\n\n            let visit = new LINQ(output)\n              .Where(w => w.module_desc == \"PAT_VISIT\")\n              .FirstOrDefault();\n            debugLog(\"patientInsertedRecord \", visit);\n\n            req.query.visit_code = visit.completeNumber;\n            req.body.visit_code = visit.completeNumber;\n\n            //Visit Promise\n            return new Promise((resolve, reject) => {\n              debugLog(\"Inside Visit\");\n\n              req.options = {\n                db: connection,\n                onFailure: error => {\n                  reject(error);\n                },\n                onSuccess: result => {\n                  resolve(result);\n                }\n              };\n              debugLog(\"Inside Conn\");\n              // req.options.onFailure = error => {\n              //   reject(error);\n              // };\n              // req.options.onSuccess = result => {\n              //   resolve(result);\n              // };\n              // Calling Visit\n              insertPatientVisitData(req, res, next);\n            }).then(visitData => {\n              req.query.visit_id = visitData[\"insertId\"];\n              req.visit_id = visitData[\"insertId\"];\n              req.body.visit_id = visitData[\"insertId\"];\n              req.body.patient_visit_id = visitData[\"insertId\"];\n              debugLog(\"Gen Visit \", visitData);\n              //Insurance Promise\n              return new Promise((resolve, reject) => {\n                debugLog(\"Inside Insurance\");\n                if (req.body.insured == \"Y\") {\n                  delete req[\"options\"][\"onFailure\"];\n                  delete req[\"options\"][\"onSuccess\"];\n                  req.options.onFailure = error => {\n                    reject(error);\n                  };\n                  req.options.onSuccess = data => {\n                    resolve(data);\n                  };\n                  //Check for insurace\n                  addPatientInsuranceData(req, res, next);\n                } else {\n                  resolve({});\n                }\n              }).then(insuredRecords => {\n                debugLog(\"Orver all records number gen\", output);\n                let bill = new LINQ(output)\n                  .Where(w => w.module_desc == \"PAT_BILL\")\n                  .FirstOrDefault();\n                req.bill_number = bill.completeNumber;\n                req.body.bill_number = bill.completeNumber;\n                //Bill generation\n                return new Promise((resolve, reject) => {\n                  debugLog(\"Inside Billing\");\n                  delete req[\"options\"][\"onFailure\"];\n                  delete req[\"options\"][\"onSuccess\"];\n                  req.options.onFailure = error => {\n                    reject(error);\n                  };\n                  req.options.onSuccess = data => {\n                    resolve(data);\n                  };\n\n                  addBillData(req, res, next);\n                }).then(billOutput => {\n                  req.query.billing_header_id = billOutput.insertId;\n                  req.body.billing_header_id = billOutput.insertId;\n\n                  let receipt = new LINQ(output)\n                    .Where(w => w.module_desc == \"RECEIPT\")\n                    .FirstOrDefault();\n                  req.body.receipt_number = receipt.completeNumber;\n                  return new Promise((resolve, reject) => {\n                    debugLog(\"Inside Receipts\");\n                    delete req[\"options\"][\"onFailure\"];\n                    delete req[\"options\"][\"onSuccess\"];\n                    req.options.onFailure = error => {\n                      reject(error);\n                    };\n                    req.options.onSuccess = records => {\n                      resolve(records);\n                    };\n                    newReceiptData(req, res, next);\n                  }).then(records => {\n                    return new Promise((resolve, reject) => {\n                      debugLog(\"Inside Episode\");\n                      delete req[\"options\"][\"onFailure\"];\n                      delete req[\"options\"][\"onSuccess\"];\n                      req.options.onFailure = error => {\n                        reject(error);\n                      };\n                      req.options.onSuccess = records => {\n                        resolve(records);\n                      };\n                      debugLog(\"Before Episode\");\n                      addEpisodeEncounterData(req, res, next);\n                      debugLog(\"After Episode\");\n                    }).then(encounterResult => {\n                      connection.commit(error => {\n                        if (error) {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        }\n                        req.records = encounterResult;\n                        if (updateCounter != 0)\n                          updateCounter = updateCounter - 1;\n                        releaseDBConnection(db, connection);\n                        next();\n                      });\n                    });\n                  });\n                });\n              });\n            });\n          })\n          .catch(error => {\n            if (updateCounter != 0) updateCounter = updateCounter - 1;\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          });\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n  // debugFunction(\"updateFrontDesk\");\n\n  // try {\n  //   if (req.db == null) {\n  //     next(httpStatus.dataBaseNotInitilizedError());\n  //   }\n  //   let db = req.db;\n  //   if (req.query[\"data\"] != null) {\n  //     req.query = JSON.parse(req.query[\"data\"]);\n  //     req.body = req.query;\n  //   }\n\n  //   db.getConnection((error, connection) => {\n  //     if (error) {\n  //       next(error);\n  //     }\n  //     connection.beginTransaction(error => {\n  //       if (error) {\n  //         connection.rollback(() => {\n  //           releaseDBConnection(db, connection);\n  //           next(error);\n  //         });\n  //       }\n  //       //Front Desk updation\n\n  //       //Visit Insertion for update front desk API\n  //       //query 1\n  //       runningNumber(\n  //         req.db,\n  //         2,\n  //         \"VISIT_NUMGEN\",\n  //         (error, patResults, completeNum) => {\n  //           if (error) {\n  //             connection.rollback(() => {\n  //               releaseDBConnection(db, connection);\n  //               next(error);\n  //             });\n  //           }\n  //           req.query.visit_code = completeNum;\n  //           req.body.visit_code = completeNum;\n  //           debugLog(\"req.body.visit_code : \" + completeNum);\n\n  //           //call\n  //           insertVisitData(\n  //             connection,\n  //             req,\n  //             res,\n  //             (error, resultdata) => {\n  //               if (error) {\n  //                 connection.rollback(() => {\n  //                   releaseDBConnection(db, connection);\n  //                   next(error);\n  //                 });\n  //               }\n\n  //               //Billing Insertion for update front desk APi\n  //               //Quwery:2\n  //               if (resultdata != null && resultdata.length != 0) {\n  //                 req.query.visit_id = resultdata[\"insertId\"];\n  //                 req.body.visit_id = resultdata[\"insertId\"];\n  //                 req.body.patient_visit_id = resultdata[\"insertId\"];\n  //                 debugLog(\"req.body.visit_id:\" + resultdata[\"insertId\"]);\n\n  //                 debugLog(\" result of visit func\", resultdata);\n\n  //                 //add patient insurance\n\n  //                 if (req.body.insured == \"Y\") {\n  //                   addPatientInsurance(\n  //                     connection,\n  //                     req,\n  //                     res,\n  //                     (error, result) => {\n  //                       if (error) {\n  //                         debugLog(\"error in adding insurence\", error);\n  //                         connection.rollback(() => {\n  //                           releaseDBConnection(db, connection);\n  //                           next(error);\n  //                         });\n  //                       }\n\n  //                       debugLog(\"add insuence result:\", result);\n  //                     }\n  //                   );\n  //                 }\n\n  //                 //call\n  //                 addBill(\n  //                   connection,\n  //                   req,\n  //                   res,\n  //                   (error, result) => {\n  //                     if (error) {\n  //                       connection.rollback(() => {\n  //                         releaseDBConnection(db, connection);\n  //                         next(error);\n  //                       });\n  //                     }\n\n  //                     //Query :3\n  //                     //insert receipt for update front desk api\n\n  //                     if (result != null && result.length != 0) {\n  //                       req.query.billing_header_id = result.insertId;\n  //                       req.body.billing_header_id = result.insertId;\n\n  //                       debugLog(\n  //                         \"  req.body.billing_header_id:\" + result[\"insertId\"]\n  //                       );\n\n  //                       //call\n\n  //                       newReceipt(\n  //                         connection,\n  //                         req,\n  //                         res,\n  //                         (error, resultdata) => {\n  //                           if (error) {\n  //                             connection.rollback(() => {\n  //                               releaseDBConnection(db, connection);\n  //                               next(error);\n  //                             });\n  //                           }\n  //                           connection.commit(error => {\n  //                             releaseDBConnection(db, connection);\n  //                             if (error) {\n  //                               connection.rollback(() => {\n  //                                 next(error);\n  //                               });\n  //                             }\n  //                             req.records = result;\n  //                             next();\n  //                           });\n\n  //                           debugLog(\"succes result of query 3 : \", resultdata);\n  //                         },\n  //                         next\n  //                       );\n  //                     }\n  //                   },\n\n  //                   next\n  //                 );\n  //               }\n  //             },\n  //             true,\n  //             next\n  //           );\n  //         }\n  //       );\n  //     });\n  //   });\n  // } catch (e) {\n  //   next(e);\n  // }\n};\n//created by irfan :to update front desk\nlet updateFrontDesk = (req, res, next) => {\n  debugFunction(\"updateFrontDesk\");\n\n  updateCounter = updateCounter + 1;\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    if (req.query[\"data\"] != null) {\n      req.query = JSON.parse(req.query[\"data\"]);\n      req.body = req.query;\n    }\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        debugFunction(\"updateFrontDesk Promise\");\n        return new Promise((resolve, reject) => {\n          runningNumberGen({\n            db: connection,\n            counter: updateCounter,\n            module_desc: [\"PAT_VISIT\", \"PAT_BILL\", \"RECEIPT\"],\n            onFailure: error => {\n              reject(error);\n            },\n            onSuccess: result => {\n              resolve(result);\n            }\n          });\n        })\n          .then(output => {\n            //Get  new visit running number.\n\n            let visit = new LINQ(output)\n              .Where(w => w.module_desc == \"PAT_VISIT\")\n              .FirstOrDefault();\n            debugLog(\"patientInsertedRecord \", visit);\n\n            req.query.visit_code = visit.completeNumber;\n            req.body.visit_code = visit.completeNumber;\n\n            //Visit Promise\n            return new Promise((resolve, reject) => {\n              debugLog(\"Inside Visit\");\n\n              req.options = {\n                db: connection,\n                onFailure: error => {\n                  reject(error);\n                },\n                onSuccess: result => {\n                  resolve(result);\n                }\n              };\n              debugLog(\"Inside Conn\");\n              // req.options.onFailure = error => {\n              //   reject(error);\n              // };\n              // req.options.onSuccess = result => {\n              //   resolve(result);\n              // };\n              // Calling Visit\n              insertPatientVisitData(req, res, next);\n            }).then(visitData => {\n              req.query.visit_id = visitData[\"insertId\"];\n              req.visit_id = visitData[\"insertId\"];\n              req.body.visit_id = visitData[\"insertId\"];\n              req.body.patient_visit_id = visitData[\"insertId\"];\n              debugLog(\"Gen Visit \", visitData);\n              //Insurance Promise\n              return new Promise((resolve, reject) => {\n                debugLog(\"Inside Insurance\");\n                if (req.body.insured == \"Y\") {\n                  delete req[\"options\"][\"onFailure\"];\n                  delete req[\"options\"][\"onSuccess\"];\n                  req.options.onFailure = error => {\n                    reject(error);\n                  };\n                  req.options.onSuccess = data => {\n                    resolve(data);\n                  };\n                  //Check for insurace\n                  addPatientInsuranceData(req, res, next);\n                } else {\n                  resolve({});\n                }\n              }).then(insuredRecords => {\n                // debugLog(\"Orver all records number gen\", output);\n                // let bill = new LINQ(output)\n                //   .Where(w => w.module_desc == \"PAT_BILL\")\n                //   .FirstOrDefault();\n                // req.bill_number = bill.completeNumber;\n                // req.body.bill_number = bill.completeNumber;\n                // //Bill generation\n                // return new Promise((resolve, reject) => {\n                //   debugLog(\"Inside Billing\");\n                //   delete req[\"options\"][\"onFailure\"];\n                //   delete req[\"options\"][\"onSuccess\"];\n                //   req.options.onFailure = error => {\n                //     reject(error);\n                //   };\n                //   req.options.onSuccess = data => {\n                //     resolve(data);\n                //   };\n\n                //   addBillData(req, res, next);\n\n                // req.query.billing_header_id = billOutput.insertId;\n                // req.body.billing_header_id = billOutput.insertId;\n\n                let receipt = new LINQ(output)\n                  .Where(w => w.module_desc == \"RECEIPT\")\n                  .FirstOrDefault();\n                req.body.receipt_number = receipt.completeNumber;\n                return new Promise((resolve, reject) => {\n                  debugLog(\"Inside Receipts\");\n                  delete req[\"options\"][\"onFailure\"];\n                  delete req[\"options\"][\"onSuccess\"];\n                  req.options.onFailure = error => {\n                    reject(error);\n                  };\n                  req.options.onSuccess = records => {\n                    resolve(records);\n                  };\n                  newReceiptData(req, res, next);\n                }).then(billOutput => {\n                  // req.query.billing_header_id = billOutput.insertId;\n                  // req.body.billing_header_id = billOutput.insertId;\n\n                  // let receipt = new LINQ(output)\n                  //   .Where(w => w.module_desc == \"RECEIPT\")\n                  //   .FirstOrDefault();\n                  // req.body.receipt_number = receipt.completeNumber;\n                  // return new Promise((resolve, reject) => {\n                  //   debugLog(\"Inside Receipts\");\n                  //   delete req[\"options\"][\"onFailure\"];\n                  //   delete req[\"options\"][\"onSuccess\"];\n                  //   req.options.onFailure = error => {\n                  //     reject(error);\n                  //   };\n                  //   req.options.onSuccess = records => {\n                  //     resolve(records);\n                  //   };\n                  //   newReceiptData(req, res, next);\n\n                  req.query.receipt_header_id = billOutput.insertId;\n                  req.body.receipt_header_id = billOutput.insertId;\n\n                  let bill = new LINQ(output)\n                    .Where(w => w.module_desc == \"PAT_BILL\")\n                    .FirstOrDefault();\n                  req.bill_number = bill.completeNumber;\n                  req.body.bill_number = bill.completeNumber;\n                  //Bill generation\n                  return new Promise((resolve, reject) => {\n                    debugLog(\"Inside Billing\");\n                    delete req[\"options\"][\"onFailure\"];\n                    delete req[\"options\"][\"onSuccess\"];\n                    req.options.onFailure = error => {\n                      reject(error);\n                    };\n                    req.options.onSuccess = data => {\n                      resolve(data);\n                    };\n\n                    addBillData(req, res, next);\n                  }).then(records => {\n                    return new Promise((resolve, reject) => {\n                      debugLog(\"Inside Episode\");\n                      delete req[\"options\"][\"onFailure\"];\n                      delete req[\"options\"][\"onSuccess\"];\n                      req.options.onFailure = error => {\n                        reject(error);\n                      };\n                      req.options.onSuccess = records => {\n                        resolve(records);\n                      };\n                      debugLog(\"Before Episode\");\n                      addEpisodeEncounterData(req, res, next);\n                      debugLog(\"After Episode\");\n                    })\n                      .then(encounterResult => {\n                        debugLog(\"inside front desk chier functionalityL:\");\n                        addCashHandover(req, res, next);\n                      })\n                      .then(cashier_result => {\n                        connection.commit(error => {\n                          if (error) {\n                            releaseDBConnection(db, connection);\n                            next(error);\n                          }\n                          req.records = cashier_result;\n                          if (updateCounter != 0)\n                            updateCounter = updateCounter - 1;\n                          releaseDBConnection(db, connection);\n                          next();\n                        });\n                      });\n                  });\n                });\n              });\n            });\n          })\n          .catch(error => {\n            if (updateCounter != 0) updateCounter = updateCounter - 1;\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          });\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n  // debugFunction(\"updateFrontDesk\");\n\n  // try {\n  //   if (req.db == null) {\n  //     next(httpStatus.dataBaseNotInitilizedError());\n  //   }\n  //   let db = req.db;\n  //   if (req.query[\"data\"] != null) {\n  //     req.query = JSON.parse(req.query[\"data\"]);\n  //     req.body = req.query;\n  //   }\n\n  //   db.getConnection((error, connection) => {\n  //     if (error) {\n  //       next(error);\n  //     }\n  //     connection.beginTransaction(error => {\n  //       if (error) {\n  //         connection.rollback(() => {\n  //           releaseDBConnection(db, connection);\n  //           next(error);\n  //         });\n  //       }\n  //       //Front Desk updation\n\n  //       //Visit Insertion for update front desk API\n  //       //query 1\n  //       runningNumber(\n  //         req.db,\n  //         2,\n  //         \"VISIT_NUMGEN\",\n  //         (error, patResults, completeNum) => {\n  //           if (error) {\n  //             connection.rollback(() => {\n  //               releaseDBConnection(db, connection);\n  //               next(error);\n  //             });\n  //           }\n  //           req.query.visit_code = completeNum;\n  //           req.body.visit_code = completeNum;\n  //           debugLog(\"req.body.visit_code : \" + completeNum);\n\n  //           //call\n  //           insertVisitData(\n  //             connection,\n  //             req,\n  //             res,\n  //             (error, resultdata) => {\n  //               if (error) {\n  //                 connection.rollback(() => {\n  //                   releaseDBConnection(db, connection);\n  //                   next(error);\n  //                 });\n  //               }\n\n  //               //Billing Insertion for update front desk APi\n  //               //Quwery:2\n  //               if (resultdata != null && resultdata.length != 0) {\n  //                 req.query.visit_id = resultdata[\"insertId\"];\n  //                 req.body.visit_id = resultdata[\"insertId\"];\n  //                 req.body.patient_visit_id = resultdata[\"insertId\"];\n  //                 debugLog(\"req.body.visit_id:\" + resultdata[\"insertId\"]);\n\n  //                 debugLog(\" result of visit func\", resultdata);\n\n  //                 //add patient insurance\n\n  //                 if (req.body.insured == \"Y\") {\n  //                   addPatientInsurance(\n  //                     connection,\n  //                     req,\n  //                     res,\n  //                     (error, result) => {\n  //                       if (error) {\n  //                         debugLog(\"error in adding insurence\", error);\n  //                         connection.rollback(() => {\n  //                           releaseDBConnection(db, connection);\n  //                           next(error);\n  //                         });\n  //                       }\n\n  //                       debugLog(\"add insuence result:\", result);\n  //                     }\n  //                   );\n  //                 }\n\n  //                 //call\n  //                 addBill(\n  //                   connection,\n  //                   req,\n  //                   res,\n  //                   (error, result) => {\n  //                     if (error) {\n  //                       connection.rollback(() => {\n  //                         releaseDBConnection(db, connection);\n  //                         next(error);\n  //                       });\n  //                     }\n\n  //                     //Query :3\n  //                     //insert receipt for update front desk api\n\n  //                     if (result != null && result.length != 0) {\n  //                       req.query.billing_header_id = result.insertId;\n  //                       req.body.billing_header_id = result.insertId;\n\n  //                       debugLog(\n  //                         \"  req.body.billing_header_id:\" + result[\"insertId\"]\n  //                       );\n\n  //                       //call\n\n  //                       newReceipt(\n  //                         connection,\n  //                         req,\n  //                         res,\n  //                         (error, resultdata) => {\n  //                           if (error) {\n  //                             connection.rollback(() => {\n  //                               releaseDBConnection(db, connection);\n  //                               next(error);\n  //                             });\n  //                           }\n  //                           connection.commit(error => {\n  //                             releaseDBConnection(db, connection);\n  //                             if (error) {\n  //                               connection.rollback(() => {\n  //                                 next(error);\n  //                               });\n  //                             }\n  //                             req.records = result;\n  //                             next();\n  //                           });\n\n  //                           debugLog(\"succes result of query 3 : \", resultdata);\n  //                         },\n  //                         next\n  //                       );\n  //                     }\n  //                   },\n\n  //                   next\n  //                 );\n  //               }\n  //             },\n  //             true,\n  //             next\n  //           );\n  //         }\n  //       );\n  //     });\n  //   });\n  // } catch (e) {\n  //   next(e);\n  // }\n};\n\n//created by irfan: to get\nlet getCashHandoverDetails = (req, res, next) => {\n  // let selectWhere = {\n  //   column: \"ALL\"\n  // };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    // let where = whereCondition(extend(selectWhere, req.query));\n    let shift_status = \"\";\n\n    if (\n      req.query.shift_status != \"null\" &&\n      req.query.shift_status != null &&\n      req.query.shift_status != undefined\n    ) {\n      shift_status = `and shift_status='${req.query.shift_status}'`;\n    }\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_f_cash_handover_header_id, shift_id, daily_handover_date,\\\n        hims_f_cash_handover_detail_id, cash_handover_header_id, casher_id, shift_status, open_date,\\\n        close_date, close_by, expected_cash, actual_cash, difference_cash, cash_status, expected_card,\\\n        actual_card, difference_card, card_status, expected_cheque, actual_cheque, difference_cheque, \\\n       cheque_status, remarks, no_of_cheques,EDM.user_id,E.full_name as employee_name,E.arabic_name as employee_arabic_name \\\n        from hims_f_cash_handover_header CH, hims_f_cash_handover_detail CD ,hims_m_employee_department_mappings EDM,\\\n        hims_d_employee E where CH.record_status='A' and EDM.record_status='A' and \\\n        E.record_status='A' and  CH.hims_f_cash_handover_header_id=CD.cash_handover_header_id and \\\n         EDM.user_id=CD.casher_id and  EDM.employee_id=E.hims_d_employee_id and shift_id=? and \\\n        date(daily_handover_date)=date(?) \" +\n          shift_status,\n        [req.query.shift_id, req.query.daily_handover_date],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to update\nlet updateCashHandoverDetails = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"UPDATE `hims_f_cash_handover_detail` SET  shift_status=?,close_date=?,close_by=?,actual_cash=?,\\\n        difference_cash=?,cash_status=?,actual_card=?,difference_card=?,card_status=?,actual_cheque=?,\\\n        difference_cheque=?,cheque_status=?,remarks=?,\\\n           updated_date=?, updated_by=?  WHERE  `record_status`='A' and `hims_f_cash_handover_detail_id`=?;\",\n        [\n          input.shift_status,\n          input.close_date,\n          input.close_by,\n          input.actual_cash,\n          input.difference_cash,\n          input.cash_status,\n          input.actual_card,\n          input.difference_card,\n          input.card_status,\n          input.actual_cheque,\n          input.difference_cheque,\n          input.cheque_status,\n          input.remarks,\n          new Date(),\n          input.updated_by,\n          input.hims_f_cash_handover_detail_id\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addFrontDesk,\n  selectFrontDesk,\n  updateFrontDesk,\n  getCashHandoverDetails,\n  updateCashHandoverDetails\n};\n"]}