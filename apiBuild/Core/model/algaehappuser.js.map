{"version":3,"sources":["../../../src/model/algaehappuser.js"],"names":["selectAppUsers","req","res","next","labSection","algaeh_d_app_user_id","db","httpStatus","dataBaseNotInitilizedError","pagePaging","paging","Page","pageNo","page","pageSize","condition","query","values","records","result","error","e","getLoginUserMaster","selectWhere","algaeh_m_role_user_mappings_id","where","adminUSer","userIdentity","role_type","getConnection","connection","selectLoginUser","validUser","message","selectAppGroup","algaeh_d_app_group_id","selectRoles","createUserLogin","input","body","user_type","beginTransaction","rollback","username","user_display_name","effective_start_date","Date","created_by","updated_by","insertId","undefined","password","pwdResult","role_id","finalResult","commit","module","exports"],"mappings":"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","file":"algaehappuser.js","sourcesContent":["import { whereCondition, releaseDBConnection, selectStatement } from \"../utils\";\nimport extend from \"extend\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { logger, debugFunction, debugLog } from \"../utils/logging\";\n\nlet selectAppUsers = (req, res, next) => {\n  let labSection = {\n    algaeh_d_app_user_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let pagePaging = \"\";\n    if (req.paging != null) {\n      let Page = paging(req.paging);\n      pagePaging += \" LIMIT \" + Page.pageNo + \",\" + page.pageSize;\n    }\n\n    let condition = whereCondition(extend(labSection, req.query));\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"SELECT * FROM `algaeh_d_app_user` WHERE `record_status`='A' AND \" +\n          condition.condition +\n          \" order by algaeh_d_app_user_id desc \" +\n          pagePaging,\n        values: condition.values\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to\nlet getLoginUserMaster = (req, res, next) => {\n  let selectWhere = {\n    algaeh_m_role_user_mappings_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    // SELECT algaeh_m_group_user_mappings_id, app_group_id,app_group_name, user_id, username,\\\n    // user_display_name, effective_start_date, role_id,role_name\\\n    // from algaeh_m_group_user_mappings GUM ,algaeh_d_app_user U,algaeh_d_app_group G,algaeh_d_app_roles R\\\n    // where GUM.user_id=U.algaeh_d_app_user_id and GUM.app_group_id=G.algaeh_d_app_group_id\\\n    // and GUM.role_id=R.app_d_app_roles_id and  GUM.record_status='A' and U.record_status='A' \\\n    // and G.record_status='A' and R.record_status='A'\n\n    let adminUSer = \"\";\n    if (req.userIdentity.role_type == \"AD\") {\n      adminUSer = \" and   group_type <> 'SU' and role_type <>'SU' \";\n    }\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"SELECT algaeh_m_role_user_mappings_id, user_id,username, user_display_name,\\\n        effective_start_date, role_id, role_code, role_name, role_discreption,  \\\n       app_group_id, app_group_code, app_group_name, app_group_desc\\\n       from algaeh_m_role_user_mappings RU ,algaeh_d_app_user U,algaeh_d_app_group G,\\\n       algaeh_d_app_roles R WHERE  RU.role_id=R.app_d_app_roles_id \\\n       AND R.app_group_id=G.algaeh_d_app_group_id AND RU.user_id=U.algaeh_d_app_user_id \" +\n          adminUSer +\n          \"and \" +\n          where.condition +\n          \" order by algaeh_m_role_user_mappings_id desc\",\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to  select un-used user logins\nlet selectLoginUser = (req, res, next) => {\n  let selectWhere = {\n    algaeh_d_app_user_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      let adminUSer = \"\";\n      if (req.userIdentity.role_type == \"AD\") {\n        adminUSer = \"  and user_type <>'SU' and user_type <>'AD' \";\n      }\n      if (req.userIdentity.role_type != \"GN\") {\n        connection.query(\n          \"select algaeh_d_app_user_id, username, user_display_name,  user_status, user_type from algaeh_d_app_user\\\n           where algaeh_d_app_user_id not in (select  user_id from \\\n          hims_m_employee_department_mappings where user_id is not null) \\\n          and algaeh_d_app_user.record_status='A' and user_status='A'\" +\n            adminUSer +\n            \" AND\" +\n            where.condition +\n            \" order by algaeh_d_app_user_id desc\",\n          where.values,\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n            req.records = result;\n            next();\n          }\n        );\n      } else {\n        req.records = {\n          validUser: false,\n          message: \"you dont have admin privilege\"\n        };\n        next();\n      }\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to\nlet selectAppGroup = (req, res, next) => {\n  let selectWhere = {\n    algaeh_d_app_group_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    let adminUSer = \"\";\n\n    if (req.userIdentity.role_type == \"AD\") {\n      adminUSer = \" and   group_type <> 'AD'  and group_type <>'SU' \";\n    }\n\n    db.getConnection((error, connection) => {\n      if (req.userIdentity.role_type != \"GN\") {\n        connection.query(\n          \"select algaeh_d_app_group_id, app_group_code, app_group_name, app_group_desc,\\\n        group_type, app_group_status  from algaeh_d_app_group where record_status='A'\\\n          \" +\n            adminUSer +\n            \" AND\" +\n            where.condition +\n            \" order by algaeh_d_app_group_id desc\",\n          where.values,\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n            req.records = result;\n            next();\n          }\n        );\n      } else {\n        req.records = {\n          validUser: false,\n          message: \"you dont have admin privilege\"\n        };\n        next();\n      }\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to\nlet selectRoles = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let adminUSer = \"\";\n\n    if (req.userIdentity.role_type == \"AD\") {\n      adminUSer = \" and   role_type <> 'AD' and  role_type <>'SU' \";\n    }\n    debugLog(\"dd:\", req.userIdentity);\n    db.getConnection((error, connection) => {\n      if (req.userIdentity.role_type != \"GN\") {\n        connection.query(\n          \"select app_d_app_roles_id,app_group_id, role_code, role_name, role_discreption, role_type\\\n        from algaeh_d_app_roles where record_status='A'  and app_group_id=? \" +\n            adminUSer +\n            \" order by app_d_app_roles_id desc\",\n          [req.query.algaeh_d_app_group_id],\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n            req.records = result;\n            next();\n          }\n        );\n      } else {\n        req.records = {\n          validUser: false,\n          message: \"you dont have admin privilege\"\n        };\n        next();\n      }\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to\nlet createUserLogin = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      if (input.user_type != \"SU\" && input.user_type != \"AD\") {\n        if (req.userIdentity.role_type != \"GN\") {\n          connection.beginTransaction(error => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n\n            connection.query(\n              \"INSERT INTO `algaeh_d_app_user` (username,user_display_name,user_type,effective_start_date, created_date, created_by, updated_date, updated_by)\\\n          VALUE(?,?,?,?,?,?,?,?)\",\n              [\n                input.username,\n                input.user_display_name,\n                input.user_type,\n                input.effective_start_date,\n                new Date(),\n                input.created_by,\n                new Date(),\n                input.updated_by\n              ],\n              (error, result) => {\n                if (error) {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                }\n\n                if (\n                  result.insertId != null &&\n                  result.insertId != undefined &&\n                  (input.password != null &&\n                    input.password != undefined &&\n                    input.password != \" \")\n                ) {\n                  connection.query(\n                    \"INSERT INTO `algaeh_d_app_password` ( userid,password,created_date, created_by, updated_date, updated_by)\\\n                VALUE(?,md5(?),?,?,?,?)\",\n                    [\n                      result.insertId,\n                      input.password,\n                      new Date(),\n                      input.created_by,\n                      new Date(),\n                      input.updated_by\n                    ],\n                    (error, pwdResult) => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n\n                      if (\n                        pwdResult.insertId != null &&\n                        pwdResult.insertId != undefined\n                      ) {\n                        connection.query(\n                          \"INSERT INTO `algaeh_m_role_user_mappings` ( user_id,  role_id,created_date, created_by, updated_date, updated_by)\\\n                      VALUE(?,?,?,?,?,?)\",\n                          [\n                            result.insertId,\n                            input.role_id,\n                            new Date(),\n                            input.created_by,\n                            new Date(),\n                            input.updated_by\n                          ],\n                          (error, finalResult) => {\n                            if (error) {\n                              connection.rollback(() => {\n                                releaseDBConnection(db, connection);\n                                next(error);\n                              });\n                            }\n\n                            connection.commit(error => {\n                              if (error) {\n                                connection.rollback(() => {\n                                  releaseDBConnection(db, connection);\n                                  next(error);\n                                });\n                              }\n\n                              releaseDBConnection(db, connection);\n                              req.records = finalResult;\n                              next();\n                            });\n                          }\n                        );\n                      } else {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                        req.records = {\n                          validUser: false,\n                          message: \"please select role\"\n                        };\n                        next();\n                      }\n                    }\n                  );\n                } else {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                  req.records = {\n                    validUser: false,\n                    message: \"please valid enter password \"\n                  };\n                  next();\n                }\n              }\n            );\n          });\n        } else {\n          req.records = {\n            validUser: false,\n            message: \"you dont have admin privilege\"\n          };\n          next();\n        }\n      } else {\n        req.records = {\n          validUser: false,\n          message: \"you dont have  rights to add this user\"\n        };\n        next();\n      }\n    });\n  } catch (e) {\n    next(e);\n  }\n};\nmodule.exports = {\n  selectAppUsers,\n  selectLoginUser,\n  selectAppGroup,\n  selectRoles,\n  createUserLogin,\n  getLoginUserMaster\n};\n"]}