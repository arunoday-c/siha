{"version":3,"sources":["../../../src/model/investigation.js"],"names":["addInvestigationTest","req","res","next","investigationModel","short_description","description","investigation_type","lab_section_id","send_out_test","available_in_house","restrict_order","restrict_by","external_facility_required","facility_description","priority","cpt_id","category_id","specimen_id","container_id","container_code","created_by","userIdentity","algaeh_d_app_user_id","updated_by","db","httpStatus","dataBaseNotInitilizedError","input","body","getConnection","error","connection","beginTransaction","rollback","query","services_id","film_category","screening_test","film_used","results","insertId","test_id","spResult","insurtColumns","join","sampleInputObject","arrayObj","analytes","newFieldToInsert","analyteResult","commit","records","RadTemplate","radiolgyResult","e","getInvestigTestList","selectWhere","hims_d_investigation_test_id","where","condition","values","result","updateInvestigationTest","investigationDetails","queryBuilder","inputs","Date","hims_m_lab_specimen_id","resultSpc","Promise","resolve","reject","insert_analytes","length","InsAnalyteResult","then","update_analytes","inputParam","qry","i","record_status","critical_low","critical_high","normal_low","normal_high","toLocaleString","hims_m_lab_analyte_id","result_anlyt","insert_rad_temp","update_rad_temp","template_name","template_html","template_status","hims_d_rad_template_detail_id","result_rad_update","module","exports"],"mappings":"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","file":"investigation.js","sourcesContent":["\"use strict\";\nimport extend from \"extend\";\nimport {\n  whereCondition,\n  releaseDBConnection,\n  jsonArrayToObject\n} from \"../utils\";\n\nimport httpStatus from \"../utils/httpStatus\";\n\nimport { debugFunction, debugLog } from \"../utils/logging\";\n\n//created by irfan: to insert investigation\nlet addInvestigationTest = (req, res, next) => {\n  let investigationModel = {\n    short_description: null,\n    description: null,\n    investigation_type: null,\n    lab_section_id: null,\n    send_out_test: null,\n    available_in_house: null,\n    restrict_order: null,\n    restrict_by: null,\n    external_facility_required: null,\n    facility_description: null,\n    priority: null,\n    cpt_id: null,\n    category_id: null,\n    specimen_id: null,\n    container_id: null,\n    container_code: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n\n  debugFunction(\"addInvestigation\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend(investigationModel, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n\n        connection.query(\n          \"insert into hims_d_investigation_test(short_description,description,investigation_type,lab_section_id,\\\n          send_out_test,available_in_house,restrict_order,restrict_by,\\\n          external_facility_required,facility_description,services_id,priority,cpt_id,category_id,film_category, screening_test, film_used,created_by,updated_by)values(\\\n          ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n          [\n            input.short_description,\n            input.description,\n            input.investigation_type,\n            input.lab_section_id,\n            input.send_out_test,\n            input.available_in_house,\n            input.restrict_order,\n            input.restrict_by,\n            input.external_facility_required,\n            input.facility_description,\n            input.services_id,\n            input.priority,\n            input.cpt_id,\n            input.category_id,\n            input.film_category,\n            input.screening_test,\n            input.film_used,\n            input.created_by,\n            input.updated_by\n          ],\n          (error, results) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            // debugLog(\"Results are recorded...\");\n\n            if (results.insertId != null && input.investigation_type == \"L\") {\n              req.body.test_id = results.insertId;\n              debugLog(\" test inserted id \", results.insertId);\n              debugLog(\" body \", req.body);\n\n              connection.query(\n                \"insert into hims_m_lab_specimen(test_id,specimen_id,container_id,container_code,created_by,updated_by)\\\n                values(?,?,?,?,?,?)\",\n                [\n                  results.insertId,\n                  input.specimen_id,\n                  input.container_id,\n                  input.container_code,\n                  input.created_by,\n                  input.updated_by\n                ],\n                (error, spResult) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n                  debugLog(\" specimen id :\", spResult.insertId);\n                  // req.records = spResult;\n                  // next();\n\n                  if (spResult.insertId != null) {\n                    const insurtColumns = [\n                      \"analyte_id\",\n                      \"analyte_type\",\n                      \"result_unit\",\n                      \"critical_low\",\n                      \"critical_high\",\n                      \"normal_low\",\n                      \"normal_high\",\n                      \"created_by\",\n                      \"updated_by\"\n                    ];\n\n                    connection.query(\n                      \"INSERT INTO hims_m_lab_analyte(\" +\n                        insurtColumns.join(\",\") +\n                        \",`test_id`) VALUES ?\",\n                      [\n                        jsonArrayToObject({\n                          sampleInputObject: insurtColumns,\n                          arrayObj: req.body.analytes,\n                          newFieldToInsert: [req.body.test_id],\n                          req: req\n                        })\n                      ],\n                      (error, analyteResult) => {\n                        if (error) {\n                          connection.rollback(() => {\n                            releaseDBConnection(db, connection);\n                            next(error);\n                          });\n                        }\n\n                        connection.commit(error => {\n                          if (error) {\n                            releaseDBConnection(db, connection);\n                            next(error);\n                          }\n                          releaseDBConnection(db, connection);\n                          req.records = analyteResult;\n                          next();\n                        });\n                      }\n                    );\n                  }\n                }\n              );\n            } else if (\n              results.insertId != null &&\n              input.investigation_type == \"R\"\n            ) {\n              const insurtColumns = [\n                \"template_name\",\n                \"template_html\",\n                \"template_status\",\n                \"created_by\",\n                \"updated_by\"\n              ];\n\n              connection.query(\n                \"INSERT INTO hims_d_rad_template_detail(\" +\n                  insurtColumns.join(\",\") +\n                  \",`test_id`) VALUES ?\",\n                [\n                  jsonArrayToObject({\n                    sampleInputObject: insurtColumns,\n                    arrayObj: req.body.RadTemplate,\n                    newFieldToInsert: [req.body.test_id],\n                    req: req\n                  })\n                ],\n                (error, radiolgyResult) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n\n                  connection.commit(error => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n                    releaseDBConnection(db, connection);\n                    req.records = radiolgyResult;\n                    next();\n                  });\n                }\n              );\n            }\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by:irfan,to get list of all investigation tests\nlet getInvestigTestList = (req, res, next) => {\n  let selectWhere = {\n    hims_d_investigation_test_id: \"ALL\",\n    lab_section_id: \"ALL\",\n    category_id: \"ALL\",\n    investigation_type: \"ALL\"\n  };\n\n  debugFunction(\"getListOfInsurenceProvider\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      // extend(insuranceWhereCondition, req.query);\n      let where = whereCondition(extend(selectWhere, req.query));\n\n      connection.query(\n        \"select hims_d_investigation_test_id, description, services_id,R.hims_d_rad_template_detail_id,R.template_name,\\\n        R.template_html,investigation_type,lab_section_id, send_out_test, available_in_house, restrict_order, restrict_by,\\\n        external_facility_required,facility_description, priority, cpt_id, category_id, film_category, screening_test,\\\n        film_used, A.analyte_id, A.hims_m_lab_analyte_id,A.critical_low,A.critical_high, A.normal_low,A.normal_high, \\\n        S.specimen_id,S.hims_m_lab_specimen_id \\\n        from hims_d_investigation_test T left  join  hims_d_rad_template_detail R on\\\n        T.hims_d_investigation_test_id = R.test_id left join hims_m_lab_specimen S on \\\n        S.test_id = T.hims_d_investigation_test_id  left join hims_m_lab_analyte A on \\\n        A.test_id=T.hims_d_investigation_test_id where\" +\n          where.condition,\n        where.values,\n\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet updateInvestigationTest = (req, res, next) => {\n  let investigationModel = {\n    short_description: null,\n    description: null,\n    investigation_type: null,\n    lab_section_id: null,\n    send_out_test: null,\n    available_in_house: null,\n    restrict_order: null,\n    restrict_by: null,\n    external_facility_required: null,\n    facility_description: null,\n    priority: null,\n    cpt_id: null,\n    category_id: null,\n    specimen_id: null,\n    container_id: null,\n    container_code: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n\n  try {\n    debugFunction(\"updateInvestigationTest \");\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    debugLog(\"Input body\", req.body);\n    let investigationDetails = extend(investigationModel, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        let queryBuilder =\n          \"UPDATE `hims_d_investigation_test`\\\n        SET   short_description=?,description=?,investigation_type=?,lab_section_id=?,send_out_test=?,available_in_house=?,\\\n        restrict_order=?,restrict_by=?,external_facility_required=?,facility_description=?,\\\n        services_id=?,priority=?,cpt_id=?,category_id=?,film_category=?,screening_test=?,film_used=?,updated_date=?,updated_by=?\\\n        WHERE record_status='A' AND `hims_d_investigation_test_id`=?;\";\n        let inputs = [\n          investigationDetails.short_description,\n          investigationDetails.description,\n          investigationDetails.investigation_type,\n          investigationDetails.lab_section_id,\n          investigationDetails.send_out_test,\n          investigationDetails.available_in_house,\n          investigationDetails.restrict_order,\n          investigationDetails.restrict_by,\n          investigationDetails.external_facility_required,\n          investigationDetails.facility_description,\n          investigationDetails.services_id,\n          investigationDetails.priority,\n          investigationDetails.cpt_id,\n          investigationDetails.category_id,\n          investigationDetails.film_category,\n          investigationDetails.screening_test,\n          investigationDetails.film_used,\n          new Date(),\n          investigationDetails.updated_by,\n          investigationDetails.hims_d_investigation_test_id\n        ];\n\n        connection.query(queryBuilder, inputs, (error, result) => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n\n          if (\n            result != null &&\n            investigationDetails.investigation_type == \"L\"\n          ) {\n            //m_lab_specimen update\n            debugLog(\"inside L near specimen\");\n\n            connection.query(\n              \"UPDATE `hims_m_lab_specimen`\\\n              SET  specimen_id=?,container_id=?,container_code=?,updated_date=?,updated_by=?\\\n              WHERE record_status='A' AND `hims_m_lab_specimen_id`=?;\",\n              [\n                investigationDetails.specimen_id,\n                investigationDetails.container_id,\n                investigationDetails.container_code,\n                new Date(),\n                investigationDetails.updated_by,\n                investigationDetails.hims_m_lab_specimen_id\n              ],\n              (error, resultSpc) => {\n                if (error) {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                }\n\n                new Promise((resolve, reject) => {\n                  try {\n                    if (investigationDetails.insert_analytes.length != 0) {\n                      const insurtColumns = [\n                        \"test_id\",\n                        \"analyte_id\",\n                        \"analyte_type\",\n                        \"result_unit\",\n                        \"critical_low\",\n                        \"critical_high\",\n                        \"normal_low\",\n                        \"normal_high\",\n                        \"created_by\",\n                        \"updated_by\"\n                      ];\n\n                      connection.query(\n                        \"INSERT INTO hims_m_lab_analyte(\" +\n                          insurtColumns.join(\",\") +\n                          \") VALUES ?\",\n                        [\n                          jsonArrayToObject({\n                            sampleInputObject: insurtColumns,\n                            arrayObj: investigationDetails.insert_analytes,\n                            req: req\n                          })\n                        ],\n                        (error, InsAnalyteResult) => {\n                          if (error) {\n                            connection.rollback(() => {\n                              releaseDBConnection(db, connection);\n                              next(error);\n                            });\n                          }\n                          return resolve(InsAnalyteResult);\n                        }\n                      );\n                    } else {\n                      return resolve();\n                    }\n                  } catch (e) {\n                    reject(e);\n                  }\n                }).then(results => {\n                  debugLog(\"inside LAB then\");\n\n                  //bulk analytes update\n                  if (investigationDetails.update_analytes.length != 0) {\n                    debugLog(\"inside L near analyte  bulk update analyte\");\n                    let inputParam = extend([], req.body.update_analytes);\n                    debugLog(\"input analayte\", inputParam);\n\n                    let qry = \"\";\n\n                    for (let i = 0; i < req.body.update_analytes.length; i++) {\n                      qry +=\n                        \" UPDATE `hims_m_lab_analyte` SET record_status='\" +\n                        inputParam[i].record_status +\n                        \"', critical_low='\" +\n                        inputParam[i].critical_low +\n                        \"', critical_high='\" +\n                        inputParam[i].critical_high +\n                        \"', normal_low='\" +\n                        inputParam[i].normal_low +\n                        \"', normal_high='\" +\n                        inputParam[i].normal_high +\n                        \"', updated_date='\" +\n                        new Date().toLocaleString() +\n                        \"',updated_by=\\\n'\" +\n                        investigationDetails.updated_by +\n                        \"' WHERE hims_m_lab_analyte_id='\" +\n                        inputParam[i].hims_m_lab_analyte_id +\n                        \"';\";\n                    }\n\n                    connection.query(qry, (error, result_anlyt) => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                      debugLog(\"analyte,deleted or update as Inactive \");\n                      connection.commit(error => {\n                        if (error) {\n                          connection.rollback(() => {\n                            releaseDBConnection(db, connection);\n                            next(error);\n                          });\n                        }\n                        releaseDBConnection(db, connection);\n                        req.records = result_anlyt;\n                        next();\n                      });\n                    });\n                  } else {\n                    connection.commit(error => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                      releaseDBConnection(db, connection);\n                      req.records = results;\n                      next();\n                    });\n                  }\n                });\n              }\n            );\n          } //bulk update rad_template\n          else if (\n            result != null &&\n            investigationDetails.investigation_type == \"R\"\n          ) {\n            new Promise((resolve, reject) => {\n              try {\n                if (investigationDetails.insert_rad_temp.length != 0) {\n                  const insurtColumns = [\n                    \"template_name\",\n                    \"test_id\",\n                    \"template_html\",\n                    \"created_by\",\n                    \"updated_by\"\n                  ];\n\n                  connection.query(\n                    \"INSERT INTO hims_d_rad_template_detail(\" +\n                      insurtColumns.join(\",\") +\n                      \") VALUES ?\",\n                    [\n                      jsonArrayToObject({\n                        sampleInputObject: insurtColumns,\n                        arrayObj: investigationDetails.insert_rad_temp,\n                        req: req\n                      })\n                    ],\n                    (error, radiolgyResult) => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n\n                      return resolve(radiolgyResult);\n                    }\n                  );\n                } else {\n                  return resolve();\n                }\n              } catch (e) {\n                reject(e);\n              }\n            }).then(result => {\n              debugLog(\"inside RAD then\");\n              if (investigationDetails.update_rad_temp.length != 0) {\n                let inputParam = extend([], req.body.update_rad_temp);\n                debugLog(\"input rad_update:\", inputParam);\n\n                let qry = \"\";\n\n                for (let i = 0; i < req.body.update_rad_temp.length; i++) {\n                  qry +=\n                    \" UPDATE `hims_d_rad_template_detail` SET template_name='\" +\n                    inputParam[i].template_name +\n                    \"',template_html='\" +\n                    inputParam[i].template_html +\n                    \"',template_status='\" +\n                    inputParam[i].template_status +\n                    \"', updated_date='\" +\n                    new Date().toLocaleString() +\n                    \"',updated_by='\" +\n                    investigationDetails.updated_by +\n                    \"',record_status='\" +\n                    inputParam[i].record_status +\n                    \"' WHERE hims_d_rad_template_detail_id='\" +\n                    inputParam[i].hims_d_rad_template_detail_id +\n                    \"' AND record_status='A' ;\";\n                }\n\n                connection.query(qry, (error, result_rad_update) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n                  connection.commit(error => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n                    releaseDBConnection(db, connection);\n                    req.records = result_rad_update;\n                    next();\n                  });\n                });\n              } else {\n                connection.commit(error => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n                  releaseDBConnection(db, connection);\n                  req.records = result;\n                  next();\n                });\n              }\n            });\n          }\n        });\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\nmodule.exports = {\n  addInvestigationTest,\n  getInvestigTestList,\n  updateInvestigationTest\n};\n"]}