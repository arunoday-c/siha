{"version":3,"sources":["../../../src/model/globalSearch.js"],"names":["searchData","req","res","next","inputParam","query","searchName","httpStatus","generateError","badRequest","queryConfig","unAuthorized","db","dataBaseNotInitilizedError","limit","pageSize","offSet","pageNo","whereCondition","fieldName","fieldContains","_groupby","groupBy","inputs","searchQuery","orderBy","getConnection","error","connection","result","records","e","module","exports"],"mappings":";;AAAA;;AACA;;;;AACA;;AACA;;;;AACA,IAAIA,aAAa,SAAbA,UAAa,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnC,8BAAc,YAAd;AACA,MAAI;AACF,QAAIC,aAAaH,IAAII,KAArB;AACA,2BAAS,wBAAT,EAAmCD,UAAnC;AACA,QAAIA,WAAWE,UAAX,IAAyB,IAAzB,IAAiCF,WAAWE,UAAX,IAAyB,EAA9D,EACEH,KACEI,qBAAWC,aAAX,CACED,qBAAWE,UADb,EAEE,uCAFF,CADF;AAMF,QAAIC,cAAc,sCAAmBN,WAAWE,UAA9B,CAAlB;AACA,QAAII,eAAe,IAAnB,EAAyB;AACvBP,WACEI,qBAAWC,aAAX,CACED,qBAAWI,YADb,EAEE,4BAFF,CADF;AAMD;AACD,QAAIC,KAAKX,IAAIW,EAAb;AACA,QAAIA,MAAM,IAAV,EAAgB;AACdT,WAAKI,qBAAWM,0BAAX,EAAL;AACD;AACD,QAAIC,QACFb,IAAII,KAAJ,CAAUU,QAAV,IAAsB,IAAtB,IAA8Bd,IAAII,KAAJ,CAAUU,QAAV,KAAuB,CAArD,GACI,CADJ,GAEId,IAAII,KAAJ,CAAUU,QAHhB;AAIA;AACA,QAAIC,SAASf,IAAII,KAAJ,CAAUY,MAAvB;AACA,QAAIC,iBACFjB,IAAII,KAAJ,CAAUc,SAAV,IAAuB,IAAvB,GACI,GADJ,GAEI,gBACAlB,IAAII,KAAJ,CAAUc,SADV,GAEA,kBAFA,GAGAlB,IAAII,KAAJ,CAAUe,aAHV,GAIA,KAPN;;AASA,QAAMC,WACJX,YAAYY,OAAZ,IAAuB,IAAvB,GAA8B,MAAMZ,YAAYY,OAAlB,GAA4B,GAA1D,GAAgE,EADlE;;AAGAJ,sBACEjB,IAAII,KAAJ,CAAUkB,MAAV,IAAoB,IAApB,GAA2B,EAA3B,GAAgC,UAAUtB,IAAII,KAAJ,CAAUkB,MADtD;AAEA,QAAIlB,QACFK,YAAYc,WAAZ,GACAN,cADA,GAEAG,QAFA,GAGA,YAHA,GAIAX,YAAYe,OAJZ,GAKA,SALA,GAMAX,KANA,GAOA,UAPA,GAQAE,MARA,GASA,IATA,GAUA,mCAXF;AAYA,2BAAS,cAAT,EAAyBX,KAAzB;AACAO,OAAGc,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTxB,aAAKwB,KAAL;AACD;AACDC,iBAAWvB,KAAX,CAAiBA,KAAjB,EAAwB,UAACsB,KAAD,EAAQE,MAAR,EAAmB;AACzC,wCAAoBjB,EAApB,EAAwBgB,UAAxB;AACA,YAAID,KAAJ,EAAW;AACTxB,eAAKwB,KAAL;AACD;AACD1B,YAAI6B,OAAJ,GAAcD,MAAd;AACA1B;AACD,OAPD;AAQD,KAZD;AAaD,GArED,CAqEE,OAAO4B,CAAP,EAAU;AACV5B,SAAK4B,CAAL;AACD;AACF,CA1ED;;AA4EAC,OAAOC,OAAP,GAAiB;AACfjC;AADe,CAAjB","file":"globalSearch.js","sourcesContent":["import { algaehSearchConfig } from \"../utils/searchGlobal\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { releaseDBConnection } from \"../utils\";\nimport { debugFunction, debugLog } from \"../utils/logging\";\nlet searchData = (req, res, next) => {\n  debugFunction(\"searchData\");\n  try {\n    let inputParam = req.query;\n    debugLog(\"Query based Parameters\", inputParam);\n    if (inputParam.searchName == null || inputParam.searchName == \"\")\n      next(\n        httpStatus.generateError(\n          httpStatus.badRequest,\n          \"Please provide correct search details\"\n        )\n      );\n    let queryConfig = algaehSearchConfig(inputParam.searchName);\n    if (queryConfig == null) {\n      next(\n        httpStatus.generateError(\n          httpStatus.unAuthorized,\n          \"No access for this content\"\n        )\n      );\n    }\n    let db = req.db;\n    if (db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let limit =\n      req.query.pageSize == null || req.query.pageSize === 0\n        ? 5\n        : req.query.pageSize;\n    //let offSet = req.query.pageNo === 0 ? limit * 1 : limit * req.query.pageNo;\n    let offSet = req.query.pageNo;\n    let whereCondition =\n      req.query.fieldName == null\n        ? \" \"\n        : \" and upper(\" +\n          req.query.fieldName +\n          \") like  upper('%\" +\n          req.query.fieldContains +\n          \"%')\";\n\n    const _groupby =\n      queryConfig.groupBy != null ? \" \" + queryConfig.groupBy + \" \" : \"\";\n\n    whereCondition +=\n      req.query.inputs == null ? \"\" : \" and \" + req.query.inputs;\n    let query =\n      queryConfig.searchQuery +\n      whereCondition +\n      _groupby +\n      \" order by \" +\n      queryConfig.orderBy +\n      \" limit \" +\n      limit +\n      \" OFFSET \" +\n      offSet +\n      \" ;\" +\n      \" SELECT FOUND_ROWS() total_pages;\";\n    debugLog(\"SQL Query : \", query);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.query(query, (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  searchData\n};\n"]}