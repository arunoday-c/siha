{"version":3,"sources":["../../../src/model/dental.js"],"names":["addTreatmentPlan","req","res","next","db","httpStatus","dataBaseNotInitilizedError","input","body","getConnection","error","connection","query","plan_name","patient_id","episode_id","visit_id","remarks","consult_date","Date","created_by","updated_by","result","records","e","addDentalTreatmentBack","working_days","inputDays","sunday","monday","tuesday","wednesday","thursday","friday","saturday","d","push","insurtColumns","join","sampleInputObject","arrayObj","newFieldToInsert","addDentalTreatment","finalInput","i","send_teeth","length","surfaceArray","distal","incisal","occlusal","mesial","buccal","labial","cervical","palatal","lingual","singleObj","LINQ","Select","s","surface","ToArray","teeth_number","treatment_plan_id","service_id","scheduled_date","getTreatmentPlan","selectWhere","where","condition","values","getDentalTreatment","approveTreatmentPlan","approve_status","hims_f_treatment_plan_id","results","beginTransaction","rollback","planResult","commit","invalid_input","deleteDentalPlan","hims_f_dental_treatment_id","deleteRes","updateDentalPlanStatus","plan_status","updateDentalTreatmentStatus","treatment_status","updateDentalTreatmentBilledStatus","billed","affectedRows","updateDentalTreatment","undefined","module","exports"],"mappings":"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","file":"dental.js","sourcesContent":["\"use strict\";\nimport extend from \"extend\";\nimport {\n  whereCondition,\n  releaseDBConnection,\n  jsonArrayToObject\n} from \"../utils\";\n//import moment from \"moment\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { LINQ } from \"node-linq\";\nimport { debugLog } from \"../utils/logging\";\n\n//created by irfan:\nlet addTreatmentPlan = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT INTO `hims_f_treatment_plan` (plan_name,patient_id,episode_id,visit_id,remarks,consult_date,       created_date, created_by, updated_date, updated_by)\\\n            VALUE(?,?,?,?,?,?,?,?,?,?)\",\n        [\n          input.plan_name,\n          input.patient_id,\n          input.episode_id,\n          input.visit_id,\n          input.remarks,\n\n          input.consult_date,\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to\nlet addDentalTreatmentBack = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    //let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      let working_days = [];\n\n      let inputDays = [\n        req.body.sunday,\n        req.body.monday,\n        req.body.tuesday,\n        req.body.wednesday,\n        req.body.thursday,\n        req.body.friday,\n        req.body.saturday\n      ];\n\n      for (let d = 0; d < 7; d++) {\n        if (inputDays[d] == \"Y\") {\n          working_days.push(d);\n        }\n      }\n\n      const insurtColumns = [\n        \"patient_id\",\n        \"episode_id\",\n        \"treatment_plan_id\",\n        \"service_id\",\n        \"teeth_number\",\n        \"scheduled_date\",\n        \"distal\",\n        \"incisal\",\n        \"occlusal\",\n        \"mesial\",\n        \"buccal\",\n        \"labial\",\n        \"cervical\",\n        \"palatal\",\n        \"lingual\",\n        \"billed\",\n        \"treatment_status\",\n        \"created_by\",\n        \"updated_by\"\n      ];\n\n      connection.query(\n        \"INSERT INTO hims_f_dental_treatment(\" +\n          insurtColumns.join(\",\") +\n          \",created_date,updated_date) VALUES ?\",\n        [\n          jsonArrayToObject({\n            sampleInputObject: insurtColumns,\n            arrayObj: req.body,\n            newFieldToInsert: [new Date(), new Date()],\n            req: req\n          })\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n//created by irfan: to\nlet addDentalTreatment = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let finalInput = [];\n      for (let i = 0; i < input.send_teeth.length; i++) {\n        let surfaceArray = {\n          distal: \"N\",\n          incisal: \"N\",\n          occlusal: \"N\",\n          mesial: \"N\",\n          buccal: \"N\",\n          labial: \"N\",\n          cervical: \"N\",\n          palatal: \"N\",\n          lingual: \"N\"\n        };\n        let singleObj = new LINQ(input.send_teeth[i][\"details\"])\n          .Select(s => s.surface)\n          .ToArray();\n\n        let teeth_number = input.send_teeth[i][\"teeth_number\"];\n        extend(surfaceArray, { teeth_number });\n\n        for (let d = 0; d < singleObj.length; d++) {\n          if (singleObj[d] == \"M\") {\n            extend(surfaceArray, { mesial: \"Y\" });\n          }\n          if (singleObj[d] == \"P\") {\n            extend(surfaceArray, { palatal: \"Y\" });\n          }\n          if (singleObj[d] == \"D\") {\n            extend(surfaceArray, { distal: \"Y\" });\n          }\n          if (singleObj[d] == \"I\") {\n            extend(surfaceArray, { incisal: \"Y\" });\n          }\n          if (singleObj[d] == \"L\") {\n            extend(surfaceArray, { labial: \"Y\" });\n          }\n        }\n\n        finalInput.push(surfaceArray);\n      }\n\n      const insurtColumns = [\n        \"teeth_number\",\n        \"distal\",\n        \"incisal\",\n        \"occlusal\",\n        \"mesial\",\n        \"buccal\",\n        \"labial\",\n        \"cervical\",\n        \"palatal\",\n        \"lingual\",\n\n        \"created_by\",\n        \"updated_by\"\n      ];\n\n      connection.query(\n        \"INSERT INTO hims_f_dental_treatment(\" +\n          insurtColumns.join(\",\") +\n          \",patient_id,episode_id,treatment_plan_id,service_id,\\\n          scheduled_date,created_date,updated_date) VALUES ?\",\n        [\n          jsonArrayToObject({\n            sampleInputObject: insurtColumns,\n            arrayObj: finalInput,\n            newFieldToInsert: [\n              input.patient_id,\n              input.episode_id,\n              input.treatment_plan_id,\n              input.service_id,\n              new Date(input.scheduled_date),\n\n              new Date(),\n              new Date()\n            ],\n            req: req\n          })\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to\nlet getTreatmentPlan = (req, res, next) => {\n  let selectWhere = {\n    patient_id: \"ALL\",\n    episode_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_f_treatment_plan_id, plan_name, patient_id, episode_id, visit_id, remarks,\\\n         approve_status, plan_status,consult_date from  hims_f_treatment_plan where record_status='A' and \" +\n          where.condition,\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to\nlet getDentalTreatment = (req, res, next) => {\n  let selectWhere = {\n    patient_id: \"ALL\",\n    episode_id: \"ALL\",\n    treatment_plan_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_f_dental_treatment_id, patient_id, episode_id, treatment_plan_id, service_id, teeth_number\\\n        , scheduled_date, distal, incisal, occlusal, mesial, buccal, labial, cervical, palatal, lingual,\\\n         billed, treatment_status from hims_f_dental_treatment  where record_status='A' and \" +\n          where.condition,\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to\nlet approveTreatmentPlan = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      if (input.approve_status == \"Y\") {\n        connection.query(\n          \"update hims_f_treatment_plan set approve_status=? ,\\\n             updated_date=?, updated_by=? WHERE  `record_status`='A' and `hims_f_treatment_plan_id`=?;\",\n          [\n            input.approve_status,\n            new Date(),\n            input.updated_by,\n            input.hims_f_treatment_plan_id\n          ],\n          (error, results) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n            req.records = results;\n            next();\n          }\n        );\n      } else if (input.approve_status == \"C\") {\n        connection.beginTransaction(error => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n          connection.query(\n            \"delete from hims_f_dental_treatment where treatment_plan_id=?;\",\n            [input.hims_f_treatment_plan_id],\n            (error, results) => {\n              if (error) {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n              if (results != null) {\n                connection.query(\n                  \"  delete from hims_f_treatment_plan where hims_f_treatment_plan_id=?\",\n                  [input.hims_f_treatment_plan_id],\n                  (error, planResult) => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n\n                    connection.commit(error => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                      releaseDBConnection(db, connection);\n                      req.records = planResult;\n                      next();\n                    });\n                  }\n                );\n              } else {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n            }\n          );\n        });\n      } else {\n        releaseDBConnection(db, connection);\n        req.records = { invalid_input: true };\n        next();\n      }\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to\nlet deleteDentalPlan = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"delete from hims_f_dental_treatment where hims_f_dental_treatment_id=?\",\n        [req.body.hims_f_dental_treatment_id],\n        (error, deleteRes) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n\n          req.records = deleteRes;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n//created by irfan: to\nlet updateDentalPlanStatus = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let input = extend({}, req.body);\n      if (input.plan_status == \"C\" || input.plan_status == \"O\") {\n        connection.query(\n          \"update hims_f_treatment_plan set plan_status=? ,\\\n             updated_date=?, updated_by=? WHERE  `record_status`='A' and `hims_f_treatment_plan_id`=?;\",\n          [\n            input.plan_status,\n            new Date(),\n            input.updated_by,\n            input.hims_f_treatment_plan_id\n          ],\n          (error, results) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n            req.records = results;\n            next();\n          }\n        );\n      } else {\n        releaseDBConnection(db, connection);\n        req.records = { invalid_input: true };\n        next();\n      }\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to\nlet updateDentalTreatmentStatus = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let input = extend({}, req.body);\n      if (input.treatment_status == \"WIP\" || input.treatment_status == \"CP\") {\n        connection.query(\n          \"update hims_f_dental_treatment set treatment_status=? ,\\\n             updated_date=?, updated_by=? WHERE  `record_status`='A' and `hims_f_dental_treatment_id`=?;\",\n          [\n            input.treatment_status,\n            new Date(),\n            input.updated_by,\n            input.hims_f_dental_treatment_id\n          ],\n          (error, results) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n            req.records = results;\n            next();\n          }\n        );\n      } else {\n        releaseDBConnection(db, connection);\n        req.records = { invalid_input: true };\n        next();\n      }\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to\nlet updateDentalTreatmentBilledStatus = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let input = extend({}, req.body);\n      if (input.billed == \"SB\" || input.billed == \"Y\") {\n        connection.query(\n          \"update hims_f_dental_treatment set billed=? ,\\\n             updated_date=?, updated_by=? WHERE  `record_status`='A' and `hims_f_dental_treatment_id`=?;\",\n          [\n            input.billed,\n            new Date(),\n            input.updated_by,\n            input.hims_f_dental_treatment_id\n          ],\n          (error, results) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n\n            if (results.affectedRows > 0) {\n              req.records = results;\n              next();\n            } else {\n              req.records = { affectedRows: 0 };\n              next();\n            }\n          }\n        );\n      } else {\n        releaseDBConnection(db, connection);\n        req.records = { invalid_input: true };\n        next();\n      }\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to\nlet updateDentalTreatment = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let input = extend({}, req.body);\n      if (\n        input.hims_f_dental_treatment_id != \"null\" ||\n        input.hims_f_dental_treatment_id != undefined\n      ) {\n        connection.query(\n          \"update hims_f_dental_treatment set  scheduled_date=?, distal=?, incisal=?,\\\n           occlusal=?, mesial=?, buccal=?, labial=?, cervical=?, palatal=?, lingual=?,\\\n             updated_date=?, updated_by=? WHERE  `record_status`='A' and `hims_f_dental_treatment_id`=?;\",\n          [\n            input.scheduled_date,\n\n            input.distal,\n            input.incisal,\n            input.occlusal,\n            input.mesial,\n            input.buccal,\n            input.labial,\n            input.cervical,\n            input.palatal,\n            input.lingual,\n            new Date(),\n            input.updated_by,\n            input.hims_f_dental_treatment_id\n          ],\n          (error, results) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n\n            if (results.affectedRows > 0) {\n              req.records = results;\n              next();\n            } else {\n              req.records = { affectedRows: 0 };\n              next();\n            }\n          }\n        );\n      } else {\n        releaseDBConnection(db, connection);\n        req.records = { invalid_input: true };\n        next();\n      }\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addTreatmentPlan,\n  addDentalTreatment,\n  getTreatmentPlan,\n  getDentalTreatment,\n  approveTreatmentPlan,\n  deleteDentalPlan,\n  updateDentalPlanStatus,\n  updateDentalTreatmentStatus,\n  updateDentalTreatmentBilledStatus,\n  updateDentalTreatment\n};\n"]}