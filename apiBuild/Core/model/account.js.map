{"version":3,"sources":["../../../src/model/account.js"],"names":["getUserNamePassWord","temp","base64String","split","buffer","Buffer","from","UserNamePassword","toString","username","password","e","console","error","apiAuth","req","res","next","authModel","db","httpStatus","dataBaseNotInitilizedError","authHeader","headers","generateError","unAuthorized","inputData","badRequest","body","getConnection","connection","query","result","release","length","success","results","hospitalList","authUserOLD","records","authUser","module","exports"],"mappings":"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","file":"account.js","sourcesContent":["import extend from \"extend\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { debugLog } from \"../utils/logging\";\n\nlet getUserNamePassWord = base64String => {\n  try {\n    const temp = base64String.split(\" \");\n    const buffer = new Buffer.from(temp[1], \"base64\");\n    const UserNamePassword = buffer.toString().split(\":\");\n    return {\n      username: UserNamePassword[0],\n      password: UserNamePassword[1]\n    };\n  } catch (e) {\n    console.error(e);\n  }\n};\n\n//api authentication\nlet apiAuth = (req, res, next) => {\n  let authModel = {\n    username: \"\",\n    password: \"\"\n  };\n  try {\n    let db;\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    } else {\n      db = req.db;\n    }\n    let authHeader = req.headers[\"authorization\"];\n    if (!authHeader || authHeader == \"\") {\n      next(\n        httpStatus.generateError(\n          httpStatus.unAuthorized,\n          \"Missing authorization token\"\n        )\n      );\n    }\n\n    let inputData = extend(authModel, getUserNamePassWord(authHeader));\n\n    if (inputData.username == null || inputData.username == \"\") {\n      next(\n        httpStatus.generateError(\n          httpStatus.badRequest,\n          \"User name can not blank\"\n        )\n      );\n    }\n    if (inputData.password == null || inputData.password == \"\") {\n      next(\n        httpStatus.generateError(\n          httpStatus.badRequest,\n          \"Password can not blank\"\n        )\n      );\n    }\n    req.body = inputData;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.query(\n        \"SELECT  hims_d_hospital_id,hospital_code,hospital_name,arabic_hospital_name, \\\n        username FROM algaeh_d_api_auth,hims_d_hospital WHERE password=md5(?)\\\n            AND algaeh_d_api_auth.record_status='A' AND username =? and hims_d_hospital.algaeh_api_auth_id =\\\n            algaeh_d_api_auth. algaeh_d_api_auth_id\",\n        [inputData.password, inputData.username],\n        (error, result) => {\n          connection.release();\n          if (error) {\n            next(error);\n          }\n          if (result.length > 0) {\n            req.result = {\n              success: true,\n              results: result[0][\"username\"],\n              hospitalList: result\n            };\n            next();\n          } else {\n            next(\n              httpStatus.generateError(\n                httpStatus.unAuthorized,\n                \"Authentication service error please contact to your service provider\"\n              )\n            );\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//api user authentication\nlet authUserOLD = (req, res, next) => {\n  let authModel = {\n    username: \"\",\n    password: \"\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let inputData = extend(authModel, req.body);\n\n    db.getConnection((error, connection) => {\n      let query =\n        \"select algaeh_d_app_user.algaeh_d_app_user_id,algaeh_d_app_user.username, \\\n        user_display_name,user_type,locked,login_attempts,password_expiry_rule, \\\n      change_password,password_expiry_date,hims_m_employee_department_mappings.employee_id,\\\n      hims_m_employee_department_mappings.sub_department_id ,app_group_id,algaeh_m_group_user_mappings.role_id,group_type \\\n      from algaeh_d_app_user,algaeh_d_app_password,hims_m_employee_department_mappings,algaeh_m_group_user_mappings, algaeh_d_app_group \\\n      WHERE algaeh_d_app_user.record_status='A' AND algaeh_d_app_password.record_status='A' and algaeh_d_app_group.algaeh_d_app_group_id= \\\n      algaeh_m_group_user_mappings.app_group_id \\\n      AND algaeh_d_app_password.password=md5(?) AND algaeh_d_app_user.username=? \\\n      AND hims_m_employee_department_mappings.user_id=algaeh_d_app_user.algaeh_d_app_user_id \\\n      AND algaeh_m_group_user_mappings.user_id=algaeh_d_app_user.algaeh_d_app_user_id\";\n\n      connection.query(\n        query,\n        [inputData.password, inputData.username],\n        (error, result) => {\n          if (error) {\n            connection.release();\n            next(error);\n          }\n          // if (result != null && result.length != 0) {\n          //   connection.query(\n          //     \"select module_name,module_desc from algaeh_d_app_privilege,algaeh_d_app_screens where role_id =? and  \\\n          //   algaeh_d_app_privilege.screen_id = algaeh_d_app_screens.algaeh_app_screens_id\",\n          //     [result[0].role_id],\n          //     (error, rec) => {\n          //       connection.release();\n          //       if (error) {\n          //         connection.release();\n          //         next(error);\n          //       }\n          //       req.records = result;\n          //       req.secureModels = rec;\n          //       next();\n          //     }\n          //   );\n          // } else {\n          //   req.records = result;\n          //   req.activeModels = [];\n          //   next();\n          // }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//api user authentication\nlet authUser = (req, res, next) => {\n  let authModel = {\n    username: \"\",\n    password: \"\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let inputData = extend(authModel, req.body);\n\n    //   SELECT algaeh_d_app_user_id, username, user_display_name,  locked, login_attempts,\\\n    //   password_expiry_rule, algaeh_m_group_user_mappings_id,algaeh_d_app_group_id,\\\n    //   app_group_name,group_type,app_d_app_roles_id,role_name,role_type,\\\n    //   hims_d_employee_department_id, employee_id, services_id, sub_department_id \\\n    //   FROM algaeh_d_app_user U inner join algaeh_m_group_user_mappings GUP \\\n    //   on GUP.user_id=U.algaeh_d_app_user_id\\\n    //   inner join algaeh_d_app_group G on GUP.app_group_id= G.algaeh_d_app_group_id \\\n    //   inner join algaeh_d_app_roles R on GUP.role_id=R.app_d_app_roles_id\\\n    //   inner join hims_m_employee_department_mappings EDM on  GUP.user_id=EDM.user_id\\\n    //   inner join  algaeh_d_app_password P on U.algaeh_d_app_user_id=P.userid\\\n    //  WHERE P.password=md5(?) AND U.username=? AND U.record_status='A' \\\n    //   AND P.record_status='A' AND G.record_status='A' AND R.record_status='A'\n\n    db.getConnection((error, connection) => {\n      let query =\n        \"SELECT algaeh_d_app_user_id, username, user_display_name,  locked, user_type,login_attempts,\\\n        password_expiry_rule, algaeh_m_role_user_mappings_id,app_d_app_roles_id,app_group_id,\\\n        role_code, role_name, role_discreption, role_type,loan_authorize_privilege,leave_authorize_privilege,\\\n        algaeh_d_app_group_id, app_group_code, app_group_name, app_group_desc, group_type, \\\n        hims_d_employee_department_id, employee_id, services_id, sub_department_id \\\n        FROM  algaeh_d_app_user U inner join algaeh_m_role_user_mappings RU on RU.user_id=U.algaeh_d_app_user_id\\\n        inner join algaeh_d_app_roles R on RU.role_id=R.app_d_app_roles_id\\\n        inner join algaeh_d_app_group G on R.app_group_id=G.algaeh_d_app_group_id\\\n        inner join hims_m_employee_department_mappings EDM on  RU.user_id=EDM.user_id\\\n        inner join  algaeh_d_app_password P on U.algaeh_d_app_user_id=P.userid\\\n        WHERE P.password=md5(?) AND U.username=? AND U.record_status='A' \\\n        AND P.record_status='A' AND G.record_status='A' AND R.record_status='A'  \";\n      connection.query(\n        query,\n        [inputData.password, inputData.username],\n        (error, result) => {\n          if (error) {\n            connection.release();\n            next(error);\n          }\n\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  apiAuth,\n  authUser\n};\n"]}