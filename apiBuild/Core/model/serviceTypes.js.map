{"version":3,"sources":["../../../src/model/serviceTypes.js"],"names":["inputServiceType","hims_d_service_type_id","service_type_code","service_type","service_type_desc","arabic_service_type","effective_start_date","effective_end_date","serviceTypeWhere","getServiceType","req","res","next","db","httpStatus","dataBaseNotInitilizedError","where","query","getConnection","error","connection","condition","values","result","records","e","getServices","serviceWhere","hims_d_services_id","service_code","cpt_code","service_name","service_desc","sub_department_id","pagePaging","paging","Page","pageNo","page","pageSize","parameters","Wherecondition","addServices","Services","hospital_id","service_type_id","standard_fee","discount","vat_applicable","vat_percent","created_by","userIdentity","algaeh_d_app_user_id","updated_by","service_status","inputParam","body","Date","service_id","insertId","updateServices","record_status","module","exports"],"mappings":"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","file":"serviceTypes.js","sourcesContent":["import httpStatus from \"../utils/httpStatus\";\nimport { whereCondition, releaseDBConnection, selectStatement } from \"../utils\";\nimport extend from \"extend\";\nimport { logger, debugLog, debugFunction } from \"../utils/logging\";\n// import { validate } from \"node-model-validation\";\nlet inputServiceType = {\n  hims_d_service_type_id: null,\n  service_type_code: null,\n  service_type: null,\n  service_type_desc: null,\n  arabic_service_type: null,\n  effective_start_date: null,\n  effective_end_date: null\n  // created_by: req.userIdentity.algaeh_d_app_user_id,\n\n  // updated_by: req.userIdentity.algaeh_d_app_user_id\n};\n\nlet serviceTypeWhere = {\n  hims_d_service_type_id: \"ALL\",\n  service_type_code: \"ALL\",\n  service_type: \"ALL\"\n};\nlet getServiceType = (req, res, next) => {\n  let serviceTypeWhere = {\n    hims_d_service_type_id: \"ALL\",\n    service_type_code: \"ALL\",\n    service_type: \"ALL\"\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let where = whereCondition(extend(serviceTypeWhere, req.query));\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.query(\n        \"SELECT `hims_d_service_type_id`, `service_type_code`, `service_type`, `service_type_desc` \\\n          ,`arabic_service_type` FROM `hims_d_service_type` WHERE `record_status`='A' AND \" +\n          where.condition +\n          \" order by hims_d_service_type_id desc\",\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet getServices = (req, res, next) => {\n  let serviceWhere = {\n    hims_d_services_id: \"ALL\",\n    service_code: \"ALL\",\n    cpt_code: \"ALL\",\n    service_name: \"ALL\",\n    service_desc: \"ALL\",\n    sub_department_id: \"ALL\"\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let pagePaging = \"\";\n    if (req.paging != null) {\n      let Page = paging(req.paging);\n      pagePaging += \" LIMIT \" + Page.pageNo + \",\" + page.pageSize;\n    }\n    let parameters = extend(\n      req.Wherecondition == null ? {} : req.Wherecondition,\n      serviceWhere\n    );\n    let condition = whereCondition(extend(req.query, parameters));\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"select hims_d_services_id, service_code, cpt_code, service_name \\\n          , service_desc, sub_department_id, hospital_id, service_type_id, standard_fee \\\n          , discount, vat_applicable, vat_percent, effective_start_date, effectice_end_date from hims_d_services WHERE record_status ='A' AND \" +\n          condition.condition +\n          \" order by hims_d_services_id desc\" +\n          pagePaging,\n        values: condition.values\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet addServices = (req, res, next) => {\n  let Services = {\n    hims_d_services_id: null,\n    service_code: null,\n    cpt_code: null,\n    service_name: null,\n    hospital_id: null,\n    service_type_id: null,\n    sub_department_id: null,\n    standard_fee: null,\n    discount: 0,\n    vat_applicable: null,\n    vat_percent: null,\n\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id,\n\n    service_status: \"A\"\n  };\n\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    let inputParam = extend(Services, req.body);\n    connection.query(\n      \"INSERT INTO `hims_d_services` (`service_code`, `cpt_code`,`service_name`, `hospital_id`,`service_type_id`, \\\n      `sub_department_id`,`standard_fee`, `discount`, `vat_applicable`, `vat_percent`, `effective_start_date`\\\n      , `created_by` ,`created_date`,`service_status`) \\\n   VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\",\n      [\n        inputParam.service_code,\n        inputParam.cpt_code,\n        inputParam.service_name,\n        inputParam.hospital_id,\n        inputParam.service_type_id,\n        inputParam.sub_department_id,\n        inputParam.standard_fee,\n        inputParam.discount,\n        inputParam.vat_applicable,\n        inputParam.vat_percent,\n        new Date(),\n\n        inputParam.created_by,\n        new Date(),\n        inputParam.service_status\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        debugLog(\"result: \", result);\n        req.body.service_id = result.insertId;\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\n\nlet updateServices = (req, res, next) => {\n  let Services = {\n    hims_d_services_id: null,\n    service_code: null,\n    cpt_code: null,\n    service_name: null,\n    hospital_id: null,\n    service_type_id: null,\n    sub_department_id: null,\n    standard_fee: null,\n    discount: 0,\n    vat_applicable: null,\n    vat_percent: null,\n\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id,\n\n    service_status: \"A\",\n    record_status: \"A\"\n  };\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    let inputParam = extend(Services, req.body);\n    connection.query(\n      \"UPDATE `hims_d_services` \\\n     SET `service_code`=?,  `cpt_code`=?,`service_name`=?, `hospital_id`=?,  `service_type_id`=?,`sub_department_id` = ?, \\\n     `standard_fee`=?, `discount`=?,  `vat_applicable`=?,`vat_percent`=?, `updated_by`=?, `updated_date`=?,\\\n     `service_status`=? , `record_status`=?\\\n     WHERE `hims_d_services_id`=?\",\n      [\n        inputParam.service_code,\n        inputParam.cpt_code,\n        inputParam.service_name,\n        inputParam.hospital_id,\n        inputParam.service_type_id,\n        inputParam.sub_department_id,\n        inputParam.standard_fee,\n\n        inputParam.discount,\n        inputParam.vat_applicable,\n        inputParam.vat_percent,\n\n        inputParam.updated_by,\n        new Date(),\n        inputParam.service_status,\n        inputParam.record_status,\n        inputParam.hims_d_services_id\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\n\nmodule.exports = {\n  getServiceType,\n  getServices,\n  addServices,\n  updateServices\n};\n"]}