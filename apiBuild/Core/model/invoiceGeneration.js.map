{"version":3,"sources":["../../../src/model/invoiceGeneration.js"],"names":["getVisitWiseBillDetailS_BACKUP","req","res","next","db","httpStatus","dataBaseNotInitilizedError","getConnection","error","connection","query","visit_id","result","length","outputArray","i","detailResult","push","detailBill","records","e","getVisitWiseBillDetailS","bill_header_ids","LINQ","Select","s","hims_f_billing_header_id","ToArray","addInvoiceGeneration","input","body","beginTransaction","rollback","requestCounter","Promise","resolve","reject","counter","module_desc","onFailure","onSuccess","then","documentCode","completeNumber","today","format","Date","invoice_date","patient_id","gross_amount","discount_amount","net_amount","patient_resp","patient_tax","patient_payable","company_resp","company_tax","company_payable","sec_company_resp","sec_company_tax","sec_company_payable","insurance_provider_id","sub_insurance_id","network_id","network_office_id","userIdentity","algaeh_d_app_user_id","headerResult","insertId","insurtColumns","join","sampleInputObject","arrayObj","Invoice_Detail","newFieldToInsert","_tempBillHeaderIds","billHeaderIds","filter","item","pos","indexOf","affectedRows","updated_by","invoiceFlagResult","commit","invoice_number","hims_f_invoice_header_id","getInvoiceGeneration","selectWhere","where","condition","values","getInvoicesForClaimsBACKUP","from_date","to_date","undefined","invoiceDetails","invalid_input","getInvoicesForClaims","invoiceICD","episode_id","patientDiagnosys","addDiagnosys","getPatientIcdForInvoice","invoice_header_id","deleteInvoiceIcd","hims_f_invoice_icd_id","addInvoiceIcd","daignosis_id","diagnosis_type","final_daignosis","created_by","updateClaimValidatedStatus","claim_validated","updateInvoiceDetails","hims_f_invoice_details_id","cpt_code","module","exports"],"mappings":"AAAA;;;;AACA;;;;AACA;;AAMA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AAEA;AACA,IAAIA,iCAAiC,SAAjCA,8BAAiC,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvD,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;;AAEAA,OAAGG,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtCA,iBAAWC,KAAX,CACE;;;;;;6EADF,EAQE,CAACT,IAAIS,KAAJ,CAAUC,QAAX,CARF,EASE,UAACH,KAAD,EAAQI,MAAR,EAAmB;AACjB,YAAIJ,KAAJ,EAAW;AACT,0CAAoBJ,EAApB,EAAwBK,UAAxB;AACAN,eAAKK,KAAL;AACD;;AAED,YAAII,OAAOC,MAAP,GAAgB,CAApB,EAAuB;AAAA;AACrB,gBAAIC,cAAc,EAAlB;;AADqB,uCAGZC,CAHY;AAInBN,yBAAWC,KAAX,CACE;;;;;;mDADF,EAQE,CAACE,OAAOG,CAAP,EAAU,0BAAV,CAAD,CARF,EASE,UAACP,KAAD,EAAQQ,YAAR,EAAyB;AACvB,oBAAIR,KAAJ,EAAW;AACT,kDAAoBJ,EAApB,EAAwBK,UAAxB;AACAN,uBAAKK,KAAL;AACD;;AAEDM,4BAAYG,IAAZ,cAAsBL,OAAOG,CAAP,CAAtB,IAAiCG,YAAYF,YAA7C;;AAEA,oBAAID,KAAKH,OAAOC,MAAP,GAAgB,CAAzB,EAA4B;AAC1B,kDAAoBT,EAApB,EAAwBK,UAAxB;AACAR,sBAAIkB,OAAJ,GAAcL,WAAd;AACAX;AACD;AACF,eAtBH;AAJmB;;AAGrB,iBAAK,IAAIY,IAAI,CAAb,EAAgBA,IAAIH,OAAOC,MAA3B,EAAmCE,GAAnC,EAAwC;AAAA,oBAA/BA,CAA+B;AAyBvC;AA5BoB;AA6BtB,SA7BD,MA6BO;AACL,0CAAoBX,EAApB,EAAwBK,UAAxB;AACAR,cAAIkB,OAAJ,GAAcP,MAAd;AACAT;AACD;AACF,OAjDH;AAmDD,KApDD;AAqDD,GA3DD,CA2DE,OAAOiB,CAAP,EAAU;AACVjB,SAAKiB,CAAL;AACD;AACF,CA/DD;;AAiEA;AACA,IAAIC,0BAA0B,SAA1BA,uBAA0B,CAACpB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAChD,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;;AAEAA,OAAGG,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtCA,iBAAWC,KAAX,CACE,mJADF,EAEE,CAACT,IAAIS,KAAJ,CAAUC,QAAX,CAFF,EAGE,UAACH,KAAD,EAAQI,MAAR,EAAmB;AACjB,YAAIJ,KAAJ,EAAW;AACT,0CAAoBJ,EAApB,EAAwBK,UAAxB;AACAN,eAAKK,KAAL;AACD;;AAED,YAAII,OAAOC,MAAP,GAAgB,CAApB,EAAuB;AACrB,cAAIS,kBAAkB,IAAIC,cAAJ,CAASX,MAAT,EACnBY,MADmB,CACZ;AAAA,mBAAKC,EAAEC,wBAAP;AAAA,WADY,EAEnBC,OAFmB,EAAtB;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEAlB,qBAAWC,KAAX,CACE;;;;;;;;wDADF,EAUE,CAACY,eAAD,CAVF,EAWE,UAACd,KAAD,EAAQQ,YAAR,EAAyB;AACvB,gBAAIR,KAAJ,EAAW;AACT,8CAAoBJ,EAApB,EAAwBK,UAAxB;AACAN,mBAAKK,KAAL;AACD;;AAED,4CAAoBJ,EAApB,EAAwBK,UAAxB;AACAR,gBAAIkB,OAAJ,GAAcH,YAAd;AACAb;AACD,WApBH;AAsBD,SAlCD,MAkCO;AACL,0CAAoBC,EAApB,EAAwBK,UAAxB;AACAR,cAAIkB,OAAJ,GAAcP,MAAd;AACAT;AACD;AACF,OAhDH;AAkDD,KAnDD;AAoDD,GA1DD,CA0DE,OAAOiB,CAAP,EAAU;AACVjB,SAAKiB,CAAL;AACD;AACF,CA9DD;;AAgEA;AACA,IAAIQ,uBAAuB,SAAvBA,oBAAuB,CAAC3B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC7C,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;AACA,QAAIyB,QAAQ,sBAAO,EAAP,EAAW5B,IAAI6B,IAAf,CAAZ;;AAEA1B,OAAGG,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTL,aAAKK,KAAL;AACD;AACDC,iBAAWsB,gBAAX,CAA4B,iBAAS;AACnC,YAAIvB,KAAJ,EAAW;AACTC,qBAAWuB,QAAX,CAAoB,YAAM;AACxB,4CAAoB5B,EAApB,EAAwBK,UAAxB;AACAN,iBAAKK,KAAL;AACD,WAHD;AAID;;AAED,YAAIyB,iBAAiB,CAArB;;AAEA,eAAO,IAAIC,kBAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,uCAAiB;AACfhC,gBAAIK,UADW;AAEf4B,qBAASJ,cAFM;AAGfK,yBAAa,CAAC,SAAD,CAHE;AAIfC,uBAAW,0BAAS;AAClBH,qBAAO5B,KAAP;AACD,aANc;AAOfgC,uBAAW,2BAAU;AACnBL,sBAAQvB,MAAR;AACD;AATc,WAAjB;AAWD,SAZM,EAYJ6B,IAZI,CAYC,kBAAU;AAChB,cAAIC,eAAe9B,OAAO,CAAP,EAAU+B,cAA7B;AACA,iCAAS,eAAT,EAA0BD,YAA1B;AACA,iCAAS,QAAT,EAAmBb,KAAnB;AACA,cAAIe,QAAQ,wBAASC,MAAT,CAAgB,YAAhB,CAAZ;AACA,iCAAS,QAAT,EAAmBhB,KAAnB;AACApB,qBAAWC,KAAX,CACE;;;;mEADF,EAME,CACEgC,YADF,EAEE,IAAII,IAAJ,CAASjB,MAAMkB,YAAf,CAFF,EAGElB,MAAMmB,UAHR,EAIEnB,MAAMlB,QAJR,EAKEkB,MAAMoB,YALR,EAMEpB,MAAMqB,eANR,EAOErB,MAAMsB,UAPR,EAQEtB,MAAMuB,YARR,EASEvB,MAAMwB,WATR,EAUExB,MAAMyB,eAVR,EAWEzB,MAAM0B,YAXR,EAYE1B,MAAM2B,WAZR,EAaE3B,MAAM4B,eAbR,EAcE5B,MAAM6B,gBAdR,EAeE7B,MAAM8B,eAfR,EAgBE9B,MAAM+B,mBAhBR,EAkBE/B,MAAMgC,qBAlBR,EAmBEhC,MAAMiC,gBAnBR,EAoBEjC,MAAMkC,UApBR,EAqBElC,MAAMmC,iBArBR,EAuBE,IAAIlB,IAAJ,EAvBF,EAwBE7C,IAAIgE,YAAJ,CAAiBC,oBAxBnB,EAyBE,IAAIpB,IAAJ,EAzBF,EA0BE7C,IAAIgE,YAAJ,CAAiBC,oBA1BnB,CANF,EAkCE,UAAC1D,KAAD,EAAQ2D,YAAR,EAAyB;AACvB,gBAAI3D,KAAJ,EAAW;AACTC,yBAAWuB,QAAX,CAAoB,YAAM;AACxB,gDAAoB5B,EAApB,EAAwBK,UAAxB;AACAN,qBAAKK,KAAL;AACD,eAHD;AAID;;AAED,gBAAI2D,aAAaC,QAAb,IAAyB,IAA7B,EAAmC;AACjC,kBAAMC,gBAAgB,CACpB,gBADoB,EAEpB,gBAFoB,EAGpB,iBAHoB,EAIpB,YAJoB,EAKpB,UALoB,EAMpB,UANoB,EAOpB,cAPoB,EAQpB,iBARoB,EASpB,YAToB,EAUpB,cAVoB,EAWpB,aAXoB,EAYpB,iBAZoB,EAapB,cAboB,EAcpB,aAdoB,EAepB,iBAfoB,EAgBpB,kBAhBoB,EAiBpB,iBAjBoB,EAkBpB,qBAlBoB,CAAtB;;AAqBA5D,yBAAWC,KAAX,CACE,wCACE2D,cAAcC,IAAd,CAAmB,GAAnB,CADF,GAEE,8BAHJ,EAIE,CACE,8BAAkB;AAChBC,mCAAmBF,aADH;AAEhBG,0BAAUvE,IAAI6B,IAAJ,CAAS2C,cAFH;AAGhBC,kCAAkB,CAACP,aAAaC,QAAd,CAHF;AAIhBnE,qBAAKA;AAJW,eAAlB,CADF,CAJF,EAYE,UAACO,KAAD,EAAQQ,YAAR,EAAyB;AACvB,oBAAIR,KAAJ,EAAW;AACTC,6BAAWuB,QAAX,CAAoB,YAAM;AACxB,oDAAoB5B,EAApB,EAAwBK,UAAxB;AACAN,yBAAKK,KAAL;AACD,mBAHD;AAID;;AAED,oBAAImE,qBAAqB,IAAIpD,cAAJ,CAAStB,IAAI6B,IAAJ,CAAS2C,cAAlB,EACtBjD,MADsB,CACf;AAAA,yBAAKC,EAAEC,wBAAP;AAAA,iBADe,EAEtBC,OAFsB,EAAzB;;AAIA,oBAAIiD,gBAAgBD,mBAAmBE,MAAnB,CAClB,UAACC,IAAD,EAAOC,GAAP,EAAe;AACb,yBAAOJ,mBAAmBK,OAAnB,CAA2BF,IAA3B,KAAoCC,GAA3C;AACD,iBAHiB,CAApB;;AAMA,oBAAI/D,aAAaiE,YAAb,GAA4B,CAAhC,EAAmC;AACjCxE,6BAAWC,KAAX,CACE;;oLADF,EAIE,CACE,IAAIoC,IAAJ,EADF,EAEEjB,MAAMqD,UAFR,EAGEN,aAHF,EAIE,IAAI9B,IAAJ,EAJF,EAKEjB,MAAMqD,UALR,EAMErD,MAAMlB,QANR,CAJF,EAYE,UAACH,KAAD,EAAQ2E,iBAAR,EAA8B;AAC5B,wBAAI3E,KAAJ,EAAW;AACTC,iCAAWuB,QAAX,CAAoB,YAAM;AACxB,wDAAoB5B,EAApB,EAAwBK,UAAxB;AACAN,6BAAKK,KAAL;AACD,uBAHD;AAID;;AAEDC,+BAAW2E,MAAX,CAAkB,iBAAS;AACzB,0BAAI5E,KAAJ,EAAW;AACTC,mCAAWuB,QAAX,CAAoB,YAAM;AACxB,0DAAoB5B,EAApB,EAAwBK,UAAxB;AACAN,+BAAKK,KAAL;AACD,yBAHD;AAID;AACD,sDAAoBJ,EAApB,EAAwBK,UAAxB;AACAR,0BAAIkB,OAAJ,GAAc;AACZkE,wCAAgB3C,YADJ;AAEZ4C,kDAA0BnB,aAAaC;AAF3B,uBAAd;AAIAjE;AACD,qBAbD;AAcD,mBAlCH;AAoCD,iBArCD,MAqCO;AACLM,6BAAWuB,QAAX,CAAoB,YAAM;AACxB,oDAAoB5B,EAApB,EAAwBK,UAAxB;AACAR,wBAAIkB,OAAJ,GAAc,EAAEX,OAAO,eAAT,EAAd;AACAL;AACD,mBAJD;AAKD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,eAzFH;AA2FD,aAjHD,MAiHO;AACLM,yBAAWuB,QAAX,CAAoB,YAAM;AACxB,gDAAoB5B,EAApB,EAAwBK,UAAxB;AACAN;AACD,eAHD;AAID;AACF,WAjKH;AAmKD,SArLM,CAAP;AAsLD,OAhMD;AAiMD,KArMD;AAsMD,GA7MD,CA6ME,OAAOiB,CAAP,EAAU;AACVjB,SAAKiB,CAAL;AACD;AACF,CAjND;;AAmNA;AACA,IAAImE,uBAAuB,SAAvBA,oBAAuB,CAACtF,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC7C,MAAIqF,cAAc;AAChBH,oBAAgB;AADA,GAAlB;AAGA,MAAI;AACF,QAAIpF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;;AAEA,QAAIqF,QAAQ,2BAAe,sBAAOD,WAAP,EAAoBvF,IAAIS,KAAxB,CAAf,CAAZ;;AAEA,2BAAS,OAAT,EAAkB+E,KAAlB;AACArF,OAAGG,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtCA,iBAAWC,KAAX,CACE;iBAAA,GAEE+E,MAAMC,SAHV,EAIED,MAAME,MAJR,EAKE,UAACnF,KAAD,EAAQ2D,YAAR,EAAyB;AACvB,YAAI3D,KAAJ,EAAW;AACT,0CAAoBJ,EAApB,EAAwBK,UAAxB;AACAN,eAAKK,KAAL;AACD;;AAED,+BAAS,UAAT,EAAqB2D,YAArB;AACA,YAAIA,aAAatD,MAAb,IAAuB,CAA3B,EAA8B;AAC5B,iCACE,4BADF,EAEEsD,aAAa,CAAb,EAAgBmB,wBAFlB;AAIA7E,qBAAWC,KAAX,CACE,gEADF,EAEEyD,aAAa,CAAb,EAAgBmB,wBAFlB,EAGE,UAAC9E,KAAD,EAAQiE,cAAR,EAA2B;AACzB,gBAAIjE,KAAJ,EAAW;AACT,8CAAoBJ,EAApB,EAAwBK,UAAxB;AACAN,mBAAKK,KAAL;AACD;AACDP,gBAAIkB,OAAJ,gBACKgD,aAAa,CAAb,CADL,EAEK,EAAEM,8BAAF,EAFL;AAIA,4CAAoBrE,EAApB,EAAwBK,UAAxB;AACAN;AACD,WAdH;AAgBD,SArBD,MAqBO;AACLF,cAAIkB,OAAJ,GAAcgD,YAAd;AACA,0CAAoB/D,EAApB,EAAwBK,UAAxB;AACAN;AACD;AACF,OAtCH;AAwCD,KAzCD;AA0CD,GAnDD,CAmDE,OAAOiB,CAAP,EAAU;AACVjB,SAAKiB,CAAL;AACD;AACF,CA1DD;;AA4DA;AACA,IAAIwE,6BAA6B,SAA7BA,0BAA6B,CAAC3F,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnD,MAAIqF,cAAc;AAChB1B,sBAAkB;AADF,GAAlB;;AAIA,MACE7D,IAAIS,KAAJ,CAAUsC,UAAV,IAAwB,MAAxB,IACC/C,IAAIS,KAAJ,CAAUmF,SAAV,IAAuB,MAAvB,IAAiC5F,IAAIS,KAAJ,CAAUoF,OAAV,IAAqB,MADvD,IAEA7F,IAAIS,KAAJ,CAAUoD,gBAAV,IAA8B,MAF9B,IAGA7D,IAAIS,KAAJ,CAAUmD,qBAAV,IAAmC,MAJrC,EAKE;AACA,QAAI5D,IAAIS,KAAJ,CAAUsC,UAAV,IAAwB,MAAxB,IAAkC/C,IAAIS,KAAJ,CAAUsC,UAAV,IAAwB+C,SAA9D,EAAyE;AACvE9F,UAAIS,KAAJ,CAAU,eAAV,IAA6BT,IAAIS,KAAJ,CAAUsC,UAAvC;AACD;AACD,WAAO/C,IAAIS,KAAJ,CAAUsC,UAAjB;;AAEA,QACE/C,IAAIS,KAAJ,CAAUmD,qBAAV,IAAmC,MAAnC,IACA5D,IAAIS,KAAJ,CAAUmD,qBAAV,IAAmCkC,SAFrC,EAGE;AACA9F,UAAIS,KAAJ,CAAU,0BAAV,IAAwCT,IAAIS,KAAJ,CAAUmD,qBAAlD;AACD;AACD,WAAO5D,IAAIS,KAAJ,CAAUmD,qBAAjB;;AAEA,QAAId,eAAe,EAAnB;;AAEA,QACE9C,IAAIS,KAAJ,CAAUmF,SAAV,IAAuB,MAAvB,IACA5F,IAAIS,KAAJ,CAAUoF,OAAV,IAAqB,MADrB,IAEA7F,IAAIS,KAAJ,CAAUmF,SAAV,IAAuBE,SAFvB,IAGA9F,IAAIS,KAAJ,CAAUoF,OAAV,IAAqBC,SAJvB,EAKE;AACAhD,4DACE9C,IAAIS,KAAJ,CAAUmF,SADZ,qBAEgB5F,IAAIS,KAAJ,CAAUoF,OAF1B;AAGD;AACD,WAAO7F,IAAIS,KAAJ,CAAUmF,SAAjB;AACA,WAAO5F,IAAIS,KAAJ,CAAUoF,OAAjB;AACA,QAAI;AACF,UAAI7F,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,aAAKE,qBAAWC,0BAAX,EAAL;AACD;;AAED,UAAIF,KAAKH,IAAIG,EAAb;;AAEA,UAAIqF,QAAQ,2BAAe,sBAAOD,WAAP,EAAoBvF,IAAIS,KAAxB,CAAf,CAAZ;;AAEAN,SAAGG,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtCA,mBAAWC,KAAX,CACE;;;;;;;;;;;;;;;;4CAAA,GAiBEqC,YAjBF,GAkBE0C,MAAMC,SAnBV,EAoBED,MAAME,MApBR,EAsBE,UAACnF,KAAD,EAAQI,MAAR,EAAmB;AACjB,cAAIJ,KAAJ,EAAW;AACT,4CAAoBJ,EAApB,EAAwBK,UAAxB;AACAN,iBAAKK,KAAL;AACD;AACD,cAAIM,cAAc,EAAlB;AACA,cAAIF,OAAOC,MAAP,GAAgB,CAApB,EAAuB;AAAA,yCACZE,CADY;AAEnBN,yBAAWC,KAAX,CACE;;;;;;;;uHADF,EAUE,CAACE,OAAOG,CAAP,EAAUuE,wBAAX,CAVF,EAYE,UAAC9E,KAAD,EAAQwF,cAAR,EAA2B;AACzB,oBAAIxF,KAAJ,EAAW;AACT,kDAAoBJ,EAApB,EAAwBK,UAAxB;AACAN,uBAAKK,KAAL;AACD;;AAEDM,4BAAYG,IAAZ,cAAsBL,OAAOG,CAAP,CAAtB,IAAiCiF,8BAAjC;;AAEA,oBAAIjF,KAAKH,OAAOC,MAAP,GAAgB,CAAzB,EAA4B;AAC1B,kDAAoBT,EAApB,EAAwBK,UAAxB;AACAR,sBAAIkB,OAAJ,GAAcL,WAAd;AACAX;AACD;AACF,eAzBH;AAFmB;;AACrB,iBAAK,IAAIY,IAAI,CAAb,EAAgBA,IAAIH,OAAOC,MAA3B,EAAmCE,GAAnC,EAAwC;AAAA,qBAA/BA,CAA+B;AA4BvC;AACF,WA9BD,MA8BO;AACL,4CAAoBX,EAApB,EAAwBK,UAAxB;AACAR,gBAAIkB,OAAJ,GAAcP,MAAd;AACAT;AACD;AACF,SA/DH;AAiED,OAlED;AAmED,KA5ED,CA4EE,OAAOiB,CAAP,EAAU;AACVjB,WAAKiB,CAAL;AACD;AACF,GAhHD,MAgHO;AACLnB,QAAIkB,OAAJ,GAAc,EAAE8E,eAAe,IAAjB,EAAd;AACA9F;AACD;AACF,CAzHD;;AA2HA;AACA,IAAI+F,uBAAuB,SAAvBA,oBAAuB,CAACjG,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC7C,MAAIqF,cAAc;AAChB1B,sBAAkB;AADF,GAAlB;;AAIA,MACE7D,IAAIS,KAAJ,CAAUsC,UAAV,IAAwB,MAAxB,IACC/C,IAAIS,KAAJ,CAAUmF,SAAV,IAAuB,MAAvB,IAAiC5F,IAAIS,KAAJ,CAAUoF,OAAV,IAAqB,MADvD,IAEA7F,IAAIS,KAAJ,CAAUoD,gBAAV,IAA8B,MAF9B,IAGA7D,IAAIS,KAAJ,CAAUmD,qBAAV,IAAmC,MAJrC,EAKE;AACA,QAAI5D,IAAIS,KAAJ,CAAUsC,UAAV,IAAwB,MAAxB,IAAkC/C,IAAIS,KAAJ,CAAUsC,UAAV,IAAwB+C,SAA9D,EAAyE;AACvE9F,UAAIS,KAAJ,CAAU,eAAV,IAA6BT,IAAIS,KAAJ,CAAUsC,UAAvC;AACD;AACD,WAAO/C,IAAIS,KAAJ,CAAUsC,UAAjB;;AAEA,QACE/C,IAAIS,KAAJ,CAAUmD,qBAAV,IAAmC,MAAnC,IACA5D,IAAIS,KAAJ,CAAUmD,qBAAV,IAAmCkC,SAFrC,EAGE;AACA9F,UAAIS,KAAJ,CAAU,0BAAV,IAAwCT,IAAIS,KAAJ,CAAUmD,qBAAlD;AACD;AACD,WAAO5D,IAAIS,KAAJ,CAAUmD,qBAAjB;;AAEA,QAAId,eAAe,EAAnB;;AAEA,QACE9C,IAAIS,KAAJ,CAAUmF,SAAV,IAAuB,MAAvB,IACA5F,IAAIS,KAAJ,CAAUoF,OAAV,IAAqB,MADrB,IAEA7F,IAAIS,KAAJ,CAAUmF,SAAV,IAAuBE,SAFvB,IAGA9F,IAAIS,KAAJ,CAAUoF,OAAV,IAAqBC,SAJvB,EAKE;AACAhD,4DACE9C,IAAIS,KAAJ,CAAUmF,SADZ,qBAEgB5F,IAAIS,KAAJ,CAAUoF,OAF1B;AAGD;AACD,WAAO7F,IAAIS,KAAJ,CAAUmF,SAAjB;AACA,WAAO5F,IAAIS,KAAJ,CAAUoF,OAAjB;AACA,QAAI;AACF,UAAI7F,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,aAAKE,qBAAWC,0BAAX,EAAL;AACD;;AAED,UAAIF,KAAKH,IAAIG,EAAb;;AAEA,UAAIqF,QAAQ,2BAAe,sBAAOD,WAAP,EAAoBvF,IAAIS,KAAxB,CAAf,CAAZ;;AAEAN,SAAGG,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtCA,mBAAWsB,gBAAX,CAA4B,iBAAS;AACnC,cAAIvB,KAAJ,EAAW;AACTC,uBAAWuB,QAAX,CAAoB,YAAM;AACxB,8CAAoB5B,EAApB,EAAwBK,UAAxB;AACAN,mBAAKK,KAAL;AACD,aAHD;AAID;AACDC,qBAAWC,KAAX,CACE;;;;;;;;;;;;;;;;;;+CAAA,GAmBEqC,YAnBF,GAoBE0C,MAAMC,SArBV,EAsBED,MAAME,MAtBR,EAwBE,UAACnF,KAAD,EAAQI,MAAR,EAAmB;AACjB,gBAAIJ,KAAJ,EAAW;AACTC,yBAAWuB,QAAX,CAAoB,YAAM;AACxB,gDAAoB5B,EAApB,EAAwBK,UAAxB;AACAN,qBAAKK,KAAL;AACD,eAHD;AAID;AACD,gBAAIM,cAAc,EAAlB;AACA,gBAAIF,OAAOC,MAAP,GAAgB,CAApB,EAAuB;AAAA,2CACZE,CADY;AAEnBN,2BAAWC,KAAX,CACE;;;;;;;;yHADF,EAUE,CAACE,OAAOG,CAAP,EAAUuE,wBAAX,CAVF,EAYE,UAAC9E,KAAD,EAAQwF,cAAR,EAA2B;AACzB,sBAAIxF,KAAJ,EAAW;AACTC,+BAAWuB,QAAX,CAAoB,YAAM;AACxB,sDAAoB5B,EAApB,EAAwBK,UAAxB;AACAN,2BAAKK,KAAL;AACD,qBAHD;AAID;;AAEDC,6BAAWC,KAAX,CACE;wEADF,EAGE,CAACE,OAAOG,CAAP,EAAUuE,wBAAX,CAHF,EAKE,UAAC9E,KAAD,EAAQ2F,UAAR,EAAuB;AACrB,wBAAI3F,KAAJ,EAAW;AACTC,iCAAWuB,QAAX,CAAoB,YAAM;AACxB,wDAAoB5B,EAApB,EAAwBK,UAAxB;AACAN,6BAAKK,KAAL;AACD,uBAHD;AAID;AACD,wBAAI2F,WAAWtF,MAAX,GAAoB,CAAxB,EAA2B;AACzB;AACA;AACA,6CAAS,aAAT,EAAwBsF,UAAxB;;AAEArF,kCAAYG,IAAZ,cAAsBL,OAAOG,CAAP,CAAtB,IAAiCiF,8BAAjC;;AAEA,0BAAIjF,KAAKH,OAAOC,MAAP,GAAgB,CAAzB,EAA4B;AAC1BJ,mCAAW2E,MAAX,CAAkB,iBAAS;AACzB,8BAAI5E,KAAJ,EAAW;AACTC,uCAAWuB,QAAX,CAAoB,YAAM;AACxB,8DAAoB5B,EAApB,EAAwBK,UAAxB;AACAN,mCAAKK,KAAL;AACD,6BAHD;AAID;;AAED,0DAAoBJ,EAApB,EAAwBK,UAAxB;AACAR,8BAAIkB,OAAJ,GAAcL,WAAd;AACAX;AACD,yBAXD;AAYD;AACF,qBArBD,MAqBO;AACLM,iCAAWC,KAAX,CACE;qHADF,EAGE,CAACE,OAAOG,CAAP,EAAUqF,UAAX,EAAuBxF,OAAOG,CAAP,EAAUiC,UAAjC,CAHF,EAKE,UAACxC,KAAD,EAAQ6F,gBAAR,EAA6B;AAC3B,4BAAI7F,KAAJ,EAAW;AACTC,qCAAWuB,QAAX,CAAoB,YAAM;AACxB,4DAAoB5B,EAApB,EAAwBK,UAAxB;AACAN,iCAAKK,KAAL;AACD,2BAHD;AAID;;AAED,+CAAS,mBAAT,EAA8B6F,gBAA9B;AACA,4BAAIA,iBAAiBxF,MAAjB,GAA0B,CAA9B,EAAiC;AAC/B,iDAAS,QAAT;AACA,8BAAMwD,gBAAgB,CACpB,YADoB,EAEpB,YAFoB,EAGpB,cAHoB,EAIpB,gBAJoB,EAKpB,iBALoB,EAMpB,YANoB,EAOpB,YAPoB,CAAtB;;AAUA5D,qCAAWC,KAAX,CACE,oCACE2D,cAAcC,IAAd,CAAmB,GAAnB,CADF,GAEE,wDAHJ,EAIE,CACE,8BAAkB;AAChBC,+CAAmBF,aADH;AAEhBG,sCAAU6B,gBAFM;AAGhB3B,8CAAkB,CAChB9D,OAAOG,CAAP,EAAUuE,wBADM,EAEhB,IAAIxC,IAAJ,EAFgB,EAGhB,IAAIA,IAAJ,EAHgB,CAHF;AAQhB7C,iCAAKA;AARW,2BAAlB,CADF,CAJF,EAgBE,UAACO,KAAD,EAAQ8F,YAAR,EAAyB;AACvB,gCAAI9F,KAAJ,EAAW;AACTC,yCAAWuB,QAAX,CAAoB,YAAM;AACxB,gEAAoB5B,EAApB,EAAwBK,UAAxB;AACAN,qCAAKK,KAAL;AACD,+BAHD;AAID;AACD;AACA,mDAAS,eAAT,EAA0B8F,YAA1B;AACAxF,wCAAYG,IAAZ,cACKL,OAAOG,CAAP,CADL;AAEEiF;AAFF;;AAKA,gCAAIjF,KAAKH,OAAOC,MAAP,GAAgB,CAAzB,EAA4B;AAC1BJ,yCAAW2E,MAAX,CAAkB,iBAAS;AACzB,oCAAI5E,KAAJ,EAAW;AACTC,6CAAWuB,QAAX,CAAoB,YAAM;AACxB,oEACE5B,EADF,EAEEK,UAFF;AAIAN,yCAAKK,KAAL;AACD,mCAND;AAOD;;AAED,gEAAoBJ,EAApB,EAAwBK,UAAxB;AACAR,oCAAIkB,OAAJ,GAAcL,WAAd;AACAX;AACD,+BAdD;AAeD;AACF,2BA/CH;AAiDD,yBA7DD,MA6DO;AACLW,sCAAYG,IAAZ,cACKL,OAAOG,CAAP,CADL;AAEEiF;AAFF;;AAKA,8BAAIjF,KAAKH,OAAOC,MAAP,GAAgB,CAAzB,EAA4B;AAC1BJ,uCAAW2E,MAAX,CAAkB,iBAAS;AACzB,kCAAI5E,KAAJ,EAAW;AACTC,2CAAWuB,QAAX,CAAoB,YAAM;AACxB,kEAAoB5B,EAApB,EAAwBK,UAAxB;AACAN,uCAAKK,KAAL;AACD,iCAHD;AAID;;AAED,8DAAoBJ,EAApB,EAAwBK,UAAxB;AACAR,kCAAIkB,OAAJ,GAAcL,WAAd;AACAX;AACD,6BAXD;AAYD;AACF;AACF,uBAhGH;AAkGD;AACF,mBArIH;AAuIA;;AAEA;AACD,iBA9JH;AAFmB;;AACrB,mBAAK,IAAIY,IAAI,CAAb,EAAgBA,IAAIH,OAAOC,MAA3B,EAAmCE,GAAnC,EAAwC;AAAA,uBAA/BA,CAA+B;AAiKvC;AACF,aAnKD,MAmKO;AACLN,yBAAWuB,QAAX,CAAoB,YAAM;AACxB,gDAAoB5B,EAApB,EAAwBK,UAAxB;AACAR,oBAAIkB,OAAJ,GAAcP,MAAd;AACAT;AACD,eAJD;AAKD;AACF,WA1MH;AA4MD,SAnND;AAoND,OArND;AAsND,KA/ND,CA+NE,OAAOiB,CAAP,EAAU;AACVjB,WAAKiB,CAAL;AACD;AACF,GAnQD,MAmQO;AACLnB,QAAIkB,OAAJ,GAAc,EAAE8E,eAAe,IAAjB,EAAd;AACA9F;AACD;AACF,CA5QD;;AA8QA;AACA,IAAIoG,0BAA0B,SAA1BA,uBAA0B,CAACtG,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAChD,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;AACA,QACEH,IAAIS,KAAJ,CAAU8F,iBAAV,IAA+B,MAA/B,IACAvG,IAAIS,KAAJ,CAAU8F,iBAAV,IAA+BT,SAFjC,EAGE;AACA3F,SAAGG,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtCA,mBAAWC,KAAX,CACE;;;;4BADF,EAME,CAACT,IAAIS,KAAJ,CAAU8F,iBAAX,CANF,EAOE,UAAChG,KAAD,EAAQI,MAAR,EAAmB;AACjB,0CAAoBR,EAApB,EAAwBK,UAAxB;AACA,cAAID,KAAJ,EAAW;AACTL,iBAAKK,KAAL;AACD;AACDP,cAAIkB,OAAJ,GAAcP,MAAd;AACAT;AACD,SAdH;AAgBD,OAjBD;AAkBD,KAtBD,MAsBO;AACLF,UAAIkB,OAAJ,GAAc,EAAE8E,eAAe,IAAjB,EAAd;AACA9F;AACD;AACF,GA/BD,CA+BE,OAAOiB,CAAP,EAAU;AACVjB,SAAKiB,CAAL;AACD;AACF,CAnCD;;AAqCA;AACA,IAAIqF,mBAAmB,SAAnBA,gBAAmB,CAACxG,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACzC,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;AACA,QACEH,IAAI6B,IAAJ,CAAS4E,qBAAT,IAAkC,MAAlC,IACAzG,IAAI6B,IAAJ,CAAS4E,qBAAT,IAAkCX,SAFpC,EAGE;AACA3F,SAAGG,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtCA,mBAAWC,KAAX,CACE,mEADF,EAEE,CAACT,IAAI6B,IAAJ,CAAS4E,qBAAV,CAFF,EAGE,UAAClG,KAAD,EAAQI,MAAR,EAAmB;AACjB,0CAAoBR,EAApB,EAAwBK,UAAxB;AACA,cAAID,KAAJ,EAAW;AACTL,iBAAKK,KAAL;AACD;;AAED,cAAII,OAAOqE,YAAP,GAAsB,CAA1B,EAA6B;AAC3BhF,gBAAIkB,OAAJ,GAAcP,MAAd;AACAT;AACD,WAHD,MAGO;AACLF,gBAAIkB,OAAJ,GAAc,EAAE8E,eAAe,IAAjB,EAAd;AACA9F;AACD;AACF,SAhBH;AAkBD,OAnBD;AAoBD,KAxBD,MAwBO;AACLF,UAAIkB,OAAJ,GAAc,EAAE8E,eAAe,IAAjB,EAAd;AACA9F;AACD;AACF,GAjCD,CAiCE,OAAOiB,CAAP,EAAU;AACVjB,SAAKiB,CAAL;AACD;AACF,CArCD;;AAuCA;AACA,IAAIuF,gBAAgB,SAAhBA,aAAgB,CAAC1G,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACtC,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;;AAEA,QAAIyB,QAAQ,sBAAO,EAAP,EAAW5B,IAAI6B,IAAf,CAAZ;;AAEA,QACED,MAAM2E,iBAAN,IAA2B,MAA3B,IACA3E,MAAM2E,iBAAN,IAA2BT,SAD3B,IAEAlE,MAAM+E,YAAN,IAAsB,MAFtB,IAGA/E,MAAM+E,YAAN,IAAsBb,SAJxB,EAKE;AACA3F,SAAGG,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtCA,mBAAWC,KAAX,CACE;;;qCADF,EAKE,CACEmB,MAAM2E,iBADR,EAEE3E,MAAMmB,UAFR,EAGEnB,MAAMuE,UAHR,EAIEvE,MAAM+E,YAJR,EAKE/E,MAAMgF,cALR,EAMEhF,MAAMiF,eANR,EAOE,IAAIhE,IAAJ,EAPF,EAQEjB,MAAMkF,UARR,EASE,IAAIjE,IAAJ,EATF,EAUEjB,MAAMqD,UAVR,CALF,EAiBE,UAAC1E,KAAD,EAAQI,MAAR,EAAmB;AACjB,0CAAoBR,EAApB,EAAwBK,UAAxB;AACA,cAAID,KAAJ,EAAW;AACTL,iBAAKK,KAAL;AACD;;AAED,cAAII,OAAOqE,YAAP,GAAsB,CAA1B,EAA6B;AAC3BhF,gBAAIkB,OAAJ,GAAcP,MAAd;AACAT;AACD,WAHD,MAGO;AACLF,gBAAIkB,OAAJ,GAAc,EAAE8E,eAAe,IAAjB,EAAd;AACA9F;AACD;AACF,SA9BH;AAgCD,OAjCD;AAkCD,KAxCD,MAwCO;AACLF,UAAIkB,OAAJ,GAAc,EAAE8E,eAAe,IAAjB,EAAd;AACA9F;AACD;AACF,GApDD,CAoDE,OAAOiB,CAAP,EAAU;AACVjB,SAAKiB,CAAL;AACD;AACF,CAxDD;;AA0DA;AACA,IAAI4F,6BAA6B,SAA7BA,0BAA6B,CAAC/G,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnD,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;;AAEA,QAAIyB,QAAQ,sBAAO,EAAP,EAAW5B,IAAI6B,IAAf,CAAZ;;AAEA,QACED,MAAMyD,wBAAN,IAAkC,MAAlC,IACAzD,MAAMyD,wBAAN,IAAkCS,SADlC,KAEClE,MAAMoF,eAAN,IAAyB,GAAzB,IACCpF,MAAMoF,eAAN,IAAyB,GAD1B,IAECpF,MAAMoF,eAAN,IAAyB,GAF1B,IAGCpF,MAAMoF,eAAN,IAAyB,GAL3B,CADF,EAOE;AACA7G,SAAGG,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtCA,mBAAWC,KAAX,CACE,wHADF,EAGE,CACEmB,MAAMoF,eADR,EAEE,IAAInE,IAAJ,EAFF,EAGEjB,MAAMqD,UAHR,EAIErD,MAAMyD,wBAJR,CAHF,EASE,UAAC9E,KAAD,EAAQI,MAAR,EAAmB;AACjB,0CAAoBR,EAApB,EAAwBK,UAAxB;AACA,cAAID,KAAJ,EAAW;AACTL,iBAAKK,KAAL;AACD;;AAED,cAAII,OAAOqE,YAAP,GAAsB,CAA1B,EAA6B;AAC3BhF,gBAAIkB,OAAJ,GAAcP,MAAd;AACAT;AACD,WAHD,MAGO;AACLF,gBAAIkB,OAAJ,GAAc,EAAE8E,eAAe,IAAjB,EAAd;AACA9F;AACD;AACF,SAtBH;AAwBD,OAzBD;AA0BD,KAlCD,MAkCO;AACLF,UAAIkB,OAAJ,GAAc,EAAE8E,eAAe,IAAjB,EAAd;AACA9F;AACD;AACF,GA9CD,CA8CE,OAAOiB,CAAP,EAAU;AACVjB,SAAKiB,CAAL;AACD;AACF,CAlDD;;AAoDA;AACA,IAAI8F,uBAAuB,SAAvBA,oBAAuB,CAACjH,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC7C,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;;AAEA,QAAIyB,QAAQ,sBAAO,EAAP,EAAW5B,IAAI6B,IAAf,CAAZ;;AAEA,QACED,MAAMsF,yBAAN,IAAmC,MAAnC,IACAtF,MAAMsF,yBAAN,IAAmCpB,SADnC,IAEAlE,MAAMuF,QAAN,IAAkB,MAFlB,IAGAvF,MAAMuF,QAAN,IAAkBrB,SAJpB,EAKE;AACA3F,SAAGG,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtCA,mBAAWC,KAAX,CACE,mHADF,EAGE,CACEmB,MAAMuF,QADR,EAEE,IAAItE,IAAJ,EAFF,EAGEjB,MAAMqD,UAHR,EAIErD,MAAMsF,yBAJR,CAHF,EASE,UAAC3G,KAAD,EAAQI,MAAR,EAAmB;AACjB,0CAAoBR,EAApB,EAAwBK,UAAxB;AACA,cAAID,KAAJ,EAAW;AACTL,iBAAKK,KAAL;AACD;;AAED,cAAII,OAAOqE,YAAP,GAAsB,CAA1B,EAA6B;AAC3BhF,gBAAIkB,OAAJ,GAAcP,MAAd;AACAT;AACD,WAHD,MAGO;AACLF,gBAAIkB,OAAJ,GAAc,EAAE8E,eAAe,IAAjB,EAAd;AACA9F;AACD;AACF,SAtBH;AAwBD,OAzBD;AA0BD,KAhCD,MAgCO;AACLF,UAAIkB,OAAJ,GAAc,EAAE8E,eAAe,IAAjB,EAAd;AACA9F;AACD;AACF,GA5CD,CA4CE,OAAOiB,CAAP,EAAU;AACVjB,SAAKiB,CAAL;AACD;AACF,CAhDD;;AAkDAiG,OAAOC,OAAP,GAAiB;AACfjG,kDADe;AAEfO,4CAFe;AAGf2D,4CAHe;AAIfW,4CAJe;AAKfK,kDALe;AAMfE,oCANe;AAOfE,8BAPe;AAQfK,wDARe;AASfE;AATe,CAAjB","file":"invoiceGeneration.js","sourcesContent":["\"use strict\";\nimport extend from \"extend\";\nimport {\n  releaseDBConnection,\n  jsonArrayToObject,\n  runningNumberGen,\n  whereCondition\n} from \"../utils\";\nimport moment from \"moment\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { LINQ } from \"node-linq\";\nimport { debugLog } from \"../utils/logging\";\nimport Promise from \"bluebird\";\nimport { debuglog } from \"util\";\n\n//created by irfan: to getVisitWiseBillDetailS\nlet getVisitWiseBillDetailS_BACKUP = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_f_billing_header_id, patient_id, visit_id, bill_number, incharge_or_provider,\\\n          bill_date, advance_amount, advance_adjust, discount_amount, sub_total_amount, total_tax,\\\n           net_total, billing_status, copay_amount, deductable_amount, sec_copay_amount, sec_deductable_amount, \\\n           gross_total, sheet_discount_amount, sheet_discount_percentage, net_amount, patient_res, company_res, \\\n           sec_company_res, patient_payable, company_payable, sec_company_payable, patient_tax, company_tax, sec_company_tax,\\\n           net_tax, credit_amount, receiveable_amount, balance_due, receipt_header_id, cancel_remarks, cancel_by, bill_comments\\\n           from hims_f_billing_header where record_status='A' and visit_id=?\",\n        [req.query.visit_id],\n        (error, result) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          if (result.length > 0) {\n            let outputArray = [];\n\n            for (let i = 0; i < result.length; i++) {\n              connection.query(\n                \"select hims_f_billing_details_id, hims_f_billing_header_id, service_type_id, services_id, quantity,\\\n                  unit_cost, insurance_yesno, gross_amount, discount_amout, discount_percentage, net_amout, copay_percentage,\\\n                  copay_amount, deductable_amount, deductable_percentage, tax_inclusive, patient_tax, company_tax, total_tax,\\\n                    patient_resp, patient_payable, comapany_resp, company_payble, sec_company, sec_deductable_percentage, \\\n                    sec_deductable_amount, sec_company_res, sec_company_tax, sec_company_paybale, sec_copay_percntage,\\\n                    sec_copay_amount, pre_approval, commission_given from hims_f_billing_details where record_status='A'\\\n                    and hims_f_billing_header_id=?\",\n                [result[i][\"hims_f_billing_header_id\"]],\n                (error, detailResult) => {\n                  if (error) {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  }\n\n                  outputArray.push({ ...result[i], detailBill: detailResult });\n\n                  if (i == result.length - 1) {\n                    releaseDBConnection(db, connection);\n                    req.records = outputArray;\n                    next();\n                  }\n                }\n              );\n            }\n          } else {\n            releaseDBConnection(db, connection);\n            req.records = result;\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to getVisitWiseBillDetailS\nlet getVisitWiseBillDetailS = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_f_billing_header_id, patient_id, visit_id from hims_f_billing_header where record_status='A' and invoice_generated='N' and visit_id=?\",\n        [req.query.visit_id],\n        (error, result) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          if (result.length > 0) {\n            let bill_header_ids = new LINQ(result)\n              .Select(s => s.hims_f_billing_header_id)\n              .ToArray();\n\n            // select hims_f_billing_details_id, hims_f_billing_header_id, service_type_id, services_id, quantity,\\\n            // unit_cost, insurance_yesno, gross_amount, discount_amout, discount_percentage, net_amout, copay_percentage,\\\n            // copay_amount, deductable_amount, deductable_percentage, tax_inclusive, patient_tax, company_tax, total_tax,\\\n            //   patient_resp, patient_payable, comapany_resp, company_payble, sec_company, sec_deductable_percentage, \\\n            //   sec_deductable_amount, sec_company_res, sec_company_tax, sec_company_paybale, sec_copay_percntage,\\\n            //   sec_copay_amount, pre_approval, commission_given from hims_f_billing_details where ='A'\n\n            connection.query(\n              \"select hims_f_billing_details_id, hims_f_billing_header_id, BD.service_type_id ,ST.service_type, services_id,S.service_name, S.cpt_code, quantity,\\\n              unit_cost, insurance_yesno, gross_amount, discount_amout, discount_percentage, net_amout, copay_percentage,\\\n              copay_amount, deductable_amount, deductable_percentage, tax_inclusive, patient_tax, company_tax, total_tax,\\\n                patient_resp, patient_payable, comapany_resp, company_payble, sec_company, sec_deductable_percentage, \\\n                sec_deductable_amount, sec_company_res, sec_company_tax, sec_company_paybale, sec_copay_percntage,\\\n                sec_copay_amount, pre_approval, commission_given from hims_f_billing_details BD,hims_d_service_type ST,hims_d_services S\\\n                where BD.record_status='A' and ST.record_status='A' and S.record_status='A' and \\\n                BD.service_type_id=ST.hims_d_service_type_id and BD.services_id=S.hims_d_services_id\\\n                    and hims_f_billing_header_id in (?)\",\n              [bill_header_ids],\n              (error, detailResult) => {\n                if (error) {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                }\n\n                releaseDBConnection(db, connection);\n                req.records = detailResult;\n                next();\n              }\n            );\n          } else {\n            releaseDBConnection(db, connection);\n            req.records = result;\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to Insert Invoice Generation\nlet addInvoiceGeneration = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n\n        let requestCounter = 1;\n\n        return new Promise((resolve, reject) => {\n          runningNumberGen({\n            db: connection,\n            counter: requestCounter,\n            module_desc: [\"INV_NUM\"],\n            onFailure: error => {\n              reject(error);\n            },\n            onSuccess: result => {\n              resolve(result);\n            }\n          });\n        }).then(result => {\n          let documentCode = result[0].completeNumber;\n          debugLog(\"documentCode:\", documentCode);\n          debugLog(\"input:\", input);\n          let today = moment().format(\"YYYY-MM-DD\");\n          debugLog(\"input:\", input);\n          connection.query(\n            \"INSERT INTO `hims_f_invoice_header` (invoice_number,invoice_date,patient_id,visit_id,gross_amount,discount_amount,\\\n              net_amount, patient_resp,patient_tax, patient_payable, company_resp, company_tax, company_payable, \\\n              sec_company_resp, sec_company_tax, sec_company_payable,insurance_provider_id, sub_insurance_id, network_id, network_office_id, \\\n              created_date,created_by,updated_date,updated_by) \\\n            VALUE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n            [\n              documentCode,\n              new Date(input.invoice_date),\n              input.patient_id,\n              input.visit_id,\n              input.gross_amount,\n              input.discount_amount,\n              input.net_amount,\n              input.patient_resp,\n              input.patient_tax,\n              input.patient_payable,\n              input.company_resp,\n              input.company_tax,\n              input.company_payable,\n              input.sec_company_resp,\n              input.sec_company_tax,\n              input.sec_company_payable,\n\n              input.insurance_provider_id,\n              input.sub_insurance_id,\n              input.network_id,\n              input.network_office_id,\n\n              new Date(),\n              req.userIdentity.algaeh_d_app_user_id,\n              new Date(),\n              req.userIdentity.algaeh_d_app_user_id\n            ],\n            (error, headerResult) => {\n              if (error) {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n\n              if (headerResult.insertId != null) {\n                const insurtColumns = [\n                  \"bill_header_id\",\n                  \"bill_detail_id\",\n                  \"service_type_id\",\n                  \"service_id\",\n                  \"cpt_code\",\n                  \"quantity\",\n                  \"gross_amount\",\n                  \"discount_amount\",\n                  \"net_amount\",\n                  \"patient_resp\",\n                  \"patient_tax\",\n                  \"patient_payable\",\n                  \"company_resp\",\n                  \"company_tax\",\n                  \"company_payable\",\n                  \"sec_company_resp\",\n                  \"sec_company_tax\",\n                  \"sec_company_payable\"\n                ];\n\n                connection.query(\n                  \"INSERT INTO hims_f_invoice_details(\" +\n                    insurtColumns.join(\",\") +\n                    \",invoice_header_id) VALUES ?\",\n                  [\n                    jsonArrayToObject({\n                      sampleInputObject: insurtColumns,\n                      arrayObj: req.body.Invoice_Detail,\n                      newFieldToInsert: [headerResult.insertId],\n                      req: req\n                    })\n                  ],\n                  (error, detailResult) => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n\n                    let _tempBillHeaderIds = new LINQ(req.body.Invoice_Detail)\n                      .Select(s => s.hims_f_billing_header_id)\n                      .ToArray();\n\n                    let billHeaderIds = _tempBillHeaderIds.filter(\n                      (item, pos) => {\n                        return _tempBillHeaderIds.indexOf(item) == pos;\n                      }\n                    );\n\n                    if (detailResult.affectedRows > 0) {\n                      connection.query(\n                        \"UPDATE hims_f_billing_header SET invoice_generated = 'Y' ,updated_date=?, updated_by=?\\\n                      WHERE record_status='A' and  hims_f_billing_header_id in (?);\\\n                      UPDATE hims_f_patient_visit SET invoice_generated='Y',visit_status='C',updated_date=?, updated_by=? WHERE record_status='A' and hims_f_patient_visit_id = ?; \",\n                        [\n                          new Date(),\n                          input.updated_by,\n                          billHeaderIds,\n                          new Date(),\n                          input.updated_by,\n                          input.visit_id\n                        ],\n                        (error, invoiceFlagResult) => {\n                          if (error) {\n                            connection.rollback(() => {\n                              releaseDBConnection(db, connection);\n                              next(error);\n                            });\n                          }\n\n                          connection.commit(error => {\n                            if (error) {\n                              connection.rollback(() => {\n                                releaseDBConnection(db, connection);\n                                next(error);\n                              });\n                            }\n                            releaseDBConnection(db, connection);\n                            req.records = {\n                              invoice_number: documentCode,\n                              hims_f_invoice_header_id: headerResult.insertId\n                            };\n                            next();\n                          });\n                        }\n                      );\n                    } else {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        req.records = { error: \"error occured\" };\n                        next();\n                      });\n                    }\n\n                    // connection.commit(error => {\n                    //   if (error) {\n                    //     connection.rollback(() => {\n                    //       releaseDBConnection(db, connection);\n                    //       next(error);\n                    //     });\n                    //   }\n                    //   releaseDBConnection(db, connection);\n                    //   req.records = {\n                    //     invoice_number: documentCode,\n                    //     hims_f_invoice_header_id: headerResult.insertId\n                    //   };\n                    //   next();\n                    // });\n                  }\n                );\n              } else {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next();\n                });\n              }\n            }\n          );\n        });\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to get Pharmacy Requisition Entry\nlet getInvoiceGeneration = (req, res, next) => {\n  let selectWhere = {\n    invoice_number: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    debugLog(\"where\", where);\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"SELECT * from  hims_f_invoice_header\\\n          where \" +\n          where.condition,\n        where.values,\n        (error, headerResult) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          debugLog(\"result: \", headerResult);\n          if (headerResult.length != 0) {\n            debugLog(\n              \"hims_f_invoice_header_id: \",\n              headerResult[0].hims_f_invoice_header_id\n            );\n            connection.query(\n              \"select * from hims_f_invoice_details where invoice_header_id=?\",\n              headerResult[0].hims_f_invoice_header_id,\n              (error, Invoice_Detail) => {\n                if (error) {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                }\n                req.records = {\n                  ...headerResult[0],\n                  ...{ Invoice_Detail }\n                };\n                releaseDBConnection(db, connection);\n                next();\n              }\n            );\n          } else {\n            req.records = headerResult;\n            releaseDBConnection(db, connection);\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to backup on 15/dec/2018\nlet getInvoicesForClaimsBACKUP = (req, res, next) => {\n  let selectWhere = {\n    sub_insurance_id: \"ALL\"\n  };\n\n  if (\n    req.query.patient_id != \"null\" ||\n    (req.query.from_date != \"null\" && req.query.to_date != \"null\") ||\n    req.query.sub_insurance_id != \"null\" ||\n    req.query.insurance_provider_id != \"null\"\n  ) {\n    if (req.query.patient_id != \"null\" && req.query.patient_id != undefined) {\n      req.query[\"IH.patient_id\"] = req.query.patient_id;\n    }\n    delete req.query.patient_id;\n\n    if (\n      req.query.insurance_provider_id != \"null\" &&\n      req.query.insurance_provider_id != undefined\n    ) {\n      req.query[\"IH.insurance_provider_id\"] = req.query.insurance_provider_id;\n    }\n    delete req.query.insurance_provider_id;\n\n    let invoice_date = \"\";\n\n    if (\n      req.query.from_date != \"null\" &&\n      req.query.to_date != \"null\" &&\n      req.query.from_date != undefined &&\n      req.query.to_date != undefined\n    ) {\n      invoice_date = ` date(invoice_date) between date('${\n        req.query.from_date\n      }') and date('${req.query.to_date}') and `;\n    }\n    delete req.query.from_date;\n    delete req.query.to_date;\n    try {\n      if (req.db == null) {\n        next(httpStatus.dataBaseNotInitilizedError());\n      }\n\n      let db = req.db;\n\n      let where = whereCondition(extend(selectWhere, req.query));\n\n      db.getConnection((error, connection) => {\n        connection.query(\n          \"SELECT hims_f_invoice_header_id, invoice_number, invoice_date, IH.patient_id, visit_id,\\\n         IH.insurance_provider_id, IH.sub_insurance_id, IH.network_id, IH.network_office_id, gross_amount,\\\n         discount_amount, patient_resp, patient_tax, patient_payable, company_resp, company_tax, \\\n         company_payable, sec_company_resp, sec_company_tax, sec_company_payable, submission_date,\\\n         submission_ammount, remittance_date, remittance_ammount, denial_ammount,\\\n         P.patient_code,P.full_name as patient_name,P.arabic_name as arabic_patient_name,P.contact_number ,\\\n         V.visit_code,insurance_provider_name,arabic_provider_name as arabic_insurance_provider_name ,\\\n         insurance_sub_code as sub_insurance_provider_code,insurance_sub_name as sub_insurance_provider,\\\n         arabic_sub_name as arabic_sub_insurance_provider, network_type,arabic_network_type,\\\n         NET_OF.price_from,NET_OF.employer,NET_OF.policy_number\\\n        from  hims_f_invoice_header IH  inner join hims_f_patient P on IH.patient_id=P.hims_d_patient_id and\\\n        P.record_status='A'  inner join hims_f_patient_visit V on IH.visit_id=V.hims_f_patient_visit_id and\\\n        V.record_status='A' left join hims_d_insurance_provider IP on IH.insurance_provider_id=IP.hims_d_insurance_provider_id\\\n        and IP.record_status='A' left join hims_d_insurance_sub SI on IH.sub_insurance_id=SI.hims_d_insurance_sub_id\\\n        and SI.record_status='A' left join hims_d_insurance_network NET on IH.network_id=NET.hims_d_insurance_network_id\\\n        and NET.record_status='A' left join hims_d_insurance_network_office NET_OF on IH.network_office_id=NET_OF.hims_d_insurance_network_office_id\\\n        and NET_OF.record_status='A' where \" +\n            invoice_date +\n            where.condition,\n          where.values,\n\n          (error, result) => {\n            if (error) {\n              releaseDBConnection(db, connection);\n              next(error);\n            }\n            let outputArray = [];\n            if (result.length > 0) {\n              for (let i = 0; i < result.length; i++) {\n                connection.query(\n                  \"SELECT hims_f_invoice_details_id, invoice_header_id, bill_header_id, bill_detail_id,\\\n                  service_id, quantity, gross_amount, discount_amount, patient_resp, patient_tax, patient_payable,\\\n                  company_resp, company_tax, company_payable, sec_company_resp, sec_company_tax, sec_company_payable,\\\n                  ID.service_type_id,ST.service_type_code, ST.service_type, ST. arabic_service_type,\\\n                  S.service_code,S.service_name,ID.cpt_code,C.cpt_desc,C.prefLabel  \\\n                  from hims_f_invoice_details ID  inner join hims_d_service_type ST on \\\n                   ID.service_type_id=ST.hims_d_service_type_id and ST.record_status='A'\\\n                   inner join hims_d_services S on ID.service_id=S.hims_d_services_id and\\\n                   S.record_status='A' left join hims_d_cpt_code C on ID.cpt_code=C.cpt_code where invoice_header_id=?\",\n                  [result[i].hims_f_invoice_header_id],\n\n                  (error, invoiceDetails) => {\n                    if (error) {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    }\n\n                    outputArray.push({ ...result[i], invoiceDetails });\n\n                    if (i == result.length - 1) {\n                      releaseDBConnection(db, connection);\n                      req.records = outputArray;\n                      next();\n                    }\n                  }\n                );\n              }\n            } else {\n              releaseDBConnection(db, connection);\n              req.records = result;\n              next();\n            }\n          }\n        );\n      });\n    } catch (e) {\n      next(e);\n    }\n  } else {\n    req.records = { invalid_input: true };\n    next();\n  }\n};\n\n//created by irfan:\nlet getInvoicesForClaims = (req, res, next) => {\n  let selectWhere = {\n    sub_insurance_id: \"ALL\"\n  };\n\n  if (\n    req.query.patient_id != \"null\" ||\n    (req.query.from_date != \"null\" && req.query.to_date != \"null\") ||\n    req.query.sub_insurance_id != \"null\" ||\n    req.query.insurance_provider_id != \"null\"\n  ) {\n    if (req.query.patient_id != \"null\" && req.query.patient_id != undefined) {\n      req.query[\"IH.patient_id\"] = req.query.patient_id;\n    }\n    delete req.query.patient_id;\n\n    if (\n      req.query.insurance_provider_id != \"null\" &&\n      req.query.insurance_provider_id != undefined\n    ) {\n      req.query[\"IH.insurance_provider_id\"] = req.query.insurance_provider_id;\n    }\n    delete req.query.insurance_provider_id;\n\n    let invoice_date = \"\";\n\n    if (\n      req.query.from_date != \"null\" &&\n      req.query.to_date != \"null\" &&\n      req.query.from_date != undefined &&\n      req.query.to_date != undefined\n    ) {\n      invoice_date = ` date(invoice_date) between date('${\n        req.query.from_date\n      }') and date('${req.query.to_date}') and `;\n    }\n    delete req.query.from_date;\n    delete req.query.to_date;\n    try {\n      if (req.db == null) {\n        next(httpStatus.dataBaseNotInitilizedError());\n      }\n\n      let db = req.db;\n\n      let where = whereCondition(extend(selectWhere, req.query));\n\n      db.getConnection((error, connection) => {\n        connection.beginTransaction(error => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n          connection.query(\n            \"SELECT hims_f_invoice_header_id, invoice_number, invoice_date, IH.patient_id, visit_id,\\\n            IH.insurance_provider_id, IH.sub_insurance_id, IH.network_id, IH.network_office_id, gross_amount,\\\n            discount_amount, patient_resp, patient_tax, patient_payable, company_resp, company_tax, \\\n            company_payable, sec_company_resp, sec_company_tax, sec_company_payable, submission_date,\\\n            submission_ammount, remittance_date, remittance_ammount, denial_ammount,claim_validated,\\\n            P.patient_code,P.full_name as patient_name,P.arabic_name as arabic_patient_name,P.contact_number ,\\\n            V.visit_code,V.episode_id,V.doctor_id,E.full_name as doctor_name,E.employee_code,insurance_provider_name,\\\n            arabic_provider_name as arabic_insurance_provider_name ,\\\n            insurance_sub_code as sub_insurance_provider_code,insurance_sub_name as sub_insurance_provider,\\\n            arabic_sub_name as arabic_sub_insurance_provider, network_type,arabic_network_type,\\\n            NET_OF.price_from,NET_OF.employer,NET_OF.policy_number\\\n           from  hims_f_invoice_header IH  inner join hims_f_patient P on IH.patient_id=P.hims_d_patient_id and\\\n           P.record_status='A'  inner join hims_f_patient_visit V on IH.visit_id=V.hims_f_patient_visit_id and\\\n           V.record_status='A' inner join hims_d_employee E on V.doctor_id=E.hims_d_employee_id and E.record_status='A'         \\\n           left join hims_d_insurance_provider IP on IH.insurance_provider_id=IP.hims_d_insurance_provider_id\\\n           and IP.record_status='A' left join hims_d_insurance_sub SI on IH.sub_insurance_id=SI.hims_d_insurance_sub_id\\\n           and SI.record_status='A' left join hims_d_insurance_network NET on IH.network_id=NET.hims_d_insurance_network_id\\\n           and NET.record_status='A' left join hims_d_insurance_network_office NET_OF on IH.network_office_id=NET_OF.hims_d_insurance_network_office_id\\\n           and NET_OF.record_status='A' where \" +\n              invoice_date +\n              where.condition,\n            where.values,\n\n            (error, result) => {\n              if (error) {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n              let outputArray = [];\n              if (result.length > 0) {\n                for (let i = 0; i < result.length; i++) {\n                  connection.query(\n                    \"SELECT hims_f_invoice_details_id, invoice_header_id, bill_header_id, bill_detail_id,\\\n                    service_id, quantity, gross_amount, discount_amount, patient_resp, patient_tax, patient_payable,\\\n                    company_resp, company_tax, company_payable, sec_company_resp, sec_company_tax, sec_company_payable,\\\n                    ID.service_type_id,ST.service_type_code, ST.service_type, ST. arabic_service_type,\\\n                    S.service_code,S.service_name,ID.cpt_code,C.cpt_desc,C.prefLabel  \\\n                    from hims_f_invoice_details ID  inner join hims_d_service_type ST on \\\n                     ID.service_type_id=ST.hims_d_service_type_id and ST.record_status='A'\\\n                     inner join hims_d_services S on ID.service_id=S.hims_d_services_id and\\\n                     S.record_status='A' left join hims_d_cpt_code C on ID.cpt_code=C.cpt_code where invoice_header_id=?\",\n                    [result[i].hims_f_invoice_header_id],\n\n                    (error, invoiceDetails) => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n\n                      connection.query(\n                        \"select hims_f_invoice_icd_id, invoice_header_id from hims_f_invoice_icd \\\n                        where record_status='A' and invoice_header_id=?\",\n                        [result[i].hims_f_invoice_header_id],\n\n                        (error, invoiceICD) => {\n                          if (error) {\n                            connection.rollback(() => {\n                              releaseDBConnection(db, connection);\n                              next(error);\n                            });\n                          }\n                          if (invoiceICD.length > 0) {\n                            // go ahead next\n                            // and commit\n                            debugLog(\"invoiceICD:\", invoiceICD);\n\n                            outputArray.push({ ...result[i], invoiceDetails });\n\n                            if (i == result.length - 1) {\n                              connection.commit(error => {\n                                if (error) {\n                                  connection.rollback(() => {\n                                    releaseDBConnection(db, connection);\n                                    next(error);\n                                  });\n                                }\n\n                                releaseDBConnection(db, connection);\n                                req.records = outputArray;\n                                next();\n                              });\n                            }\n                          } else {\n                            connection.query(\n                              \"select hims_f_patient_diagnosis_id, patient_id, episode_id, daignosis_id, diagnosis_type, final_daignosis\\\n                             from hims_f_patient_diagnosis where record_status='A' and episode_id=? and patient_id=?\",\n                              [result[i].episode_id, result[i].patient_id],\n\n                              (error, patientDiagnosys) => {\n                                if (error) {\n                                  connection.rollback(() => {\n                                    releaseDBConnection(db, connection);\n                                    next(error);\n                                  });\n                                }\n\n                                debugLog(\"patientDiagnosys:\", patientDiagnosys);\n                                if (patientDiagnosys.length > 0) {\n                                  debugLog(\"asfetr\");\n                                  const insurtColumns = [\n                                    \"patient_id\",\n                                    \"episode_id\",\n                                    \"daignosis_id\",\n                                    \"diagnosis_type\",\n                                    \"final_daignosis\",\n                                    \"created_by\",\n                                    \"updated_by\"\n                                  ];\n\n                                  connection.query(\n                                    \"INSERT INTO hims_f_invoice_icd(\" +\n                                      insurtColumns.join(\",\") +\n                                      \",invoice_header_id,created_date,updated_date) VALUES ?\",\n                                    [\n                                      jsonArrayToObject({\n                                        sampleInputObject: insurtColumns,\n                                        arrayObj: patientDiagnosys,\n                                        newFieldToInsert: [\n                                          result[i].hims_f_invoice_header_id,\n                                          new Date(),\n                                          new Date()\n                                        ],\n                                        req: req\n                                      })\n                                    ],\n                                    (error, addDiagnosys) => {\n                                      if (error) {\n                                        connection.rollback(() => {\n                                          releaseDBConnection(db, connection);\n                                          next(error);\n                                        });\n                                      }\n                                      //----------------- commit\n                                      debugLog(\"addDiagnosys:\", addDiagnosys);\n                                      outputArray.push({\n                                        ...result[i],\n                                        invoiceDetails\n                                      });\n\n                                      if (i == result.length - 1) {\n                                        connection.commit(error => {\n                                          if (error) {\n                                            connection.rollback(() => {\n                                              releaseDBConnection(\n                                                db,\n                                                connection\n                                              );\n                                              next(error);\n                                            });\n                                          }\n\n                                          releaseDBConnection(db, connection);\n                                          req.records = outputArray;\n                                          next();\n                                        });\n                                      }\n                                    }\n                                  );\n                                } else {\n                                  outputArray.push({\n                                    ...result[i],\n                                    invoiceDetails\n                                  });\n\n                                  if (i == result.length - 1) {\n                                    connection.commit(error => {\n                                      if (error) {\n                                        connection.rollback(() => {\n                                          releaseDBConnection(db, connection);\n                                          next(error);\n                                        });\n                                      }\n\n                                      releaseDBConnection(db, connection);\n                                      req.records = outputArray;\n                                      next();\n                                    });\n                                  }\n                                }\n                              }\n                            );\n                          }\n                        }\n                      );\n                      ///============================================\n\n                      //----------------------------------------------------\n                    }\n                  );\n                }\n              } else {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  req.records = result;\n                  next();\n                });\n              }\n            }\n          );\n        });\n      });\n    } catch (e) {\n      next(e);\n    }\n  } else {\n    req.records = { invalid_input: true };\n    next();\n  }\n};\n\n//created by irfan:\nlet getPatientIcdForInvoice = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    if (\n      req.query.invoice_header_id != \"null\" &&\n      req.query.invoice_header_id != undefined\n    ) {\n      db.getConnection((error, connection) => {\n        connection.query(\n          \" select hims_f_invoice_icd_id, invoice_header_id, patient_id, episode_id,\\\n        daignosis_id, diagnosis_type, final_daignosis,ICD.icd_code,ICD.icd_description,\\\n        ICD.icd_level,ICD.icd_type from hims_f_invoice_icd INV,hims_d_icd ICD \\\n        where INV.record_status='A' and ICD.record_status='A' and  INV.daignosis_id=ICD.hims_d_icd_id and \\\n        invoice_header_id=?\",\n          [req.query.invoice_header_id],\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n            req.records = result;\n            next();\n          }\n        );\n      });\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:\nlet deleteInvoiceIcd = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    if (\n      req.body.hims_f_invoice_icd_id != \"null\" &&\n      req.body.hims_f_invoice_icd_id != undefined\n    ) {\n      db.getConnection((error, connection) => {\n        connection.query(\n          \" DELETE FROM hims_f_invoice_icd WHERE hims_f_invoice_icd_id = ?; \",\n          [req.body.hims_f_invoice_icd_id],\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n\n            if (result.affectedRows > 0) {\n              req.records = result;\n              next();\n            } else {\n              req.records = { invalid_input: true };\n              next();\n            }\n          }\n        );\n      });\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:\nlet addInvoiceIcd = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.body);\n\n    if (\n      input.invoice_header_id != \"null\" &&\n      input.invoice_header_id != undefined &&\n      input.daignosis_id != \"null\" &&\n      input.daignosis_id != undefined\n    ) {\n      db.getConnection((error, connection) => {\n        connection.query(\n          \"INSERT INTO `hims_f_invoice_icd` (invoice_header_id, patient_id, episode_id, daignosis_id,\\\n             diagnosis_type, final_daignosis,\\\n            created_date, created_by, updated_date, updated_by ) \\\n          VALUE(?,?,?,?,?,?,?,?,?,?)\",\n          [\n            input.invoice_header_id,\n            input.patient_id,\n            input.episode_id,\n            input.daignosis_id,\n            input.diagnosis_type,\n            input.final_daignosis,\n            new Date(),\n            input.created_by,\n            new Date(),\n            input.updated_by\n          ],\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n\n            if (result.affectedRows > 0) {\n              req.records = result;\n              next();\n            } else {\n              req.records = { invalid_input: true };\n              next();\n            }\n          }\n        );\n      });\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:\nlet updateClaimValidatedStatus = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.body);\n\n    if (\n      input.hims_f_invoice_header_id != \"null\" &&\n      input.hims_f_invoice_header_id != undefined &&\n      (input.claim_validated == \"V\" ||\n        input.claim_validated == \"E\" ||\n        input.claim_validated == \"X\" ||\n        input.claim_validated == \"P\")\n    ) {\n      db.getConnection((error, connection) => {\n        connection.query(\n          \"UPDATE hims_f_invoice_header SET claim_validated = ?, updated_date=?, updated_by=?  WHERE hims_f_invoice_header_id = ?\",\n\n          [\n            input.claim_validated,\n            new Date(),\n            input.updated_by,\n            input.hims_f_invoice_header_id\n          ],\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n\n            if (result.affectedRows > 0) {\n              req.records = result;\n              next();\n            } else {\n              req.records = { invalid_input: true };\n              next();\n            }\n          }\n        );\n      });\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan:\nlet updateInvoiceDetails = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.body);\n\n    if (\n      input.hims_f_invoice_details_id != \"null\" &&\n      input.hims_f_invoice_details_id != undefined &&\n      input.cpt_code != \"null\" &&\n      input.cpt_code != undefined\n    ) {\n      db.getConnection((error, connection) => {\n        connection.query(\n          \"UPDATE hims_f_invoice_details SET cpt_code = ?, updated_date=?, updated_by=?  WHERE hims_f_invoice_details_id = ?\",\n\n          [\n            input.cpt_code,\n            new Date(),\n            input.updated_by,\n            input.hims_f_invoice_details_id\n          ],\n          (error, result) => {\n            releaseDBConnection(db, connection);\n            if (error) {\n              next(error);\n            }\n\n            if (result.affectedRows > 0) {\n              req.records = result;\n              next();\n            } else {\n              req.records = { invalid_input: true };\n              next();\n            }\n          }\n        );\n      });\n    } else {\n      req.records = { invalid_input: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  getVisitWiseBillDetailS,\n  addInvoiceGeneration,\n  getInvoiceGeneration,\n  getInvoicesForClaims,\n  getPatientIcdForInvoice,\n  deleteInvoiceIcd,\n  addInvoiceIcd,\n  updateClaimValidatedStatus,\n  updateInvoiceDetails\n};\n"]}