{"version":3,"sources":["../../../src/model/doctorsCommission.js"],"names":["getDoctorsCommission","req","res","next","db","httpStatus","dataBaseNotInitilizedError","input","query","getConnection","error","connection","incharge_or_provider","from_date","to_date","result","bill_header_id_all","LINQ","Where","w","hims_f_billing_header_id","Select","s","ToArray","length","service_type_id","select_type","results","i","provider_id","service_id","servtype_id","service_commission","Promise","resolve","reject","sType_comm","commission_not_exist","e","then","records","doctorsCommissionCal","body","outputArray","op_cash_comission_amount","op_cash_comission","op_crd_comission_amount","op_crd_comission","inputData","patient_share","op_cash_comission_percentage","company_share","op_crd_comission_percentage","push","commissionCalculations","inputParam","sendingObject","adjust_amount","undefined","op_commision","Sum","d","op_credit_comission","gross_comission","net_comission","comission_payable","module","exports"],"mappings":"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","file":"doctorsCommission.js","sourcesContent":["\"use strict\";\nimport extend from \"extend\";\nimport {\n  \n  releaseDBConnection\n\n} from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { LINQ } from \"node-linq\";\nimport {  debugLog } from \"../utils/logging\";\n\n//created by irfan: to get doctors commission\nlet getDoctorsCommission = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.query);\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_f_billing_header_id from hims_f_billing_header where record_status='A'\\\n           and incharge_or_provider=? and date(bill_date) between ? and ? \",\n        [input.incharge_or_provider, input.from_date, input.to_date],\n        (error, result) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          let bill_header_id_all = new LINQ(result)\n            .Where(w => w.hims_f_billing_header_id != null)\n            .Select(s => s.hims_f_billing_header_id)\n            .ToArray();\n\n          if (result.length != 0) {\n            let service_type_id = \"\";\n            if (input.select_type == \"SS\" && input.service_type_id != \"null\") {\n              service_type_id =\n                \"service_type_id=\" + input.service_type_id + \" and\";\n            }\n\n            connection.query(\n              \"select BD.hims_f_billing_header_id,incharge_or_provider as provider_id,hims_f_billing_details_id,BH.bill_number,BH.bill_date,service_type_id as servtype_id,services_id as service_id,quantity,\\\n              unit_cost,gross_amount as extended_cost,discount_amout as discount_amount,net_amout as net_amount,BD.patient_payable as patient_share,company_payble as company_share,sec_company_paybale\\\n              from hims_f_billing_details BD,hims_f_billing_header BH where BH.record_status='A' and BD.record_status='A' and \\\n               BD.hims_f_billing_header_id=BH.hims_f_billing_header_id and \" +\n                service_type_id +\n                \" BD.hims_f_billing_header_id in (\" +\n                bill_header_id_all +\n                \");\",\n              (error, results) => {\n                if (error) {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                }\n\n                if (results.length != 0) {\n                  for (let i = 0; i < results.length; i++) {\n                    connection.query(\n                      \" select hims_m_doctor_service_commission_id,op_cash_commission_percent as op_cash_comission_percentage, op_credit_commission_percent as op_crd_comission_percentage,\\\n                     ip_cash_commission_percent, ip_credit_commission_percent from\\\n                     hims_m_doctor_service_commission where record_status='A' and provider_id=?  and services_id=? and service_type_id=?\",\n                      [\n                        results[i].provider_id,\n                        results[i].service_id,\n                        results[i].servtype_id\n                      ],\n                      (error, service_commission) => {\n                        if (error) {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        }\n\n                        new Promise((resolve, reject) => {\n                          try {\n                            if (service_commission.length != 0) {\n                              results[i] = {\n                                ...results[i],\n                                ...service_commission[0]\n                              };\n                              return resolve(results);\n                            } else {\n                              connection.query(\n                                \" SELECT hims_m_doctor_service_type_commission_id, op_cash_comission_percent as op_cash_comission_percentage, op_credit_comission_percent as op_crd_comission_percentage, \\\n                                 ip_cash_commission_percent, ip_credit_commission_percent from hims_m_doctor_service_type_commission where record_status='A'  and provider_id=?\\\n                               and service_type_id=?\",\n                                [\n                                  results[i].provider_id,\n                                  results[i].servtype_id\n                                ],\n                                (error, sType_comm) => {\n                                  if (error) {\n                                    releaseDBConnection(db, connection);\n                                    next(error);\n                                  }\n\n                                  if (sType_comm.length != 0) {\n                                    results[i] = {\n                                      ...results[i],\n                                      ...sType_comm[0]\n                                    };\n\n                                    return resolve(results);\n                                  } else {\n                                    results[i] = {\n                                      ...results[i],\n                                      ...{ commission_not_exist: true }\n                                    };\n                                    return resolve();\n                                  }\n                                }\n                              );\n                            }\n                          } catch (e) {\n                            reject(e);\n                          }\n                        }).then(result => {\n                          if (i == results.length - 1) {\n                            req.records = result;\n                            releaseDBConnection(db, connection);\n                            next();\n                          }\n                        });\n                      }\n                    );\n                  }\n                } else {\n                  req.records = results;\n                  releaseDBConnection(db, connection);\n                  next();\n                }\n              }\n            );\n          } else {\n            releaseDBConnection(db, connection);\n            req.records = result;\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to doctorsCommissionCal\nlet doctorsCommissionCal = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let input = extend([], req.body);\n    let outputArray = [];\n    for (let i = 0; i < input.length; i++) {\n      let op_cash_comission_amount = 0;\n      let op_cash_comission = 0;\n      let op_crd_comission_amount = 0;\n      let op_crd_comission = 0;\n\n      let inputData = input[i];\n      if (\n        inputData.patient_share != 0 &&\n        inputData.op_cash_comission_percentage != 0\n      ) {\n        op_cash_comission_amount =\n          (inputData.patient_share * inputData.op_cash_comission_percentage) /\n          100;\n        op_cash_comission = op_cash_comission_amount;\n      }\n\n      if (\n        inputData.company_share != 0 &&\n        inputData.op_crd_comission_percentage != 0\n      ) {\n        op_cash_comission_amount =\n          (inputData.company_share * inputData.op_crd_comission_percentage) /\n          100;\n\n        op_crd_comission = op_crd_comission_amount;\n      }\n\n      inputData.op_cash_comission_amount = op_cash_comission_amount;\n      inputData.op_cash_comission = op_cash_comission;\n      inputData.op_crd_comission_amount = op_crd_comission_amount;\n      inputData.op_crd_comission = op_crd_comission;\n      outputArray.push(inputData);\n\n      // debugLog(\"op_cash_comission_amount:\", op_cash_comission_amount);\n      // debugLog(\"op_cash_comission:\", op_cash_comission);\n    }\n\n    req.records = outputArray;\n    next();\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: performing only calculation\nlet commissionCalculations = (req, res, next) => {\n  try {\n    let inputParam = req.body;\n\n    let sendingObject = {};\n\n    let adjust_amount =\n      inputParam.adjust_amount === undefined ? 0 : inputParam.adjust_amount;\n\n    debugLog(\"Input\", req.body);\n    debugLog(\"adjust_amount\", adjust_amount);\n\n    if (adjust_amount == 0) {\n      sendingObject.op_commision = new LINQ(inputParam).Sum(\n        d => d.op_cash_comission\n      );\n      sendingObject.op_credit_comission = new LINQ(inputParam).Sum(\n        d => d.op_crd_comission\n      );\n\n      sendingObject.gross_comission =\n        sendingObject.op_commision + sendingObject.op_credit_comission;\n\n      sendingObject.net_comission = sendingObject.gross_comission;\n    } else {\n      sendingObject.net_comission =\n        inputParam.gross_comission - inputParam.adjust_amount;\n    }\n\n    sendingObject.comission_payable = sendingObject.net_comission;\n\n    req.records = sendingObject;\n    next();\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  getDoctorsCommission,\n  doctorsCommissionCal,\n  commissionCalculations\n};\n"]}