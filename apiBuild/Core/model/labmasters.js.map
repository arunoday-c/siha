{"version":3,"sources":["../../../src/model/labmasters.js"],"names":["selectSection","req","res","next","labSection","hims_d_lab_section_id","db","httpStatus","dataBaseNotInitilizedError","pagePaging","paging","Page","pageNo","page","pageSize","condition","query","values","records","result","error","e","insertSection","description","section_status","created_by","userIdentity","algaeh_d_app_user_id","updated_by","getConnection","connection","inputParam","body","Date","updateSection","deleteSection","tableName","id","selectContainer","hims_d_lab_container_id","insertContainer","labContainer","container_id","container_status","imputParam","updateContainer","deleteContainer","selectSpecimen","labSpecimen","hims_d_lab_specimen_id","insertSpecimen","storage_type","specimen_status","updateSpecimen","deleteSpecimen","selectAnalytes","labAnalytes","hims_d_lab_analytes_id","insertAnalytes","analyte_type","analyte_status","result_unit","updateAnalytes","deleteAnalytes","selectTestCategory","labTestCategory","hims_d_test_category_id","insertTestCategory","category_name","category_status","updateTestCategory","deleteTestCategory","module","exports"],"mappings":"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","file":"labmasters.js","sourcesContent":["import {\n  whereCondition,\n  releaseDBConnection,\n  selectStatement,\n  deleteRecord\n} from \"../utils\";\nimport extend from \"extend\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { debugLog } from \"../utils/logging\";\n\n//Section\nlet selectSection = (req, res, next) => {\n  let labSection = {\n    hims_d_lab_section_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let pagePaging = \"\";\n    if (req.paging != null) {\n      let Page = paging(req.paging);\n      pagePaging += \" LIMIT \" + Page.pageNo + \",\" + page.pageSize;\n    }\n\n    let condition = whereCondition(extend(labSection, req.query));\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"SELECT * FROM `hims_d_lab_section` WHERE `record_status`='A' AND \" +\n          condition.condition +\n          \"order by hims_d_lab_section_id desc\",\n        values: condition.values\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet insertSection = (req, res, next) => {\n  let labSection = {\n    hims_d_lab_section_id: null,\n    description: null,\n    section_status: \"A\",\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    let inputParam = extend(labSection, req.body);\n    connection.query(\n      \"INSERT INTO `hims_d_lab_section` (`description`, \\\n        `created_by` ,`created_date`,`section_status`) \\\n     VALUES ( ?, ?, ?, ?)\",\n      [\n        inputParam.description,\n        inputParam.created_by,\n        new Date(),\n        inputParam.section_status\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\n\nlet updateSection = (req, res, next) => {\n  let labSection = {\n    hims_d_lab_section_id: null,\n    description: null,\n    section_status: \"A\",\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    let inputParam = extend(labSection, req.body);\n    connection.query(\n      \"UPDATE `hims_d_lab_section` \\\n       SET `description`=?, `updated_by`=?, `updated_date`=?,section_status=? \\\n       WHERE `record_status`='A' and `hims_d_lab_section_id`=?\",\n      [\n        inputParam.description,\n        inputParam.updated_by,\n        new Date(),\n        inputParam.section_status,\n        inputParam.hims_d_lab_section_id\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\nlet deleteSection = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n\n    deleteRecord(\n      {\n        db: req.db,\n        tableName: \"hims_d_lab_section\",\n        id: req.body.hims_d_lab_section_id,\n        query:\n          \"UPDATE hims_d_lab_section SET  record_status='I', \\\n           updated_by=?,updated_date=? WHERE hims_d_lab_section_id=?\",\n        values: [\n          req.body.updated_by,\n          new Date(),\n          req.body.hims_d_lab_section_id\n        ]\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\n//Container\nlet selectContainer = (req, res, next) => {\n  let labSection = {\n    hims_d_lab_container_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let pagePaging = \"\";\n    if (req.paging != null) {\n      let Page = paging(req.paging);\n      pagePaging += \" LIMIT \" + Page.pageNo + \",\" + page.pageSize;\n    }\n\n    let condition = whereCondition(extend(labSection, req.query));\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"SELECT * FROM `hims_d_lab_container` WHERE `record_status`='A' AND \" +\n          condition.condition +\n          \"order by hims_d_lab_container_id desc\",\n        values: condition.values\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet insertContainer = (req, res, next) => {\n  let labContainer = {\n    hims_d_lab_container_id: null,\n    description: null,\n    container_id: null,\n    container_status: \"A\",\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    let inputParam = extend(labContainer, req.body);\n    connection.query(\n      \"INSERT INTO `hims_d_lab_container` (`description`, `container_id`, \\\n          `created_by` ,`created_date`,`container_status`) \\\n       VALUES ( ?, ?, ?, ?, ?)\",\n      [\n        inputParam.description,\n        imputParam.container_id,\n        inputParam.created_by,\n        new Date(),\n        inputParam.container_status\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\n\nlet updateContainer = (req, res, next) => {\n  let labSection = {\n    hims_d_lab_container_id: null,\n    container_id: null,\n    description: null,\n    container_status: \"A\",\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    let inputParam = extend(labSection, req.body);\n    connection.query(\n      \"UPDATE `hims_d_lab_container` \\\n         SET `description`=?, `container_id`=?,`updated_by`=?, `updated_date`=?,container_status=? \\\n         WHERE `record_status`='A' and `hims_d_lab_container_id`=?\",\n      [\n        inputParam.description,\n        inputParam.container_id,\n        inputParam.updated_by,\n        new Date(),\n        inputParam.container_status,\n        inputParam.hims_d_lab_container_id\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\nlet deleteContainer = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    deleteRecord(\n      {\n        db: req.db,\n        tableName: \"hims_d_lab_container\",\n        id: req.body.hims_d_lab_container_id,\n        query:\n          \"UPDATE hims_d_lab_container SET  record_status='I', \\\n             updated_by=?,updated_date=? WHERE hims_d_lab_container_id=?\",\n        values: [\n          req.body.updated_by,\n          new Date(),\n          req.body.hims_d_lab_container_id\n        ]\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\n//Specimen\nlet selectSpecimen = (req, res, next) => {\n  let labSpecimen = {\n    hims_d_lab_specimen_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let pagePaging = \"\";\n    if (req.paging != null) {\n      let Page = paging(req.paging);\n      pagePaging += \" LIMIT \" + Page.pageNo + \",\" + page.pageSize;\n    }\n\n    let condition = whereCondition(extend(labSpecimen, req.query));\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"SELECT * FROM `hims_d_lab_specimen` WHERE `record_status`='A' AND \" +\n          condition.condition +\n          \"order by hims_d_lab_specimen_id desc\",\n        values: condition.values\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet insertSpecimen = (req, res, next) => {\n  let labSpecimen = {\n    hims_d_lab_specimen_id: null,\n    description: null,\n    storage_type: null,\n    specimen_status: \"A\",\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    debugLog(\"Body: \", req.body);\n    let inputParam = extend(labSpecimen, req.body);\n    debugLog(\"Input: \", inputParam);\n    connection.query(\n      \"INSERT INTO `hims_d_lab_specimen` (`description`, `storage_type`,\\\n          `created_by` ,`created_date`,`specimen_status`) \\\n       VALUES ( ?, ?, ?, ?, ?)\",\n      [\n        inputParam.description,\n        inputParam.storage_type,\n        inputParam.created_by,\n        new Date(),\n        inputParam.specimen_status\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\n\nlet updateSpecimen = (req, res, next) => {\n  let labSpecimen = {\n    hims_d_lab_specimen_id: null,\n    description: null,\n    specimen_status: \"A\",\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    let inputParam = extend(labSpecimen, req.body);\n    connection.query(\n      \"UPDATE `hims_d_lab_specimen` \\\n         SET `description`=?, `storage_type` = ?,`updated_by`=?, `updated_date`=?,`specimen_status`=? \\\n         WHERE `record_status`='A' and `hims_d_lab_specimen_id`=?\",\n      [\n        inputParam.description,\n        inputParam.storage_type,\n        inputParam.updated_by,\n        new Date(),\n        inputParam.specimen_status,\n        inputParam.hims_d_lab_specimen_id\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\nlet deleteSpecimen = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n\n    deleteRecord(\n      {\n        db: req.db,\n        tableName: \"hims_d_lab_specimen\",\n        id: req.body.hims_d_lab_specimen_id,\n        query:\n          \"UPDATE hims_d_lab_specimen SET  record_status='I', \\\n             updated_by=?,updated_date=? WHERE hims_d_lab_specimen_id=?\",\n        values: [\n          req.body.updated_by,\n          new Date(),\n          req.body.hims_d_lab_specimen_id\n        ]\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\n//Analytes\nlet selectAnalytes = (req, res, next) => {\n  let labAnalytes = {\n    hims_d_lab_analytes_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let pagePaging = \"\";\n    if (req.paging != null) {\n      let Page = paging(req.paging);\n      pagePaging += \" LIMIT \" + Page.pageNo + \",\" + page.pageSize;\n    }\n\n    let condition = whereCondition(extend(labAnalytes, req.query));\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"SELECT * FROM `hims_d_lab_analytes` WHERE `record_status`='A' AND \" +\n          condition.condition +\n          \"order by hims_d_lab_analytes_id desc\",\n        values: condition.values\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet insertAnalytes = (req, res, next) => {\n  let labAnalytes = {\n    hims_d_lab_analytes_id: null,\n    description: null,\n    analyte_type: null,\n    analyte_status: \"A\",\n    result_unit: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    debugLog(\"Body: \", req.body);\n    let inputParam = extend(labAnalytes, req.body);\n    debugLog(\"Input: \", inputParam);\n    connection.query(\n      \"INSERT INTO `hims_d_lab_analytes` (`description`, `analyte_type`,`result_unit`,\\\n            `created_by` ,`created_date`,`analyte_status`) \\\n         VALUES ( ?, ?, ?, ?, ?, ?)\",\n      [\n        inputParam.description,\n        inputParam.analyte_type,\n        inputParam.result_unit,\n        inputParam.created_by,\n        new Date(),\n        inputParam.analyte_status\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\n\nlet updateAnalytes = (req, res, next) => {\n  let labAnalytes = {\n    hims_d_lab_analytes_id: null,\n    description: null,\n    analyte_status: \"A\",\n    analyte_type: null,\n    result_unit: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    let inputParam = extend(labAnalytes, req.body);\n    connection.query(\n      \"UPDATE `hims_d_lab_analytes` \\\n           SET `description`=?, `analyte_type` = ?, `result_unit` = ?,`updated_by`=?, `updated_date`=?,`analyte_status`=? \\\n           WHERE `record_status`='A' and `hims_d_lab_analytes_id`=?\",\n      [\n        inputParam.description,\n        inputParam.analyte_type,\n        inputParam.result_unit,\n        inputParam.updated_by,\n        new Date(),\n        inputParam.analyte_status,\n        inputParam.hims_d_lab_analytes_id\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\nlet deleteAnalytes = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n\n    deleteRecord(\n      {\n        db: req.db,\n        tableName: \"hims_d_lab_analytes\",\n        id: req.body.hims_d_lab_analytes_id,\n        query:\n          \"UPDATE hims_d_lab_analytes SET  record_status='I', \\\n               updated_by=?,updated_date=? WHERE hims_d_lab_analytes_id=?\",\n        values: [\n          req.body.updated_by,\n          new Date(),\n          req.body.hims_d_lab_analytes_id\n        ]\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\n//TestCategory\nlet selectTestCategory = (req, res, next) => {\n  let labTestCategory = {\n    hims_d_test_category_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let pagePaging = \"\";\n    if (req.paging != null) {\n      let Page = paging(req.paging);\n      pagePaging += \" LIMIT \" + Page.pageNo + \",\" + page.pageSize;\n    }\n\n    let condition = whereCondition(extend(labTestCategory, req.query));\n    selectStatement(\n      {\n        db: req.db,\n        query:\n          \"SELECT * FROM `hims_d_test_category` WHERE `record_status`='A' AND \" +\n          condition.condition +\n          \"order by hims_d_test_category_id desc\",\n        values: condition.values\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet insertTestCategory = (req, res, next) => {\n  let labTestCategory = {\n    hims_d_test_category_id: null,\n    category_name: null,\n    category_status: \"A\",\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n  debugLog(\"Catey: \");\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    debugLog(\"Body: \", req.body);\n    let inputParam = extend(labTestCategory, req.body);\n    debugLog(\"Input: \", inputParam);\n    connection.query(\n      \"INSERT INTO `hims_d_test_category` (`category_name`,\\\n            `created_by` ,`created_date`,`category_status`) \\\n         VALUES ( ?, ?, ?, ?)\",\n      [\n        inputParam.category_name,\n        inputParam.created_by,\n        new Date(),\n        inputParam.category_status\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\n\nlet updateTestCategory = (req, res, next) => {\n  let labTestCategory = {\n    hims_d_test_category_id: null,\n    category_name: null,\n    category_status: \"A\",\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    let inputParam = extend(labTestCategory, req.body);\n    connection.query(\n      \"UPDATE `hims_d_test_category` \\\n           SET `category_name`=?, `updated_by`=?, `updated_date`=?,`category_status`=? \\\n           WHERE `record_status`='A' and `hims_d_test_category_id`=?\",\n      [\n        inputParam.category_name,\n        inputParam.updated_by,\n        new Date(),\n        inputParam.category_status,\n        inputParam.hims_d_test_category_id\n      ],\n      (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        req.records = result;\n        next();\n      }\n    );\n  });\n};\nlet deleteTestCategory = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n\n    deleteRecord(\n      {\n        db: req.db,\n        tableName: \"hims_d_test_category\",\n        id: req.body.hims_d_test_category_id,\n        query:\n          \"UPDATE hims_d_test_category SET  record_status='I', \\\n               updated_by=?,updated_date=? WHERE hims_d_test_category_id=?\",\n        values: [\n          req.body.updated_by,\n          new Date(),\n          req.body.hims_d_test_category_id\n        ]\n      },\n      result => {\n        req.records = result;\n        next();\n      },\n      error => {\n        next(error);\n      },\n      true\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  selectSection,\n  insertSection,\n  updateSection,\n  deleteSection,\n  selectContainer,\n  insertContainer,\n  updateContainer,\n  deleteContainer,\n  selectSpecimen,\n  insertSpecimen,\n  updateSpecimen,\n  deleteSpecimen,\n  selectAnalytes,\n  insertAnalytes,\n  updateAnalytes,\n  deleteAnalytes,\n  selectTestCategory,\n  insertTestCategory,\n  updateTestCategory,\n  deleteTestCategory\n};\n"]}