{"version":3,"sources":["../../../src/model/languageTranslator.js"],"names":["translate","AWS","Translate","keys","AWSCredentials","getTargetLangage","req","res","next","languageModel","targetLanguage","sourceLanguage","forceChange","JSON","parse","fs","readFileSync","languageFolderPath","isForceChange","itemLength","Object","length","forEach","key","index","k","translateApi","data","writeFileSync","stringify","source","target","text","callBack","translateText","SourceLanguageCode","TargetLanguageCode","Text","error","logger","log","module","exports"],"mappings":"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","file":"languageTranslator.js","sourcesContent":["import AWS from \"aws-sdk\";\nimport { logger, debugFunction, debugLog } from \"../utils/logging\";\nimport keys from \"../keys/keys\";\n\nimport fs from \"fs\";\nlet translate = new AWS.Translate(keys.AWSCredentials);\n\nlet getTargetLangage = (req, res, next) => {\n  debugFunction(\"getTargetLangage\");\n\n  let languageModel = {\n    targetLanguage: \"ar\",\n    sourceLanguage: \"en\",\n    forceChange: false\n    /*\n      fieldIdentifier:{\n        english:'',\n        target:null\n  \n      }\n    */\n  };\n\n  // extend(languageModel, req.body);\n  languageModel = JSON.parse(\n    fs.readFileSync(keys.languageFolderPath + \"/language.json\")\n  );\n\n  let targetLanguage = languageModel.targetLanguage;\n  let sourceLanguage = languageModel.sourceLanguage;\n  let isForceChange = languageModel.forceChange;\n  let itemLength = Object.keys(languageModel).length;\n  Object.keys(languageModel).forEach((key, index) => {\n    Object.keys(languageModel[key]).forEach(k => {\n      if (k == \"target\") {\n        if (isForceChange) {\n          translateApi(\n            sourceLanguage,\n            targetLanguage,\n            languageModel[key][\"english\"],\n            key,\n            index,\n            (data, key, index) => {\n              languageModel[key][\"target\"] = data[\"TranslatedText\"];\n              debugLog(\"translated\", languageModel[key]);\n              if (index == itemLength - 1) {\n                fs.writeFileSync(\n                  keys.languageFolderPath + \"/language.json\",\n                  JSON.stringify(languageModel)\n                );\n                next();\n              }\n            }\n          );\n        } else {\n          if (\n            languageModel[key][\"target\"] == null ||\n            languageModel[key][\"target\"] == \"\"\n          ) {\n            translateApi(\n              sourceLanguage,\n              targetLanguage,\n              languageModel[key][\"english\"],\n              key,\n              index,\n              (data, key, index) => {\n                languageModel[key][\"target\"] = data[\"TranslatedText\"];\n                debugLog(\"translated\", languageModel[key]);\n                if (index == itemLength - 1) {\n                  // req.records = languageModel;\n                  fs.writeFileSync(\n                    keys.languageFolderPath + \"/language.json\",\n                    JSON.stringify(languageModel)\n                  );\n                  next();\n                }\n              }\n            );\n          }\n        }\n      }\n    });\n  });\n};\n\nlet translateApi = (source, target, text, key, index, callBack) => {\n  translate.translateText(\n    {\n      SourceLanguageCode: source,\n      TargetLanguageCode: target,\n      Text: text\n    },\n    (error, data) => {\n      if (error) {\n        logger.log(\"error\", \"Error in Translate : %j\", error);\n      }\n      callBack(data, key, index);\n    }\n  );\n};\nmodule.exports = {\n  getTargetLangage\n};\n"]}