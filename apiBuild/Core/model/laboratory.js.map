{"version":3,"sources":["../../../src/model/laboratory.js"],"names":["getLabOrderedServices","req","res","next","db","httpStatus","dataBaseNotInitilizedError","whereOrder","query","from_date","undefined","to_date","patient_id","status","where","getConnection","error","connection","condition","values","result","records","e","insertLadOrderedServices","insurtColumns","body","billdetails","ResultOfFetchOrderIds","Services","labServices","Set","LINQ","Where","w","service_type_id","appsettings","hims_d_service_type","Lab","Select","ordered_services_id","s","hims_f_ordered_services_id","provider_id","incharge_or_provider","visit_id","service_id","services_id","billed","ordered_date","created_date","test_type","ToArray","length","join","sampleInputObject","arrayObj","newFieldToInsert","userIdentity","algaeh_d_app_user_id","get_services_id","rec","test_id","hims_d_investigation_test_id","specimentRecords","rollback","generateError","forbidden","insertedLabSample","order_id","FirstOrDefault","hims_f_lab_order_id","sample_id","specimen_id","sample","recordInserted","analyts","labAnalytes","analyte_id","analyte_type","result_unit","critical_low","critical_high","normal_low","normal_high","recordLabAnaytes","updateLabOrderServices","beginTransaction","Promise","resolve","reject","collected","hims_d_lab_sample_id","hims_d_hospital_id","container_id","container_code","lab_location_code","then","_date","Date","padNum","_newNumber","record","parseInt","number","String","hims_m_hospital_container_mapping_id","dayOfYear","labIdNumber","format","returns","commit","collected_by","collected_date","catch","getTestAnalytes","updateLabSampleStatus","input","queryBuilder","inputs","remarks","updated_by","results","updateLabResultEntry","user_id","inputParam","amended","status_C","status_V","status_N","status_E","runtype","run_type","ref","entered_by","confirmed_by","validated_by","qry","i","mysql","run1","run2","run3","critical_type","validate","confirm","hims_f_ord_analytes_id","updateLabOrderedBilled","OrderServices","updated_date","toLocaleString","LAB","module","exports"],"mappings":"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","file":"laboratory.js","sourcesContent":["\"use strict\";\nimport {\n  whereCondition,\n  releaseDBConnection,\n  jsonArrayToObject\n} from \"../utils\";\nimport pad from \"node-string-pad\";\nimport httpStatus from \"../utils/httpStatus\";\nimport { LINQ } from \"node-linq\";\nimport appsettings from \"../utils/appsettings.json\";\nimport { debugFunction, debugLog } from \"../utils/logging\";\nimport Promise from \"bluebird\";\nimport moment from \"moment\";\nimport extend from \"extend\";\nimport mysql from \"mysql\";\n//created by nowshad: to get lad orders for sample collection\nlet getLabOrderedServices = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let whereOrder = \"\";\n    if (req.query.from_date != undefined) {\n      whereOrder =\n        \"date(ordered_date) between date('\" +\n        req.query.from_date +\n        \"') AND date('\" +\n        req.query.to_date +\n        \"')\";\n    } else {\n      whereOrder = \"date(ordered_date) <= date(now())\";\n    }\n\n    if (req.query.patient_id != undefined && req.query.patient_id != \"null\") {\n      req.query[\"LO.patient_id\"] = req.query.patient_id;\n    }\n\n    if (req.query.status != undefined && req.query.status != \"null\") {\n      req.query[\"LO.status\"] = req.query.status;\n    }\n\n    delete req.query.from_date;\n    delete req.query.to_date;\n    delete req.query.patient_id;\n    delete req.query.status;\n    debugLog(\"req.query: \", req.query);\n    debugLog(\"whereOrder: \", whereOrder);\n\n    let where = whereCondition(req.query);\n\n    debugLog(\"where conditn:\", where);\n    // let strQuery =\n    //   \"SELECT hims_f_lab_order_id,patient_id,visit_id,provider_id, service_id,SR.service_code,SR.service_name,\\\n    // SA.status, cancelled, ordered_date, test_type, PAT.patient_code,PAT.full_name,SP.sample_id,SP.collected,\\\n    // SP.collected_by, SP.collected_date,SP.hims_d_lab_sample_id from ((hims_f_lab_order SA inner join hims_f_patient PAT ON \\\n    // SA.patient_id=PAT.hims_d_patient_id) inner join hims_d_services SR on SR.hims_d_services_id=SA.service_id) \\\n    // left outer join hims_f_lab_sample SP on SA.hims_f_lab_order_id = SP.order_id WHERE SA.record_status='A' AND \" +\n    //   whereOrder;\n\n    // debugLog(\"strQuery: \", strQuery);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      db.query(\n        \"select hims_f_lab_order_id,LO.patient_id, entered_by, confirmed_by, validated_by,visit_id,V.visit_code, provider_id, E.full_name as doctor_name, billed, service_id,S.service_code,S.service_name,LO.status,\\\n        cancelled, provider_id, ordered_date, test_type, lab_id_number, run_type, P.patient_code,P.full_name,P.date_of_birth, P.gender,\\\n        LS.sample_id,LS.collected,LS.collected_by, LS.remarks,LS.collected_date,LS.hims_d_lab_sample_id,LS.status as sample_status\\\n        from hims_f_lab_order LO inner join hims_d_services S on LO.service_id=S.hims_d_services_id and S.record_status='A'\\\n        inner join hims_f_patient_visit V on LO.visit_id=V.hims_f_patient_visit_id and  V.record_status='A'\\\n        inner join hims_d_employee E on LO.provider_id=E.hims_d_employee_id and  E.record_status='A'\\\n        inner join hims_f_patient P on LO.patient_id=P.hims_d_patient_id and  P.record_status='A'\\\n        left outer join hims_f_lab_sample LS on  LO.hims_f_lab_order_id = LS.order_id  and LS.record_status='A'  WHERE \" +\n          whereOrder +\n          (where.condition == \"\"\n            ? \"\" + \" order by hims_f_lab_order_id desc\"\n            : \" AND \" + where.condition),\n        where.values,\n\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet insertLadOrderedServices = (req, res, next) => {\n  const insurtColumns = [\n    \"ordered_services_id\",\n    \"patient_id\",\n    \"visit_id\",\n    \"provider_id\",\n    \"service_id\",\n    \"billed\",\n    \"ordered_date\",\n    \"test_type\"\n  ];\n  // \"ordered_date\"\n  debugLog(\"req: \", req.records);\n  // const Services = req.body || req.body.billdetails;\n\n  // debugLog(\"Services \", Services);\n\n  debugLog(\"req Body: \", req.body.billdetails);\n  debugLog(\"ResultOfFetchOrderIds: \", req.records.ResultOfFetchOrderIds);\n\n  let Services =\n    req.records.ResultOfFetchOrderIds == null\n      ? req.body.billdetails\n      : req.records.ResultOfFetchOrderIds;\n  debugLog(\"Services: \", Services);\n\n  const labServices = [\n    ...new Set(\n      new LINQ(Services)\n        .Where(\n          w =>\n            w.service_type_id ==\n            appsettings.hims_d_service_type.service_type_id.Lab\n        )\n        .Select(s => {\n          return {\n            ordered_services_id: s.hims_f_ordered_services_id || null,\n            patient_id: req.body.patient_id,\n            provider_id: req.body.incharge_or_provider,\n            visit_id: req.body.visit_id,\n            service_id: s.services_id,\n            billed: req.body.billed,\n            ordered_date: s.created_date,\n            test_type: s.test_type\n          };\n        })\n        .ToArray()\n    )\n  ];\n\n  let connection = req.connection;\n\n  debugLog(\"labServices: \", labServices);\n  if (labServices.length > 0) {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    debugLog(\"insurtColumns\", insurtColumns.join(\",\"));\n    debugLog(\"labServices\", labServices);\n    connection.query(\n      \"INSERT INTO hims_f_lab_order(\" +\n        insurtColumns.join(\",\") +\n        \",created_by,updated_by)  VALUES ?\",\n      [\n        jsonArrayToObject({\n          sampleInputObject: insurtColumns,\n          arrayObj: labServices,\n          req: req,\n          newFieldToInsert: [\n            req.userIdentity.algaeh_d_app_user_id,\n            req.userIdentity.algaeh_d_app_user_id\n          ]\n        })\n      ],\n      (error, result) => {\n        debugLog(\"result Order: \", result);\n        if (error) {\n          releaseDBConnection(db, connection);\n          next(error);\n        }\n        const get_services_id = new LINQ(labServices)\n          .Select(s => {\n            return s.service_id;\n          })\n          .ToArray();\n        debugLog(\"Services ME : \", get_services_id);\n        debugLog(\"Array ME\", get_services_id.join(\",\"));\n        connection.query(\n          \"select  hims_d_investigation_test_id from hims_d_investigation_test where record_status='A' and services_id in (?)\",\n          [get_services_id],\n          (error, rec) => {\n            if (error) {\n              releaseDBConnection(db, connection);\n              next(error);\n            }\n            const test_id = new LINQ(rec)\n              .Select(s => {\n                return s.hims_d_investigation_test_id;\n              })\n              .ToArray();\n\n            debugLog(\"test_id\", test_id.join(\",\"));\n            debugLog(\"visit_id\", req.body.visit_id);\n\n            connection.query(\n              \"select services_id,specimen_id FROM  hims_m_lab_specimen,hims_d_investigation_test where \\\n                  hims_d_investigation_test_id=hims_m_lab_specimen.test_id and hims_m_lab_specimen.record_status='A' and test_id in (?); \\\n                  select hims_f_lab_order_id,service_id from hims_f_lab_order where record_status='A' and visit_id =? and service_id in (?); \\\n                  select hims_d_investigation_test.services_id,analyte_type,result_unit,analyte_id,critical_low,critical_high, \\\n                  normal_low,normal_high \\\n                  from hims_d_investigation_test,hims_m_lab_analyte where \\\n                 hims_d_investigation_test_id=hims_m_lab_analyte.test_id and hims_m_lab_analyte.record_status='A' \\\n                 and hims_m_lab_analyte.test_id in  (?);\",\n              [test_id, req.body.visit_id, get_services_id, test_id],\n              (error, specimentRecords) => {\n                if (error) {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                }\n                if (\n                  specimentRecords[0] == null ||\n                  specimentRecords[0].length == 0\n                ) {\n                  releaseDBConnection(db, connection);\n                  connection.rollback(() => {\n                    next(\n                      httpStatus.generateError(\n                        httpStatus.forbidden,\n                        \"No specimen avilable\"\n                      )\n                    );\n                  });\n                }\n\n                const insertedLabSample = new LINQ(specimentRecords[0])\n                  .Select(s => {\n                    return {\n                      order_id: new LINQ(specimentRecords[1])\n                        .Where(w => w.service_id == s.services_id)\n                        .FirstOrDefault().hims_f_lab_order_id,\n                      sample_id: s.specimen_id\n                    };\n                  })\n                  .ToArray();\n\n                const sample = [\"order_id\", \"sample_id\"];\n                connection.query(\n                  \"insert into hims_f_lab_sample(\" +\n                    sample.join(\",\") +\n                    \",created_by,updated_by) VALUES ?\",\n                  [\n                    jsonArrayToObject({\n                      sampleInputObject: sample,\n                      arrayObj: insertedLabSample,\n                      req: req,\n                      newFieldToInsert: [\n                        req.userIdentity.algaeh_d_app_user_id,\n                        req.userIdentity.algaeh_d_app_user_id\n                      ]\n                    })\n                  ],\n                  (error, recordInserted) => {\n                    if (error) {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    }\n                    const analyts = [\n                      \"order_id\",\n                      \"analyte_id\",\n                      \"analyte_type\",\n                      \"result_unit\",\n                      \"critical_low\",\n                      \"critical_high\",\n                      \"normal_low\",\n                      \"normal_high\"\n                    ];\n                    if (\n                      specimentRecords[2] != null &&\n                      specimentRecords[2].length != 0\n                    ) {\n                      const labAnalytes = new LINQ(specimentRecords[2])\n                        .Select(s => {\n                          return {\n                            analyte_id: s.analyte_id,\n                            order_id: new LINQ(specimentRecords[1])\n                              .Where(w => w.service_id == s.services_id)\n                              .FirstOrDefault().hims_f_lab_order_id,\n                            analyte_type: s.analyte_type,\n                            result_unit: s.result_unit,\n                            critical_low: s.critical_low,\n                            critical_high: s.critical_high,\n                            normal_low: s.normal_low,\n                            normal_high: s.normal_high\n                          };\n                        })\n                        .ToArray();\n\n                      debugLog(\"labAnalytes: \", labAnalytes);\n                      connection.query(\n                        \"insert into hims_f_ord_analytes(\" +\n                          analyts.join(\",\") +\n                          \",created_by,updated_by) VALUES ?\",\n                        [\n                          jsonArrayToObject({\n                            sampleInputObject: analyts,\n                            arrayObj: labAnalytes,\n                            req: req,\n                            newFieldToInsert: [\n                              req.userIdentity.algaeh_d_app_user_id,\n                              req.userIdentity.algaeh_d_app_user_id\n                            ]\n                          })\n                        ],\n                        (error, recordLabAnaytes) => {\n                          releaseDBConnection(db, connection);\n                          if (error) {\n                            next(error);\n                          }\n                          req.records = {\n                            result,\n                            ResultOfFetchOrderIds:\n                              req.records.ResultOfFetchOrderIds\n                          };\n                          next();\n                        }\n                      );\n                    } else {\n                      next();\n                    }\n                  }\n                );\n              }\n            );\n          }\n        );\n      }\n    );\n  } else {\n    next();\n  }\n};\n\nlet updateLabOrderServices = (req, res, next) => {\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  db.getConnection((error, connection) => {\n    if (error) {\n      next(error);\n    }\n    connection.beginTransaction(error => {\n      if (error) {\n        connection.rollback(() => {\n          releaseDBConnection(db, connection);\n          next(error);\n        });\n      }\n\n      return new Promise((resolve, reject) => {\n        connection.query(\n          \"UPDATE hims_f_lab_sample SET `collected`=?,`status`=?, `collected_by`=?,\\\n`collected_date` =now() WHERE hims_d_lab_sample_id=?;\\\nSELECT distinct container_id,container_code FROM hims_m_lab_specimen,hims_d_investigation_test \\\nwhere hims_d_investigation_test.hims_d_investigation_test_id =hims_m_lab_specimen.test_id \\\nand hims_d_investigation_test.services_id=?;\\\nSELECT lab_location_code from hims_d_hospital where hims_d_hospital_id=?\",\n          [\n            req.body.collected,\n            req.body.status,\n            req.userIdentity.algaeh_d_app_user_id,\n            req.body.hims_d_lab_sample_id,\n            req.body.service_id,\n            req.body.hims_d_hospital_id\n          ],\n          (error, result) => {\n            if (error) {\n              reject(error);\n            } else {\n              // debugLog(\"Result: \", result);\n              req.body.container_id = result[1][0].container_id;\n              req.body.container_code = result[1][0].container_code;\n              req.body.lab_location_code = result[2][0].lab_location_code;\n              resolve(result);\n            }\n          }\n        );\n      })\n        .then(result => {\n          if (result != null) {\n            const _date = new Date();\n            return new Promise((resolve, reject) => {\n              connection.query(\n                \"select number,hims_m_hospital_container_mapping_id from hims_m_hospital_container_mapping \\\n               where hospital_id =? and container_id=? and date =?\",\n                [req.body.hims_d_hospital_id, req.body.container_id, _date],\n                (error, records) => {\n                  if (error) {\n                    reject(error);\n                  } else {\n                    resolve(records);\n                  }\n                }\n              );\n            }).then(record => {\n              let query = \"\";\n              let condition = [];\n              let padNum = \"\";\n              let _newNumber = 1;\n              if (record != null && record.length > 0) {\n                _newNumber = parseInt(record[1][0].number, 10);\n                _newNumber = _newNumber + 1;\n                padNum = pad(String(_newNumber), 3, \"LEFT\", \"0\");\n                condition = [\n                  _newNumber,\n                  record.hims_m_hospital_container_mapping_id,\n                  req.userIdentity.algaeh_d_app_user_id\n                ];\n                query =\n                  \"Update hims_m_hospital_container_mapping set number =?,updated_by=?,updated_date=now() where hims_m_hospital_container_mapping_id =?\";\n              } else {\n                condition = [\n                  [\n                    req.body.hims_d_hospital_id,\n                    req.body.container_id,\n                    _date,\n                    1,\n                    req.userIdentity.algaeh_d_app_user_id,\n                    req.userIdentity.algaeh_d_app_user_id\n                  ]\n                ];\n\n                query =\n                  \"insert into hims_m_hospital_container_mapping (`hospital_id`,`container_id`,`date`,`number`,`created_by`,`updated_by`) values (?)\";\n              }\n\n              padNum = pad(String(_newNumber), 3, \"LEFT\", \"0\");\n              debugLog(\"padNum: \", padNum);\n              const dayOfYear = moment().dayOfYear();\n              debugLog(\"dayOfYear: \", dayOfYear);\n              const labIdNumber =\n                req.body.lab_location_code +\n                moment().format(\"YY\") +\n                dayOfYear +\n                req.body.container_code +\n                padNum;\n\n              debugLog(\"condition: \", condition);\n              connection.query(\n                query +\n                  \";update hims_f_lab_order set lab_id_number ='\" +\n                  labIdNumber +\n                  \"',status='CL' where hims_f_lab_order_id=\" +\n                  req.body.hims_f_lab_order_id,\n                condition,\n                (error, returns) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  } else {\n                    connection.commit(error => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                      req.records = {\n                        collected: req.body.collected,\n                        collected_by: req.userIdentity.algaeh_d_app_user_id,\n                        collected_date: new Date()\n                      };\n                      releaseDBConnection(db, connection);\n                      next();\n                    });\n                  }\n                }\n              );\n            });\n          }\n        })\n        .catch(error => {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        });\n    });\n  });\n};\n\n//created by nowshad: to get selected test analytes\nlet getTestAnalytes = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(req.query);\n\n    debugLog(\"where conditn:\", where);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      db.query(\n        \"SELECT *,la.description from hims_f_ord_analytes, hims_d_lab_analytes la where hims_f_ord_analytes.record_status='A' \\\n        and la.hims_d_lab_analytes_id = hims_f_ord_analytes.analyte_id AND\" +\n          where.condition,\n        where.values,\n\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to update Lab Sample Status updateLabSampleStatus\nlet updateLabSampleStatus = (req, res, next) => {\n  try {\n    debugFunction(\"updateLabSampleStatus\");\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    debugLog(\"Input Data\", req.body);\n    let input = extend({}, req.body);\n    let collected = \",\";\n    if (req.body.status == \"R\") {\n      collected = \", collected='N' ,\";\n    }\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        let queryBuilder =\n          \"update hims_f_lab_sample set `status`=?\" +\n          collected +\n          \"remarks=?,updated_date=?,updated_by=? where hims_d_lab_sample_id=?;\";\n\n        debugLog(\"queryBuilder: \", queryBuilder);\n        let inputs = [\n          input.status,\n          input.remarks,\n          new Date(),\n          input.updated_by,\n          input.hims_d_lab_sample_id\n        ];\n\n        connection.query(queryBuilder, inputs, (error, results) => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n\n          if (req.body.status == \"R\") {\n            connection.query(\n              \"UPDATE `hims_f_lab_order` SET `status`='O',updated_date=?,updated_by=?  WHERE `hims_f_lab_order_id`=?;\",\n              [new Date(), input.updated_by, input.order_id],\n              (error, result) => {\n                if (error) {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                }\n\n                connection.commit(error => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n                  releaseDBConnection(db, connection);\n                  req.records = result;\n                  next();\n                });\n              }\n            );\n          } else {\n            connection.commit(error => {\n              if (error) {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n              releaseDBConnection(db, connection);\n              req.records = results;\n              next();\n            });\n          }\n        });\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to update Lab Result Entry\nlet updateLabResultEntry = (req, res, next) => {\n  debugFunction(\"updateLabResultEntry\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        let user_id = extend({}, req.body);\n        let inputParam = extend([], req.body);\n\n        debugLog(\"inputParam:\", inputParam);\n        let amended = \"\";\n\n        let status_C = new LINQ(inputParam)\n          .Where(w => w.status == \"C\")\n          .ToArray().length;\n        let status_V = new LINQ(inputParam)\n          .Where(w => w.status == \"V\")\n          .ToArray().length;\n\n        let status_N = new LINQ(inputParam)\n          .Where(w => w.status == \"N\")\n          .ToArray().length;\n\n        let status_E = new LINQ(inputParam)\n          .Where(w => w.status == \"E\")\n          .ToArray().length;\n\n        let runtype = new LINQ(inputParam)\n          .Where(w => w.run_type != null)\n          .Select(s => s.run_type)\n          .ToArray();\n\n        let ref = null;\n        let entered_by = \"\";\n        let confirmed_by = \"\";\n        let validated_by = \"\";\n\n        switch (inputParam.length - 1) {\n          case status_C:\n            //Do functionality for C here\n            ref = \"CF\";\n            confirmed_by = req.userIdentity.algaeh_d_app_user_id;\n            break;\n\n          case status_V:\n            //Do functionality for V here\n            ref = \"V\";\n            validated_by = req.userIdentity.algaeh_d_app_user_id;\n            break;\n\n          case status_N:\n            //Do functionality for CL here\n            ref = \"CL\";\n            break;\n\n          case status_E:\n            ref = \"CL\";\n            entered_by = req.userIdentity.algaeh_d_app_user_id;\n            break;\n          default:\n            ref = null;\n        }\n\n        debugLog(\"ref: \", ref);\n        debugLog(\"entered_by: \", entered_by);\n        debugLog(\"confirmed_by: \", confirmed_by);\n        debugLog(\"validated_by: \", validated_by);\n\n        let qry = \"\";\n\n        for (let i = 0; i < req.body.length; i++) {\n          // if (inputParam[i].amended === \"Y\") {\n          //   amended =\n          //     \"',amended_by='\" +\n          //     user_id.updated_by +\n          //     \"',amended_date='\" +\n          //     moment().format(\"YYYY-MM-DD HH:mm\");\n          // } else {\n          //   amended = \"\";\n          // }\n          qry += mysql.format(\n            \"UPDATE `hims_f_ord_analytes` SET result=?,\\\n          `status`=?,`remarks`=?,`run1`=?,`run2`=?,`run3`=?,`critical_type`=?,\\\n          entered_by=?,entered_date=?,validate_by=?,validated_date=?,\\\n          confirm_by=?,confirmed_date=?,amended=?,amended_date=?,\\\n          updated_date=?,updated_by=? where order_id=? AND hims_f_ord_analytes_id=?;\",\n            [\n              inputParam[i].result,\n              inputParam[i].status,\n              inputParam[i].remarks,\n              inputParam[i].run1,\n              inputParam[i].run2,\n              inputParam[i].run3,\n              inputParam[i].critical_type,\n              user_id.updated_by,\n              moment().format(\"YYYY-MM-DD HH:mm\"),\n              inputParam[i].validate == \"N\" ? null : user_id.updated_by,\n              inputParam[i].validate == \"N\"\n                ? null\n                : moment().format(\"YYYY-MM-DD HH:mm\"),\n              inputParam[i].confirm == \"N\" ? null : user_id.updated_by,\n              inputParam[i].confirm == \"N\"\n                ? null\n                : moment().format(\"YYYY-MM-DD HH:mm\"),\n              inputParam[i].amended,\n              inputParam[i].amended === \"Y\"\n                ? moment().format(\"YYYY-MM-DD HH:mm\")\n                : null,\n              moment().format(\"YYYY-MM-DD HH:mm\"),\n              user_id.updated_by,\n              inputParam[i].order_id,\n              inputParam[i].hims_f_ord_analytes_id\n            ]\n          );\n          // qry +=\n          //   \" UPDATE `hims_f_ord_analytes` SET result='\" +\n          //   inputParam[i].result +\n          //   \"',`status`='\" +\n          //   inputParam[i].status +\n          //   \"',`remarks`='\" +\n          //   inputParam[i].remarks +\n          //   \"',`run1`='\" +\n          //   inputParam[i].run1 +\n          //   \"',`run2`='\" +\n          //   inputParam[i].run2 +\n          //   \"',`run3`='\" +\n          //   inputParam[i].run3 +\n          //   \"',`critical_type`='\" +\n          //   inputParam[i].critical_type +\n          //   \"',entered_by='\" +\n          //   user_id.updated_by +\n          //   \"',entered_date='\" +\n          //   moment().format(\"YYYY-MM-DD HH:mm\") +\n          //   \"',validate_by='\" +\n          //   user_id.updated_by +\n          //   \"',validated_date='\" +\n          //   moment().format(\"YYYY-MM-DD HH:mm\") +\n          //   \"',confirm_by='\" +\n          //   user_id.updated_by +\n          //   \"',confirmed_date='\" +\n          //   moment().format(\"YYYY-MM-DD HH:mm\") +\n          //   \"',amended='\" +\n          //   inputParam[i].amended +\n          //   amended +\n          //   \"',updated_date='\" +\n          //   moment().format(\"YYYY-MM-DD HH:mm\") +\n          //   \"',updated_by='\" +\n          //   user_id.updated_by +\n          //   \"' WHERE order_id='\" +\n          //   inputParam[i].order_id +\n          //   \"'AND hims_f_ord_analytes_id='\" +\n          //   inputParam[i].hims_f_ord_analytes_id +\n          //   \"';\";\n        }\n\n        connection.query(qry, (error, results) => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n\n          if (results != null && ref != null) {\n            connection.query(\n              \"update hims_f_lab_order set `status`='\" +\n                ref +\n                \"',entered_date= '\" +\n                moment().format(\"YYYY-MM-DD HH:mm\") +\n                \"',entered_by= '\" +\n                user_id.updated_by +\n                \"',confirmed_date= '\" +\n                moment().format(\"YYYY-MM-DD HH:mm\") +\n                \"',confirmed_by= '\" +\n                user_id.updated_by +\n                \"',validated_date= '\" +\n                moment().format(\"YYYY-MM-DD HH:mm\") +\n                \"',validated_by= '\" +\n                user_id.updated_by +\n                \"',updated_date= '\" +\n                moment().format(\"YYYY-MM-DD HH:mm\") +\n                \"',run_type='\" +\n                runtype[0] +\n                \"',updated_by='\" +\n                user_id.updated_by +\n                \"' where hims_f_lab_order_id=? \",\n              [inputParam[0].order_id],\n              (error, result) => {\n                if (error) {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                }\n\n                connection.commit(error => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n                  releaseDBConnection(db, connection);\n                  req.records = {\n                    results,\n                    entered_by: entered_by,\n                    confirmed_by: confirmed_by,\n                    validated_by: validated_by\n                  };\n                  next();\n                });\n              }\n            );\n          } else {\n            connection.commit(error => {\n              if (error) {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n              releaseDBConnection(db, connection);\n              req.records = {\n                results,\n                entered_by: entered_by,\n                confirmed_by: confirmed_by,\n                validated_by: validated_by\n              };\n              next();\n            });\n          }\n        });\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//lab services update as billed\nlet updateLabOrderedBilled = (req, res, next) => {\n  debugFunction(\"updateLabOrderedBilled\");\n\n  debugLog(\"Bill Data: \", req.body.billdetails);\n  let OrderServices = new LINQ(req.body.billdetails)\n    .Where(\n      w =>\n        w.hims_f_ordered_services_id != null &&\n        w.service_type_id == appsettings.hims_d_service_type.service_type_id.Lab\n    )\n    .Select(s => {\n      return {\n        ordered_services_id: s.hims_f_ordered_services_id,\n        billed: \"Y\",\n        updated_date: new Date(),\n        updated_by: req.userIdentity.algaeh_d_app_user_id\n      };\n    })\n    .ToArray();\n  debugLog(\"Lab Order Services: \", OrderServices);\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let connection = req.connection;\n\n    let qry = \"\";\n\n    for (let i = 0; i < OrderServices.length; i++) {\n      qry +=\n        \" UPDATE `hims_f_lab_order` SET billed='\" +\n        OrderServices[i].billed +\n        \"',updated_date='\" +\n        new Date().toLocaleString() +\n        \"',updated_by='\" +\n        OrderServices[i].updated_by +\n        \"' WHERE ordered_services_id='\" +\n        OrderServices[i].ordered_services_id +\n        \"';\";\n    }\n    debugLog(\"Query\", qry);\n    if (qry != \"\") {\n      connection.query(qry, (error, result) => {\n        releaseDBConnection(db, connection);\n        if (error) {\n          next(error);\n        }\n        debugLog(\"Query Result \", result);\n        req.records = { result, LAB: false };\n        next();\n      });\n    } else {\n      req.records = { LAB: true };\n      next();\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  getLabOrderedServices,\n  getTestAnalytes,\n  insertLadOrderedServices,\n  updateLabOrderServices,\n  updateLabSampleStatus,\n  updateLabResultEntry,\n  updateLabOrderedBilled\n};\n"]}