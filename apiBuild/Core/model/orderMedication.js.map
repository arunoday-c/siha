{"version":3,"sources":["../../../src/model/orderMedication.js"],"names":["addPatientPrescription","req","res","next","db","httpStatus","dataBaseNotInitilizedError","input","body","getConnection","error","connection","beginTransaction","rollback","query","patient_id","encounter_id","provider_id","episode_id","Date","created_by","updated_by","results","insertId","prescription_id","insurtColumns","join","sampleInputObject","arrayObj","medicationitems","newFieldToInsert","detailResult","commit","records","e","getPatientPrescription","selectWhere","prescription_date","where","condition","values","result","module","exports"],"mappings":"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","file":"orderMedication.js","sourcesContent":["\"use strict\";\nimport extend from \"extend\";\nimport {\n  whereCondition,\n  \n  releaseDBConnection,\n  jsonArrayToObject\n} from \"../utils\";\nimport httpStatus from \"../utils/httpStatus\";\n//import { LINQ } from \"node-linq\";\n//import moment from \"moment\";\nimport { debugFunction, debugLog } from \"../utils/logging\";\n\n//created by irfan: to add Patient Prescription\nlet addPatientPrescription = (req, res, next) => {\n  // created_by: req.userIdentity.algaeh_d_app_user_id,\n  // updated_by: req.userIdentity.algaeh_d_app_user_id\n\n  debugFunction(\"addPatientPrescription\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n\n        connection.query(\n          \"INSERT INTO `hims_f_prescription` (`patient_id`, `encounter_id`, `provider_id`, `episode_id`, `prescription_date`, `created_by`, `created_date`, `updated_by`, `updated_date`) values(\\\n            ?,?,?,?,?,?,?,?,?)\",\n          [\n            input.patient_id,\n            input.encounter_id,\n            input.provider_id,\n            input.episode_id,\n            new Date(),\n            input.created_by,\n            new Date(),\n            input.updated_by,\n            new Date()\n          ],\n          (error, results) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n            // debugLog(\"Results are recorded...\");\n\n            if (results.insertId != null) {\n              req.body.prescription_id = results.insertId;\n\n              const insurtColumns = [\n                \"item_id\",\n                \"generic_id\",\n                \"dosage\",\n                \"service_id\",\n                \"uom_id\",\n                \"item_category_id\",\n                \"item_group_id\",\n                \"frequency\",\n                \"no_of_days\",\n                \"dispense\",\n                \"frequency_type\",\n                \"frequency_time\"\n              ];\n\n              connection.query(\n                \"INSERT INTO hims_f_prescription_detail(\" +\n                  insurtColumns.join(\",\") +\n                  \",`prescription_id`) VALUES ?\",\n                [\n                  jsonArrayToObject({\n                    sampleInputObject: insurtColumns,\n                    arrayObj: req.body.medicationitems,\n                    newFieldToInsert: [req.body.prescription_id],\n                    req: req\n                  })\n                ],\n                (error, detailResult) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n\n                  connection.commit(error => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n                    releaseDBConnection(db, connection);\n                    req.records = detailResult;\n                    next();\n                  });\n                }\n              );\n            }\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: getPatientPrescription\nlet getPatientPrescription = (req, res, next) => {\n  let selectWhere = {\n    provider_id: \"ALL\",\n    patient_id: \"ALL\",\n    prescription_date: \"ALL\"\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    req.query[\"date(prescription_date)\"] = req.query.prescription_date;\n\n    delete req.query.prescription_date;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      db.query(\n        \"SELECT H.hims_f_prescription_id,H.patient_id, P.patient_code,P.full_name,H.encounter_id, H.provider_id, H.episode_id, \\\n        H.prescription_date,H.prescription_status,H.cancelled,D.hims_f_prescription_detail_id, D.prescription_id, D.item_id, D.generic_id, D.dosage,\\\n        D.frequency, D.no_of_days,D.dispense, D.frequency_type, D.frequency_time, D.start_date, D.item_status \\\n        from hims_f_prescription H,hims_f_prescription_detail D ,hims_f_patient P WHERE H.hims_f_prescription_id = D.prescription_id and P.hims_d_patient_id=H.patient_id and \" +\n          where.condition,\n        where.values,\n\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = { addPatientPrescription, getPatientPrescription };\n"]}