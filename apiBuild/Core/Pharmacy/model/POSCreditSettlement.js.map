{"version":3,"sources":["../../../../src/Pharmacy/model/POSCreditSettlement.js"],"names":["billingCounter","addPOSCreidtSettlement","req","res","next","db","httpStatus","dataBaseNotInitilizedError","inputParam","body","reciept_header_id","records","receipt_header_id","hospital_id","connection","Promise","resolve","reject","counter","module_desc","onFailure","error","onSuccess","result","then","documentCode","completeNumber","query","pos_credit_date","Date","patient_id","reciept_amount","write_off_amount","recievable_amount","remarks","transaction_type","write_off_account","created_by","headerResult","insertId","insurtColumns","join","sampleInputObject","arrayObj","criedtdetails","newFieldToInsert","detailsRecords","pos_credit_number","hims_f_pos_credit_header_id","receipt_number","e","getPOSCreidtSettlement","length","hims_f_receipt_header_id","cal_receipt_header_id","updatePOSBilling","details","qry","i","pos_header_id","balance_credit","previous_balance","receipt_amount","data","getPatientPOSCriedt","whereStatement","getConnection","where","condition","values","module","exports"],"mappings":"AAAA;;;;AACA;;;;AACA;;AAMA;;;;AACA;;;;AAEA,IAAIA,iBAAiB,CAArB;AACA;AACA,IAAIC,yBAAyB,SAAzBA,sBAAyB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/C,8BAAc,wBAAd;AACAJ,mBAAiBA,iBAAiB,CAAlC;AACA,MAAI;AACF,QAAIE,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;AACA,QAAIG,aAAa,sBAAO,EAAP,EAAWN,IAAIO,IAAf,CAAjB;;AAEAD,eAAWE,iBAAX,GAA+BR,IAAIS,OAAJ,CAAYC,iBAA3C;AACAJ,eAAWK,WAAX,GAAyB,CAAzB;;AAEA,QAAIC,aAAaZ,IAAIY,UAArB;;AAEA,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,mCAAiB;AACfZ,YAAIS,UADW;AAEfI,iBAASlB,cAFM;AAGfmB,qBAAa,CAAC,SAAD,CAHE;AAIfC,mBAAW,0BAAS;AAClBH,iBAAOI,KAAP;AACD,SANc;AAOfC,mBAAW,2BAAU;AACnBN,kBAAQO,MAAR;AACD;AATc,OAAjB;AAWD,KAZM,EAYJC,IAZI,CAYC,kBAAU;AAChB,UAAIC,eAAeF,OAAO,CAAP,EAAUG,cAA7B;AACA,6BAAS,eAAT,EAA0BD,YAA1B;;AAEAX,iBAAWa,KAAX,CACE;;;6CADF,EAKE,CACEF,YADF,EAEEjB,WAAWoB,eAAX,IAA8B,IAA9B,GACI,IAAIC,IAAJ,CAASrB,WAAWoB,eAApB,CADJ,GAEIpB,WAAWoB,eAJjB,EAKEpB,WAAWsB,UALb,EAMEtB,WAAWuB,cANb,EAOEvB,WAAWwB,gBAPb,EAQExB,WAAWK,WARb,EASEL,WAAWyB,iBATb,EAUEzB,WAAW0B,OAVb,EAWE1B,WAAWE,iBAXb,EAYEF,WAAW2B,gBAZb,EAaE3B,WAAW4B,iBAbb,EAcE5B,WAAW6B,UAdb,EAeE,IAAIR,IAAJ,EAfF,CALF,EAsBE,UAACR,KAAD,EAAQiB,YAAR,EAAyB;AACvB,YAAIjB,KAAJ,EAAW;AACT,0CAAoBhB,EAApB,EAAwBS,UAAxB;AACAV,eAAKiB,KAAL;AACD;;AAED,+BAAS,kBAAT,EAA6BiB,YAA7B;;AAEA,YAAIA,aAAaC,QAAb,IAAyB,IAA7B,EAAmC;AACjC,iCAAS,iBAAT,EAA4BD,aAAaC,QAAzC;;AAEA,cAAMC,gBAAgB,CACpB,eADoB,EAEpB,SAFoB,EAGpB,WAHoB,EAIpB,eAJoB,EAKpB,gBALoB,EAMpB,gBANoB,EAOpB,kBAPoB,EAQpB,aARoB,CAAtB;;AAWA1B,qBAAWa,KAAX,CACE,0CACEa,cAAcC,IAAd,CAAmB,GAAnB,CADF,GAEE,kCAHJ,EAIE,CACE,8BAAkB;AAChBC,+BAAmBF,aADH;AAEhBG,sBAAUnC,WAAWoC,aAFL;AAGhBC,8BAAkB,CAACP,aAAaC,QAAd,CAHF;AAIhBrC,iBAAKA;AAJW,WAAlB,CADF,CAJF,EAYE,UAACmB,KAAD,EAAQyB,cAAR,EAA2B;AACzB,gBAAIzB,KAAJ,EAAW;AACT,qCAAS,SAAT,EAAoBA,KAApB;AACA,8CAAoBhB,EAApB,EAAwBS,UAAxB;AACAV,mBAAKiB,KAAL;AACD;;AAEDnB,gBAAIS,OAAJ,GAAc;AACZoC,iCAAmBtB,YADP;AAEZuB,2CAA6BV,aAAaC,QAF9B;AAGZU,8BAAgB/C,IAAIS,OAAJ,CAAYsC;AAHhB,aAAd;AAKA,4CAAoB5C,EAApB,EAAwBS,UAAxB;AACAV;AACD,WA1BH;AA4BD,SA1CD,MA0CO;AACL,0CAAoBC,EAApB,EAAwBS,UAAxB;AACAV,eAAKiB,KAAL;AACD;AACF,OA5EH;AA8ED,KA9FM,CAAP;AA+FD,GA3GD,CA2GE,OAAO6B,CAAP,EAAU;AACV9C,SAAK8C,CAAL;AACD;AACF,CAjHD;;AAmHA,IAAIC,yBAAyB,SAAzBA,sBAAyB,CAACjD,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/C,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;AACA,QAAIS,aAAaZ,IAAIY,UAArB;;AAEAA,eAAWa,KAAX,CACE;;oCAAA,GAGEzB,IAAIyB,KAAJ,CAAUoB,iBAHZ,GAIE,GALJ,EAOE,UAAC1B,KAAD,EAAQiB,YAAR,EAAyB;AACvB,UAAIjB,KAAJ,EAAW;AACT,wCAAoBhB,EAApB,EAAwBS,UAAxB;AACAV,aAAKiB,KAAL;AACD;;AAED,6BAAS,UAAT,EAAqBiB,YAArB;AACA,UAAIA,aAAac,MAAb,IAAuB,CAA3B,EAA8B;AAC5B,+BACE,+BADF,EAEEd,aAAa,CAAb,EAAgBU,2BAFlB;AAIAlC,mBAAWa,KAAX,CACE;8FADF,EAGEW,aAAa,CAAb,EAAgBU,2BAHlB,EAIE,UAAC3B,KAAD,EAAQuB,aAAR,EAA0B;AACxB,cAAIvB,KAAJ,EAAW;AACT,4CAAoBhB,EAApB,EAAwBS,UAAxB;AACAV,iBAAKiB,KAAL;AACD;AACDnB,cAAIS,OAAJ,gBACK2B,aAAa,CAAb,CADL,EAEK,EAAEM,4BAAF,EAFL,EAGK;AACDS,sCACEf,aAAa,CAAb,EAAgBgB;AAFjB,WAHL;AAQA,0CAAoBjD,EAApB,EAAwBS,UAAxB;AACAV;AACA,iCAAS,kBAAT,EAA6BF,IAAIS,OAAjC;AACD,SApBH;AAsBD,OA3BD,MA2BO;AACLT,YAAIS,OAAJ,GAAc2B,YAAd;AACA,wCAAoBjC,EAApB,EAAwBS,UAAxB;AACAV;AACD;AACF,KA9CH;AAgDA;AACD,GAxDD,CAwDE,OAAO8C,CAAP,EAAU;AACV9C,SAAK8C,CAAL;AACD;AACF,CA5DD;;AA8DA;AACA,IAAIK,mBAAmB,SAAnBA,gBAAmB,CAACrD,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACzC,MAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,SAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,MAAIF,KAAKH,IAAIG,EAAb;AACA,MAAIS,aAAaZ,IAAIY,UAArB;AACA,MAAIN,aAAa,sBAAO,EAAP,EAAWN,IAAIO,IAAf,CAAjB;;AAEA,MAAI+C,UAAUhD,WAAWoC,aAAzB;AACA,MAAIa,MAAM,EAAV;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,QAAQJ,MAA5B,EAAoCM,GAApC,EAAyC;AACvC,2BAAS,iBAAT,EAA4BF,QAAQE,CAAR,EAAWC,aAAvC;AACA,QAAIC,iBACFJ,QAAQE,CAAR,EAAWG,gBAAX,GAA8BL,QAAQE,CAAR,EAAWI,cAD3C;;AAGAL,WACE,8DACAG,cADA,GAEA,yCAFA,GAGAJ,QAAQE,CAAR,EAAWC,aAHX,GAIA,IALF;AAMD;AACD,yBAAS,OAAT,EAAkBF,GAAlB;AACA,MAAIA,OAAO,EAAX,EAAe;AACb3C,eAAWa,KAAX,CAAiB8B,GAAjB,EAAsB,UAACpC,KAAD,EAAQE,MAAR,EAAmB;AACvC,UAAIF,KAAJ,EAAW;AACT,wCAAoBhB,EAApB,EAAwBS,UAAxB;AACAV,aAAKiB,KAAL;AACD;AACDnB,UAAI6D,IAAJ,GAAWxC,MAAX;AACAnB;AACD,KAPD;AAQD,GATD,MASO;AACL,oCAAoBC,EAApB,EAAwBS,UAAxB;AACAZ,QAAIS,OAAJ,GAAc,EAAd;AACAP;AACD;AACF,CArCD;;AAuCA;AACA,IAAI4D,sBAAsB,SAAtBA,mBAAsB,CAAC9D,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC5C,MAAI6D,iBAAiB;AACnBnC,gBAAY;AADO,GAArB;AAGA,MAAI;AACF,QAAI5B,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;AACAA,OAAG6D,aAAH,CAAiB,UAAC7C,KAAD,EAAQP,UAAR,EAAuB;AACtC,UAAIO,KAAJ,EAAW;AACTjB,aAAKiB,KAAL;AACD;AACD,UAAI8C,QAAQ,2BAAe,sBAAOF,cAAP,EAAuB/D,IAAIyB,KAA3B,CAAf,CAAZ;AACAb,iBAAWa,KAAX,CACE;8DAAA,GAEEwC,MAAMC,SAFR,GAGE,8CAJJ,EAKED,MAAME,MALR,EAME,UAAChD,KAAD,EAAQE,MAAR,EAAmB;AACjB,wCAAoBlB,EAApB,EAAwBS,UAAxB;AACA,YAAIO,KAAJ,EAAW;AACTjB,eAAKiB,KAAL;AACD;AACDnB,YAAIS,OAAJ,GAAcY,MAAd;AACAnB;AACD,OAbH;AAeD,KApBD;AAqBD,GA1BD,CA0BE,OAAO8C,CAAP,EAAU;AACV9C,SAAK8C,CAAL;AACD;AACF,CAjCD;;AAmCAoB,OAAOC,OAAP,GAAiB;AACftE,gDADe;AAEfkD,gDAFe;AAGfI,oCAHe;AAIfS;AAJe,CAAjB","file":"POSCreditSettlement.js","sourcesContent":["\"use strict\";\nimport extend from \"extend\";\nimport {\n  whereCondition,\n  runningNumberGen,\n  releaseDBConnection,\n  jsonArrayToObject\n} from \"../../utils\";\nimport httpStatus from \"../../utils/httpStatus\";\nimport { debugFunction, debugLog } from \"../../utils/logging\";\n\nlet billingCounter = 0;\n//created by Nowshad :to save POS Cancellation data\nlet addPOSCreidtSettlement = (req, res, next) => {\n  debugFunction(\"addPOSCreidtSettlement\");\n  billingCounter = billingCounter + 1;\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let inputParam = extend({}, req.body);\n\n    inputParam.reciept_header_id = req.records.receipt_header_id;\n    inputParam.hospital_id = 1;\n\n    let connection = req.connection;\n\n    return new Promise((resolve, reject) => {\n      runningNumberGen({\n        db: connection,\n        counter: billingCounter,\n        module_desc: [\"POS_CRD\"],\n        onFailure: error => {\n          reject(error);\n        },\n        onSuccess: result => {\n          resolve(result);\n        }\n      });\n    }).then(result => {\n      let documentCode = result[0].completeNumber;\n      debugLog(\"documentCode:\", documentCode);\n\n      connection.query(\n        \"INSERT INTO hims_f_pos_credit_header ( pos_credit_number, pos_credit_date, patient_id, reciept_amount, write_off_amount,\\\n          hospital_id,recievable_amount, remarks, reciept_header_id,transaction_type, write_off_account,\\\n          created_by, created_date) \\\n          VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n        [\n          documentCode,\n          inputParam.pos_credit_date != null\n            ? new Date(inputParam.pos_credit_date)\n            : inputParam.pos_credit_date,\n          inputParam.patient_id,\n          inputParam.reciept_amount,\n          inputParam.write_off_amount,\n          inputParam.hospital_id,\n          inputParam.recievable_amount,\n          inputParam.remarks,\n          inputParam.reciept_header_id,\n          inputParam.transaction_type,\n          inputParam.write_off_account,\n          inputParam.created_by,\n          new Date()\n        ],\n        (error, headerResult) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          debugLog(\" pos header id :\", headerResult);\n\n          if (headerResult.insertId != null) {\n            debugLog(\"Billing Header \", headerResult.insertId);\n\n            const insurtColumns = [\n              \"pos_header_id\",\n              \"include\",\n              \"bill_date\",\n              \"credit_amount\",\n              \"receipt_amount\",\n              \"balance_amount\",\n              \"previous_balance\",\n              \"bill_amount\"\n            ];\n\n            connection.query(\n              \"INSERT INTO hims_f_pos_credit_detail(\" +\n                insurtColumns.join(\",\") +\n                \", pos_credit_header_id) VALUES ?\",\n              [\n                jsonArrayToObject({\n                  sampleInputObject: insurtColumns,\n                  arrayObj: inputParam.criedtdetails,\n                  newFieldToInsert: [headerResult.insertId],\n                  req: req\n                })\n              ],\n              (error, detailsRecords) => {\n                if (error) {\n                  debugLog(\"error: \", error);\n                  releaseDBConnection(db, connection);\n                  next(error);\n                }\n\n                req.records = {\n                  pos_credit_number: documentCode,\n                  hims_f_pos_credit_header_id: headerResult.insertId,\n                  receipt_number: req.records.receipt_number\n                };\n                releaseDBConnection(db, connection);\n                next();\n              }\n            );\n          } else {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet getPOSCreidtSettlement = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let connection = req.connection;\n\n    connection.query(\n      \"SELECT *, bh.reciept_header_id as cal_receipt_header_id FROM hims_f_pos_credit_header bh \\\n      inner join hims_f_patient as PAT on bh.patient_id = PAT.hims_d_patient_id \\\n      where  bh.pos_credit_number='\" +\n        req.query.pos_credit_number +\n        \"'\",\n\n      (error, headerResult) => {\n        if (error) {\n          releaseDBConnection(db, connection);\n          next(error);\n        }\n\n        debugLog(\"result: \", headerResult);\n        if (headerResult.length != 0) {\n          debugLog(\n            \"hims_f_pos_credit_header_id: \",\n            headerResult[0].hims_f_pos_credit_header_id\n          );\n          connection.query(\n            \"select * from hims_f_pos_credit_detail bh inner join hims_f_pharmacy_pos_header as pos on \\\n            bh.pos_header_id = pos.hims_f_pharmacy_pos_header_id where pos_credit_header_id=?\",\n            headerResult[0].hims_f_pos_credit_header_id,\n            (error, criedtdetails) => {\n              if (error) {\n                releaseDBConnection(db, connection);\n                next(error);\n              }\n              req.records = {\n                ...headerResult[0],\n                ...{ criedtdetails },\n                ...{\n                  hims_f_receipt_header_id:\n                    headerResult[0].cal_receipt_header_id\n                }\n              };\n              releaseDBConnection(db, connection);\n              next();\n              debugLog(\"Billing Result: \", req.records);\n            }\n          );\n        } else {\n          req.records = headerResult;\n          releaseDBConnection(db, connection);\n          next();\n        }\n      }\n    );\n    // });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to Update PO Entry\nlet updatePOSBilling = (req, res, next) => {\n  if (req.db == null) {\n    next(httpStatus.dataBaseNotInitilizedError());\n  }\n  let db = req.db;\n  let connection = req.connection;\n  let inputParam = extend({}, req.body);\n\n  let details = inputParam.criedtdetails;\n  let qry = \"\";\n  for (let i = 0; i < details.length; i++) {\n    debugLog(\"pos_header_id: \", details[i].pos_header_id);\n    let balance_credit =\n      details[i].previous_balance - details[i].receipt_amount;\n\n    qry +=\n      \" UPDATE `hims_f_pharmacy_pos_header` SET balance_credit='\" +\n      balance_credit +\n      \"' WHERE hims_f_pharmacy_pos_header_id='\" +\n      details[i].pos_header_id +\n      \"';\";\n  }\n  debugLog(\"qry: \", qry);\n  if (qry != \"\") {\n    connection.query(qry, (error, result) => {\n      if (error) {\n        releaseDBConnection(db, connection);\n        next(error);\n      }\n      req.data = result;\n      next();\n    });\n  } else {\n    releaseDBConnection(db, connection);\n    req.records = {};\n    next();\n  }\n};\n\n//Created by nowshad to get the POS which has creidt amount\nlet getPatientPOSCriedt = (req, res, next) => {\n  let whereStatement = {\n    patient_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      let where = whereCondition(extend(whereStatement, req.query));\n      connection.query(\n        \"SELECT * from hims_f_pharmacy_pos_header  \\\n           WHERE record_status='A' AND balance_credit > 0 AND\" +\n          where.condition +\n          \" order by hims_f_pharmacy_pos_header_id desc\",\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addPOSCreidtSettlement,\n  getPOSCreidtSettlement,\n  updatePOSBilling,\n  getPatientPOSCriedt\n};\n"]}