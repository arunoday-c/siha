{"version":3,"sources":["../../../../src/Pharmacy/model/pharmacy.js"],"names":["addItemMaster","req","res","next","db","httpStatus","dataBaseNotInitilizedError","body","input","getConnection","error","connection","beginTransaction","rollback","query","item_code","item_description","structure_id","generic_id","category_id","group_id","item_uom_id","purchase_uom_id","sales_uom_id","stocking_uom_id","service_id","addl_information","decimals","purchase_cost","markup_percent","sales_price","Date","created_by","updated_by","result","insertId","insurtColumns","join","sampleInputObject","arrayObj","detail_item_uom","newFieldToInsert","detailResult","commit","records","e","addItemCategory","category_desc","addItemGeneric","generic_name","addItemGroup","group_description","addPharmacyUom","uom_description","addPharmacyLocation","location_description","location_type","allow_pos","getItemMaster","selectWhere","hims_d_item_master_id","where","condition","values","getItemMasterAndItemUom","getItemCategory","hims_d_item_category_id","getItemGeneric","hims_d_item_generic_id","getItemGroup","hims_d_item_group_id","getPharmacyUom","hims_d_pharmacy_uom_id","getPharmacyLocation","hims_d_pharmacy_location_id","updateItemCategory","category_status","record_status","release","updateItemGroup","group_status","updateItemGeneric","item_generic_status","updatePharmacyUom","updatePharmacyLocation","location_status","updateItemMasterAndUom","queryBuilder","inputs","form_id","storage_id","item_status","Promise","resolve","reject","insertItemUomMap","length","insertUomMapResult","then","updateUomMapResult","inputParam","qry","i","item_master_id","uom_id","stocking_uom","conversion_factor","toLocaleString","hims_m_item_uom_id","results","updateItemForm","form_description","item_form_status","hims_d_item_form_id","updateItemStorage","storage_description","storage_status","hims_d_item_storage_id","getItemForm","getItemStorage","addItemForm","addItemStorage","addLocationPermission","user_id","location_id","allow","getLocationPermission","hims_m_location_permission_id","updateLocationPermission","module","exports"],"mappings":"AAAA;;AACA;;AAKA;;;;AACA;;;;AACA;;;;AAEA;AACA,IAAIA,gBAAgB,SAAhBA,aAAgB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACtC,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;AACA,2BAAS,QAAT,EAAmBH,IAAIM,IAAvB;;AAEA,QAAIC,QAAQ,sBAAO,EAAP,EAAWP,IAAIM,IAAf,CAAZ;;AAEAH,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTP,aAAKO,KAAL;AACD;AACDC,iBAAWC,gBAAX,CAA4B,iBAAS;AACnC,YAAIF,KAAJ,EAAW;AACTC,qBAAWE,QAAX,CAAoB,YAAM;AACxB,4CAAoBT,EAApB,EAAwBO,UAAxB;AACAR,iBAAKO,KAAL;AACD,WAHD;AAID;AACD;AACA;AACA;AACA;AACA;AACAC,mBAAWG,KAAX,CACE;;;;uDADF,EAME,CACEN,MAAMO,SADR,EAEEP,MAAMQ,gBAFR,EAGER,MAAMS,YAHR,EAIET,MAAMU,UAJR,EAKEV,MAAMW,WALR,EAMEX,MAAMY,QANR,EAOEZ,MAAMa,WAPR,EAQEb,MAAMc,eARR,EASEd,MAAMe,YATR,EAUEf,MAAMgB,eAVR,EAWEhB,MAAMiB,UAXR,EAYEjB,MAAMkB,gBAZR,EAaElB,MAAMmB,QAbR,EAcEnB,MAAMoB,aAdR,EAeEpB,MAAMqB,cAfR,EAgBErB,MAAMsB,WAhBR,EAiBE,IAAIC,IAAJ,EAjBF,EAkBEvB,MAAMwB,UAlBR,EAmBE,IAAID,IAAJ,EAnBF,EAoBEvB,MAAMyB,UApBR,CANF,EA4BE,UAACvB,KAAD,EAAQwB,MAAR,EAAmB;AACjB,cAAIxB,KAAJ,EAAW;AACTC,uBAAWE,QAAX,CAAoB,YAAM;AACxB,8CAAoBT,EAApB,EAAwBO,UAAxB;AACAR,mBAAKO,KAAL;AACD,aAHD;AAID;;AAED,iCAAS,mBAAT,EAA8BwB,OAAOC,QAArC;AACA;AACA;;AAEA,cAAID,OAAOC,QAAP,IAAmB,IAAvB,EAA6B;AAC3B,gBAAMC,gBAAgB,CACpB,QADoB,EAEpB,cAFoB,EAGpB,mBAHoB,EAKpB,YALoB,EAMpB,YANoB,CAAtB;;AASAzB,uBAAWG,KAAX,CACE,iCACEsB,cAAcC,IAAd,CAAmB,GAAnB,CADF,GAEE,qDAHJ,EAIE,CACE,8BAAkB;AAChBC,iCAAmBF,aADH;AAEhBG,wBAAUtC,IAAIM,IAAJ,CAASiC,eAFH;AAGhBC,gCAAkB,CAACP,OAAOC,QAAR,EAAkB,IAAIJ,IAAJ,EAAlB,EAA8B,IAAIA,IAAJ,EAA9B,CAHF;AAIhB9B,mBAAKA;AAJW,aAAlB,CADF,CAJF,EAYE,UAACS,KAAD,EAAQgC,YAAR,EAAyB;AACvB,kBAAIhC,KAAJ,EAAW;AACTC,2BAAWE,QAAX,CAAoB,YAAM;AACxB,kDAAoBT,EAApB,EAAwBO,UAAxB;AACAR,uBAAKO,KAAL;AACD,iBAHD;AAID;;AAEDC,yBAAWgC,MAAX,CAAkB,iBAAS;AACzB,oBAAIjC,KAAJ,EAAW;AACTC,6BAAWE,QAAX,CAAoB,YAAM;AACxB,oDAAoBT,EAApB,EAAwBO,UAAxB;AACAR,yBAAKO,KAAL;AACD,mBAHD;AAID;AACD,gDAAoBN,EAApB,EAAwBO,UAAxB;AACAV,oBAAI2C,OAAJ,GAAcF,YAAd;AACAvC;AACD,eAVD;AAWD,aA/BH;AAiCD,WA3CD,MA2CO;AACLQ,uBAAWE,QAAX,CAAoB,YAAM;AACxB,8CAAoBT,EAApB,EAAwBO,UAAxB;AACAR,mBAAKO,KAAL;AACD,aAHD;AAID;AACF,SAzFH;AA2FD,OAvGD;AAwGD,KA5GD;AA6GD,GAtHD,CAsHE,OAAOmC,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CA1HD;;AA4HA;AACA,IAAIC,kBAAkB,SAAlBA,eAAkB,CAAC7C,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxC,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;AACA,QAAII,QAAQ,sBAAO,EAAP,EAAWP,IAAIM,IAAf,CAAZ;;AAEAH,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTP,aAAKO,KAAL;AACD;;AAEDC,iBAAWG,KAAX,CACE;yBADF,EAGE,CACEN,MAAMuC,aADR,EAEE,IAAIhB,IAAJ,EAFF,EAGEvB,MAAMwB,UAHR,EAIE,IAAID,IAAJ,EAJF,EAKEvB,MAAMyB,UALR,CAHF,EAUE,UAACvB,KAAD,EAAQwB,MAAR,EAAmB;AACjB,wCAAoB9B,EAApB,EAAwBO,UAAxB;AACA,YAAID,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAjBH;AAmBD,KAxBD;AAyBD,GAhCD,CAgCE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CApCD;AAqCA;AACA,IAAIG,iBAAiB,SAAjBA,cAAiB,CAAC/C,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvC,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;AACA,QAAII,QAAQ,sBAAO,EAAP,EAAWP,IAAIM,IAAf,CAAZ;;AAEAH,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTP,aAAKO,KAAL;AACD;;AAEDC,iBAAWG,KAAX,CACE;yBADF,EAGE,CACEN,MAAMyC,YADR,EAEE,IAAIlB,IAAJ,EAFF,EAGEvB,MAAMwB,UAHR,EAIE,IAAID,IAAJ,EAJF,EAKEvB,MAAMyB,UALR,CAHF,EAUE,UAACvB,KAAD,EAAQwB,MAAR,EAAmB;AACjB,wCAAoB9B,EAApB,EAAwBO,UAAxB;AACA,YAAID,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAjBH;AAmBD,KAxBD;AAyBD,GAhCD,CAgCE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CApCD;;AAsCA;AACA,IAAIK,eAAe,SAAfA,YAAe,CAACjD,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACrC,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;AACA,QAAII,QAAQ,sBAAO,EAAP,EAAWP,IAAIM,IAAf,CAAZ;;AAEAH,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTP,aAAKO,KAAL;AACD;;AAEDC,iBAAWG,KAAX,CACE;2BADF,EAGE,CACEN,MAAM2C,iBADR,EAEE3C,MAAMW,WAFR,EAGEX,MAAMwB,UAHR,EAIE,IAAID,IAAJ,EAJF,EAKEvB,MAAMyB,UALR,EAME,IAAIF,IAAJ,EANF,CAHF,EAWE,UAACrB,KAAD,EAAQwB,MAAR,EAAmB;AACjB,wCAAoB9B,EAApB,EAAwBO,UAAxB;AACA,YAAID,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAlBH;AAoBD,KAzBD;AA0BD,GAjCD,CAiCE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CArCD;;AAuCA;AACA,IAAIO,iBAAiB,SAAjBA,cAAiB,CAACnD,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvC,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;AACA,QAAII,QAAQ,sBAAO,EAAP,EAAWP,IAAIM,IAAf,CAAZ;;AAEAH,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTP,aAAKO,KAAL;AACD;;AAEDC,iBAAWG,KAAX,CACE;yBADF,EAGE,CACEN,MAAM6C,eADR,EAEE,IAAItB,IAAJ,EAFF,EAGEvB,MAAMwB,UAHR,EAIE,IAAID,IAAJ,EAJF,EAKEvB,MAAMyB,UALR,CAHF,EAUE,UAACvB,KAAD,EAAQwB,MAAR,EAAmB;AACjB,wCAAoB9B,EAApB,EAAwBO,UAAxB;AACA,YAAID,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAjBH;AAmBD,KAxBD;AAyBD,GAhCD,CAgCE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CApCD;;AAsCA;AACA,IAAIS,sBAAsB,SAAtBA,mBAAsB,CAACrD,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC5C,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;AACA,QAAII,QAAQ,sBAAO,EAAP,EAAWP,IAAIM,IAAf,CAAZ;;AAEAH,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTP,aAAKO,KAAL;AACD;;AAEDC,iBAAWG,KAAX,CACE;6BADF,EAGE,CACEN,MAAM+C,oBADR,EAEE/C,MAAMgD,aAFR,EAGEhD,MAAMiD,SAHR,EAIE,IAAI1B,IAAJ,EAJF,EAKEvB,MAAMwB,UALR,EAME,IAAID,IAAJ,EANF,EAOEvB,MAAMyB,UAPR,CAHF,EAYE,UAACvB,KAAD,EAAQwB,MAAR,EAAmB;AACjB,wCAAoB9B,EAApB,EAAwBO,UAAxB;AACA,YAAID,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAnBH;AAqBD,KA1BD;AA2BD,GAlCD,CAkCE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CAtCD;;AAwCA;AACA,IAAIa,gBAAgB,SAAhBA,aAAgB,CAACzD,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACtC,MAAIwD,cAAc;AAChBC,2BAAuB;AADP,GAAlB;AAGA,MAAI;AACF,QAAI3D,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;;AAEA,QAAIyD,QAAQ,2BAAe,sBAAOF,WAAP,EAAoB1D,IAAIa,KAAxB,CAAf,CAAZ;;AAEAV,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtCA,iBAAWG,KAAX,CACE,iEACE+C,MAAMC,SADR,GAEE,uCAHJ,EAIED,MAAME,MAJR,EAKE,UAACrD,KAAD,EAAQwB,MAAR,EAAmB;AACjB,wCAAoB9B,EAApB,EAAwBO,UAAxB;AACA,YAAID,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAZH;AAcD,KAfD;AAgBD,GAxBD,CAwBE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CA/BD;;AAiCA;AACA,IAAImB,0BAA0B,SAA1BA,uBAA0B,CAAC/D,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAChD,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;;AAEAA,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtCA,iBAAWG,KAAX,CACE;;;;;oFADF,EAOE,UAACJ,KAAD,EAAQwB,MAAR,EAAmB;AACjB,wCAAoB9B,EAApB,EAAwBO,UAAxB;AACA,YAAID,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAdH;AAgBD,KAjBD;AAkBD,GAxBD,CAwBE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CA5BD;;AA8BA;AACA,IAAIoB,kBAAkB,SAAlBA,eAAkB,CAAChE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxC,MAAIwD,cAAc;AAChBO,6BAAyB;AADT,GAAlB;AAGA,MAAI;AACF,QAAIjE,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;;AAEA,QAAIyD,QAAQ,2BAAe,sBAAOF,WAAP,EAAoB1D,IAAIa,KAAxB,CAAf,CAAZ;;AAEAV,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtCA,iBAAWG,KAAX,CACE,mEACE+C,MAAMC,SADR,GAEE,yCAHJ,EAIED,MAAME,MAJR,EAKE,UAACrD,KAAD,EAAQwB,MAAR,EAAmB;AACjB,wCAAoB9B,EAApB,EAAwBO,UAAxB;AACA,YAAID,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAZH;AAcD,KAfD;AAgBD,GAxBD,CAwBE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CA/BD;;AAiCA;AACA,IAAIsB,iBAAiB,SAAjBA,cAAiB,CAAClE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvC,MAAIwD,cAAc;AAChBS,4BAAwB;AADR,GAAlB;AAGA,MAAI;AACF,QAAInE,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;;AAEA,QAAIyD,QAAQ,2BAAe,sBAAOF,WAAP,EAAoB1D,IAAIa,KAAxB,CAAf,CAAZ;;AAEAV,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtCA,iBAAWG,KAAX,CACE,kEACE+C,MAAMC,SADR,GAEE,wCAHJ,EAIED,MAAME,MAJR,EAKE,UAACrD,KAAD,EAAQwB,MAAR,EAAmB;AACjB,wCAAoB9B,EAApB,EAAwBO,UAAxB;AACA,YAAID,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAZH;AAcD,KAfD;AAgBD,GAxBD,CAwBE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CA/BD;;AAiCA;AACA,IAAIwB,eAAe,SAAfA,YAAe,CAACpE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACrC,MAAIwD,cAAc;AAChBW,0BAAsB;AADN,GAAlB;AAGA,MAAI;AACF,QAAIrE,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;;AAEA,QAAIyD,QAAQ,2BAAe,sBAAOF,WAAP,EAAoB1D,IAAIa,KAAxB,CAAf,CAAZ;;AAEAV,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtCA,iBAAWG,KAAX,CACE,gEACE+C,MAAMC,SADR,GAEE,sCAHJ,EAIED,MAAME,MAJR,EAKE,UAACrD,KAAD,EAAQwB,MAAR,EAAmB;AACjB,wCAAoB9B,EAApB,EAAwBO,UAAxB;AACA,YAAID,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAZH;AAcD,KAfD;AAgBD,GAxBD,CAwBE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CA/BD;;AAiCA;AACA,IAAI0B,iBAAiB,SAAjBA,cAAiB,CAACtE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvC,MAAIwD,cAAc;AAChBa,4BAAwB;AADR,GAAlB;AAGA,MAAI;AACF,QAAIvE,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;;AAEA,QAAIyD,QAAQ,2BAAe,sBAAOF,WAAP,EAAoB1D,IAAIa,KAAxB,CAAf,CAAZ;;AAEAV,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtCA,iBAAWG,KAAX,CACE,mEACE+C,MAAMC,SADR,GAEE,wCAHJ,EAIED,MAAME,MAJR,EAKE,UAACrD,KAAD,EAAQwB,MAAR,EAAmB;AACjB,wCAAoB9B,EAApB,EAAwBO,UAAxB;AACA,YAAID,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAZH;AAcD,KAfD;AAgBD,GAxBD,CAwBE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CA/BD;;AAiCA;AACA,IAAI4B,sBAAsB,SAAtBA,mBAAsB,CAACxE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC5C,MAAIwD,cAAc;AAChBe,iCAA6B;AADb,GAAlB;AAGA,MAAI;AACF,QAAIzE,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;;AAEA,QAAIyD,QAAQ,2BAAe,sBAAOF,WAAP,EAAoB1D,IAAIa,KAAxB,CAAf,CAAZ;;AAEAV,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtCA,iBAAWG,KAAX,CACE,uEACE+C,MAAMC,SADR,GAEE,6CAHJ,EAIED,MAAME,MAJR,EAKE,UAACrD,KAAD,EAAQwB,MAAR,EAAmB;AACjB,wCAAoB9B,EAApB,EAAwBO,UAAxB;AACA,YAAID,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAZH;AAcD,KAfD;AAgBD,GAxBD,CAwBE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CA/BD;;AAiCA;AACA,IAAI8B,qBAAqB,SAArBA,kBAAqB,CAAC1E,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC3C,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;AACA,QAAII,QAAQ,sBAAO,EAAP,EAAWP,IAAIM,IAAf,CAAZ;AACAH,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTP,aAAKO,KAAL;AACD;AACDC,iBAAWG,KAAX,CACE;;mEADF,EAIE,CACEN,MAAMuC,aADR,EAEEvC,MAAMoE,eAFR,EAGE,IAAI7C,IAAJ,EAHF,EAIEvB,MAAMyB,UAJR,EAKEzB,MAAMqE,aALR,EAMErE,MAAM0D,uBANR,CAJF,EAYE,UAACxD,KAAD,EAAQwB,MAAR,EAAmB;AACjBvB,mBAAWmE,OAAX;AACA,YAAIpE,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAnBH;AAqBD,KAzBD;AA0BD,GAhCD,CAgCE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CApCD;;AAsCA;AACA,IAAIkC,kBAAkB,SAAlBA,eAAkB,CAAC9E,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxC,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;AACA,QAAII,QAAQ,sBAAO,EAAP,EAAWP,IAAIM,IAAf,CAAZ;AACAH,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTP,aAAKO,KAAL;AACD;AACDC,iBAAWG,KAAX,CACE;qHADF,EAGE,CACEN,MAAM2C,iBADR,EAEE3C,MAAMW,WAFR,EAGEX,MAAMwE,YAHR,EAIExE,MAAMyB,UAJR,EAKE,IAAIF,IAAJ,EALF,EAMEvB,MAAMqE,aANR,EAOErE,MAAM8D,oBAPR,CAHF,EAYE,UAAC5D,KAAD,EAAQwB,MAAR,EAAmB;AACjBvB,mBAAWmE,OAAX;AACA,YAAIpE,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAnBH;AAqBD,KAzBD;AA0BD,GAhCD,CAgCE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CApCD;;AAsCA;AACA,IAAIoC,oBAAoB,SAApBA,iBAAoB,CAAChF,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1C,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;AACA,QAAII,QAAQ,sBAAO,EAAP,EAAWP,IAAIM,IAAf,CAAZ;AACAH,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTP,aAAKO,KAAL;AACD;AACDC,iBAAWG,KAAX,CACE;qHADF,EAGE,CACEN,MAAMyC,YADR,EAEEzC,MAAM0E,mBAFR,EAGE,IAAInD,IAAJ,EAHF,EAIEvB,MAAMyB,UAJR,EAKEzB,MAAMqE,aALR,EAMErE,MAAM4D,sBANR,CAHF,EAWE,UAAC1D,KAAD,EAAQwB,MAAR,EAAmB;AACjBvB,mBAAWmE,OAAX;AACA,YAAIpE,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAlBH;AAoBD,KAxBD;AAyBD,GA/BD,CA+BE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CAnCD;;AAqCA;AACA,IAAIsC,oBAAoB,SAApBA,iBAAoB,CAAClF,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1C,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;AACA,QAAII,QAAQ,sBAAO,EAAP,EAAWP,IAAIM,IAAf,CAAZ;AACAH,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTP,aAAKO,KAAL;AACD;AACDC,iBAAWG,KAAX,CACE;mHADF,EAGE,CACEN,MAAM6C,eADR,EAEE,IAAItB,IAAJ,EAFF,EAGEvB,MAAMyB,UAHR,EAIEzB,MAAMqE,aAJR,EAKErE,MAAMgE,sBALR,CAHF,EAUE,UAAC9D,KAAD,EAAQwB,MAAR,EAAmB;AACjBvB,mBAAWmE,OAAX;AACA,YAAIpE,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAjBH;AAmBD,KAvBD;AAwBD,GA9BD,CA8BE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CAlCD;;AAoCA;AACA,IAAIuC,yBAAyB,SAAzBA,sBAAyB,CAACnF,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/C,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;AACA,QAAII,QAAQ,sBAAO,EAAP,EAAWP,IAAIM,IAAf,CAAZ;AACAH,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTP,aAAKO,KAAL;AACD;AACDC,iBAAWG,KAAX,CACE;2HADF,EAGE,CACEN,MAAM+C,oBADR,EAEE/C,MAAM6E,eAFR,EAGE7E,MAAMgD,aAHR,EAIEhD,MAAMiD,SAJR,EAKE,IAAI1B,IAAJ,EALF,EAMEvB,MAAMyB,UANR,EAOEzB,MAAMqE,aAPR,EAQErE,MAAMkE,2BARR,CAHF,EAaE,UAAChE,KAAD,EAAQwB,MAAR,EAAmB;AACjBvB,mBAAWmE,OAAX;AACA,YAAIpE,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OApBH;AAsBD,KA1BD;AA2BD,GAjCD,CAiCE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CArCD;;AAuCA;AACA,IAAIyC,yBAAyB,SAAzBA,sBAAyB,CAACrF,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/C,MAAI;AACF,gCAAc,yBAAd;AACA,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;;AAEA,QAAII,QAAQ,sBAAO,EAAP,EAAWP,IAAIM,IAAf,CAAZ;AACA,2BAAS,YAAT,EAAuBC,KAAvB;AACAJ,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTP,aAAKO,KAAL;AACD;AACDC,iBAAWC,gBAAX,CAA4B,iBAAS;AACnC,YAAIF,KAAJ,EAAW;AACTC,qBAAWE,QAAX,CAAoB,YAAM;AACxB,4CAAoBT,EAApB,EAAwBO,UAAxB;AACAR,iBAAKO,KAAL;AACD,WAHD;AAID;AACD,YAAI6E,eACF;;;;;qCADF;AAOA,YAAIC,SAAS,CACXhF,MAAMO,SADK,EAEXP,MAAMQ,gBAFK,EAGXR,MAAMS,YAHK,EAIXT,MAAMU,UAJK,EAKXV,MAAMW,WALK,EAMXX,MAAMY,QANK,EAOXZ,MAAMiF,OAPK,EAQXjF,MAAMkF,UARK,EASXlF,MAAMa,WATK,EAUXb,MAAMc,eAVK,EAWXd,MAAMe,YAXK,EAYXf,MAAMgB,eAZK,EAaXhB,MAAMmF,WAbK,EAcXnF,MAAMiB,UAdK,EAeXjB,MAAMkB,gBAfK,EAgBXlB,MAAMmB,QAhBK,EAiBXnB,MAAMoB,aAjBK,EAkBXpB,MAAMqB,cAlBK,EAmBXrB,MAAMsB,WAnBK,EAoBX,IAAIC,IAAJ,EApBW,EAqBXvB,MAAMyB,UArBK,EAsBXzB,MAAMqE,aAtBK,EAuBXrE,MAAMoD,qBAvBK,CAAb;;AA0BAjD,mBAAWG,KAAX,CAAiByE,YAAjB,EAA+BC,MAA/B,EAAuC,UAAC9E,KAAD,EAAQwB,MAAR,EAAmB;AACxD,cAAIxB,KAAJ,EAAW;AACTC,uBAAWE,QAAX,CAAoB,YAAM;AACxB,8CAAoBT,EAApB,EAAwBO,UAAxB;AACAR,mBAAKO,KAAL;AACD,aAHD;AAID;;AAED,cAAIwB,UAAU,IAAd,EAAoB;AAClB,gBAAI0D,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B,kBAAI;AACF,oBAAItF,MAAMuF,gBAAN,CAAuBC,MAAvB,IAAiC,CAArC,EAAwC;AACtC,sBAAM5D,gBAAgB,CACpB,QADoB,EAEpB,gBAFoB,EAGpB,cAHoB,EAIpB,mBAJoB,EAKpB,YALoB,EAMpB,YANoB,CAAtB;;AASAzB,6BAAWG,KAAX,CACE,iCACEsB,cAAcC,IAAd,CAAmB,GAAnB,CADF,GAEE,sCAHJ,EAIE,CACE,8BAAkB;AAChBC,uCAAmBF,aADH;AAEhBG,8BAAUtC,IAAIM,IAAJ,CAASwF,gBAFH;AAGhBtD,sCAAkB,CAAC,IAAIV,IAAJ,EAAD,EAAa,IAAIA,IAAJ,EAAb,CAHF;AAIhB9B,yBAAKA;AAJW,mBAAlB,CADF,CAJF,EAYE,UAACS,KAAD,EAAQuF,kBAAR,EAA+B;AAC7B,wBAAIvF,KAAJ,EAAW;AACTC,iCAAWE,QAAX,CAAoB,YAAM;AACxB,wDAAoBT,EAApB,EAAwBO,UAAxB;AACAR,6BAAKO,KAAL;AACD,uBAHD;AAID;AACD,2BAAOmF,QAAQI,kBAAR,CAAP;AACD,mBApBH;AAsBD,iBAhCD,MAgCO;AACL,yBAAOJ,SAAP;AACD;AACF,eApCD,CAoCE,OAAOhD,CAAP,EAAU;AACViD,uBAAOjD,CAAP;AACD;AACF,aAxCD,EAwCGqD,IAxCH,CAwCQ,mBAAW;AACjB,qCAAS,qBAAT;;AAEA,kBAAI1F,MAAM2F,kBAAN,CAAyBH,MAAzB,IAAmC,CAAvC,EAA0C;AACxC,oBAAII,aAAa,sBAAO,EAAP,EAAWnG,IAAIM,IAAJ,CAAS4F,kBAApB,CAAjB;;AAEA,oBAAIE,MAAM,EAAV;;AAEA,qBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIrG,IAAIM,IAAJ,CAAS4F,kBAAT,CAA4BH,MAAhD,EAAwDM,GAAxD,EAA6D;AAC3DD,yBACE,kDACAD,WAAWE,CAAX,EAAcC,cADd,GAEA,aAFA,GAGAH,WAAWE,CAAX,EAAcE,MAHd,GAIA,mBAJA,GAKAJ,WAAWE,CAAX,EAAcG,YALd,GAMA,wBANA,GAOAL,WAAWE,CAAX,EAAcI,iBAPd,GAQA,oBARA,GASAN,WAAWE,CAAX,EAAczB,aATd,GAUA,mBAVA,GAWA,IAAI9C,IAAJ,GAAW4E,cAAX,EAXA,GAYA,gBAZA,GAaA1G,IAAIM,IAAJ,CAAS0B,UAbT,GAcA,oDAdA,GAeAmE,WAAWE,CAAX,EAAcM,kBAfd,GAgBA,IAjBF;AAkBD;;AAEDjG,2BAAWG,KAAX,CAAiBuF,GAAjB,EAAsB,UAAC3F,KAAD,EAAQyF,kBAAR,EAA+B;AACnD,sBAAIzF,KAAJ,EAAW;AACTC,+BAAWE,QAAX,CAAoB,YAAM;AACxB,sDAAoBT,EAApB,EAAwBO,UAAxB;AACAR,2BAAKO,KAAL;AACD,qBAHD;AAID;;AAEDC,6BAAWgC,MAAX,CAAkB,iBAAS;AACzB,wBAAIjC,KAAJ,EAAW;AACTC,iCAAWE,QAAX,CAAoB,YAAM;AACxB,wDAAoBT,EAApB,EAAwBO,UAAxB;AACAR,6BAAKO,KAAL;AACD,uBAHD;AAID;AACD,oDAAoBN,EAApB,EAAwBO,UAAxB;AACAV,wBAAI2C,OAAJ,GAAcuD,kBAAd;AACAhG;AACD,mBAVD;AAWD,iBAnBD;AAoBD,eA9CD,MA8CO;AACLQ,2BAAWgC,MAAX,CAAkB,iBAAS;AACzB,sBAAIjC,KAAJ,EAAW;AACTC,+BAAWE,QAAX,CAAoB,YAAM;AACxB,sDAAoBT,EAApB,EAAwBO,UAAxB;AACAR,2BAAKO,KAAL;AACD,qBAHD;AAID;AACD,kDAAoBN,EAApB,EAAwBO,UAAxB;AACAV,sBAAI2C,OAAJ,GAAciE,OAAd;AACA1G;AACD,iBAVD;AAWD;AACF,aAtGD;AAuGD,WAxGD,MAwGO;AACLQ,uBAAWgC,MAAX,CAAkB,iBAAS;AACzB,kBAAIjC,KAAJ,EAAW;AACTC,2BAAWE,QAAX,CAAoB,YAAM;AACxB,kDAAoBT,EAApB,EAAwBO,UAAxB;AACAR,uBAAKO,KAAL;AACD,iBAHD;AAID;AACD,8CAAoBN,EAApB,EAAwBO,UAAxB;AACAV,kBAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,aAVD;AAWD;AACF,SA7HD;AA8HD,OAtKD;AAuKD,KA3KD;AA4KD,GArLD,CAqLE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CAzLD;;AA2LA;AACA,IAAIiE,iBAAiB,SAAjBA,cAAiB,CAAC7G,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvC,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;AACA,QAAII,QAAQ,sBAAO,EAAP,EAAWP,IAAIM,IAAf,CAAZ;AACAH,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTP,aAAKO,KAAL;AACD;AACDC,iBAAWG,KAAX,CACE;;+DADF,EAIE,CACEN,MAAMuG,gBADR,EAEEvG,MAAMwG,gBAFR,EAGE,IAAIjF,IAAJ,EAHF,EAIEvB,MAAMyB,UAJR,EAKEzB,MAAMqE,aALR,EAMErE,MAAMyG,mBANR,CAJF,EAYE,UAACvG,KAAD,EAAQwB,MAAR,EAAmB;AACjBvB,mBAAWmE,OAAX;AACA,YAAIpE,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAnBH;AAqBD,KAzBD;AA0BD,GAhCD,CAgCE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CApCD;;AAsCA;AACA,IAAIqE,oBAAoB,SAApBA,iBAAoB,CAACjH,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1C,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;AACA,QAAII,QAAQ,sBAAO,EAAP,EAAWP,IAAIM,IAAf,CAAZ;AACAH,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTP,aAAKO,KAAL;AACD;AACDC,iBAAWG,KAAX,CACE;;kEADF,EAIE,CACEN,MAAM2G,mBADR,EAEE3G,MAAM4G,cAFR,EAGE,IAAIrF,IAAJ,EAHF,EAIEvB,MAAMyB,UAJR,EAKEzB,MAAMqE,aALR,EAMErE,MAAM6G,sBANR,CAJF,EAYE,UAAC3G,KAAD,EAAQwB,MAAR,EAAmB;AACjBvB,mBAAWmE,OAAX;AACA,YAAIpE,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAnBH;AAqBD,KAzBD;AA0BD,GAhCD,CAgCE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CApCD;;AAsCA;AACA,IAAIyE,cAAc,SAAdA,WAAc,CAACrH,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACpC,MAAIwD,cAAc;AAChBsD,yBAAqB;AADL,GAAlB;AAGA,MAAI;AACF,QAAIhH,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;;AAEA,QAAIyD,QAAQ,2BAAe,sBAAOF,WAAP,EAAoB1D,IAAIa,KAAxB,CAAf,CAAZ;;AAEAV,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtCA,iBAAWG,KAAX,CACE,+DACE+C,MAAMC,SADR,GAEE,qCAHJ,EAIED,MAAME,MAJR,EAKE,UAACrD,KAAD,EAAQwB,MAAR,EAAmB;AACjB,wCAAoB9B,EAApB,EAAwBO,UAAxB;AACA,YAAID,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAZH;AAcD,KAfD;AAgBD,GAxBD,CAwBE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CA/BD;;AAiCA;AACA,IAAI0E,iBAAiB,SAAjBA,cAAiB,CAACtH,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvC,MAAIwD,cAAc;AAChB0D,4BAAwB;AADR,GAAlB;;AAIA,MAAI;AACF,QAAIpH,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;;AAEA,QAAIyD,QAAQ,2BAAe,sBAAOF,WAAP,EAAoB1D,IAAIa,KAAxB,CAAf,CAAZ;;AAEAV,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtCA,iBAAWG,KAAX,CACE,kEACE+C,MAAMC,SADR,GAEE,wCAHJ,EAIED,MAAME,MAJR,EAKE,UAACrD,KAAD,EAAQwB,MAAR,EAAmB;AACjB,wCAAoB9B,EAApB,EAAwBO,UAAxB;AACA,YAAID,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAZH;AAcD,KAfD;AAgBD,GAxBD,CAwBE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CAhCD;;AAkCA;AACA,IAAI2E,cAAc,SAAdA,WAAc,CAACvH,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACpC,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;AACA,QAAII,QAAQ,sBAAO,EAAP,EAAWP,IAAIM,IAAf,CAAZ;;AAEAH,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTP,aAAKO,KAAL;AACD;;AAEDC,iBAAWG,KAAX,CACE;2BADF,EAGE,CACEN,MAAMuG,gBADR,EAEE,GAFF,EAGE,IAAIhF,IAAJ,EAHF,EAIEvB,MAAMwB,UAJR,EAKE,IAAID,IAAJ,EALF,EAMEvB,MAAMyB,UANR,CAHF,EAWE,UAACvB,KAAD,EAAQwB,MAAR,EAAmB;AACjB,wCAAoB9B,EAApB,EAAwBO,UAAxB;AACA,YAAID,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAlBH;AAoBD,KAzBD;AA0BD,GAjCD,CAiCE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CArCD;;AAuCA;AACA,IAAI4E,iBAAiB,SAAjBA,cAAiB,CAACxH,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvC,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;AACA,QAAII,QAAQ,sBAAO,EAAP,EAAWP,IAAIM,IAAf,CAAZ;;AAEAH,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTP,aAAKO,KAAL;AACD;;AAEDC,iBAAWG,KAAX,CACE;2BADF,EAGE,CACEN,MAAM2G,mBADR,EAEE,GAFF,EAGE,IAAIpF,IAAJ,EAHF,EAIEvB,MAAMwB,UAJR,EAKE,IAAID,IAAJ,EALF,EAMEvB,MAAMyB,UANR,CAHF,EAWE,UAACvB,KAAD,EAAQwB,MAAR,EAAmB;AACjB,wCAAoB9B,EAApB,EAAwBO,UAAxB;AACA,YAAID,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAlBH;AAoBD,KAzBD;AA0BD,GAjCD,CAiCE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CArCD;;AAuCA;AACA;AACA,IAAI6E,wBAAwB,SAAxBA,qBAAwB,CAACzH,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC9C,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;AACA,QAAII,QAAQ,sBAAO,EAAP,EAAWP,IAAIM,IAAf,CAAZ;;AAEAH,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTP,aAAKO,KAAL;AACD;;AAEDC,iBAAWG,KAAX,CACE;yBADF,EAGE,CACEN,MAAMmH,OADR,EAEEnH,MAAMoH,WAFR,EAGEpH,MAAMqH,KAHR,EAIE,IAAI9F,IAAJ,EAJF,EAKEvB,MAAMwB,UALR,CAHF,EAUE,UAACtB,KAAD,EAAQwB,MAAR,EAAmB;AACjB,wCAAoB9B,EAApB,EAAwBO,UAAxB;AACA,YAAID,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAjBH;AAmBD,KAxBD;AAyBD,GAhCD,CAgCE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CApCD;;AAsCA;AACA,IAAIiF,wBAAwB,SAAxBA,qBAAwB,CAAC7H,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC9C,MAAIwD,cAAc;AAChBoE,mCAA+B;AADf,GAAlB;;AAIA,MAAI;AACF,QAAI9H,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;;AAEA,QAAIyD,QAAQ,2BAAe,sBAAOF,WAAP,EAAoB1D,IAAIa,KAAxB,CAAf,CAAZ;;AAEAV,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtCA,iBAAWG,KAAX,CACE,yEACE+C,MAAMC,SADR,GAEE,+CAHJ,EAIED,MAAME,MAJR,EAKE,UAACrD,KAAD,EAAQwB,MAAR,EAAmB;AACjB,wCAAoB9B,EAApB,EAAwBO,UAAxB;AACA,YAAID,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OAZH;AAcD,KAfD;AAgBD,GAxBD,CAwBE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CAhCD;;AAkCA;AACA,IAAImF,2BAA2B,SAA3BA,wBAA2B,CAAC/H,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjD,MAAI;AACF,QAAIF,IAAIG,EAAJ,IAAU,IAAd,EAAoB;AAClBD,WAAKE,qBAAWC,0BAAX,EAAL;AACD;AACD,QAAIF,KAAKH,IAAIG,EAAb;AACA,QAAII,QAAQ,sBAAO,EAAP,EAAWP,IAAIM,IAAf,CAAZ;AACAH,OAAGK,aAAH,CAAiB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AACtC,UAAID,KAAJ,EAAW;AACTP,aAAKO,KAAL;AACD;;AAED,6BAAS,SAAT,EAAoBF,KAApB;;AAEAG,iBAAWG,KAAX,CACE;;yEADF,EAIE,CACEN,MAAMmH,OADR,EAEEnH,MAAMoH,WAFR,EAGEpH,MAAMqH,KAHR,EAIE,IAAI9F,IAAJ,EAJF,EAKEvB,MAAMyB,UALR,EAMEzB,MAAMqE,aANR,EAOErE,MAAMuH,6BAPR,CAJF,EAaE,UAACrH,KAAD,EAAQwB,MAAR,EAAmB;AACjBvB,mBAAWmE,OAAX;AACA,YAAIpE,KAAJ,EAAW;AACTP,eAAKO,KAAL;AACD;AACDT,YAAI2C,OAAJ,GAAcV,MAAd;AACA/B;AACD,OApBH;AAsBD,KA7BD;AA8BD,GApCD,CAoCE,OAAO0C,CAAP,EAAU;AACV1C,SAAK0C,CAAL;AACD;AACF,CAxCD;;AA0CAoF,OAAOC,OAAP,GAAiB;AACflI,8BADe;AAEf8C,kCAFe;AAGfE,gCAHe;AAIfE,4BAJe;AAKfE,gCALe;AAMfE,0CANe;AAOfkE,0BAPe;AAQfC,gCARe;AASfC,8CATe;;AAWfhE,8BAXe;AAYfO,kCAZe;AAafE,gCAbe;AAcfE,4BAde;AAefE,gCAfe;AAgBfE,0CAhBe;AAiBf8C,gCAjBe;AAkBfD,0BAlBe;AAmBfQ,8CAnBe;;AAqBfnD,wCArBe;AAsBfI,kCAtBe;AAuBfE,sCAvBe;AAwBfE,sCAxBe;AAyBfC,gDAzBe;AA0Bf0B,gCA1Be;AA2BfI,sCA3Be;AA4BflD,kDA5Be;AA6BfsB,gDA7Be;AA8Bf0C;AA9Be,CAAjB","file":"pharmacy.js","sourcesContent":["\"use strict\";\nimport {\n  whereCondition,\n  releaseDBConnection,\n  jsonArrayToObject\n} from \"../../utils\";\nimport extend from \"extend\";\nimport httpStatus from \"../../utils/httpStatus\";\nimport { debugFunction, debugLog } from \"../../utils/logging\";\n\n//created by irfan: to add in itemMaster\nlet addItemMaster = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    debugLog(\"Body: \", req.body);\n\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        // addl_information,\n        //   decimals,\n        //   purchase_cost,\n        //   markup_percent,\n        //   sales_price,\n        connection.query(\n          \"INSERT INTO `hims_d_item_master` (`item_code`, `item_description`, `structure_id`,\\\n         `generic_id`, `category_id`, `group_id`, `item_uom_id`, `purchase_uom_id`, `sales_uom_id`, `stocking_uom_id`, `service_id`,\\\n           addl_information, decimals, purchase_cost, markup_percent, sales_price,\\\n         `created_date`, `created_by`, `update_date`, `updated_by`)\\\n        VALUE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n          [\n            input.item_code,\n            input.item_description,\n            input.structure_id,\n            input.generic_id,\n            input.category_id,\n            input.group_id,\n            input.item_uom_id,\n            input.purchase_uom_id,\n            input.sales_uom_id,\n            input.stocking_uom_id,\n            input.service_id,\n            input.addl_information,\n            input.decimals,\n            input.purchase_cost,\n            input.markup_percent,\n            input.sales_price,\n            new Date(),\n            input.created_by,\n            new Date(),\n            input.updated_by\n          ],\n          (error, result) => {\n            if (error) {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n\n            debugLog(\" item master id :\", result.insertId);\n            // req.records = spResult;\n            // next();\n\n            if (result.insertId != null) {\n              const insurtColumns = [\n                \"uom_id\",\n                \"stocking_uom\",\n                \"conversion_factor\",\n\n                \"created_by\",\n                \"updated_by\"\n              ];\n\n              connection.query(\n                \"INSERT INTO hims_m_item_uom(\" +\n                  insurtColumns.join(\",\") +\n                  \",item_master_id,created_date,updated_date) VALUES ?\",\n                [\n                  jsonArrayToObject({\n                    sampleInputObject: insurtColumns,\n                    arrayObj: req.body.detail_item_uom,\n                    newFieldToInsert: [result.insertId, new Date(), new Date()],\n                    req: req\n                  })\n                ],\n                (error, detailResult) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n\n                  connection.commit(error => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n                    releaseDBConnection(db, connection);\n                    req.records = detailResult;\n                    next();\n                  });\n                }\n              );\n            } else {\n              connection.rollback(() => {\n                releaseDBConnection(db, connection);\n                next(error);\n              });\n            }\n          }\n        );\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add ItemCategory\nlet addItemCategory = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT INTO `hims_d_item_category` (`category_desc`, `created_date`, `created_by`, `updated_date`, `updated_by`)\\\n        VALUE(?,?,?,?,?)\",\n        [\n          input.category_desc,\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n//created by irfan: to add  itemMaster\nlet addItemGeneric = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT INTO `hims_d_item_generic` (`generic_name`, `created_date`, `created_by`, `updated_date`, `updated_by`)\\\n        VALUE(?,?,?,?,?)\",\n        [\n          input.generic_name,\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add  item group\nlet addItemGroup = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT INTO `hims_d_item_group` (`group_description`, `category_id`, `created_by`, `created_date`, `updated_by`, `updated_date`) \\\n        VALUE(?,?,?,?,?,?)\",\n        [\n          input.group_description,\n          input.category_id,\n          input.created_by,\n          new Date(),\n          input.updated_by,\n          new Date()\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add   add Pharmacy Uom\nlet addPharmacyUom = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT INTO `hims_d_pharmacy_uom` (`uom_description`, `created_date`, `created_by`, `updated_date`, `updated_by`)\\\n        VALUE(?,?,?,?,?)\",\n        [\n          input.uom_description,\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to add   Pharmacy Location\nlet addPharmacyLocation = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT INTO `hims_d_pharmacy_location` (`location_description`,  `location_type`, `allow_pos`, `created_date`, `created_by`, `updated_date`, `updated_by`)\\\n        VALUE(?,?,?,?,?,?,?)\",\n        [\n          input.location_description,\n          input.location_type,\n          input.allow_pos,\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get item master\nlet getItemMaster = (req, res, next) => {\n  let selectWhere = {\n    hims_d_item_master_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select * FROM hims_d_item_master where record_status='A' AND\" +\n          where.condition +\n          \" order by hims_d_item_master_id desc;\",\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get ItemMaster And ItemUom\nlet getItemMasterAndItemUom = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select  MIU.hims_m_item_uom_id, MIU.item_master_id, MIU.uom_id,PH.uom_description, MIU.stocking_uom, \\\n        MIU.conversion_factor,IM.hims_d_item_master_id, IM.item_code, IM.item_description, IM.structure_id, \\\n        IM.generic_id, IM.category_id,IM.group_id, IM.form_id, IM.storage_id, IM.item_uom_id, IM.purchase_uom_id, \\\n        IM.sales_uom_id, IM.stocking_uom_id, IM.item_status, IM.service_id from  hims_d_item_master IM left join \\\n        hims_m_item_uom MIU on IM.hims_d_item_master_id=MIU.item_master_id and IM.record_status='A' and MIU.record_status='A' \\\n        left join hims_d_pharmacy_uom PH  on  MIU.uom_id=PH.hims_d_pharmacy_uom_id;\",\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get item category\nlet getItemCategory = (req, res, next) => {\n  let selectWhere = {\n    hims_d_item_category_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select * FROM hims_d_item_category where record_status='A' AND\" +\n          where.condition +\n          \" order by hims_d_item_category_id desc;\",\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get item Generic\nlet getItemGeneric = (req, res, next) => {\n  let selectWhere = {\n    hims_d_item_generic_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select * FROM hims_d_item_generic where record_status='A' AND\" +\n          where.condition +\n          \" order by hims_d_item_generic_id desc;\",\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get item Generic\nlet getItemGroup = (req, res, next) => {\n  let selectWhere = {\n    hims_d_item_group_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select * FROM hims_d_item_group where record_status='A' AND\" +\n          where.condition +\n          \" order by hims_d_item_group_id desc;\",\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get get Pharmacy Uom\nlet getPharmacyUom = (req, res, next) => {\n  let selectWhere = {\n    hims_d_pharmacy_uom_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select * FROM hims_d_pharmacy_uom where record_status='A' AND \" +\n          where.condition +\n          \" order by hims_d_pharmacy_uom_id desc;\",\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get Pharmacy Location\nlet getPharmacyLocation = (req, res, next) => {\n  let selectWhere = {\n    hims_d_pharmacy_location_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select * FROM hims_d_pharmacy_location where record_status='A' AND\" +\n          where.condition +\n          \" order by hims_d_pharmacy_location_id desc;\",\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to updateItemCategory\nlet updateItemCategory = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.query(\n        \"UPDATE `hims_d_item_category` SET `category_desc`=?, `category_status`=?,\\\n        `updated_date`=?, `updated_by`=?, `record_status`=?\\\n        WHERE `hims_d_item_category_id`=? and `record_status`='A';\",\n        [\n          input.category_desc,\n          input.category_status,\n          new Date(),\n          input.updated_by,\n          input.record_status,\n          input.hims_d_item_category_id\n        ],\n        (error, result) => {\n          connection.release();\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to updateItemGroup\nlet updateItemGroup = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.query(\n        \"UPDATE `hims_d_item_group` SET `group_description`=?, `category_id`=?, `group_status`=?,\\\n        `updated_by`=?, `updated_date`=?, `record_status`=? WHERE  `record_status`='A' and `hims_d_item_group_id`=?;\",\n        [\n          input.group_description,\n          input.category_id,\n          input.group_status,\n          input.updated_by,\n          new Date(),\n          input.record_status,\n          input.hims_d_item_group_id\n        ],\n        (error, result) => {\n          connection.release();\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to update ItemGeneric\nlet updateItemGeneric = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.query(\n        \"UPDATE `hims_d_item_generic` SET `generic_name`=?, `item_generic_status`=?,\\\n        `updated_date`=? , `updated_by`=?, `record_status`=? WHERE  record_status='A' and `hims_d_item_generic_id`=?\",\n        [\n          input.generic_name,\n          input.item_generic_status,\n          new Date(),\n          input.updated_by,\n          input.record_status,\n          input.hims_d_item_generic_id\n        ],\n        (error, result) => {\n          connection.release();\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to update PharmacyUom\nlet updatePharmacyUom = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.query(\n        \"UPDATE `hims_d_pharmacy_uom` SET `uom_description`=?,\\\n        `updated_date`=?, `updated_by`=?, `record_status`=? WHERE record_status='A' and`hims_d_pharmacy_uom_id`=?;\",\n        [\n          input.uom_description,\n          new Date(),\n          input.updated_by,\n          input.record_status,\n          input.hims_d_pharmacy_uom_id\n        ],\n        (error, result) => {\n          connection.release();\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to update Pharmacy Location\nlet updatePharmacyLocation = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.query(\n        \"UPDATE `hims_d_pharmacy_location` SET `location_description`=?, `location_status`=?, `location_type`=?, `allow_pos`=?,\\\n         `updated_date`=?,`updated_by`=?, `record_status`=? WHERE `record_status`='A' and `hims_d_pharmacy_location_id`=?;\",\n        [\n          input.location_description,\n          input.location_status,\n          input.location_type,\n          input.allow_pos,\n          new Date(),\n          input.updated_by,\n          input.record_status,\n          input.hims_d_pharmacy_location_id\n        ],\n        (error, result) => {\n          connection.release();\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by:irfan,to update Item Master And Uom\nlet updateItemMasterAndUom = (req, res, next) => {\n  try {\n    debugFunction(\"updateItemMasterAndUom \");\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let input = extend({}, req.body);\n    debugLog(\"Input body\", input);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        let queryBuilder =\n          \"UPDATE `hims_d_item_master` SET `item_code`=?, `item_description`=?, `structure_id`=?,\\\n          `generic_id`=?, `category_id`=?, `group_id`=?, `form_id`=?, `storage_id`=?, `item_uom_id`=?,\\\n           `purchase_uom_id`=?, `sales_uom_id`=?, `stocking_uom_id`=?, `item_status`=?, `service_id`=?,\\\n           addl_information=?, decimals=?, purchase_cost=?, markup_percent=?, sales_price=?,\\\n            `update_date`=?, `updated_by`=?, `record_status`=? WHERE record_status='A' and\\\n           `hims_d_item_master_id`=?\";\n        let inputs = [\n          input.item_code,\n          input.item_description,\n          input.structure_id,\n          input.generic_id,\n          input.category_id,\n          input.group_id,\n          input.form_id,\n          input.storage_id,\n          input.item_uom_id,\n          input.purchase_uom_id,\n          input.sales_uom_id,\n          input.stocking_uom_id,\n          input.item_status,\n          input.service_id,\n          input.addl_information,\n          input.decimals,\n          input.purchase_cost,\n          input.markup_percent,\n          input.sales_price,\n          new Date(),\n          input.updated_by,\n          input.record_status,\n          input.hims_d_item_master_id\n        ];\n\n        connection.query(queryBuilder, inputs, (error, result) => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n\n          if (result != null) {\n            new Promise((resolve, reject) => {\n              try {\n                if (input.insertItemUomMap.length != 0) {\n                  const insurtColumns = [\n                    \"uom_id\",\n                    \"item_master_id\",\n                    \"stocking_uom\",\n                    \"conversion_factor\",\n                    \"created_by\",\n                    \"updated_by\"\n                  ];\n\n                  connection.query(\n                    \"INSERT INTO hims_m_item_uom(\" +\n                      insurtColumns.join(\",\") +\n                      \",created_date,updated_date) VALUES ?\",\n                    [\n                      jsonArrayToObject({\n                        sampleInputObject: insurtColumns,\n                        arrayObj: req.body.insertItemUomMap,\n                        newFieldToInsert: [new Date(), new Date()],\n                        req: req\n                      })\n                    ],\n                    (error, insertUomMapResult) => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                      return resolve(insertUomMapResult);\n                    }\n                  );\n                } else {\n                  return resolve();\n                }\n              } catch (e) {\n                reject(e);\n              }\n            }).then(results => {\n              debugLog(\"inside uom map then\");\n\n              if (input.updateUomMapResult.length != 0) {\n                let inputParam = extend([], req.body.updateUomMapResult);\n\n                let qry = \"\";\n\n                for (let i = 0; i < req.body.updateUomMapResult.length; i++) {\n                  qry +=\n                    \"UPDATE `hims_m_item_uom` SET item_master_id='\" +\n                    inputParam[i].item_master_id +\n                    \"', uom_id='\" +\n                    inputParam[i].uom_id +\n                    \"', stocking_uom='\" +\n                    inputParam[i].stocking_uom +\n                    \"', conversion_factor='\" +\n                    inputParam[i].conversion_factor +\n                    \"', record_status='\" +\n                    inputParam[i].record_status +\n                    \"', updated_date='\" +\n                    new Date().toLocaleString() +\n                    \"',updated_by='\" +\n                    req.body.updated_by +\n                    \"' WHERE record_status='A' and hims_m_item_uom_id='\" +\n                    inputParam[i].hims_m_item_uom_id +\n                    \"';\";\n                }\n\n                connection.query(qry, (error, updateUomMapResult) => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n\n                  connection.commit(error => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n                    releaseDBConnection(db, connection);\n                    req.records = updateUomMapResult;\n                    next();\n                  });\n                });\n              } else {\n                connection.commit(error => {\n                  if (error) {\n                    connection.rollback(() => {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    });\n                  }\n                  releaseDBConnection(db, connection);\n                  req.records = results;\n                  next();\n                });\n              }\n            });\n          } else {\n            connection.commit(error => {\n              if (error) {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n              releaseDBConnection(db, connection);\n              req.records = result;\n              next();\n            });\n          }\n        });\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to updateItemForm\nlet updateItemForm = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.query(\n        \"UPDATE `hims_d_item_form` SET `form_description`=?, `item_form_status`=?,\\\n        `updated_date`=?, `updated_by`=?, `record_status`=?\\\n        WHERE `hims_d_item_form_id`=? and `record_status`='A';\",\n        [\n          input.form_description,\n          input.item_form_status,\n          new Date(),\n          input.updated_by,\n          input.record_status,\n          input.hims_d_item_form_id\n        ],\n        (error, result) => {\n          connection.release();\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to updateItemStorage\nlet updateItemStorage = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.query(\n        \"UPDATE `hims_d_item_storage` SET `storage_description`=?, `storage_status`=?,\\\n        `updated_date`=?, `updated_by`=?, `record_status`=?\\\n        WHERE `hims_d_item_storage_id`=? and `record_status`='A';\",\n        [\n          input.storage_description,\n          input.storage_status,\n          new Date(),\n          input.updated_by,\n          input.record_status,\n          input.hims_d_item_storage_id\n        ],\n        (error, result) => {\n          connection.release();\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to get item category\nlet getItemForm = (req, res, next) => {\n  let selectWhere = {\n    hims_d_item_form_id: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select * FROM hims_d_item_form where record_status='A' AND\" +\n          where.condition +\n          \" order by hims_d_item_form_id desc;\",\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to get item category\nlet getItemStorage = (req, res, next) => {\n  let selectWhere = {\n    hims_d_item_storage_id: \"ALL\"\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select * FROM hims_d_item_storage where record_status='A' AND\" +\n          where.condition +\n          \" order by hims_d_item_storage_id desc;\",\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to add ItemCategory\nlet addItemForm = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT INTO `hims_d_item_form` (`form_description`, `item_form_status`, `created_date`, `created_by`, `updated_date`, `updated_by`)\\\n        VALUE(?,?,?,?,?,?)\",\n        [\n          input.form_description,\n          \"A\",\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to add Item Forms\nlet addItemStorage = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT INTO `hims_d_item_storage` (`storage_description`, `storage_status`, `created_date`, `created_by`, `updated_date`, `updated_by`)\\\n        VALUE(?,?,?,?,?,?)\",\n        [\n          input.storage_description,\n          \"A\",\n          new Date(),\n          input.created_by,\n          new Date(),\n          input.updated_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//Location Permission\n//created by Nowshad: to add Location Permission\nlet addLocationPermission = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.query(\n        \"INSERT INTO `hims_m_location_permission` (`user_id`, `location_id`, `allow`,`created_date`,`created_by`)\\\n        VALUE(?,?,?,?,?)\",\n        [\n          input.user_id,\n          input.location_id,\n          input.allow,\n          new Date(),\n          input.created_by\n        ],\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to get Location Permission\nlet getLocationPermission = (req, res, next) => {\n  let selectWhere = {\n    hims_m_location_permission_id: \"ALL\"\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select * FROM hims_m_location_permission where record_status='A' AND\" +\n          where.condition +\n          \" order by hims_m_location_permission_id desc;\",\n        where.values,\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to update Location Permission\nlet updateLocationPermission = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      debugLog(\"input: \", input);\n\n      connection.query(\n        \"UPDATE `hims_m_location_permission` SET `user_id`=?, `location_id`=?,\\\n        `allow`=?, `updated_date`=?, `updated_by`=?, `record_status`=?\\\n        WHERE `record_status`='A' and `hims_m_location_permission_id`=?;\",\n        [\n          input.user_id,\n          input.location_id,\n          input.allow,\n          new Date(),\n          input.updated_by,\n          input.record_status,\n          input.hims_m_location_permission_id\n        ],\n        (error, result) => {\n          connection.release();\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addItemMaster,\n  addItemCategory,\n  addItemGeneric,\n  addItemGroup,\n  addPharmacyUom,\n  addPharmacyLocation,\n  addItemForm,\n  addItemStorage,\n  addLocationPermission,\n\n  getItemMaster,\n  getItemCategory,\n  getItemGeneric,\n  getItemGroup,\n  getPharmacyUom,\n  getPharmacyLocation,\n  getItemStorage,\n  getItemForm,\n  getLocationPermission,\n\n  updateItemCategory,\n  updateItemGroup,\n  updateItemGeneric,\n  updatePharmacyUom,\n  updatePharmacyLocation,\n  updateItemForm,\n  updateItemStorage,\n  getItemMasterAndItemUom,\n  updateItemMasterAndUom,\n  updateLocationPermission\n};\n"]}