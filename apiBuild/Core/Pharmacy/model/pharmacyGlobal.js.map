{"version":3,"sources":["../../../../src/Pharmacy/model/pharmacyGlobal.js"],"names":["getUomLocationStock","req","res","next","db","httpStatus","dataBaseNotInitilizedError","getConnection","error","connection","query","item_id","location_id","result","records","uomResult","locationResult","e","getVisitPrescriptionDetails","selectWhere","episode_id","where","condition","values","getItemMoment","whereOrder","from_date","undefined","to_date","getItemLocationStock","getUserLocationPermission","userIdentity","algaeh_d_app_user_id","length","resultLoctaion","getItemandLocationStock","pharmacy_location_id","Orderby","pharmacyReceiptInsert","P_receiptHeaderModel","hims_f_receipt_header_id","receipt_number","receipt_date","billing_header_id","total_amount","created_by","updated_by","record_status","counter_id","shift_id","pay_type","beginTransaction","rollback","inputParam","body","numgenId","newNumber","Date","headerRcptResult","insertId","receptSample","join","sampleInputObject","arrayObj","receiptdetails","newFieldToInsert","RcptDetailsRecords","receipt_header_id","generateError","badRequest","module","exports"],"mappings":"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","file":"pharmacyGlobal.js","sourcesContent":["\"use strict\";\nimport extend from \"extend\";\nimport {\n  whereCondition,\n  releaseDBConnection,\n  jsonArrayToObject,\n  runningNumber\n} from \"../../utils\";\n\nimport httpStatus from \"../../utils/httpStatus\";\nimport { debugLog, debugFunction } from \"../../utils/logging\";\n\n//created by irfan: to get Uom Location Stock\nlet getUomLocationStock = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    // let input = extend({}, req.query);\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"select hims_m_item_uom_id, item_master_id, uom_id, stocking_uom, conversion_factor, hims_m_item_uom.uom_status, \\\n        hims_d_pharmacy_uom.uom_description  \\\n        from hims_m_item_uom,hims_d_pharmacy_uom where hims_m_item_uom.record_status='A' and \\\n        hims_m_item_uom.uom_id = hims_d_pharmacy_uom.hims_d_pharmacy_uom_id and hims_m_item_uom.item_master_id=? ;\\\n        SELECT hims_m_item_location_id, item_id, pharmacy_location_id, item_location_status, batchno, expirydt, barcode, qtyhand, qtypo, cost_uom,\\\n        avgcost, last_purchase_cost, item_type, grn_id, grnno, sale_price, mrp_price, sales_uom \\\n        from hims_m_item_location where record_status='A'  and item_id=? and pharmacy_location_id=? and expirydt > CURDATE() \\\n        and qtyhand>0  order by expirydt\",\n        [req.query.item_id, req.query.item_id, req.query.location_id],\n        (error, result) => {\n          debugLog(\"uomResult\", result);\n          releaseDBConnection(db, connection);\n\n          if (error) {\n            next(error);\n          }\n          req.records = {\n            uomResult: result[0],\n            locationResult: result[1]\n          };\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: getVisitPrescriptionDetails\nlet getVisitPrescriptionDetails = (req, res, next) => {\n  let selectWhere = {\n    episode_id: \"ALL\"\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      db.query(\n        \"SELECT H.hims_f_prescription_id,H.patient_id, H.encounter_id, H.provider_id, H.episode_id, \\\n          H.prescription_date,H.prescription_status,H.cancelled,D.hims_f_prescription_detail_id, D.prescription_id, D.item_id, D.generic_id, D.dosage,\\\n          D.frequency, D.no_of_days,D.dispense, D.frequency_type, D.frequency_time, D.start_date, D.item_status, D.service_id, D.uom_id,\\\n          D.item_category_id, D.item_group_id\\\n          from hims_f_prescription H,hims_f_prescription_detail D  WHERE H.hims_f_prescription_id = D.prescription_id and \" +\n          where.condition,\n        where.values,\n\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: get Item Moment\nlet getItemMoment = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let whereOrder = \"\";\n    if (req.query.from_date != undefined) {\n      whereOrder =\n        \"date(transaction_date) between date('\" +\n        req.query.from_date +\n        \"') AND date('\" +\n        req.query.to_date +\n        \"')\";\n    } else {\n      whereOrder = \"date(transaction_date) <= date(now())\";\n    }\n    delete req.query.from_date;\n    delete req.query.to_date;\n    let where = whereCondition(extend(req.query));\n\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      db.query(\n        \"SELECT * from hims_f_pharmacy_trans_history  WHERE record_status = 'A' and \" +\n          whereOrder +\n          (where.condition == \"\" ? \"\" : \" AND \" + where.condition),\n        where.values,\n\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get Uom Location Stock\nlet getItemLocationStock = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    // let Orderby = \"order by expirydt\";\n    // let input = extend({}, req.query);\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"SELECT hims_m_item_location_id, item_id, pharmacy_location_id, item_location_status, batchno, expirydt, barcode, qtyhand, qtypo, cost_uom,\\\n        avgcost, last_purchase_cost, item_type, grn_id, grnno, sale_price, mrp_price, sales_uom \\\n        from hims_m_item_location where record_status='A'  and item_id=? and pharmacy_location_id=? \\\n        and qtyhand>0  order by expirydt\",\n        [req.query.item_id, req.query.location_id],\n        (error, result) => {\n          debugLog(\"uomResult\", result);\n          releaseDBConnection(db, connection);\n\n          if (error) {\n            next(error);\n          }\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to get User Wise Location Permission\nlet getUserLocationPermission = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    // let input = extend({}, req.query);\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"SELECT hims_m_location_permission_id,user_id, location_id,L.hims_d_pharmacy_location_id,L.location_description,\\\n        L.location_type,L.allow_pos from hims_m_location_permission LP,hims_d_pharmacy_location L \\\n        where LP.record_status='A' and\\\n         L.record_status='A' and LP.location_id=L.hims_d_pharmacy_location_id  and allow='Y' and user_id=?\",\n        [req.userIdentity.algaeh_d_app_user_id],\n        (error, result) => {\n          if (error) {\n            next(error);\n            releaseDBConnection(db, connection);\n          }\n\n          if (result.length < 1) {\n            connection.query(\n              \"select  hims_d_pharmacy_location_id, location_description, location_status, location_type,\\\n            allow_pos from hims_d_pharmacy_location where record_status='A'\",\n              (error, resultLoctaion) => {\n                releaseDBConnection(db, connection);\n                if (error) {\n                  next(error);\n                }\n                //ppppppppp\n                req.records = resultLoctaion;\n                next();\n              }\n            );\n          } else {\n            releaseDBConnection(db, connection);\n            req.records = result;\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to get Items in selected Location\nlet getItemandLocationStock = (req, res, next) => {\n  let selectWhere = {\n    item_id: \"ALL\",\n    pharmacy_location_id: \"ALL\"\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n    let Orderby = \" order by expirydt\";\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      db.query(\n        \"SELECT hims_m_item_location_id, item_id, pharmacy_location_id, item_location_status, batchno, expirydt, barcode, qtyhand, qtypo, cost_uom,\\\n        avgcost, last_purchase_cost, item_type, grn_id, grnno, sale_price, mrp_price, sales_uom \\\n        from hims_m_item_location where record_status='A' and qtyhand>0 and \" +\n          where.condition,\n        where.values,\n\n        (error, result) => {\n          releaseDBConnection(db, connection);\n          if (error) {\n            next(error);\n          }\n\n          req.records = result;\n          next();\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by:irfan, Patient-receipt if advance or  Refund to patient\nlet pharmacyReceiptInsert = (req, res, next) => {\n  let P_receiptHeaderModel = {\n    hims_f_receipt_header_id: null,\n    receipt_number: null,\n    receipt_date: null,\n    billing_header_id: null,\n    total_amount: null,\n    created_by: req.userIdentity.algaeh_d_app_user_id,\n\n    updated_by: req.userIdentity.algaeh_d_app_user_id,\n\n    record_status: null,\n    counter_id: null,\n    shift_id: null,\n    pay_type: null\n  };\n\n  debugFunction(\"Receipt POS and Sales\");\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let connection = req.connection;\n    connection.beginTransaction(error => {\n      if (error) {\n        connection.rollback(() => {\n          releaseDBConnection(db, connection);\n          next(error);\n        });\n      }\n\n      let inputParam = extend(P_receiptHeaderModel, req.body);\n\n      // fuction for advance recieved from patient\n      if (inputParam.pay_type == \"R\") {\n        runningNumber(req.db, 5, \"PAT_RCPT\", (error, numgenId, newNumber) => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n          req.query.receipt_number = newNumber;\n          req.body.receipt_number = newNumber;\n          inputParam.receipt_number = newNumber;\n          debugLog(\"new R for recpt number:\", newNumber);\n          // receipt header table insert\n          connection.query(\n            \"INSERT INTO hims_f_receipt_header (receipt_number, receipt_date, billing_header_id, total_amount,\\\n              created_by, created_date, updated_by, updated_date,  counter_id, shift_id, pay_type) VALUES (?,?,?\\\n              ,?,?,?,?,?,?,?,?)\",\n            [\n              inputParam.receipt_number,\n              new Date(),\n              inputParam.billing_header_id,\n              inputParam.total_amount,\n              inputParam.created_by,\n              new Date(),\n              inputParam.updated_by,\n              new Date(),\n              inputParam.counter_id,\n              inputParam.shift_id,\n              inputParam.pay_type\n            ],\n            (error, headerRcptResult) => {\n              if (error) {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n\n              debugFunction(\"inside header result\");\n              if (\n                headerRcptResult.insertId != null &&\n                headerRcptResult.insertId != \"\"\n              ) {\n                const receptSample = [\n                  \"card_check_number\",\n                  \"expiry_date\",\n                  \"pay_type\",\n                  \"amount\",\n                  \"created_by\",\n                  \"updated_by\",\n                  \"card_type\"\n                ];\n\n                connection.query(\n                  \"INSERT  INTO hims_f_receipt_details ( \" +\n                    receptSample.join(\",\") +\n                    \",hims_f_receipt_header_id) VALUES ? \",\n                  [\n                    jsonArrayToObject({\n                      sampleInputObject: receptSample,\n                      arrayObj: inputParam.receiptdetails,\n                      req: req,\n                      newFieldToInsert: [headerRcptResult.insertId]\n                    })\n                  ],\n                  (error, RcptDetailsRecords) => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n                    debugFunction(\"inside details result\");\n                    req.records = {\n                      receipt_header_id: headerRcptResult.insertId,\n                      receipt_number: inputParam.receipt_number\n                    };\n                    releaseDBConnection(db, connection);\n                    next();\n\n                    debugLog(\"Records: \", req.records);\n                  }\n                );\n              } else {\n                debugLog(\"Data is not inerted to billing header\");\n                releaseDBConnection(db, connection);\n                connection.rollback(() => {\n                  next(\n                    httpStatus.generateError(\n                      httpStatus.badRequest,\n                      \"Technical issue while Sale Retun\"\n                    )\n                  );\n                });\n              }\n            }\n          );\n        });\n      }\n\n      //function for payment to the patient\n      if (inputParam.pay_type == \"P\") {\n        runningNumber(req.db, 7, \"PYMNT_NO\", (error, numgenId, newNumber) => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n          debugLog(\"new PAYMENT no : \", newNumber);\n          inputParam.receipt_number = newNumber;\n          req.body.receipt_number = newNumber;\n\n          //R-->recieved amount   P-->payback amount\n\n          // receipt header table insert\n          connection.query(\n            \"INSERT INTO hims_f_receipt_header (receipt_number, receipt_date, billing_header_id, total_amount,\\\n                created_by, created_date, updated_by, updated_date,  counter_id, shift_id, pay_type) VALUES (?,?,?\\\n                ,?,?,?,?,?,?,?,?)\",\n            [\n              inputParam.receipt_number,\n              new Date(),\n              inputParam.billing_header_id,\n              inputParam.total_amount,\n              inputParam.created_by,\n              new Date(),\n              inputParam.updated_by,\n              new Date(),\n              inputParam.counter_id,\n              inputParam.shift_id,\n              inputParam.pay_type\n            ],\n            (error, headerRcptResult) => {\n              if (error) {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n\n              debugFunction(\"inside header result\");\n              debugLog(\"Insert : \", inputParam.receiptdetails);\n              if (\n                headerRcptResult.insertId != null &&\n                headerRcptResult.insertId != \"\"\n              ) {\n                // receipt details table insert\n                const receptSample = [\n                  \"card_check_number\",\n                  \"expiry_date\",\n                  \"pay_type\",\n                  \"amount\",\n                  \"created_by\",\n                  \"updated_by\",\n                  \"card_type\"\n                ];\n                connection.query(\n                  \"INSERT  INTO hims_f_receipt_details ( \" +\n                    receptSample.join(\",\") +\n                    \",hims_f_receipt_header_id) VALUES ? \",\n                  [\n                    jsonArrayToObject({\n                      sampleInputObject: receptSample,\n                      arrayObj: inputParam.receiptdetails,\n                      req: req,\n                      newFieldToInsert: [headerRcptResult.insertId]\n                    })\n                  ],\n                  (error, RcptDetailsRecords) => {\n                    debugLog(\"Error : \", error);\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n                    debugFunction(\"inside details result\");\n                    req.records = {\n                      receipt_header_id: headerRcptResult.insertId,\n                      receipt_number: inputParam.receipt_number\n                    };\n                    releaseDBConnection(db, connection);\n                    next();\n\n                    debugLog(\"Records: \", req.records);\n                    // if (error) {\n                    //   debugLog(\"Error : \", error);\n                    //   connection.rollback(() => {\n                    //     releaseDBConnection(db, connection);\n                    //     next(error);\n                    //   });\n                    //   req.records = {\n                    //     receipt_header_id: headerRcptResult.insertId,\n                    //     receipt_number: inputParam.receipt_number\n                    //   };\n                    //   releaseDBConnection(db, connection);\n                    //   next();\n                    //   debugLog(\"Records: \", req.records);\n                    // }\n                  }\n                );\n              } else {\n                debugLog(\"Data is not inerted to billing header\");\n                releaseDBConnection(db, connection);\n                connection.rollback(() => {\n                  next(\n                    httpStatus.generateError(\n                      httpStatus.badRequest,\n                      \"Technical issue while Sale Retun\"\n                    )\n                  );\n                });\n              }\n            }\n          );\n        }); //end of runing number PYMNT\n      }\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  getUomLocationStock,\n  getVisitPrescriptionDetails,\n  getItemMoment,\n  getItemLocationStock,\n  getUserLocationPermission,\n  getItemandLocationStock,\n  pharmacyReceiptInsert\n};\n"]}