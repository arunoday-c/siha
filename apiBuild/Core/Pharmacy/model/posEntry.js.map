{"version":3,"sources":["../../../../src/Pharmacy/model/posEntry.js"],"names":["addPosEntry","req","res","next","db","httpStatus","dataBaseNotInitilizedError","input","body","records","connection","requestCounter","Promise","resolve","reject","counter","module_desc","onFailure","error","onSuccess","result","then","documentCode","completeNumber","year","format","today","month","period","query","patient_id","visit_id","ip_id","location_id","location_type","sub_total","discount_percentage","discount_amount","net_total","copay_amount","patient_responsibility","patient_tax","patient_payable","company_responsibility","company_tax","company_payable","comments","sec_company_responsibility","sec_company_tax","sec_company_payable","sec_copay_amount","net_tax","gross_total","sheet_discount_amount","sheet_discount_percentage","net_amount","credit_amount","balance_credit","receiveable_amount","card_number","effective_start_date","effective_end_date","insurance_provider_id","sub_insurance_provider_id","network_id","network_type","network_office_id","policy_number","secondary_card_number","secondary_effective_start_date","secondary_effective_end_date","secondary_insurance_provider_id","secondary_network_id","secondary_network_type","secondary_sub_insurance_provider_id","secondary_network_office_id","receipt_header_id","Date","userIdentity","algaeh_d_app_user_id","headerResult","insertId","insurtColumns","join","sampleInputObject","arrayObj","pharmacy_stock_detail","newFieldToInsert","detailResult","pos_number","hims_f_pharmacy_pos_header_id","receipt_number","e","getPosEntry","selectWhere","where","condition","values","length","hims_f_receipt_header_id","updatePosEntry","PosEntry","posted","updated_by","transaction_id","inputParam","output","options","exception","posUpdate","catch","rollback","getPrescriptionPOS","getConnection","_reqBody","item_ids","LINQ","Select","s","item_id","ToArray","location_ids","pharmacy_location_id","_message","_req","ItemcatrgoryGroup","Where","w","FirstOrDefault","batchno","expirydt","grnno","sales_uom","qtyhand","item_category_id","item_group_id","i","_mess","resultbilling","_result","message","obj","module","exports"],"mappings":"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","file":"posEntry.js","sourcesContent":["\"use strict\";\nimport {\n  whereCondition,\n  releaseDBConnection,\n  jsonArrayToObject,\n  runningNumberGen\n} from \"../../utils\";\nimport extend from \"extend\";\nimport httpStatus from \"../../utils/httpStatus\";\nimport { debugFunction, debugLog } from \"../../utils/logging\";\nimport moment from \"moment\";\nimport { getBillDetailsFunctionality } from \"../../model/billing\";\nimport { updateIntoItemLocation } from \"./commonFunction\";\nimport Promise from \"bluebird\";\n\nimport { LINQ } from \"node-linq\";\nimport { exception } from \"winston\";\n\n//created by Nowshad: to Insert POS Entry\nlet addPosEntry = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    debugLog(\"inside\", \"add stock\");\n    debugLog(\"req date: \", req.records);\n\n    let connection = req.connection;\n\n    let requestCounter = 1;\n\n    return new Promise((resolve, reject) => {\n      runningNumberGen({\n        db: connection,\n        counter: requestCounter,\n        module_desc: [\"POS_NUM\"],\n        onFailure: error => {\n          reject(error);\n        },\n        onSuccess: result => {\n          resolve(result);\n        }\n      });\n    }).then(result => {\n      let documentCode = result[0].completeNumber;\n      debugLog(\"documentCode:\", documentCode);\n\n      let year = moment().format(\"YYYY\");\n      debugLog(\"onlyyear:\", year);\n\n      let today = moment().format(\"YYYY-MM-DD\");\n      debugLog(\"today:\", today);\n\n      let month = moment().format(\"MM\");\n      debugLog(\"month:\", month);\n      let period = month;\n\n      debugLog(\"period:\", period);\n      connection.query(\n        \"INSERT INTO `hims_f_pharmacy_pos_header` (pos_number,pos_date,patient_id,visit_id,ip_id,`year`,period,\\\n                location_id, location_type, sub_total, discount_percentage, discount_amount, net_total, copay_amount, patient_responsibility,\\\n                patient_tax, patient_payable,company_responsibility,company_tax,company_payable,comments, sec_company_responsibility,\\\n                sec_company_tax,sec_company_payable,sec_copay_amount,net_tax,gross_total,sheet_discount_amount,\\\n                sheet_discount_percentage,net_amount,credit_amount,balance_credit,receiveable_amount, card_number,effective_start_date,effective_end_date,\\\n                insurance_provider_id, sub_insurance_provider_id, network_id, network_type, network_office_id, policy_number, \\\n                secondary_card_number, secondary_effective_start_date, secondary_effective_end_date, secondary_insurance_provider_id,\\\n                secondary_network_id, secondary_network_type, secondary_sub_insurance_provider_id, secondary_network_office_id, \\\n                receipt_header_id, created_date,created_by,updated_date,updated_by) \\\n            VALUE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n        [\n          documentCode,\n          today,\n          input.patient_id,\n          input.visit_id,\n          input.ip_id,\n          year,\n          period,\n          input.location_id,\n          input.location_type,\n          input.sub_total,\n          input.discount_percentage,\n          input.discount_amount,\n          input.net_total,\n          input.copay_amount,\n          input.patient_responsibility,\n          input.patient_tax,\n          input.patient_payable,\n          input.company_responsibility,\n          input.company_tax,\n          input.company_payable,\n          input.comments,\n          input.sec_company_responsibility,\n          input.sec_company_tax,\n          input.sec_company_payable,\n          input.sec_copay_amount,\n          input.net_tax,\n          input.gross_total,\n          input.sheet_discount_amount,\n          input.sheet_discount_percentage,\n          input.net_amount,\n          input.credit_amount,\n          input.balance_credit,\n          input.receiveable_amount,\n          input.card_number,\n          input.effective_start_date,\n          input.effective_end_date,\n          input.insurance_provider_id,\n          input.sub_insurance_provider_id,\n          input.network_id,\n          input.network_type,\n          input.network_office_id,\n          input.policy_number,\n          input.secondary_card_number,\n          input.secondary_effective_start_date,\n          input.secondary_effective_end_date,\n          input.secondary_insurance_provider_id,\n          input.secondary_network_id,\n          input.secondary_network_type,\n          input.secondary_sub_insurance_provider_id,\n          input.secondary_network_office_id,\n          req.records.receipt_header_id,\n          new Date(),\n          req.userIdentity.algaeh_d_app_user_id,\n          new Date(),\n          req.userIdentity.algaeh_d_app_user_id\n        ],\n        (error, headerResult) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          debugLog(\" pos header id :\", headerResult);\n\n          if (headerResult.insertId != null) {\n            const insurtColumns = [\n              \"item_id\",\n              \"item_category\",\n              \"item_group_id\",\n              \"service_id\",\n              \"grn_no\",\n              \"barcode\",\n              \"qtyhand\",\n              \"expiry_date\",\n              \"batchno\",\n              \"uom_id\",\n              \"quantity\",\n              \"insurance_yesno\",\n              \"tax_inclusive\",\n              \"unit_cost\",\n              \"extended_cost\",\n              \"discount_percentage\",\n              \"discount_amount\",\n              \"net_extended_cost\",\n              \"copay_percent\",\n              \"copay_amount\",\n              \"patient_responsibility\",\n              \"patient_tax\",\n              \"patient_payable\",\n              \"company_responsibility\",\n              \"company_tax\",\n              \"company_payable\",\n              \"sec_copay_percent\",\n              \"sec_copay_amount\",\n              \"sec_company_responsibility\",\n              \"sec_company_tax\",\n              \"sec_company_payable\"\n            ];\n\n            connection.query(\n              \"INSERT INTO hims_f_pharmacy_pos_detail(\" +\n                insurtColumns.join(\",\") +\n                \",pharmacy_pos_header_id) VALUES ?\",\n              [\n                jsonArrayToObject({\n                  sampleInputObject: insurtColumns,\n                  arrayObj: req.body.pharmacy_stock_detail,\n                  newFieldToInsert: [headerResult.insertId],\n                  req: req\n                })\n              ],\n              (error, detailResult) => {\n                if (error) {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                }\n\n                req.records = {\n                  pos_number: documentCode,\n                  hims_f_pharmacy_pos_header_id: headerResult.insertId,\n                  receipt_number: req.records.receipt_number,\n                  year: year,\n                  period: period\n                };\n                next();\n              }\n            );\n          } else {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to get Pharmacy POS Entry\nlet getPosEntry = (req, res, next) => {\n  let selectWhere = {\n    pos_number: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    let connection = req.connection;\n    // PH.recieve_amount\n    connection.query(\n      \"SELECT hims_f_pharmacy_pos_header_id,receipt_header_id,PH.pos_number,PH.patient_id,P.patient_code,P.full_name as full_name,PH.visit_id,V.visit_code,PH.ip_id,PH.pos_date,PH.year,\\\n        PH.period,PH.location_id,L.location_description,PH.location_type,PH.sub_total,PH.discount_percentage,PH.discount_amount,PH.net_total,\\\n        PH.copay_amount,PH.patient_responsibility,PH.patient_tax,PH.patient_payable,PH.company_responsibility,PH.company_tax,\\\n        PH.company_payable,PH.comments,PH.sec_company_responsibility,PH.sec_company_tax,PH.sec_company_payable,\\\n        PH.sec_copay_amount,PH.net_tax,PH.gross_total,PH.sheet_discount_amount,PH.sheet_discount_percentage,\\\n        PH.net_amount,PH.credit_amount,PH.balance_credit,PH.receiveable_amount,PH.posted,PH.card_number,PH.effective_start_date,\\\n        PH.effective_end_date,PH.insurance_provider_id,PH.sub_insurance_provider_id,PH.network_id,PH.network_type,\\\n        PH.network_office_id,PH.policy_number,PH.secondary_card_number,PH.secondary_effective_start_date,\\\n        PH.secondary_effective_end_date,PH.secondary_insurance_provider_id,PH.secondary_network_id,PH.secondary_network_type,\\\n        PH.secondary_sub_insurance_provider_id,PH.secondary_network_office_id from  hims_f_pharmacy_pos_header PH inner join hims_d_pharmacy_location L\\\n         on PH.location_id=L.hims_d_pharmacy_location_id left outer join hims_f_patient_visit V on\\\n         PH.visit_id=V.hims_f_patient_visit_id left outer join hims_f_patient P on PH.patient_id=P.hims_d_patient_id\\\n        where PH.record_status='A' and L.record_status='A' and  \" +\n        where.condition,\n      where.values,\n      (error, headerResult) => {\n        if (error) {\n          releaseDBConnection(db, connection);\n          next(error);\n        }\n\n        debugLog(\"result: \", headerResult);\n        if (headerResult.length != 0) {\n          debugLog(\n            \"hims_f_pharmacy_pos_header_id: \",\n            headerResult[0].hims_f_pharmacy_pos_header_id\n          );\n          connection.query(\n            \"select * from hims_f_pharmacy_pos_detail where pharmacy_pos_header_id=? and record_status='A'\",\n            headerResult[0].hims_f_pharmacy_pos_header_id,\n            (error, pharmacy_stock_detail) => {\n              if (error) {\n                releaseDBConnection(db, connection);\n                next(error);\n              }\n              req.records = {\n                ...headerResult[0],\n                ...{ pharmacy_stock_detail },\n                ...{\n                  hims_f_receipt_header_id: headerResult[0].receipt_header_id\n                }\n              };\n              releaseDBConnection(db, connection);\n              next();\n              debugLog(\"POS Result: \", req.records);\n            }\n          );\n        } else {\n          req.records = headerResult;\n          releaseDBConnection(db, connection);\n          next();\n        }\n      }\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to Post POS Entry\nlet updatePosEntry = (req, res, next) => {\n  let PosEntry = {\n    posted: null,\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n\n  debugLog(\n    \"hims_f_pharmacy_pos_header_id\",\n    req.records.hims_f_pharmacy_pos_header_id\n  );\n\n  req.body.hims_f_pharmacy_pos_header_id =\n    req.records.hims_f_pharmacy_pos_header_id;\n  req.body.transaction_id = req.records.hims_f_pharmacy_pos_header_id;\n  req.body.year = req.records.year;\n  req.body.period = req.records.period;\n\n  debugLog(\"Body : \", req.body);\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let connection = req.connection;\n\n    return new Promise((resolve, reject) => {\n      let inputParam = extend(PosEntry, req.body);\n\n      debugLog(\"posted\", inputParam.posted);\n      debugLog(\"pharmacy_stock_detail\", req.body.pharmacy_stock_detail);\n      connection.query(\n        \"UPDATE `hims_f_pharmacy_pos_header` SET `posted`=?, `updated_by`=?, `updated_date`=? \\\n          WHERE `record_status`='A' and `hims_f_pharmacy_pos_header_id`=?\",\n        [\n          inputParam.posted,\n          req.userIdentity.algaeh_d_app_user_id,\n          new Date(),\n          inputParam.hims_f_pharmacy_pos_header_id\n        ],\n        (error, result) => {\n          debugLog(\"error\", error);\n          releaseDBConnection(db, connection);\n          if (error) {\n            reject(error);\n          } else {\n            resolve(result);\n          }\n        }\n      );\n    })\n      .then(output => {\n        return new Promise((resolve, reject) => {\n          debugLog(\"output\", output);\n          req.options = {\n            db: connection,\n            onFailure: error => {\n              debugLog(\"error: \", error);\n              reject(error);\n            },\n            onSuccess: result => {\n              debugLog(\"Success: \", result);\n              resolve(result);\n            }\n          };\n          // const error = new Error();\n          // error.message = \"Test\";\n          // reject(error);\n          updateIntoItemLocation(req, res, next);\n        })\n\n          .then(records => {\n            debugLog(\"records: \", records);\n            if (records == null) {\n              throw new exception();\n            }\n\n            req.posUpdate = records;\n            next();\n          })\n          .catch(error => {\n            debugLog(\"caught1: \", error);\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          });\n      })\n      .catch(error => {\n        debugLog(\"caught2: \", error);\n        connection.rollback(() => {\n          releaseDBConnection(db, connection);\n          next(error);\n        });\n      });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//get Prescription POS\nlet getPrescriptionPOS = (req, res, next) => {\n  debugFunction(\"getPrescriptionPOS\");\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      debugLog(\"req.body\", req.body);\n      const _reqBody = req.body;\n      const item_ids = new LINQ(_reqBody)\n        .Select(s => {\n          return s.item_id;\n        })\n        .ToArray();\n      const location_ids = new LINQ(_reqBody)\n        .Select(s => {\n          return s.pharmacy_location_id;\n        })\n        .ToArray();\n      let _message = \"\";\n      return new Promise((resolve, reject) => {\n        connection.query(\n          \"select itmloc.item_id, itmloc.pharmacy_location_id, itmloc.batchno, itmloc.expirydt, itmloc.qtyhand, itmloc.grnno, itmloc.sales_uom, item.item_description \\\n          from hims_m_item_location as itmloc inner join hims_d_item_master as item on itmloc.item_id = item.hims_d_item_master_id  \\\n          where item_id in (?) and pharmacy_location_id in (?) and qtyhand > 0\",\n          [item_ids, location_ids],\n          (error, result) => {\n            if (error) {\n              reject(error);\n            }\n            debugLog(\"result\", result);\n\n            let _req = new LINQ(result)\n              .Select(s => {\n                const ItemcatrgoryGroup = new LINQ(_reqBody)\n                  .Where(\n                    w =>\n                      w.item_id == s.item_id &&\n                      w.pharmacy_location_id == s.pharmacy_location_id\n                  )\n                  .FirstOrDefault();\n\n                debugLog(\"ItemcatrgoryGroup\", ItemcatrgoryGroup);\n                return {\n                  ...new LINQ(_reqBody)\n                    .Where(\n                      w =>\n                        w.item_id == s.item_id &&\n                        w.pharmacy_location_id == s.pharmacy_location_id\n                    )\n                    .FirstOrDefault(),\n                  ...{\n                    batchno: s.batchno,\n                    expirydt: s.expirydt,\n                    grnno: s.grnno,\n                    sales_uom: s.sales_uom,\n                    qtyhand: s.qtyhand,\n\n                    item_category_id: ItemcatrgoryGroup.item_category_id,\n                    item_group_id: ItemcatrgoryGroup.item_group_id\n                  }\n                };\n              })\n              .ToArray();\n\n            req.body = _req;\n\n            for (let i = 0; i < _reqBody.length; i++) {\n              debugLog(\"for: \", _reqBody[i]);\n              const _mess = new LINQ(result)\n                .Where(w => w.item_id !== _reqBody[i].item_id)\n                .FirstOrDefault();\n              debugLog(\"_mess: \", _mess);\n\n              if (_mess != null) {\n                _message =\n                  \"Invalid Input. Some Items not avilable in selected location, Please check Prescription and stock enquiry for more details.\";\n              }\n              // _message +=\n              //   \"Some of Items '\" +\n              //   _reqBody[i][\"item_id\"] +\n              //   \"' not avilable in selected location \";\n            }\n\n            resolve(result);\n          }\n        );\n      })\n        .then(result => {\n          //check then\n          debugLog(\"result them:\", result);\n          if (result.length > 0) {\n            debugLog(\"result them:\", result);\n            return new Promise((resolve, reject) => {\n              try {\n                getBillDetailsFunctionality(req, res, next, resolve);\n              } catch (e) {\n                reject(e);\n              }\n            }).then(resultbilling => {\n              //expiry_date, uom_id, and batchno add with the result\n              debugLog(\"Check result: \", resultbilling);\n\n              const _result =\n                result != null && result.length > 0 ? result[0] : {};\n              // if (resultbilling != null && resultbilling.length > 0) {\n              debugLog(\"_message: \", _message);\n              _result.message = _message;\n              debugLog(\"_result\", _result);\n              debugLog(\"resultbilling\", resultbilling);\n              let obj = {\n                result: [\n                  {\n                    ...resultbilling,\n                    ..._result\n                  }\n                ]\n              };\n              debugLog(\"obj: \", obj);\n              req.records = obj;\n              releaseDBConnection(db, connection);\n              next();\n            });\n          } else {\n            debugLog(\"result else:  \", result);\n            const message =\n              \"Invalid Input. Items not avilable in selected location, for this Prescription Please check Prescription List or stock enquiry for more details.\";\n            let obj = {\n              result: result,\n              message: message\n            };\n\n            debugLog(\"result message:  \", obj);\n            req.records = obj;\n            releaseDBConnection(db, connection);\n            next();\n          }\n        })\n        .catch(e => {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(e);\n          });\n        });\n      // });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addPosEntry,\n  getPosEntry,\n  updatePosEntry,\n  getPrescriptionPOS\n};\n"]}