{"version":3,"sources":["../../../../src/Pharmacy/model/initialstock.js"],"names":["addPharmacyInitialStock","req","res","next","db","httpStatus","dataBaseNotInitilizedError","input","body","getConnection","error","connection","beginTransaction","rollback","requestCounter","Promise","resolve","reject","counter","module_desc","onFailure","onSuccess","result","then","documentCode","completeNumber","year","format","today","month","period","query","description","posted","Date","userIdentity","algaeh_d_app_user_id","headerResult","insertId","insurtColumns","join","sampleInputObject","arrayObj","pharmacy_stock_detail","newFieldToInsert","detailResult","commit","records","document_number","hims_f_pharmacy_stock_header_id","e","getPharmacyInitialStock","selectWhere","where","condition","values","length","updatePharmacyInitialStock","initialStock","updated_by","inputParam","output","options","catch","module","exports"],"mappings":"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","file":"initialstock.js","sourcesContent":["\"use strict\";\nimport {\n  whereCondition,\n  releaseDBConnection,\n  jsonArrayToObject,\n  runningNumberGen\n} from \"../../utils\";\nimport extend from \"extend\";\nimport httpStatus from \"../../utils/httpStatus\";\nimport { debugLog } from \"../../utils/logging\";\nimport moment from \"moment\";\nimport { LINQ } from \"node-linq\";\n\nimport { updateIntoItemLocation } from \"./commonFunction\";\nimport Promise from \"bluebird\";\n\n//created by irfan: to pharmacy_intial_stock\nlet addPharmacyInitialStock = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    debugLog(\"inside\", \"add stock\");\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n\n        let requestCounter = 1;\n\n        return new Promise((resolve, reject) => {\n          runningNumberGen({\n            db: connection,\n            counter: requestCounter,\n            module_desc: [\"STK_DOC\"],\n            onFailure: error => {\n              reject(error);\n            },\n            onSuccess: result => {\n              resolve(result);\n            }\n          });\n        }).then(result => {\n          let documentCode = result[0].completeNumber;\n          debugLog(\"documentCode:\", documentCode);\n\n          let year = moment().format(\"YYYY\");\n          debugLog(\"onlyyear:\", year);\n\n          let today = moment().format(\"YYYY-MM-DD\");\n          debugLog(\"today:\", today);\n\n          let month = moment().format(\"MM\");\n          debugLog(\"month:\", month);\n          let period = month;\n\n          debugLog(\"period:\", period);\n          connection.query(\n            \"INSERT INTO `hims_f_pharmacy_stock_header` (document_number,docdate,`year`,period,description,posted,created_date,created_by,updated_date,updated_by) \\\n            VALUE(?,?,?,?,?,?,?,?,?,?)\",\n            [\n              documentCode,\n              today,\n              year,\n              period,\n              input.description,\n              input.posted,\n              new Date(),\n              req.userIdentity.algaeh_d_app_user_id,\n              new Date(),\n              req.userIdentity.algaeh_d_app_user_id\n            ],\n            (error, headerResult) => {\n              if (error) {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n\n              debugLog(\" stock header id :\", headerResult.insertId);\n\n              if (headerResult.insertId != null) {\n                const insurtColumns = [\n                  \"item_id\",\n                  \"location_type\",\n                  \"location_id\",\n                  \"item_category_id\",\n                  \"item_group_id\",\n                  \"uom_id\",\n                  \"barcode\",\n                  \"batchno\",\n                  \"sales_uom\",\n                  \"expiry_date\",\n                  \"grn_number\",\n                  \"quantity\",\n                  \"conversion_fact\",\n                  \"unit_cost\",\n                  \"extended_cost\",\n                  \"comment\",\n                  \"created_by\",\n                  \"updated_by\"\n                ];\n\n                connection.query(\n                  \"INSERT INTO hims_f_pharmacy_stock_detail(\" +\n                    insurtColumns.join(\",\") +\n                    \",pharmacy_stock_header_id,created_date,updated_date) VALUES ?\",\n                  [\n                    jsonArrayToObject({\n                      sampleInputObject: insurtColumns,\n                      arrayObj: req.body.pharmacy_stock_detail,\n                      newFieldToInsert: [\n                        headerResult.insertId,\n                        new Date(),\n                        new Date()\n                      ],\n                      req: req\n                    })\n                  ],\n                  (error, detailResult) => {\n                    if (error) {\n                      connection.rollback(() => {\n                        releaseDBConnection(db, connection);\n                        next(error);\n                      });\n                    }\n\n                    connection.commit(error => {\n                      if (error) {\n                        connection.rollback(() => {\n                          releaseDBConnection(db, connection);\n                          next(error);\n                        });\n                      }\n                      releaseDBConnection(db, connection);\n                      req.records = {\n                        document_number: documentCode,\n                        hims_f_pharmacy_stock_header_id: headerResult.insertId,\n                        year: year,\n                        period: period\n                      };\n                      next();\n                    });\n                  }\n                );\n              } else {\n                connection.rollback(() => {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                });\n              }\n            }\n          );\n        });\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by irfan: to get PharmacyInitialStock\nlet getPharmacyInitialStock = (req, res, next) => {\n  let selectWhere = {\n    document_number: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    db.getConnection((error, connection) => {\n      connection.query(\n        \"SELECT hims_f_pharmacy_stock_header_id, document_number, docdate, year,\\\n          period, description, posted  from  hims_f_pharmacy_stock_header\\\n          where record_status='A' AND \" +\n          where.condition,\n        where.values,\n        (error, headerResult) => {\n          if (error) {\n            releaseDBConnection(db, connection);\n            next(error);\n          }\n\n          debugLog(\"result: \", headerResult);\n          if (headerResult.length != 0) {\n            debugLog(\n              \"hims_f_pharmacy_stock_header_id: \",\n              headerResult[0].hims_f_pharmacy_stock_header_id\n            );\n            connection.query(\n              \"select * from hims_f_pharmacy_stock_detail where pharmacy_stock_header_id=? and record_status='A'\",\n              headerResult[0].hims_f_pharmacy_stock_header_id,\n              (error, pharmacy_stock_detail) => {\n                if (error) {\n                  releaseDBConnection(db, connection);\n                  next(error);\n                }\n                req.records = {\n                  ...headerResult[0],\n                  ...{ pharmacy_stock_detail }\n                };\n                releaseDBConnection(db, connection);\n                next();\n              }\n            );\n          } else {\n            releaseDBConnection(db, connection);\n            req.records = headerResult;\n            next();\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nlet updatePharmacyInitialStock = (req, res, next) => {\n  let initialStock = {\n    posted: null,\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    db.getConnection((error, connection) => {\n      if (error) {\n        next(error);\n      }\n\n      connection.beginTransaction(error => {\n        if (error) {\n          connection.rollback(() => {\n            releaseDBConnection(db, connection);\n            next(error);\n          });\n        }\n        return new Promise((resolve, reject) => {\n          let inputParam = extend(initialStock, req.body);\n\n          debugLog(\"posted\", inputParam.posted);\n          debugLog(\"pharmacy_stock_detail\", req.body.pharmacy_stock_detail);\n          connection.query(\n            \"UPDATE `hims_f_pharmacy_stock_header` SET `posted`=?, `updated_by`=?, `updated_date`=? \\\n          WHERE `record_status`='A' and `hims_f_pharmacy_stock_header_id`=?\",\n            [\n              inputParam.posted,\n              inputParam.updated_by,\n              new Date(),\n              inputParam.hims_f_pharmacy_stock_header_id\n            ],\n            (error, result) => {\n              debugLog(\"error\", error);\n              releaseDBConnection(db, connection);\n              if (error) {\n                reject(error);\n              } else {\n                resolve(result);\n              }\n            }\n          );\n        })\n          .then(output => {\n            return (\n              new Promise((resolve, reject) => {\n                debugLog(\"output\", output);\n                req.options = {\n                  db: connection,\n                  onFailure: error => {\n                    reject(error);\n                  },\n                  onSuccess: result => {\n                    resolve(result);\n                  }\n                };\n\n                updateIntoItemLocation(req, res, next);\n              })\n                // .then(itemoutput => {\n                //   return new Promise((resolve, reject) => {\n                //     req.options = {\n                //       db: connection,\n                //       onFailure: error => {\n                //         reject(error);\n                //       },\n                //       onSuccess: result => {\n                //         resolve(result);\n                //       }\n                //     };\n                //     debugLog(\"insertItemHistory\", \"insertItemHistory\");\n                //     insertItemHistory(req, res, next);\n                //   })\n                //Data\n                // })\n                .then(records => {\n                  connection.commit(error => {\n                    if (error) {\n                      releaseDBConnection(db, connection);\n                      next(error);\n                    }\n                    releaseDBConnection(db, connection);\n                    req.records = records;\n                    next();\n                  });\n                })\n                .catch(error => {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                })\n            );\n          })\n          .catch(error => {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          });\n      });\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addPharmacyInitialStock,\n  getPharmacyInitialStock,\n  updatePharmacyInitialStock\n};\n"]}