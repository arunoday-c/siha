{"version":3,"sources":["../../../../src/Pharmacy/model/salesReturn.js"],"names":["addsalesReturn","req","res","next","db","httpStatus","dataBaseNotInitilizedError","input","body","connection","requestCounter","Promise","resolve","reject","counter","module_desc","onFailure","error","onSuccess","result","then","documentCode","completeNumber","year","format","today","month","period","query","from_pos_id","patient_id","visit_id","ip_id","location_id","location_type","sub_total","discount_percentage","discount_amount","net_total","copay_amount","patient_responsibility","patient_tax","patient_payable","company_responsibility","company_tax","company_payable","comments","sec_company_responsibility","sec_company_tax","sec_company_payable","sec_copay_amount","net_tax","gross_total","sheet_discount_amount","sheet_discount_percentage","net_amount","credit_amount","payable_amount","card_number","effective_start_date","effective_end_date","insurance_provider_id","sub_insurance_provider_id","network_id","network_type","network_office_id","policy_number","secondary_card_number","secondary_effective_start_date","secondary_effective_end_date","secondary_insurance_provider_id","secondary_network_id","secondary_network_type","secondary_sub_insurance_provider_id","secondary_network_office_id","records","receipt_header_id","Date","userIdentity","algaeh_d_app_user_id","headerResult","rollback","insertId","insurtColumns","join","sampleInputObject","arrayObj","pharmacy_stock_detail","newFieldToInsert","detailResult","sales_return_number","hims_f_pharmcy_sales_return_header_id","receipt_number","e","getsalesReturn","selectWhere","where","condition","values","length","reciept_id","hims_f_receipt_header_id","updatesalesReturn","salesReturn","posted","updated_by","transaction_id","inputParam","output","options","updatePOSDetail","posoutput","catch","newDtls","updateString","i","return_quantity","return_extended_cost","return_discount_amt","return_net_extended_cost","return_pat_responsibility","return_company_responsibility","return_sec_company_responsibility","item_id","module","exports"],"mappings":"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","file":"salesReturn.js","sourcesContent":["\"use strict\";\nimport {\n  whereCondition,\n  releaseDBConnection,\n  jsonArrayToObject,\n  runningNumberGen\n} from \"../../utils\";\nimport extend from \"extend\";\nimport httpStatus from \"../../utils/httpStatus\";\nimport { debugLog } from \"../../utils/logging\";\nimport moment from \"moment\";\n//import { getBillDetailsFunctionality } from \"../../model/billing\";\nimport { updateIntoItemLocation } from \"./commonFunction\";\nimport Promise from \"bluebird\";\n// import { connect } from \"pm2\";\n// import { LINQ } from \"node-linq\";\n\n//created by Nowshad: to Insert Sales Entry\nlet addsalesReturn = (req, res, next) => {\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let input = extend({}, req.body);\n\n    debugLog(\"inside\", \"add stock\");\n    let connection = req.connection;\n\n    let requestCounter = 1;\n\n    return new Promise((resolve, reject) => {\n      runningNumberGen({\n        db: connection,\n        counter: requestCounter,\n        module_desc: [\"POS_RET_NUM\"],\n        onFailure: error => {\n          reject(error);\n        },\n        onSuccess: result => {\n          resolve(result);\n        }\n      });\n    }).then(result => {\n      let documentCode = result[0].completeNumber;\n      debugLog(\"documentCode:\", documentCode);\n\n      let year = moment().format(\"YYYY\");\n      debugLog(\"onlyyear:\", year);\n\n      let today = moment().format(\"YYYY-MM-DD\");\n      debugLog(\"today:\", today);\n\n      let month = moment().format(\"MM\");\n      debugLog(\"month:\", month);\n      let period = month;\n\n      debugLog(\"period:\", period);\n      connection.query(\n        \"INSERT INTO `hims_f_pharmcy_sales_return_header` (sales_return_number,sales_return_date,from_pos_id,patient_id,visit_id,ip_id,`year`,period,\\\n                location_id, location_type, sub_total, discount_percentage, discount_amount, net_total, copay_amount, patient_responsibility,\\\n                patient_tax, patient_payable,company_responsibility,company_tax,company_payable,comments, sec_company_responsibility,\\\n                sec_company_tax,sec_company_payable,sec_copay_amount,net_tax,gross_total,sheet_discount_amount,\\\n                sheet_discount_percentage,net_amount,credit_amount,payable_amount, card_number,effective_start_date,effective_end_date,\\\n                insurance_provider_id, sub_insurance_provider_id, network_id, network_type, network_office_id, policy_number, \\\n                secondary_card_number, secondary_effective_start_date, secondary_effective_end_date, secondary_insurance_provider_id,\\\n                secondary_network_id, secondary_network_type, secondary_sub_insurance_provider_id, secondary_network_office_id, \\\n                reciept_id,created_date,created_by,updated_date,updated_by) \\\n            VALUE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n        [\n          documentCode,\n          today,\n          input.from_pos_id,\n          input.patient_id,\n          input.visit_id,\n          input.ip_id,\n          year,\n          period,\n          input.location_id,\n          input.location_type,\n          input.sub_total,\n          input.discount_percentage,\n          input.discount_amount,\n          input.net_total,\n          input.copay_amount,\n          input.patient_responsibility,\n          input.patient_tax,\n          input.patient_payable,\n          input.company_responsibility,\n          input.company_tax,\n          input.company_payable,\n          input.comments,\n          input.sec_company_responsibility,\n          input.sec_company_tax,\n          input.sec_company_payable,\n          input.sec_copay_amount,\n          input.net_tax,\n          input.gross_total,\n          input.sheet_discount_amount,\n          input.sheet_discount_percentage,\n          input.net_amount,\n          input.credit_amount,\n          input.payable_amount,\n          input.card_number,\n          input.effective_start_date,\n          input.effective_end_date,\n          input.insurance_provider_id,\n          input.sub_insurance_provider_id,\n          input.network_id,\n          input.network_type,\n          input.network_office_id,\n          input.policy_number,\n          input.secondary_card_number,\n          input.secondary_effective_start_date,\n          input.secondary_effective_end_date,\n          input.secondary_insurance_provider_id,\n          input.secondary_network_id,\n          input.secondary_network_type,\n          input.secondary_sub_insurance_provider_id,\n          input.secondary_network_office_id,\n          req.records.receipt_header_id,\n          new Date(),\n          req.userIdentity.algaeh_d_app_user_id,\n          new Date(),\n          req.userIdentity.algaeh_d_app_user_id\n        ],\n        (error, headerResult) => {\n          if (error) {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n\n          debugLog(\" Sales header id :\", headerResult);\n\n          if (headerResult.insertId != null) {\n            const insurtColumns = [\n              \"item_id\",\n              \"item_category\",\n              \"item_group_id\",\n              \"service_id\",\n              \"grn_no\",\n              \"barcode\",\n              \"expiry_date\",\n              \"batchno\",\n              \"uom_id\",\n              \"quantity\",\n              \"return_quantity\",\n              \"insurance_yesno\",\n              \"tax_inclusive\",\n              \"unit_cost\",\n              \"extended_cost\",\n              \"discount_percent\",\n              \"discount_amount\",\n              \"net_extended_cost\",\n              \"copay_percent\",\n              \"copay_amount\",\n              \"patient_responsibility\",\n              \"patient_tax\",\n              \"patient_payable\",\n              \"company_responsibility\",\n              \"company_tax\",\n              \"company_payable\",\n              \"sec_copay_percent\",\n              \"sec_copay_amount\",\n              \"sec_company_responsibility\",\n              \"sec_company_tax\",\n              \"sec_company_payable\"\n            ];\n\n            connection.query(\n              \"INSERT INTO hims_f_pharmacy_sales_return_detail(\" +\n                insurtColumns.join(\",\") +\n                \",sales_return_header_id) VALUES ?\",\n              [\n                jsonArrayToObject({\n                  sampleInputObject: insurtColumns,\n                  arrayObj: req.body.pharmacy_stock_detail,\n                  newFieldToInsert: [headerResult.insertId],\n                  req: req\n                })\n              ],\n              (error, detailResult) => {\n                if (error) {\n                  connection.rollback(() => {\n                    releaseDBConnection(db, connection);\n                    next(error);\n                  });\n                }\n\n                req.records = {\n                  sales_return_number: documentCode,\n                  hims_f_pharmcy_sales_return_header_id: headerResult.insertId,\n                  receipt_number: req.records.receipt_number,\n                  year: year,\n                  period: period\n                };\n                next();\n\n                // connection.commit(error => {\n                //   if (error) {\n                //     connection.rollback(() => {\n                //       releaseDBConnection(db, connection);\n                //       next(error);\n                //     });\n                //   }\n                //   releaseDBConnection(db, connection);\n                //   req.records = {\n                //     sales_return_number: documentCode,\n                //     hims_f_pharmcy_sales_return_header_id:\n                //       headerResult.insertId,\n                //     receipt_number: req.records.receipt_number,\n                //     year: year,\n                //     period: period\n                //   };\n                //   next();\n                // });\n              }\n            );\n          } else {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          }\n        }\n      );\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to get Pharmacy POS Entry\nlet getsalesReturn = (req, res, next) => {\n  let selectWhere = {\n    sales_return_number: \"ALL\"\n  };\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n\n    let where = whereCondition(extend(selectWhere, req.query));\n\n    let connection = req.connection;\n\n    debugLog(\"where: \", where);\n    connection.query(\n      \"SELECT hims_f_pharmcy_sales_return_header_id, reciept_id, PH.from_pos_id, PH.sales_return_number,PH.patient_id,P.patient_code,\\\n      P.full_name as full_name,PH.visit_id,V.visit_code,PH.ip_id,PH.sales_return_date,PH.`year`,\\\n      PH.period,PH.location_id,L.location_description,PH.location_type,PH.sub_total,PH.discount_percentage,PH.discount_amount,PH.net_total,\\\n      PH.copay_amount,PH.patient_responsibility,PH.patient_tax,PH.patient_payable,PH.company_responsibility,PH.company_tax,\\\n      PH.company_payable,PH.comments,PH.sec_company_responsibility,PH.sec_company_tax,PH.sec_company_payable,\\\n      PH.sec_copay_amount,PH.net_tax,PH.gross_total,PH.sheet_discount_amount,PH.sheet_discount_percentage,\\\n      PH.net_amount,PH.credit_amount,PH.payable_amount,PH.posted,PH.card_number,PH.effective_start_date,\\\n      PH.effective_end_date,PH.insurance_provider_id,PH.sub_insurance_provider_id,PH.network_id,PH.network_type,\\\n      PH.network_office_id,PH.policy_number,PH.secondary_card_number,PH.secondary_effective_start_date,\\\n      PH.secondary_effective_end_date,PH.secondary_insurance_provider_id,PH.secondary_network_id,PH.secondary_network_type,\\\n      PH.secondary_sub_insurance_provider_id,PH.secondary_network_office_id, POS.pos_number from  \\\n      hims_f_pharmcy_sales_return_header PH inner join hims_d_pharmacy_location L on PH.location_id=L.hims_d_pharmacy_location_id \\\n      left outer join hims_f_patient_visit V on PH.visit_id=V.hims_f_patient_visit_id \\\n      left outer join hims_f_patient P on PH.patient_id=P.hims_d_patient_id\\\n      inner join hims_f_pharmacy_pos_header POS on PH.from_pos_id=POS.hims_f_pharmacy_pos_header_id\\\n      where PH.record_status='A' and L.record_status='A' and  \" +\n        where.condition,\n      where.values,\n      (error, headerResult) => {\n        if (error) {\n          releaseDBConnection(db, connection);\n          next(error);\n        }\n\n        debugLog(\"result header: \", headerResult);\n        if (headerResult.length != 0) {\n          debugLog(\n            \"hims_f_pharmcy_sales_return_header_id: \",\n            headerResult[0].hims_f_pharmcy_sales_return_header_id\n          );\n          connection.query(\n            \"select * from hims_f_pharmacy_sales_return_detail where sales_return_header_id=?\",\n            headerResult[0].hims_f_pharmcy_sales_return_header_id,\n            (error, pharmacy_stock_detail) => {\n              if (error) {\n                releaseDBConnection(db, connection);\n                next(error);\n              }\n\n              debugLog(\"reciept_id: \", headerResult[0].reciept_id);\n\n              req.records = {\n                ...headerResult[0],\n                ...{ pharmacy_stock_detail },\n                ...{\n                  hims_f_receipt_header_id: headerResult[0].reciept_id\n                }\n              };\n              releaseDBConnection(db, connection);\n              next();\n            }\n          );\n        } else {\n          req.records = headerResult;\n          releaseDBConnection(db, connection);\n          next();\n        }\n      }\n    );\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by Nowshad: to Update  Sales Return Entry\nlet updatesalesReturn = (req, res, next) => {\n  let salesReturn = {\n    posted: null,\n    updated_by: req.userIdentity.algaeh_d_app_user_id\n  };\n\n  req.body.hims_f_pharmcy_sales_return_header_id =\n    req.records.hims_f_pharmcy_sales_return_header_id;\n  req.body.transaction_id = req.records.hims_f_pharmcy_sales_return_header_id;\n  req.body.year = req.records.year;\n  req.body.period = req.records.period;\n\n  try {\n    if (req.db == null) {\n      next(httpStatus.dataBaseNotInitilizedError());\n    }\n    let db = req.db;\n    let connection = req.connection;\n    return new Promise((resolve, reject) => {\n      let inputParam = extend(salesReturn, req.body);\n\n      debugLog(\"posted\", inputParam.posted);\n      debugLog(\"pharmacy_stock_detail\", req.body.pharmacy_stock_detail);\n      connection.query(\n        \"UPDATE `hims_f_pharmcy_sales_return_header` SET `posted`=?, `updated_by`=?, `updated_date`=? \\\n          WHERE `record_status`='A' and `hims_f_pharmcy_sales_return_header_id`=?\",\n        [\n          inputParam.posted,\n          req.userIdentity.algaeh_d_app_user_id,\n          new Date(),\n          inputParam.hims_f_pharmcy_sales_return_header_id\n        ],\n        (error, result) => {\n          debugLog(\"error\", error);\n          releaseDBConnection(db, connection);\n          if (error) {\n            reject(error);\n          } else {\n            resolve(result);\n          }\n        }\n      );\n    })\n      .then(output => {\n        return new Promise((resolve, reject) => {\n          debugLog(\"output\", output);\n          req.options = {\n            db: connection,\n            onFailure: error => {\n              reject(error);\n            },\n            onSuccess: result => {\n              resolve(result);\n            }\n          };\n\n          updatePOSDetail(req, res, next);\n        });\n      })\n      .then(posoutput => {\n        return new Promise((resolve, reject) => {\n          debugLog(\"posoutput\", posoutput);\n          req.options = {\n            db: connection,\n            onFailure: error => {\n              reject(error);\n            },\n            onSuccess: result => {\n              resolve(result);\n            }\n          };\n\n          updateIntoItemLocation(req, res, next);\n        })\n          .then(records => {\n            req.salesReturn = records;\n            next();\n            // connection.commit(error => {\n            //   if (error) {\n            //     releaseDBConnection(db, connection);\n            //     next(error);\n            //   }\n            //   req.salesReturn = records;\n            //   releaseDBConnection(db, connection);\n            //   next();\n            // });\n          })\n          .catch(error => {\n            connection.rollback(() => {\n              releaseDBConnection(db, connection);\n              next(error);\n            });\n          });\n      })\n      .catch(error => {\n        connection.rollback(() => {\n          releaseDBConnection(db, connection);\n          next(error);\n        });\n      });\n  } catch (e) {\n    next(e);\n  }\n};\n\n//created by nowshad: insert item moment history\nlet updatePOSDetail = (req, res, next) => {\n  let db = req.options == null ? req.db : req.options.db;\n  try {\n    let inputParam = extend({}, req.body);\n    debugLog(\"inputParam\", inputParam);\n    const newDtls = inputParam.pharmacy_stock_detail;\n    debugLog(\"before History Insert Data\", newDtls);\n\n    let updateString = \"\";\n\n    for (let i = 0; i < newDtls.length; i++) {\n      updateString +=\n        \"UPDATE hims_f_pharmacy_pos_detail SET `return_quantity`='\" +\n        newDtls[i].return_quantity +\n        \"',\\\n    `return_extended_cost` = '\" +\n        newDtls[i].return_extended_cost +\n        \"',`return_discount_amt`='\" +\n        newDtls[i].return_discount_amt +\n        \"',\\\n    `return_net_extended_cost`='\" +\n        newDtls[i].return_net_extended_cost +\n        \"',`return_pat_responsibility`='\" +\n        newDtls[i].return_pat_responsibility +\n        \"',\\\n    `return_company_responsibility`='\" +\n        newDtls[i].return_company_responsibility +\n        \"',`return_sec_company_responsibility`='\" +\n        newDtls[i].return_sec_company_responsibility +\n        \"',`return_done`='Y' WHERE \\\n    `pharmacy_pos_header_id`='\" +\n        inputParam.from_pos_id +\n        \"' AND `item_id`='\" +\n        newDtls[i].item_id +\n        \"' ;\";\n    }\n    debugLog(\"updateString\", updateString);\n    db.query(updateString, (error, detailResult) => {\n      debugLog(\"error\", detailResult);\n      if (error) {\n        if (req.options == null) {\n          db.rollback(() => {\n            releaseDBConnection(req.db, db);\n            next(error);\n          });\n        } else {\n          req.options.onFailure(error);\n        }\n      }\n\n      if (req.options == null) {\n        req.records = detailResult;\n        releaseDBConnection(req.db, db);\n        next();\n      } else {\n        req.options.onSuccess(detailResult);\n      }\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nmodule.exports = {\n  addsalesReturn,\n  getsalesReturn,\n  updatesalesReturn\n};\n"]}